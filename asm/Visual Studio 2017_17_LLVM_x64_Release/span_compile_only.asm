	.text
	.intel_syntax noprefix
	.def	 "?foo@@YA_NXZ";
	.scl	2;
	.type	32;
	.endef
	.globl	"?foo@@YA_NXZ"          # -- Begin function ?foo@@YA_NXZ
	.p2align	4, 0x90
"?foo@@YA_NXZ":                         # @"?foo@@YA_NXZ"
.Lfunc_begin0:
	.cv_func_id 0
	.cv_file	1 "C:\\projects\\gsl\\tests\\span_compile_only.cpp" "9B9562900385FA8483966460FB6DF309" 1
	.cv_loc	0 1 42 0 is_stmt 0      # ..\tests\span_compile_only.cpp:42:0
.seh_proc "?foo@@YA_NXZ"
# %bb.0:
	sub	rsp, 152
	.seh_stackalloc 152
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 144], rax
.Ltmp0:
	.cv_loc	0 1 44 0                # ..\tests\span_compile_only.cpp:44:0
	mov	byte ptr [rsp + 95], 1
	.cv_loc	0 1 45 0                # ..\tests\span_compile_only.cpp:45:0
	lea	rcx, [rsp + 128]
.Ltmp1:
	#DEBUG_VALUE: s <- [$rcx+0]
	call	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
.Ltmp2:
	.cv_loc	0 1 46 0                # ..\tests\span_compile_only.cpp:46:0
	test	byte ptr [rsp + 95], 1
	mov	dl, 1
	mov	qword ptr [rsp + 80], rax # 8-byte Spill
	mov	byte ptr [rsp + 79], dl # 1-byte Spill
	jne	.LBB0_4
# %bb.1:
	lea	rcx, [rsp + 128]
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	xor	edx, edx
	mov	r8b, dl
	cmp	rax, 0
	mov	byte ptr [rsp + 78], r8b # 1-byte Spill
	jne	.LBB0_3
# %bb.2:
	lea	rcx, [rsp + 128]
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rsp + 78], dl # 1-byte Spill
.LBB0_3:
	mov	al, byte ptr [rsp + 78] # 1-byte Reload
	mov	byte ptr [rsp + 79], al # 1-byte Spill
.LBB0_4:
	mov	al, byte ptr [rsp + 79] # 1-byte Reload
	and	al, 1
	mov	byte ptr [rsp + 95], al
	.cv_loc	0 1 48 0                # ..\tests\span_compile_only.cpp:48:0
	lea	rcx, [rsp + 112]
.Ltmp3:
	#DEBUG_VALUE: cs <- [$rcx+0]
	call	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
.Ltmp4:
	.cv_loc	0 1 49 0                # ..\tests\span_compile_only.cpp:49:0
	test	byte ptr [rsp + 95], 1
	mov	dl, 1
	mov	qword ptr [rsp + 64], rax # 8-byte Spill
	mov	byte ptr [rsp + 63], dl # 1-byte Spill
	jne	.LBB0_8
# %bb.5:
	lea	rcx, [rsp + 112]
	call	"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ"
	xor	edx, edx
	mov	r8b, dl
	cmp	rax, 0
	mov	byte ptr [rsp + 62], r8b # 1-byte Spill
	jne	.LBB0_7
# %bb.6:
	lea	rcx, [rsp + 112]
	call	"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rsp + 62], dl # 1-byte Spill
.LBB0_7:
	mov	al, byte ptr [rsp + 62] # 1-byte Reload
	mov	byte ptr [rsp + 63], al # 1-byte Spill
.LBB0_8:
	mov	al, byte ptr [rsp + 63] # 1-byte Reload
	and	al, 1
	mov	byte ptr [rsp + 95], al
	.cv_loc	0 1 51 0                # ..\tests\span_compile_only.cpp:51:0
	lea	rcx, [rsp + 96]
.Ltmp5:
	#DEBUG_VALUE: s2 <- [$rcx+0]
	call	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
.Ltmp6:
	.cv_loc	0 1 52 0                # ..\tests\span_compile_only.cpp:52:0
	test	byte ptr [rsp + 95], 1
	mov	dl, 1
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	mov	byte ptr [rsp + 47], dl # 1-byte Spill
	jne	.LBB0_12
# %bb.9:
	lea	rcx, [rsp + 96]
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	xor	edx, edx
	mov	r8b, dl
	cmp	rax, 0
	mov	byte ptr [rsp + 46], r8b # 1-byte Spill
	jne	.LBB0_11
# %bb.10:
	lea	rcx, [rsp + 96]
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rsp + 46], dl # 1-byte Spill
.LBB0_11:
	mov	al, byte ptr [rsp + 46] # 1-byte Reload
	mov	byte ptr [rsp + 47], al # 1-byte Spill
.LBB0_12:
	mov	al, byte ptr [rsp + 47] # 1-byte Reload
	and	al, 1
	mov	byte ptr [rsp + 95], al
	.cv_loc	0 1 54 0                # ..\tests\span_compile_only.cpp:54:0
	mov	al, byte ptr [rsp + 95]
	and	al, 1
	movzx	eax, al
	mov	rcx, qword ptr [rsp + 144]
	xor	rcx, rsp
	mov	dword ptr [rsp + 40], eax # 4-byte Spill
	call	__security_check_cookie
	mov	eax, dword ptr [rsp + 40] # 4-byte Reload
	add	rsp, 152
	ret
.Ltmp7:
.Lfunc_end0:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.globl	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ" # -- Begin function ??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ
	.p2align	4, 0x90
"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ": # @"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
.Lfunc_begin1:
	.cv_func_id 1
	.cv_file	2 "C:\\projects\\gsl\\include\\gsl\\span" "3BAA3FB91BA159E545E305706709D4CE" 1
	.cv_loc	1 2 384 0               # ..\include\gsl/span:384:0
.seh_proc "??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe 5, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx
	mov	rcx, qword ptr [rbp - 16]
	lea	rax, [rbp - 24]
.Ltmp10:
	mov	qword ptr [rbp - 32], rcx # 8-byte Spill
	mov	rcx, rax
	call	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	mov	r8b, byte ptr [rbp - 24]
.Ltmp8:
	xor	edx, edx
                                        # kill: def $rdx killed $edx
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	mov	qword ptr [rbp - 40], rax # 8-byte Spill
	call	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
.Ltmp9:
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	jmp	.LBB1_1
.LBB1_1:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	add	rsp, 80
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ@4HA"
.LBB1_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp11:
.Lfunc_end1:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.p2align	2
"$cppxdata$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ":
	.long	.Lfunc_begin1@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp8@IMGREL+1         # IP
	.long	0                       # ToState
	.long	.Ltmp9@IMGREL+1         # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
                                        # -- End function
	.def	 "?size@?$span@H$0?0@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	.globl	"?size@?$span@H$0?0@gsl@@QEBA_JXZ" # -- Begin function ?size@?$span@H$0?0@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$span@H$0?0@gsl@@QEBA_JXZ":     # @"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
.Lfunc_begin2:
	.cv_func_id 2
	.cv_loc	2 2 498 0               # ..\include\gsl/span:498:0
.seh_proc "?size@?$span@H$0?0@gsl@@QEBA_JXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp12:
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	nop
	add	rsp, 40
	ret
.Ltmp13:
.Lfunc_end2:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$span@H$0?0@gsl@@QEBAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.globl	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ" # -- Begin function ?data@?$span@H$0?0@gsl@@QEBAPEAHXZ
	.p2align	4, 0x90
"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ":   # @"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
.Lfunc_begin3:
	.cv_func_id 3
	.cv_loc	3 2 515 0               # ..\include\gsl/span:515:0
.seh_proc "?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp14:
	call	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	nop
	add	rsp, 40
	ret
.Ltmp15:
.Lfunc_end3:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
	.globl	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ" # -- Begin function ??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ
	.p2align	4, 0x90
"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ": # @"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
.Lfunc_begin4:
	.cv_func_id 4
	.cv_loc	4 2 384 0               # ..\include\gsl/span:384:0
.seh_proc "??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe 5, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx
	mov	rcx, qword ptr [rbp - 16]
	lea	rax, [rbp - 24]
.Ltmp18:
	mov	qword ptr [rbp - 32], rcx # 8-byte Spill
	mov	rcx, rax
	call	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	mov	r8b, byte ptr [rbp - 24]
.Ltmp16:
	xor	edx, edx
                                        # kill: def $rdx killed $edx
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	mov	qword ptr [rbp - 40], rax # 8-byte Spill
	call	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
.Ltmp17:
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	jmp	.LBB4_1
.LBB4_1:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	add	rsp, 80
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ@4HA"
.LBB4_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp19:
.Lfunc_end4:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
	.p2align	2
"$cppxdata$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ":
	.long	.Lfunc_begin4@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp16@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp17@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
                                        # -- End function
	.def	 "?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ"
	.globl	"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ" # -- Begin function ?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ": # @"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ"
.Lfunc_begin5:
	.cv_func_id 5
	.cv_loc	5 2 498 0               # ..\include\gsl/span:498:0
.seh_proc "?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp20:
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	nop
	add	rsp, 40
	ret
.Ltmp21:
.Lfunc_end5:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	.globl	"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # -- Begin function ?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ
	.p2align	4, 0x90
"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ": # @"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
.Lfunc_begin6:
	.cv_func_id 6
	.cv_loc	6 2 515 0               # ..\include\gsl/span:515:0
.seh_proc "?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp22:
	call	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	nop
	add	rsp, 40
	ret
.Ltmp23:
.Lfunc_end6:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?bar@@YA_NXZ";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?bar@@YA_NXZ"          # -- Begin function ?bar@@YA_NXZ
	.p2align	4, 0x90
"?bar@@YA_NXZ":                         # @"?bar@@YA_NXZ"
.Lfunc_begin7:
	.cv_func_id 7
	.cv_loc	7 1 61 0                # ..\tests\span_compile_only.cpp:61:0
.seh_proc "?bar@@YA_NXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 240
	.seh_stackalloc 240
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
.Ltmp32:
	.cv_loc	7 1 63 0                # ..\tests\span_compile_only.cpp:63:0
	mov	qword ptr [rbp + 104], -2
	mov	byte ptr [rbp + 103], 1
	.cv_loc	7 1 64 0                # ..\tests\span_compile_only.cpp:64:0
	mov	dword ptr [rbp + 32], 0
	mov	dword ptr [rbp + 36], 1
	mov	dword ptr [rbp + 40], 2
	mov	dword ptr [rbp + 44], 3
	lea	rax, [rbp + 32]
	mov	qword ptr [rbp + 48], rax
	lea	rax, [rbp + 48]
	mov	qword ptr [rbp + 56], rax
	lea	rax, [rbp + 24]
	mov	rcx, rax
	mov	qword ptr [rbp - 8], rax # 8-byte Spill
	call	"??0?$allocator@H@std@@QEAA@XZ"
	lea	rcx, [rbp + 64]
	lea	rdx, [rbp + 48]
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	mov	r8, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rbp - 24], rax # 8-byte Spill
	call	"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z"
	.cv_loc	7 1 65 0                # ..\tests\span_compile_only.cpp:65:0
.Ltmp24:
	lea	rcx, [rbp + 8]
	mov	rdx, qword ptr [rbp - 16] # 8-byte Reload
	mov	qword ptr [rbp - 32], rax # 8-byte Spill
	call	"??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z"
.Ltmp25:
	mov	qword ptr [rbp - 40], rax # 8-byte Spill
	jmp	.LBB7_1
.LBB7_1:
	.cv_loc	7 1 66 0                # ..\tests\span_compile_only.cpp:66:0
	test	byte ptr [rbp + 103], 1
	mov	al, 1
	mov	byte ptr [rbp - 41], al # 1-byte Spill
	jne	.LBB7_5
# %bb.2:
	lea	rcx, [rbp + 8]
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	xor	edx, edx
	mov	r8b, dl
	cmp	rax, 4
	mov	byte ptr [rbp - 42], r8b # 1-byte Spill
	jne	.LBB7_4
# %bb.3:
	lea	rcx, [rbp + 8]
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	cmp	rax, 0
	setne	dl
	mov	byte ptr [rbp - 42], dl # 1-byte Spill
.LBB7_4:
	mov	al, byte ptr [rbp - 42] # 1-byte Reload
	mov	byte ptr [rbp - 41], al # 1-byte Spill
.LBB7_5:
	mov	al, byte ptr [rbp - 41] # 1-byte Reload
	and	al, 1
	mov	byte ptr [rbp + 103], al
	.cv_loc	7 1 68 0                # ..\tests\span_compile_only.cpp:68:0
.Ltmp26:
	xor	ecx, ecx
	mov	edx, ecx
	lea	rcx, [rbp + 8]
	call	"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
.Ltmp27:
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	jmp	.LBB7_6
.LBB7_6:
	mov	rax, qword ptr [rbp - 56] # 8-byte Reload
	mov	ecx, dword ptr [rax]
.Ltmp28:
	mov	edx, 1
                                        # kill: def $rdx killed $edx
	lea	r8, [rbp + 8]
	mov	dword ptr [rbp - 60], ecx # 4-byte Spill
	mov	rcx, r8
	call	"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
.Ltmp29:
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	jmp	.LBB7_7
.LBB7_7:
	mov	rax, qword ptr [rbp - 72] # 8-byte Reload
	mov	ecx, dword ptr [rax]
	mov	edx, dword ptr [rbp - 60] # 4-byte Reload
	add	edx, ecx
.Ltmp30:
	mov	ecx, 2
	mov	r8d, ecx
	lea	rcx, [rbp + 8]
	mov	dword ptr [rbp - 76], edx # 4-byte Spill
	mov	rdx, r8
	call	"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
.Ltmp31:
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	jmp	.LBB7_8
.LBB7_8:
	mov	eax, dword ptr [rbp - 76] # 4-byte Reload
	mov	rcx, qword ptr [rbp - 88] # 8-byte Reload
	add	eax, dword ptr [rcx]
	mov	dword ptr [rbp + 4], eax
	.cv_loc	7 1 70 0                # ..\tests\span_compile_only.cpp:70:0
	test	byte ptr [rbp + 103], 1
	mov	dl, 1
	mov	byte ptr [rbp - 89], dl # 1-byte Spill
	jne	.LBB7_10
# %bb.9:
	cmp	dword ptr [rbp + 4], 23
	setg	al
	mov	byte ptr [rbp - 89], al # 1-byte Spill
.LBB7_10:
	.cv_loc	7 1 71 0                # ..\tests\span_compile_only.cpp:71:0
	mov	al, byte ptr [rbp - 89] # 1-byte Reload
	lea	rcx, [rbp + 64]
	mov	byte ptr [rbp - 90], al # 1-byte Spill
	call	"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
	.cv_loc	7 1 70 0                # ..\tests\span_compile_only.cpp:70:0
	mov	al, byte ptr [rbp - 90] # 1-byte Reload
	and	al, 1
	movzx	eax, al
	add	rsp, 240
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?bar@@YA_NXZ")@IMGREL
	.text
	.seh_endproc
	.def	 "?dtor$11@?0??bar@@YA_NXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??bar@@YA_NXZ@4HA":
.seh_proc "?dtor$11@?0??bar@@YA_NXZ@4HA"
.LBB7_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	lea	rcx, [rbp + 64]
	.cv_loc	7 1 71 0                # ..\tests\span_compile_only.cpp:71:0
	call	"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp33:
.Lfunc_end7:
	.seh_handlerdata
	.text
	.seh_endproc
	.section	.xdata,"dr"
	.p2align	2
"$cppxdata$?bar@@YA_NXZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?bar@@YA_NXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?bar@@YA_NXZ")@IMGREL # IPToStateXData
	.long	232                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?bar@@YA_NXZ":
	.long	-1                      # ToState
	.long	"?dtor$11@?0??bar@@YA_NXZ@4HA"@IMGREL # Action
"$ip2state$?bar@@YA_NXZ":
	.long	.Lfunc_begin7@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp24@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp31@IMGREL+1        # IP
	.long	-1                      # ToState
	.text
                                        # -- End function
	.def	 "??0?$allocator@H@std@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$allocator@H@std@@QEAA@XZ"
	.globl	"??0?$allocator@H@std@@QEAA@XZ" # -- Begin function ??0?$allocator@H@std@@QEAA@XZ
	.p2align	4, 0x90
"??0?$allocator@H@std@@QEAA@XZ":        # @"??0?$allocator@H@std@@QEAA@XZ"
.Lfunc_begin8:
	.cv_func_id 8
	.cv_file	3 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0" "2F06C6E0D742F7F7636DC47E843A3E4D" 1
	.cv_loc	8 3 980 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:980:0
.seh_proc "??0?$allocator@H@std@@QEAA@XZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rax, qword ptr [rsp]
.Ltmp34:
	.cv_loc	8 3 981 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:981:0
	pop	rcx
	ret
.Ltmp35:
.Lfunc_end8:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$allocator@H@std@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z"
	.globl	"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z" # -- Begin function ??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z
	.p2align	4, 0x90
"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z": # @"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z"
.Lfunc_begin9:
	.cv_func_id 9
	.cv_file	4 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector" "520419B6F96B39339C6FD00B18076618" 1
	.cv_loc	9 4 728 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:728:0
.seh_proc "??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 96
	.seh_stackalloc 96
	lea	rbp, [rsp + 96]
	.seh_setframe 5, 96
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	#DEBUG_VALUE: vector:_Ilist <- [$rdx+0]
	mov	qword ptr [rbp - 16], r8
	mov	qword ptr [rbp - 24], rcx
	mov	rcx, qword ptr [rbp - 24]
.Ltmp38:
	mov	r8, qword ptr [rbp - 16]
	mov	qword ptr [rbp - 40], rcx # 8-byte Spill
	mov	qword ptr [rbp - 48], rdx # 8-byte Spill
.Ltmp39:
	#DEBUG_VALUE: vector:_Ilist <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	rdx, r8
	call	"??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
.Ltmp40:
	.cv_loc	9 4 729 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:729:0
	mov	rcx, qword ptr [rbp - 48] # 8-byte Reload
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"?end@?$initializer_list@H@std@@QEBAPEBHXZ"
	mov	rcx, qword ptr [rbp - 48] # 8-byte Reload
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"?begin@?$initializer_list@H@std@@QEBAPEBHXZ"
	mov	r9b, byte ptr [rbp - 32]
.Ltmp36:
	mov	rcx, qword ptr [rbp - 40] # 8-byte Reload
	mov	rdx, rax
	mov	r8, qword ptr [rbp - 64] # 8-byte Reload
	call	"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z"
.Ltmp37:
	jmp	.LBB9_1
.Ltmp41:
.LBB9_1:
	#DEBUG_VALUE: vector:_Ilist <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	.cv_loc	9 4 730 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:730:0
	mov	rax, qword ptr [rbp - 40] # 8-byte Reload
	add	rsp, 96
	pop	rbp
.Ltmp42:
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z@4HA"
.LBB9_2:
.Ltmp43:
	#DEBUG_VALUE: vector:_Ilist <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
.Ltmp44:
	.seh_endprologue
.Ltmp45:
	.cv_loc	9 4 730 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:730:0
	mov	rcx, qword ptr [rbp - 40] # 8-byte Reload
	call	"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp46:
.Lfunc_end9:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z"
	.p2align	2
"$cppxdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z")@IMGREL # IPToStateXData
	.long	88                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z":
	.long	.Lfunc_begin9@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp36@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp37@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z"
                                        # -- End function
	.def	 "??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z"
	.globl	"??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z" # -- Begin function ??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z
	.p2align	4, 0x90
"??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z": # @"??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z"
.Lfunc_begin10:
	.cv_func_id 10
	.cv_loc	10 2 428 0              # ..\include\gsl/span:428:0
.seh_proc "??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp47:
	mov	rdx, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
	mov	rcx, rax
	call	"??$narrow@_J_K@gsl@@YA_J_K@Z"
	mov	rcx, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ"
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	rdx, rax
	mov	r8, qword ptr [rsp + 40] # 8-byte Reload
	call	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 72
	ret
.Ltmp48:
.Lfunc_end10:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	.globl	"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z" # -- Begin function ??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z
	.p2align	4, 0x90
"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z":    # @"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
.Lfunc_begin11:
	.cv_func_id 11
	.cv_loc	11 2 508 0              # ..\include\gsl/span:508:0
.seh_proc "??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe 5, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rdx
	mov	qword ptr [rbp - 24], rcx
	mov	rcx, qword ptr [rbp - 24]
.Ltmp51:
	.cv_loc	11 2 509 0              # ..\include\gsl/span:509:0
	mov	rdx, rcx
	mov	qword ptr [rbp - 64], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 16]
	mov	rdx, rax
	call	"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z"
	mov	byte ptr [rbp - 49], 0
	test	al, 1
	jne	.LBB11_1
	jmp	.LBB11_2
.LBB11_1:
	test	byte ptr [rbp - 49], 1
	jne	.LBB11_4
	jmp	.LBB11_5
.LBB11_2:
	lea	rdx, [rip + "??_C@_0DG@BJDFKDLA@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 48]
	mov	rcx, rax
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 49], 1
.Ltmp49:
	mov	rcx, qword ptr [rbp - 72] # 8-byte Reload
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp50:
	jmp	.LBB11_3
.LBB11_3:
	ud2
.LBB11_4:
	lea	rcx, [rbp - 48]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB11_5:
	.cv_loc	11 2 510 0              # ..\include\gsl/span:510:0
	mov	rcx, qword ptr [rbp - 64] # 8-byte Reload
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	mov	rcx, qword ptr [rbp - 16]
	shl	rcx, 2
	add	rax, rcx
	add	rsp, 112
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z")@IMGREL
	.section	.text,"xr",discard,"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???A?$span@H$0?0@gsl@@QEBAAEAH_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???A?$span@H$0?0@gsl@@QEBAAEAH_J@Z@4HA":
.seh_proc "?dtor$6@?0???A?$span@H$0?0@gsl@@QEBAAEAH_J@Z@4HA"
.LBB11_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	.cv_loc	11 2 509 0              # ..\include\gsl/span:509:0
	test	byte ptr [rbp - 49], 1
	jne	.LBB11_7
	jmp	.LBB11_8
.LBB11_7:
	lea	rcx, [rbp - 48]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB11_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp52:
.Lfunc_end11:
	.seh_handlerdata
	.section	.text,"xr",discard,"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	.p2align	2
"$cppxdata$??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???A?$span@H$0?0@gsl@@QEBAAEAH_J@Z@4HA"@IMGREL # Action
"$ip2state$??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z":
	.long	.Lfunc_begin11@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp49@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp50@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
                                        # -- End function
	.def	 "??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
	.globl	"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ" # -- Begin function ??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
	.p2align	4, 0x90
"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ": # @"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
.Lfunc_begin12:
	.cv_func_id 12
	.cv_loc	12 4 893 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:893:0
.seh_proc "??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe 5, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx
	mov	rcx, qword ptr [rbp - 16]
	.cv_loc	12 4 894 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:894:0
.Ltmp53:
.Ltmp55:
	mov	qword ptr [rbp - 24], rcx # 8-byte Spill
	call	"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ"
.Ltmp54:
	jmp	.LBB12_1
.LBB12_1:
	.cv_loc	12 4 895 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:895:0
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	mov	rcx, rax
	call	"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
.Ltmp56:
	.cv_loc	12 4 895 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:895:0
	nop
	add	rsp, 64
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ@4HA"
.LBB12_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
.Ltmp57:
	.cv_loc	12 4 895 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:895:0
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$3@?0???1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0???1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ@4HA":
.seh_proc "?dtor$3@?0???1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ@4HA"
.LBB12_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp58:
.Lfunc_end12:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
	.p2align	2
"$cppxdata$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$3@?0???1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ@4HA"@IMGREL # Action
	.long	0                       # ToState
	.long	"?dtor$2@?0???1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ":
	.long	.Lfunc_begin12@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp53@IMGREL+1        # IP
	.long	1                       # ToState
	.long	.Ltmp54@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
                                        # -- End function
	.def	 "??0?$extent_type@$0A@@details@gsl@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	.globl	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ" # -- Begin function ??0?$extent_type@$0A@@details@gsl@@QEAA@XZ
	.p2align	4, 0x90
"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ": # @"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
.Lfunc_begin13:
	.cv_func_id 13
	.cv_loc	13 2 311 0              # ..\include\gsl/span:311:0
.seh_proc "??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rax, qword ptr [rsp]
.Ltmp59:
	pop	rcx
	ret
.Ltmp60:
.Lfunc_end13:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.globl	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z" # -- Begin function ??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z
	.p2align	4, 0x90
"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z": # @"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
.Lfunc_begin14:
	.cv_func_id 14
	.cv_loc	14 2 597 0              # ..\include\gsl/span:597:0
.seh_proc "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 208
	.seh_stackalloc 208
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 72], -2
	mov	byte ptr [rbp + 56], r8b
	mov	qword ptr [rbp + 48], rdx
	mov	qword ptr [rbp + 40], rcx
	mov	rcx, qword ptr [rbp + 40]
	mov	qword ptr [rbp + 64], rcx
.Ltmp65:
	mov	rdx, rcx
	mov	r8b, byte ptr [rbp + 32]
	mov	qword ptr [rbp - 40], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	dl, r8b
	call	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	mov	rcx, qword ptr [rbp + 48]
	mov	r9, qword ptr [rbp - 40] # 8-byte Reload
	mov	qword ptr [r9 + 8], rcx
.Ltmp66:
	.cv_loc	14 2 598 0              # ..\include\gsl/span:598:0
	mov	rcx, r9
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	dl
	mov	byte ptr [rbp + 7], 0
	test	dl, 1
	jne	.LBB14_1
	jmp	.LBB14_2
.LBB14_1:
	test	byte ptr [rbp + 7], 1
	jne	.LBB14_4
	jmp	.LBB14_5
.LBB14_2:
	lea	rdx, [rip + "??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp + 8]
	mov	rcx, rax
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp + 7], 1
.Ltmp61:
	mov	rcx, qword ptr [rbp - 56] # 8-byte Reload
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp62:
	jmp	.LBB14_3
.LBB14_3:
	ud2
.LBB14_4:
	lea	rcx, [rbp + 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB14_5:
	.cv_loc	14 2 599 0              # ..\include\gsl/span:599:0
	mov	rax, qword ptr [rbp + 48]
	mov	byte ptr [rbp - 25], 0
	cmp	rax, 0
	mov	cl, 1
	mov	byte ptr [rbp - 65], cl # 1-byte Spill
	jne	.LBB14_7
# %bb.6:
	mov	rax, qword ptr [rbp - 40] # 8-byte Reload
	mov	rcx, rax
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rbp - 65], dl # 1-byte Spill
.LBB14_7:
	mov	al, byte ptr [rbp - 65] # 1-byte Reload
	test	al, 1
	jne	.LBB14_8
	jmp	.LBB14_9
.LBB14_8:
	test	byte ptr [rbp - 25], 1
	jne	.LBB14_14
	jmp	.LBB14_15
.LBB14_9:
	lea	rdx, [rip + "??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 24]
	mov	rcx, rax
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 25], 1
.Ltmp63:
	mov	rcx, qword ptr [rbp - 80] # 8-byte Reload
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp64:
	jmp	.LBB14_10
.LBB14_10:
	ud2
.LBB14_14:
	lea	rcx, [rbp - 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp67:
.LBB14_15:
	.cv_loc	14 2 600 0              # ..\include\gsl/span:600:0
	mov	rax, qword ptr [rbp + 64]
	add	rsp, 208
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA":
.seh_proc "?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA"
.LBB14_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp68:
	.cv_loc	14 2 598 0              # ..\include\gsl/span:598:0
	test	byte ptr [rbp + 7], 1
	jne	.LBB14_12
	jmp	.LBB14_13
.LBB14_12:
	lea	rcx, [rbp + 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB14_13:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA":
.seh_proc "?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA"
.LBB14_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	14 2 599 0              # ..\include\gsl/span:599:0
	test	byte ptr [rbp - 25], 1
	jne	.LBB14_17
	jmp	.LBB14_18
.LBB14_17:
	lea	rcx, [rbp - 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB14_18:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp69:
.Lfunc_end14:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
"$cppxdata$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z")@IMGREL # IPToStateXData
	.long	200                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA"@IMGREL # Action
"$ip2state$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z":
	.long	.Lfunc_begin14@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp61@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp62@IMGREL+1        # IP
	.long	-1                      # ToState
	.long	.Ltmp63@IMGREL+1        # IP
	.long	1                       # ToState
	.long	.Ltmp64@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
                                        # -- End function
	.def	 "??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	.globl	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z" # -- Begin function ??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z
	.p2align	4, 0x90
"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z": # @"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
.Lfunc_begin15:
	.cv_func_id 15
	.cv_loc	15 2 334 0              # ..\include\gsl/span:334:0
.seh_proc "??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	byte ptr [rsp + 56], dl
	mov	qword ptr [rsp + 48], rcx
	mov	rax, qword ptr [rsp + 48]
.Ltmp70:
	lea	rcx, [rsp + 56]
	#DEBUG_VALUE: extent_type<0>:ext <- [$rcx+0]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
.Ltmp71:
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rcx], rax
	mov	rax, qword ptr [rsp + 64]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 72
	ret
.Ltmp72:
.Lfunc_end15:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	.globl	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ" # -- Begin function ?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ": # @"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
.Lfunc_begin16:
	.cv_func_id 16
	.cv_loc	16 2 338 0              # ..\include\gsl/span:338:0
.seh_proc "?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp73:
	mov	rax, qword ptr [rcx]
	pop	rcx
	ret
.Ltmp74:
.Lfunc_end16:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
	.globl	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z" # -- Begin function ??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z
	.p2align	4, 0x90
"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z": # @"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Lfunc_begin17:
	.cv_func_id 17
	.cv_file	5 "C:\\projects\\gsl\\include\\gsl\\gsl_assert" "DC2D278DC08DD14FC7E736FCD7722B8E" 1
	.cv_loc	17 5 143 0              # ..\include\gsl/gsl_assert:143:0
.seh_proc "??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	qword ptr [rsp + 80], rcx
.Ltmp75:
	.cv_loc	17 5 144 0              # ..\include\gsl/gsl_assert:144:0
	mov	rcx, qword ptr [rsp + 80]
	call	"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
	lea	rcx, [rsp + 56]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rdx, rax
	call	"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
	lea	rdx, [rip + "_TI3?AUfail_fast@gsl@@"]
	mov	rcx, qword ptr [rip + __imp__CxxThrowException]
	mov	r8, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, r8
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	r9
	ud2
.Ltmp76:
.Lfunc_end17:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0fail_fast@gsl@@QEAA@QEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@QEBD@Z"
	.globl	"??0fail_fast@gsl@@QEAA@QEBD@Z" # -- Begin function ??0fail_fast@gsl@@QEAA@QEBD@Z
	.p2align	4, 0x90
"??0fail_fast@gsl@@QEAA@QEBD@Z":        # @"??0fail_fast@gsl@@QEAA@QEBD@Z"
.Lfunc_begin18:
	.cv_func_id 18
	.cv_loc	18 5 99 0               # ..\include\gsl/gsl_assert:99:0
.seh_proc "??0fail_fast@gsl@@QEAA@QEBD@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp77:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0logic_error@std@@QEAA@PEBD@Z"
	lea	rcx, [rip + "??_7fail_fast@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp78:
.Lfunc_end18:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@QEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1fail_fast@gsl@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1fail_fast@gsl@@UEAA@XZ"
	.globl	"??1fail_fast@gsl@@UEAA@XZ" # -- Begin function ??1fail_fast@gsl@@UEAA@XZ
	.p2align	4, 0x90
"??1fail_fast@gsl@@UEAA@XZ":            # @"??1fail_fast@gsl@@UEAA@XZ"
.Lfunc_begin19:
	.cv_func_id 19
	.cv_loc	19 5 97 0               # ..\include\gsl/gsl_assert:97:0
.seh_proc "??1fail_fast@gsl@@UEAA@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp79:
	.cv_loc	19 5 97 0               # ..\include\gsl/gsl_assert:97:0
	call	"??1logic_error@std@@UEAA@XZ"
.Ltmp80:
	.cv_loc	19 5 97 0               # ..\include\gsl/gsl_assert:97:0
	nop
	add	rsp, 40
	ret
.Ltmp81:
.Lfunc_end19:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1fail_fast@gsl@@UEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
	.globl	"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ" # -- Begin function ?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ": # @"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
.Lfunc_begin20:
	.cv_func_id 20
	.cv_loc	20 2 323 0              # ..\include\gsl/span:323:0
.seh_proc "?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	xor	eax, eax
                                        # kill: def $rax killed $eax
	mov	qword ptr [rsp], rcx
.Ltmp82:
	pop	rcx
	ret
.Ltmp83:
.Lfunc_end20:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
	.globl	"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z" # -- Begin function ??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z
	.p2align	4, 0x90
"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z": # @"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
.Lfunc_begin21:
	.cv_func_id 21
	.cv_file	6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits" "31392DB14D6313D8182AD771AA06F210" 1
	.cv_loc	21 6 1573 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1573:0
.seh_proc "??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp84:
	.cv_loc	21 6 1574 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1574:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp85:
.Lfunc_end21:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0fail_fast@gsl@@QEAA@$$QEAU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
	.globl	"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z" # -- Begin function ??0fail_fast@gsl@@QEAA@$$QEAU01@@Z
	.p2align	4, 0x90
"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z":   # @"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
.Lfunc_begin22:
	.cv_func_id 22
	.cv_loc	22 5 97 0               # ..\include\gsl/gsl_assert:97:0
.seh_proc "??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp86:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0logic_error@std@@QEAA@$$QEAV01@@Z"
	lea	rcx, [rip + "??_7fail_fast@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp87:
.Lfunc_end22:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0fail_fast@gsl@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@AEBU01@@Z"
	.globl	"??0fail_fast@gsl@@QEAA@AEBU01@@Z" # -- Begin function ??0fail_fast@gsl@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0fail_fast@gsl@@QEAA@AEBU01@@Z":     # @"??0fail_fast@gsl@@QEAA@AEBU01@@Z"
.Lfunc_begin23:
	.cv_func_id 23
	.cv_loc	23 5 97 0               # ..\include\gsl/gsl_assert:97:0
.seh_proc "??0fail_fast@gsl@@QEAA@AEBU01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp88:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0logic_error@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7fail_fast@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp89:
.Lfunc_end23:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@AEBU01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0logic_error@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.globl	"??0logic_error@std@@QEAA@AEBV01@@Z" # -- Begin function ??0logic_error@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0logic_error@std@@QEAA@AEBV01@@Z":   # @"??0logic_error@std@@QEAA@AEBV01@@Z"
.Lfunc_begin24:
	.cv_func_id 24
	.cv_file	7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept" "2FE06AF7EACFB232C6FF033DBFC4412E" 1
	.cv_loc	24 7 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
.seh_proc "??0logic_error@std@@QEAA@AEBV01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp90:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7logic_error@std@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp91:
.Lfunc_end24:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0exception@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
	.globl	"??0exception@std@@QEAA@AEBV01@@Z" # -- Begin function ??0exception@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0exception@std@@QEAA@AEBV01@@Z":     # @"??0exception@std@@QEAA@AEBV01@@Z"
.Lfunc_begin25:
	.cv_func_id 25
	.cv_file	8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h" "6C163BAA92D5C81892AD5480D109CCEE" 1
	.cv_loc	25 8 68 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:68:0
.seh_proc "??0exception@std@@QEAA@AEBV01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	xor	eax, eax
	mov	r8d, 16
                                        # kill: def $r8 killed $r8d
	lea	r9, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp92:
	mov	qword ptr [rcx], r9
	mov	rdx, rcx
	add	rdx, 8
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	edx, eax
	call	memset
.Ltmp93:
	.cv_loc	25 8 69 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:69:0
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	add	rcx, 8
	mov	r8, qword ptr [rsp + 64]
	add	r8, 8
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, r8
	mov	rdx, qword ptr [rsp + 40] # 8-byte Reload
	call	__std_exception_copy
.Ltmp94:
	.cv_loc	25 8 70 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:70:0
	mov	rax, qword ptr [rsp + 48] # 8-byte Reload
	add	rsp, 72
	ret
.Ltmp95:
.Lfunc_end25:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0logic_error@std@@QEAA@$$QEAV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@$$QEAV01@@Z"
	.globl	"??0logic_error@std@@QEAA@$$QEAV01@@Z" # -- Begin function ??0logic_error@std@@QEAA@$$QEAV01@@Z
	.p2align	4, 0x90
"??0logic_error@std@@QEAA@$$QEAV01@@Z": # @"??0logic_error@std@@QEAA@$$QEAV01@@Z"
.Lfunc_begin26:
	.cv_func_id 26
	.cv_loc	26 7 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
.seh_proc "??0logic_error@std@@QEAA@$$QEAV01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp96:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7logic_error@std@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp97:
.Lfunc_end26:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@$$QEAV01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??_Gfail_fast@gsl@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
	.globl	"??_Gfail_fast@gsl@@UEAAPEAXI@Z" # -- Begin function ??_Gfail_fast@gsl@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gfail_fast@gsl@@UEAAPEAXI@Z":       # @"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
.Lfunc_begin27:
	.cv_func_id 27
	.cv_loc	27 5 97 0               # ..\include\gsl/gsl_assert:97:0
.seh_proc "??_Gfail_fast@gsl@@UEAAPEAXI@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	dword ptr [rsp + 60], edx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
	mov	rax, rcx
	mov	qword ptr [rsp + 64], rax
	mov	edx, dword ptr [rsp + 60]
.Ltmp98:
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	dword ptr [rsp + 36], edx # 4-byte Spill
	call	"??1fail_fast@gsl@@UEAA@XZ"
	mov	edx, dword ptr [rsp + 36] # 4-byte Reload
	cmp	edx, 0
	je	.LBB27_2
# %bb.1:
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	mov	rcx, rax
	call	"??3@YAXPEAX@Z"
.LBB27_2:
	mov	rax, qword ptr [rsp + 64]
	add	rsp, 72
	ret
.Ltmp99:
.Lfunc_end27:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?what@exception@std@@UEBAPEBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?what@exception@std@@UEBAPEBDXZ"
	.globl	"?what@exception@std@@UEBAPEBDXZ" # -- Begin function ?what@exception@std@@UEBAPEBDXZ
	.p2align	4, 0x90
"?what@exception@std@@UEBAPEBDXZ":      # @"?what@exception@std@@UEBAPEBDXZ"
.Lfunc_begin28:
	.cv_func_id 28
	.cv_loc	28 8 90 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:90:0
.seh_proc "?what@exception@std@@UEBAPEBDXZ"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	qword ptr [rsp + 16], rcx
	mov	rcx, qword ptr [rsp + 16]
.Ltmp100:
	.cv_loc	28 8 91 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:91:0
	cmp	qword ptr [rcx + 8], 0
	mov	qword ptr [rsp + 8], rcx # 8-byte Spill
	je	.LBB28_2
# %bb.1:
	mov	rax, qword ptr [rsp + 8] # 8-byte Reload
	mov	rcx, qword ptr [rax + 8]
	mov	qword ptr [rsp], rcx    # 8-byte Spill
	jmp	.LBB28_3
.LBB28_2:
	lea	rax, [rip + "??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"]
	mov	qword ptr [rsp], rax    # 8-byte Spill
	jmp	.LBB28_3
.LBB28_3:
	mov	rax, qword ptr [rsp]    # 8-byte Reload
	add	rsp, 24
	ret
.Ltmp101:
.Lfunc_end28:
	.seh_handlerdata
	.section	.text,"xr",discard,"?what@exception@std@@UEBAPEBDXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_Glogic_error@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.globl	"??_Glogic_error@std@@UEAAPEAXI@Z" # -- Begin function ??_Glogic_error@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Glogic_error@std@@UEAAPEAXI@Z":     # @"??_Glogic_error@std@@UEAAPEAXI@Z"
.Lfunc_begin29:
	.cv_func_id 29
	.cv_loc	29 7 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
.seh_proc "??_Glogic_error@std@@UEAAPEAXI@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	dword ptr [rsp + 60], edx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
	mov	rax, rcx
	mov	qword ptr [rsp + 64], rax
	mov	edx, dword ptr [rsp + 60]
.Ltmp102:
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	dword ptr [rsp + 36], edx # 4-byte Spill
	call	"??1logic_error@std@@UEAA@XZ"
	mov	edx, dword ptr [rsp + 36] # 4-byte Reload
	cmp	edx, 0
	je	.LBB29_2
# %bb.1:
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	mov	rcx, rax
	call	"??3@YAXPEAX@Z"
.LBB29_2:
	mov	rax, qword ptr [rsp + 64]
	add	rsp, 72
	ret
.Ltmp103:
.Lfunc_end29:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1logic_error@std@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1logic_error@std@@UEAA@XZ"
	.globl	"??1logic_error@std@@UEAA@XZ" # -- Begin function ??1logic_error@std@@UEAA@XZ
	.p2align	4, 0x90
"??1logic_error@std@@UEAA@XZ":          # @"??1logic_error@std@@UEAA@XZ"
.Lfunc_begin30:
	.cv_func_id 30
	.cv_loc	30 7 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
.seh_proc "??1logic_error@std@@UEAA@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp104:
	.cv_loc	30 7 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
	call	"??1exception@std@@UEAA@XZ"
.Ltmp105:
	.cv_loc	30 7 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
	nop
	add	rsp, 40
	ret
.Ltmp106:
.Lfunc_end30:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1logic_error@std@@UEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??1exception@std@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
	.globl	"??1exception@std@@UEAA@XZ" # -- Begin function ??1exception@std@@UEAA@XZ
	.p2align	4, 0x90
"??1exception@std@@UEAA@XZ":            # @"??1exception@std@@UEAA@XZ"
.Lfunc_begin31:
	.cv_func_id 31
	.cv_loc	31 8 85 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:85:0
.seh_proc "??1exception@std@@UEAA@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp107:
	mov	qword ptr [rcx], rax
.Ltmp108:
	.cv_loc	31 8 86 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:86:0
	add	rcx, 8
	call	__std_exception_destroy
.Ltmp109:
	.cv_loc	31 8 87 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:87:0
	nop
	add	rsp, 40
	ret
.Ltmp110:
.Lfunc_end31:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_Gexception@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gexception@std@@UEAAPEAXI@Z"
	.globl	"??_Gexception@std@@UEAAPEAXI@Z" # -- Begin function ??_Gexception@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gexception@std@@UEAAPEAXI@Z":       # @"??_Gexception@std@@UEAAPEAXI@Z"
.Lfunc_begin32:
	.cv_func_id 32
	.cv_loc	32 8 85 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:85:0
.seh_proc "??_Gexception@std@@UEAAPEAXI@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	dword ptr [rsp + 60], edx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
	mov	rax, rcx
	mov	qword ptr [rsp + 64], rax
	mov	edx, dword ptr [rsp + 60]
.Ltmp111:
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	dword ptr [rsp + 36], edx # 4-byte Spill
	call	"??1exception@std@@UEAA@XZ"
	mov	edx, dword ptr [rsp + 36] # 4-byte Reload
	cmp	edx, 0
	je	.LBB32_2
# %bb.1:
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	mov	rcx, rax
	call	"??3@YAXPEAX@Z"
.LBB32_2:
	.cv_loc	32 8 87 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:87:0
	mov	rax, qword ptr [rsp + 64]
	add	rsp, 72
	ret
.Ltmp112:
.Lfunc_end32:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gexception@std@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0logic_error@std@@QEAA@PEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@PEBD@Z"
	.globl	"??0logic_error@std@@QEAA@PEBD@Z" # -- Begin function ??0logic_error@std@@QEAA@PEBD@Z
	.p2align	4, 0x90
"??0logic_error@std@@QEAA@PEBD@Z":      # @"??0logic_error@std@@QEAA@PEBD@Z"
.Lfunc_begin33:
	.cv_func_id 33
	.cv_loc	33 7 30 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:30:0
.seh_proc "??0logic_error@std@@QEAA@PEBD@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp113:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@QEBD@Z"
	lea	rcx, [rip + "??_7logic_error@std@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	.cv_loc	33 7 31 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:31:0
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp114:
.Lfunc_end33:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@PEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0exception@std@@QEAA@QEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QEAA@QEBD@Z"
	.globl	"??0exception@std@@QEAA@QEBD@Z" # -- Begin function ??0exception@std@@QEAA@QEBD@Z
	.p2align	4, 0x90
"??0exception@std@@QEAA@QEBD@Z":        # @"??0exception@std@@QEAA@QEBD@Z"
.Lfunc_begin34:
	.cv_func_id 34
	.cv_loc	34 8 55 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:55:0
.seh_proc "??0exception@std@@QEAA@QEBD@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	xor	eax, eax
	mov	r8d, 16
                                        # kill: def $r8 killed $r8d
	lea	r9, [rip + "??_7exception@std@@6B@"]
	mov	r10, qword ptr [rip + __security_cookie]
	xor	r10, rsp
	mov	qword ptr [rsp + 80], r10
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp115:
	mov	qword ptr [rcx], r9
	mov	rdx, rcx
	add	rdx, 8
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	edx, eax
	call	memset
.Ltmp116:
	.cv_loc	34 8 56 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:56:0
	mov	rcx, qword ptr [rsp + 56]
	mov	qword ptr [rsp + 64], rcx
	mov	byte ptr [rsp + 72], 1
	.cv_loc	34 8 57 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:57:0
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	add	rcx, 8
	lea	r8, [rsp + 64]
.Ltmp117:
	#DEBUG_VALUE: _InitData <- [$r8+0]
	mov	qword ptr [rsp + 32], rcx # 8-byte Spill
	mov	rcx, r8
	mov	rdx, qword ptr [rsp + 32] # 8-byte Reload
	call	__std_exception_copy
.Ltmp118:
	mov	rcx, qword ptr [rsp + 80]
	xor	rcx, rsp
	call	__security_check_cookie
.Ltmp119:
	.cv_loc	34 8 58 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:58:0
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 88
	ret
.Ltmp120:
.Lfunc_end34:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0exception@std@@QEAA@QEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.globl	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ" # -- Begin function ?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ
	.p2align	4, 0x90
"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ": # @"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
.Lfunc_begin35:
	.cv_func_id 35
	.cv_loc	35 2 602 0              # ..\include\gsl/span:602:0
.seh_proc "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp121:
	mov	rax, qword ptr [rcx + 8]
	pop	rcx
	ret
.Ltmp122:
.Lfunc_end35:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.globl	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z" # -- Begin function ??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z
	.p2align	4, 0x90
"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z": # @"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
.Lfunc_begin36:
	.cv_func_id 36
	.cv_loc	36 2 597 0              # ..\include\gsl/span:597:0
.seh_proc "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 208
	.seh_stackalloc 208
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 72], -2
	mov	byte ptr [rbp + 56], r8b
	mov	qword ptr [rbp + 48], rdx
	mov	qword ptr [rbp + 40], rcx
	mov	rcx, qword ptr [rbp + 40]
	mov	qword ptr [rbp + 64], rcx
.Ltmp127:
	mov	rdx, rcx
	mov	r8b, byte ptr [rbp + 32]
	mov	qword ptr [rbp - 40], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	dl, r8b
	call	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	mov	rcx, qword ptr [rbp + 48]
	mov	r9, qword ptr [rbp - 40] # 8-byte Reload
	mov	qword ptr [r9 + 8], rcx
.Ltmp128:
	.cv_loc	36 2 598 0              # ..\include\gsl/span:598:0
	mov	rcx, r9
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	dl
	mov	byte ptr [rbp + 7], 0
	test	dl, 1
	jne	.LBB36_1
	jmp	.LBB36_2
.LBB36_1:
	test	byte ptr [rbp + 7], 1
	jne	.LBB36_4
	jmp	.LBB36_5
.LBB36_2:
	lea	rdx, [rip + "??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp + 8]
	mov	rcx, rax
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp + 7], 1
.Ltmp123:
	mov	rcx, qword ptr [rbp - 56] # 8-byte Reload
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp124:
	jmp	.LBB36_3
.LBB36_3:
	ud2
.LBB36_4:
	lea	rcx, [rbp + 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB36_5:
	.cv_loc	36 2 599 0              # ..\include\gsl/span:599:0
	mov	rax, qword ptr [rbp + 48]
	mov	byte ptr [rbp - 25], 0
	cmp	rax, 0
	mov	cl, 1
	mov	byte ptr [rbp - 65], cl # 1-byte Spill
	jne	.LBB36_7
# %bb.6:
	mov	rax, qword ptr [rbp - 40] # 8-byte Reload
	mov	rcx, rax
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rbp - 65], dl # 1-byte Spill
.LBB36_7:
	mov	al, byte ptr [rbp - 65] # 1-byte Reload
	test	al, 1
	jne	.LBB36_8
	jmp	.LBB36_9
.LBB36_8:
	test	byte ptr [rbp - 25], 1
	jne	.LBB36_14
	jmp	.LBB36_15
.LBB36_9:
	lea	rdx, [rip + "??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 24]
	mov	rcx, rax
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 25], 1
.Ltmp125:
	mov	rcx, qword ptr [rbp - 80] # 8-byte Reload
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp126:
	jmp	.LBB36_10
.LBB36_10:
	ud2
.LBB36_14:
	lea	rcx, [rbp - 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp129:
.LBB36_15:
	.cv_loc	36 2 600 0              # ..\include\gsl/span:600:0
	mov	rax, qword ptr [rbp + 64]
	add	rsp, 208
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA":
.seh_proc "?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA"
.LBB36_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp130:
	.cv_loc	36 2 598 0              # ..\include\gsl/span:598:0
	test	byte ptr [rbp + 7], 1
	jne	.LBB36_12
	jmp	.LBB36_13
.LBB36_12:
	lea	rcx, [rbp + 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB36_13:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA":
.seh_proc "?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA"
.LBB36_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	36 2 599 0              # ..\include\gsl/span:599:0
	test	byte ptr [rbp - 25], 1
	jne	.LBB36_17
	jmp	.LBB36_18
.LBB36_17:
	lea	rcx, [rbp - 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB36_18:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp131:
.Lfunc_end36:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
"$cppxdata$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z")@IMGREL # IPToStateXData
	.long	200                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA"@IMGREL # Action
"$ip2state$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z":
	.long	.Lfunc_begin36@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp123@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp124@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp125@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp126@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
                                        # -- End function
	.def	 "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	.globl	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # -- Begin function ?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ
	.p2align	4, 0x90
"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ": # @"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
.Lfunc_begin37:
	.cv_func_id 37
	.cv_loc	37 2 602 0              # ..\include\gsl/span:602:0
.seh_proc "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp132:
	mov	rax, qword ptr [rcx + 8]
	pop	rcx
	ret
.Ltmp133:
.Lfunc_end37:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$narrow@_J_K@gsl@@YA_J_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$narrow@_J_K@gsl@@YA_J_K@Z"
	.globl	"??$narrow@_J_K@gsl@@YA_J_K@Z" # -- Begin function ??$narrow@_J_K@gsl@@YA_J_K@Z
	.p2align	4, 0x90
"??$narrow@_J_K@gsl@@YA_J_K@Z":         # @"??$narrow@_J_K@gsl@@YA_J_K@Z"
.Lfunc_begin38:
	.cv_func_id 38
	.cv_file	9 "C:\\projects\\gsl\\include\\gsl\\gsl_util" "9954522A071AE96641C34E4C32052141" 1
	.cv_loc	38 9 124 0              # ..\include\gsl/gsl_util:124:0
.seh_proc "??$narrow@_J_K@gsl@@YA_J_K@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 144
	.seh_stackalloc 144
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 8], -2
	mov	qword ptr [rbp], rcx
.Ltmp138:
	.cv_loc	38 9 125 0              # ..\include\gsl/gsl_util:125:0
	mov	rcx, rbp
	#DEBUG_VALUE: narrow<long long,unsigned long long>:u <- [$rcx+0]
	call	"??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z"
.Ltmp139:
	mov	qword ptr [rbp - 8], rax
	.cv_loc	38 9 126 0              # ..\include\gsl/gsl_util:126:0
	mov	rax, qword ptr [rbp - 8]
	cmp	rax, qword ptr [rbp]
	je	.LBB38_4
# %bb.1:
.Ltmp140:
	.cv_loc	38 9 126 0              # ..\include\gsl/gsl_util:126:0
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rbp - 32], xmm0
	mov	qword ptr [rbp - 16], 0
	lea	rax, [rbp - 32]
	mov	rcx, rax
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??0narrowing_error@gsl@@QEAA@XZ"
.Ltmp136:
	mov	rcx, qword ptr [rbp - 72] # 8-byte Reload
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
.Ltmp137:
	jmp	.LBB38_2
.LBB38_2:
	ud2
.Ltmp141:
.LBB38_4:
	.cv_loc	38 9 127 0              # ..\include\gsl/gsl_util:127:0
	cmp	qword ptr [rbp - 8], 0
	setl	al
	test	al, 1
	jne	.LBB38_5
	jmp	.LBB38_8
.LBB38_5:
.Ltmp142:
	.cv_loc	38 9 128 0              # ..\include\gsl/gsl_util:128:0
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rbp - 64], xmm0
	mov	qword ptr [rbp - 48], 0
	lea	rax, [rbp - 64]
	mov	rcx, rax
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??0narrowing_error@gsl@@QEAA@XZ"
.Ltmp134:
	mov	rcx, qword ptr [rbp - 88] # 8-byte Reload
	mov	qword ptr [rbp - 96], rax # 8-byte Spill
	call	"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
.Ltmp135:
	jmp	.LBB38_6
.LBB38_6:
	ud2
.Ltmp143:
.LBB38_8:
	.cv_loc	38 9 129 0              # ..\include\gsl/gsl_util:129:0
	mov	rax, qword ptr [rbp - 8]
	add	rsp, 144
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$narrow@_J_K@gsl@@YA_J_K@Z")@IMGREL
	.section	.text,"xr",discard,"??$narrow@_J_K@gsl@@YA_J_K@Z"
	.seh_endproc
	.def	 "?dtor$3@?0???$narrow@_J_K@gsl@@YA_J_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0???$narrow@_J_K@gsl@@YA_J_K@Z@4HA":
.seh_proc "?dtor$3@?0???$narrow@_J_K@gsl@@YA_J_K@Z@4HA"
.LBB38_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	lea	rcx, [rbp - 32]
.Ltmp144:
	.cv_loc	38 9 126 0              # ..\include\gsl/gsl_util:126:0
	call	"??1narrowing_error@gsl@@UEAA@XZ"
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp145:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$narrow@_J_K@gsl@@YA_J_K@Z"
	.seh_endproc
	.def	 "?dtor$7@?0???$narrow@_J_K@gsl@@YA_J_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???$narrow@_J_K@gsl@@YA_J_K@Z@4HA":
.seh_proc "?dtor$7@?0???$narrow@_J_K@gsl@@YA_J_K@Z@4HA"
.LBB38_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	lea	rcx, [rbp - 64]
.Ltmp146:
	.cv_loc	38 9 128 0              # ..\include\gsl/gsl_util:128:0
	call	"??1narrowing_error@gsl@@UEAA@XZ"
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp147:
.Lfunc_end38:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$narrow@_J_K@gsl@@YA_J_K@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$narrow@_J_K@gsl@@YA_J_K@Z"
	.p2align	2
"$cppxdata$??$narrow@_J_K@gsl@@YA_J_K@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$narrow@_J_K@gsl@@YA_J_K@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??$narrow@_J_K@gsl@@YA_J_K@Z")@IMGREL # IPToStateXData
	.long	136                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$narrow@_J_K@gsl@@YA_J_K@Z":
	.long	-1                      # ToState
	.long	"?dtor$3@?0???$narrow@_J_K@gsl@@YA_J_K@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???$narrow@_J_K@gsl@@YA_J_K@Z@4HA"@IMGREL # Action
"$ip2state$??$narrow@_J_K@gsl@@YA_J_K@Z":
	.long	.Lfunc_begin38@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp136@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp134@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp135@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$narrow@_J_K@gsl@@YA_J_K@Z"
                                        # -- End function
	.def	 "?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
	.globl	"?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # -- Begin function ?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
	.p2align	4, 0x90
"?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ": # @"?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
.Lfunc_begin39:
	.cv_func_id 39
	.cv_loc	39 4 1703 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1703:0
.seh_proc "?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp148:
	.cv_loc	39 4 1704 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1704:0
	mov	rax, rcx
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rax
	call	"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rsp + 32] # 8-byte Reload
	sub	rcx, rax
	sar	rcx, 2
	mov	rax, rcx
	add	rsp, 56
	ret
.Ltmp149:
.Lfunc_end39:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ"
	.globl	"?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ" # -- Begin function ?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ
	.p2align	4, 0x90
"?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ": # @"?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ"
.Lfunc_begin40:
	.cv_func_id 40
	.cv_loc	40 4 1608 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1608:0
.seh_proc "?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp150:
	.cv_loc	40 4 1609 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1609:0
	call	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	rcx, qword ptr [rax]
	call	"??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z"
	nop
	add	rsp, 40
	ret
.Ltmp151:
.Lfunc_end40:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.globl	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # -- Begin function ??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z
	.p2align	4, 0x90
"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z":   # @"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
.Lfunc_begin41:
	.cv_func_id 41
	.cv_loc	41 2 386 0              # ..\include\gsl/span:386:0
.seh_proc "??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], r8
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp152:
	mov	r8, qword ptr [rsp + 64]
	mov	rdx, qword ptr [rsp + 56]
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	call	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 72
	ret
.Ltmp153:
.Lfunc_end41:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z"
	.globl	"??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z" # -- Begin function ??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z
	.p2align	4, 0x90
"??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z": # @"??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z"
.Lfunc_begin42:
	.cv_func_id 42
	.cv_loc	42 9 99 0               # ..\include\gsl/gsl_util:99:0
.seh_proc "??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
.Ltmp154:
	.cv_loc	42 9 100 0              # ..\include\gsl/gsl_util:100:0
	mov	rcx, qword ptr [rsp + 32]
	call	"??$forward@AEA_K@std@@YAAEA_KAEA_K@Z"
	mov	rax, qword ptr [rax]
	add	rsp, 40
	ret
.Ltmp155:
.Lfunc_end42:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
	.globl	"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z" # -- Begin function ??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z
	.p2align	4, 0x90
"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z": # @"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
.Lfunc_begin43:
	.cv_func_id 43
	.cv_loc	43 5 143 0              # ..\include\gsl/gsl_assert:143:0
.seh_proc "??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	qword ptr [rsp + 80], rcx
.Ltmp156:
	.cv_loc	43 5 144 0              # ..\include\gsl/gsl_assert:144:0
	mov	rcx, qword ptr [rsp + 80]
	call	"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z"
	lea	rcx, [rsp + 56]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rdx, rax
	call	"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z"
	lea	rdx, [rip + "_TI2?AUnarrowing_error@gsl@@"]
	mov	rcx, qword ptr [rip + __imp__CxxThrowException]
	mov	r8, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, r8
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	r9
	ud2
.Ltmp157:
.Lfunc_end43:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0narrowing_error@gsl@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0narrowing_error@gsl@@QEAA@XZ"
	.globl	"??0narrowing_error@gsl@@QEAA@XZ" # -- Begin function ??0narrowing_error@gsl@@QEAA@XZ
	.p2align	4, 0x90
"??0narrowing_error@gsl@@QEAA@XZ":      # @"??0narrowing_error@gsl@@QEAA@XZ"
.Lfunc_begin44:
	.cv_func_id 44
	.cv_loc	44 9 103 0              # ..\include\gsl/gsl_util:103:0
.seh_proc "??0narrowing_error@gsl@@QEAA@XZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp158:
	mov	rax, rcx
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rax
	call	"??0exception@std@@QEAA@XZ"
	lea	rcx, [rip + "??_7narrowing_error@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 56
	ret
.Ltmp159:
.Lfunc_end44:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0narrowing_error@gsl@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??1narrowing_error@gsl@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1narrowing_error@gsl@@UEAA@XZ"
	.globl	"??1narrowing_error@gsl@@UEAA@XZ" # -- Begin function ??1narrowing_error@gsl@@UEAA@XZ
	.p2align	4, 0x90
"??1narrowing_error@gsl@@UEAA@XZ":      # @"??1narrowing_error@gsl@@UEAA@XZ"
.Lfunc_begin45:
	.cv_func_id 45
	.cv_loc	45 9 103 0              # ..\include\gsl/gsl_util:103:0
.seh_proc "??1narrowing_error@gsl@@UEAA@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp160:
	.cv_loc	45 9 103 0              # ..\include\gsl/gsl_util:103:0
	call	"??1exception@std@@UEAA@XZ"
.Ltmp161:
	.cv_loc	45 9 103 0              # ..\include\gsl/gsl_util:103:0
	nop
	add	rsp, 40
	ret
.Ltmp162:
.Lfunc_end45:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1narrowing_error@gsl@@UEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$forward@AEA_K@std@@YAAEA_KAEA_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$forward@AEA_K@std@@YAAEA_KAEA_K@Z"
	.globl	"??$forward@AEA_K@std@@YAAEA_KAEA_K@Z" # -- Begin function ??$forward@AEA_K@std@@YAAEA_KAEA_K@Z
	.p2align	4, 0x90
"??$forward@AEA_K@std@@YAAEA_KAEA_K@Z": # @"??$forward@AEA_K@std@@YAAEA_KAEA_K@Z"
.Lfunc_begin46:
	.cv_func_id 46
	.cv_loc	46 6 1573 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1573:0
.seh_proc "??$forward@AEA_K@std@@YAAEA_KAEA_K@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp163:
	.cv_loc	46 6 1574 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1574:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp164:
.Lfunc_end46:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$forward@AEA_K@std@@YAAEA_KAEA_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z"
	.globl	"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z" # -- Begin function ??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z
	.p2align	4, 0x90
"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z": # @"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z"
.Lfunc_begin47:
	.cv_func_id 47
	.cv_loc	47 6 1573 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1573:0
.seh_proc "??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp165:
	.cv_loc	47 6 1574 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1574:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp166:
.Lfunc_end47:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z"
	.globl	"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z" # -- Begin function ??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z
	.p2align	4, 0x90
"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z": # @"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z"
.Lfunc_begin48:
	.cv_func_id 48
	.cv_loc	48 9 103 0              # ..\include\gsl/gsl_util:103:0
.seh_proc "??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp167:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7narrowing_error@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp168:
.Lfunc_end48:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0narrowing_error@gsl@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0narrowing_error@gsl@@QEAA@AEBU01@@Z"
	.globl	"??0narrowing_error@gsl@@QEAA@AEBU01@@Z" # -- Begin function ??0narrowing_error@gsl@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0narrowing_error@gsl@@QEAA@AEBU01@@Z": # @"??0narrowing_error@gsl@@QEAA@AEBU01@@Z"
.Lfunc_begin49:
	.cv_func_id 49
	.cv_loc	49 9 103 0              # ..\include\gsl/gsl_util:103:0
.seh_proc "??0narrowing_error@gsl@@QEAA@AEBU01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp169:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7narrowing_error@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp170:
.Lfunc_end49:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0narrowing_error@gsl@@QEAA@AEBU01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??_Gnarrowing_error@gsl@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z"
	.globl	"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z" # -- Begin function ??_Gnarrowing_error@gsl@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z": # @"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z"
.Lfunc_begin50:
	.cv_func_id 50
	.cv_loc	50 9 103 0              # ..\include\gsl/gsl_util:103:0
.seh_proc "??_Gnarrowing_error@gsl@@UEAAPEAXI@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	dword ptr [rsp + 60], edx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
	mov	rax, rcx
	mov	qword ptr [rsp + 64], rax
	mov	edx, dword ptr [rsp + 60]
.Ltmp171:
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	dword ptr [rsp + 36], edx # 4-byte Spill
	call	"??1narrowing_error@gsl@@UEAA@XZ"
	mov	edx, dword ptr [rsp + 36] # 4-byte Reload
	cmp	edx, 0
	je	.LBB50_2
# %bb.1:
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	mov	rcx, rax
	call	"??3@YAXPEAX@Z"
.LBB50_2:
	mov	rax, qword ptr [rsp + 64]
	add	rsp, 72
	ret
.Ltmp172:
.Lfunc_end50:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0exception@std@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QEAA@XZ"
	.globl	"??0exception@std@@QEAA@XZ" # -- Begin function ??0exception@std@@QEAA@XZ
	.p2align	4, 0x90
"??0exception@std@@QEAA@XZ":            # @"??0exception@std@@QEAA@XZ"
.Lfunc_begin51:
	.cv_func_id 51
	.cv_loc	51 8 50 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:50:0
.seh_proc "??0exception@std@@QEAA@XZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	xor	edx, edx
	mov	eax, 16
	mov	r8d, eax
	lea	r9, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp173:
	mov	qword ptr [rcx], r9
	mov	r9, rcx
	add	r9, 8
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, r9
	call	memset
	.cv_loc	51 8 51 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:51:0
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 56
	ret
.Ltmp174:
.Lfunc_end51:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0exception@std@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	.globl	"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ" # -- Begin function ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ
	.p2align	4, 0x90
"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ": # @"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
.Lfunc_begin52:
	.cv_func_id 52
	.cv_loc	52 4 590 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:590:0
.seh_proc "?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp175:
	.cv_loc	52 4 591 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:591:0
	call	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	add	rax, 16
	add	rsp, 40
	ret
.Ltmp176:
.Lfunc_end52:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	.globl	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ" # -- Begin function ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ
	.p2align	4, 0x90
"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ": # @"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
.Lfunc_begin53:
	.cv_func_id 53
	.cv_loc	53 4 580 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:580:0
.seh_proc "?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp177:
	.cv_loc	53 4 581 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:581:0
	call	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	add	rax, 8
	add	rsp, 40
	ret
.Ltmp178:
.Lfunc_end53:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	.globl	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # -- Begin function ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
	.p2align	4, 0x90
"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ": # @"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
.Lfunc_begin54:
	.cv_func_id 54
	.cv_loc	54 4 559 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:559:0
.seh_proc "?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp179:
	.cv_loc	54 4 560 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:560:0
	call	"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	nop
	add	rsp, 40
	ret
.Ltmp180:
.Lfunc_end54:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	.globl	"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # -- Begin function ?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
	.p2align	4, 0x90
"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ": # @"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
.Lfunc_begin55:
	.cv_func_id 55
	.cv_file	10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility" "A162BEAAC17F997B0C72AFDAD71F40D6" 1
	.cv_loc	55 10 306 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:306:0
.seh_proc "?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rax, qword ptr [rsp]
.Ltmp181:
	.cv_loc	55 10 307 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:307:0
	pop	rcx
	ret
.Ltmp182:
.Lfunc_end55:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z"
	.globl	"??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z" # -- Begin function ??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z
	.p2align	4, 0x90
"??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z": # @"??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z"
.Lfunc_begin56:
	.cv_func_id 56
	.cv_loc	56 4 617 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:617:0
.seh_proc "??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp183:
	.cv_loc	56 4 618 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:618:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp184:
.Lfunc_end56:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	.globl	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ" # -- Begin function ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ
	.p2align	4, 0x90
"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ": # @"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
.Lfunc_begin57:
	.cv_func_id 57
	.cv_loc	57 4 575 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:575:0
.seh_proc "?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp185:
	.cv_loc	57 4 576 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:576:0
	call	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	add	rax, 8
	add	rsp, 40
	ret
.Ltmp186:
.Lfunc_end57:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	.globl	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # -- Begin function ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
	.p2align	4, 0x90
"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ": # @"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
.Lfunc_begin58:
	.cv_func_id 58
	.cv_loc	58 4 554 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:554:0
.seh_proc "?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp187:
	.cv_loc	58 4 555 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:555:0
	call	"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	nop
	add	rsp, 40
	ret
.Ltmp188:
.Lfunc_end58:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	.globl	"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # -- Begin function ?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
	.p2align	4, 0x90
"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ": # @"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
.Lfunc_begin59:
	.cv_func_id 59
	.cv_loc	59 10 301 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:301:0
.seh_proc "?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rax, qword ptr [rsp]
.Ltmp189:
	.cv_loc	59 10 302 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:302:0
	pop	rcx
	ret
.Ltmp190:
.Lfunc_end59:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.globl	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # -- Begin function ??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z
	.p2align	4, 0x90
"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z": # @"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
.Lfunc_begin60:
	.cv_func_id 60
	.cv_loc	60 2 597 0              # ..\include\gsl/span:597:0
.seh_proc "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 192
	.seh_stackalloc 192
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 56], -2
	mov	qword ptr [rbp + 40], r8
	mov	qword ptr [rbp + 32], rdx
	mov	qword ptr [rbp + 24], rcx
	mov	rcx, qword ptr [rbp + 24]
	mov	qword ptr [rbp + 48], rcx
.Ltmp195:
	mov	rdx, rcx
	mov	r8, qword ptr [rbp + 40]
	mov	qword ptr [rbp - 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, r8
	call	"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	mov	rcx, qword ptr [rbp + 32]
	mov	rdx, qword ptr [rbp - 48] # 8-byte Reload
	mov	qword ptr [rdx + 8], rcx
.Ltmp196:
	.cv_loc	60 2 598 0              # ..\include\gsl/span:598:0
	mov	rcx, rdx
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	r9b
	mov	byte ptr [rbp - 1], 0
	test	r9b, 1
	jne	.LBB60_1
	jmp	.LBB60_2
.LBB60_1:
	test	byte ptr [rbp - 1], 1
	jne	.LBB60_4
	jmp	.LBB60_5
.LBB60_2:
	lea	rdx, [rip + "??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	mov	rax, rbp
	mov	rcx, rax
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 1], 1
.Ltmp191:
	mov	rcx, qword ptr [rbp - 64] # 8-byte Reload
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp192:
	jmp	.LBB60_3
.LBB60_3:
	ud2
.LBB60_4:
	mov	rcx, rbp
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB60_5:
	.cv_loc	60 2 599 0              # ..\include\gsl/span:599:0
	mov	rax, qword ptr [rbp + 32]
	mov	byte ptr [rbp - 33], 0
	cmp	rax, 0
	mov	cl, 1
	mov	byte ptr [rbp - 73], cl # 1-byte Spill
	jne	.LBB60_7
# %bb.6:
	mov	rax, qword ptr [rbp - 48] # 8-byte Reload
	mov	rcx, rax
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rbp - 73], dl # 1-byte Spill
.LBB60_7:
	mov	al, byte ptr [rbp - 73] # 1-byte Reload
	test	al, 1
	jne	.LBB60_8
	jmp	.LBB60_9
.LBB60_8:
	test	byte ptr [rbp - 33], 1
	jne	.LBB60_14
	jmp	.LBB60_15
.LBB60_9:
	lea	rdx, [rip + "??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 32]
	mov	rcx, rax
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 33], 1
.Ltmp193:
	mov	rcx, qword ptr [rbp - 88] # 8-byte Reload
	mov	qword ptr [rbp - 96], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp194:
	jmp	.LBB60_10
.LBB60_10:
	ud2
.LBB60_14:
	lea	rcx, [rbp - 32]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp197:
.LBB60_15:
	.cv_loc	60 2 600 0              # ..\include\gsl/span:600:0
	mov	rax, qword ptr [rbp + 48]
	add	rsp, 192
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.seh_endproc
	.def	 "?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA":
.seh_proc "?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA"
.LBB60_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp198:
	.cv_loc	60 2 598 0              # ..\include\gsl/span:598:0
	test	byte ptr [rbp - 1], 1
	jne	.LBB60_12
	jmp	.LBB60_13
.LBB60_12:
	mov	rcx, rbp
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB60_13:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.seh_endproc
	.def	 "?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA":
.seh_proc "?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA"
.LBB60_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	60 2 599 0              # ..\include\gsl/span:599:0
	test	byte ptr [rbp - 33], 1
	jne	.LBB60_17
	jmp	.LBB60_18
.LBB60_17:
	lea	rcx, [rbp - 32]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB60_18:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp199:
.Lfunc_end60:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.p2align	2
"$cppxdata$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z")@IMGREL # IPToStateXData
	.long	184                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA"@IMGREL # Action
"$ip2state$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z":
	.long	.Lfunc_begin60@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp191@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp192@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp193@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp194@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
                                        # -- End function
	.def	 "??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	.globl	"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z" # -- Begin function ??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z
	.p2align	4, 0x90
"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z": # @"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
.Lfunc_begin61:
	.cv_func_id 61
	.cv_loc	61 2 336 0              # ..\include\gsl/span:336:0
.seh_proc "??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe 5, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 24], rdx
	mov	qword ptr [rbp - 32], rcx
	mov	rcx, qword ptr [rbp - 32]
	mov	qword ptr [rbp - 16], rcx
.Ltmp202:
	mov	rdx, qword ptr [rbp - 24]
	mov	qword ptr [rcx], rdx
.Ltmp203:
	.cv_loc	61 2 336 0              # ..\include\gsl/span:336:0
	cmp	qword ptr [rbp - 24], 0
	setge	al
	mov	byte ptr [rbp - 57], 0
	test	al, 1
	jne	.LBB61_1
	jmp	.LBB61_2
.LBB61_1:
	test	byte ptr [rbp - 57], 1
	jne	.LBB61_4
	jmp	.LBB61_5
.LBB61_2:
	lea	rdx, [rip + "??_C@_0DG@LJIAFOPK@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 56]
	mov	rcx, rax
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 57], 1
.Ltmp200:
	mov	rcx, qword ptr [rbp - 72] # 8-byte Reload
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp201:
	jmp	.LBB61_3
.LBB61_3:
	ud2
.LBB61_4:
	lea	rcx, [rbp - 56]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp204:
.LBB61_5:
	.cv_loc	61 2 336 0              # ..\include\gsl/span:336:0
	mov	rax, qword ptr [rbp - 16]
	add	rsp, 112
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z@4HA":
.seh_proc "?dtor$6@?0???0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z@4HA"
.LBB61_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
.Ltmp205:
	.cv_loc	61 2 336 0              # ..\include\gsl/span:336:0
	test	byte ptr [rbp - 57], 1
	jne	.LBB61_7
	jmp	.LBB61_8
.LBB61_7:
	lea	rcx, [rbp - 56]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB61_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp206:
.Lfunc_end61:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	.p2align	2
"$cppxdata$??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z@4HA"@IMGREL # Action
"$ip2state$??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z":
	.long	.Lfunc_begin61@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp200@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp201@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
                                        # -- End function
	.def	 "?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z"
	.globl	"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z" # -- Begin function ?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z
	.p2align	4, 0x90
"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z": # @"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z"
.Lfunc_begin62:
	.cv_func_id 62
	.cv_loc	62 2 548 0              # ..\include\gsl/span:548:0
.seh_proc "?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
.Ltmp207:
	.cv_loc	62 2 565 0              # ..\include\gsl/span:565:0
	lea	rcx, [rsp + 48]
	#DEBUG_VALUE: CheckRange:idx <- [$rcx+0]
	call	"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
.Ltmp208:
	lea	rcx, [rsp + 56]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	cmp	rcx, rax
	setb	r8b
	and	r8b, 1
	movzx	eax, r8b
	mov	rdx, qword ptr [rsp + 64]
	xor	rdx, rsp
	mov	rcx, rdx
	mov	dword ptr [rsp + 36], eax # 4-byte Spill
	call	__security_check_cookie
	mov	eax, dword ptr [rsp + 36] # 4-byte Reload
	add	rsp, 72
	ret
.Ltmp209:
.Lfunc_end62:
	.seh_handlerdata
	.section	.text,"xr",discard,"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
	.globl	"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z" # -- Begin function ??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z
	.p2align	4, 0x90
"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z": # @"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
.Lfunc_begin63:
	.cv_func_id 63
	.cv_loc	63 9 99 0               # ..\include\gsl/gsl_util:99:0
.seh_proc "??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
.Ltmp210:
	.cv_loc	63 9 100 0              # ..\include\gsl/gsl_util:100:0
	mov	rcx, qword ptr [rsp + 32]
	call	"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
	mov	rax, qword ptr [rax]
	add	rsp, 40
	ret
.Ltmp211:
.Lfunc_end63:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$forward@AEA_J@std@@YAAEA_JAEA_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
	.globl	"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z" # -- Begin function ??$forward@AEA_J@std@@YAAEA_JAEA_J@Z
	.p2align	4, 0x90
"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z": # @"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
.Lfunc_begin64:
	.cv_func_id 64
	.cv_loc	64 6 1573 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1573:0
.seh_proc "??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp212:
	.cv_loc	64 6 1574 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1574:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp213:
.Lfunc_end64:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
	.globl	"??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z" # -- Begin function ??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z
	.p2align	4, 0x90
"??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z": # @"??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
.Lfunc_begin65:
	.cv_func_id 65
	.cv_loc	65 4 455 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:455:0
.seh_proc "??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp214:
	mov	rdx, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z"
	mov	dl, byte ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	r8, rax
	call	"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z"
.Ltmp215:
	.cv_loc	65 4 456 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:456:0
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	"?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
.Ltmp216:
	.cv_loc	65 4 457 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:457:0
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 72
	ret
.Ltmp217:
.Lfunc_end65:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z"
	.globl	"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z" # -- Begin function ??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z
	.p2align	4, 0x90
"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z": # @"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z"
.Lfunc_begin66:
	.cv_func_id 66
	.cv_loc	66 4 704 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:704:0
.seh_proc "??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 96
	.seh_stackalloc 96
	lea	rbp, [rsp + 96]
	.seh_setframe 5, 96
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	byte ptr [rbp - 16], r9b
	mov	qword ptr [rbp - 24], r8
	mov	qword ptr [rbp - 32], rdx
	mov	qword ptr [rbp - 40], rcx
	mov	rcx, qword ptr [rbp - 40]
.Ltmp220:
	.cv_loc	66 4 705 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:705:0
	mov	rdx, qword ptr [rbp - 24]
	mov	r8, qword ptr [rbp - 32]
	mov	qword ptr [rbp - 48], rcx # 8-byte Spill
	mov	rcx, r8
	call	"??$distance@PEBH@std@@YA_JPEBH0@Z"
	mov	rcx, rax
	call	"??$_Convert_size@_K@std@@YA_K_K@Z"
	mov	rcx, qword ptr [rbp - 48] # 8-byte Reload
	mov	rdx, rax
	call	"?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z"
	test	al, 1
	jne	.LBB66_1
	jmp	.LBB66_4
.LBB66_1:
.Ltmp221:
	.cv_loc	66 4 708 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:708:0
	mov	rcx, qword ptr [rbp - 48] # 8-byte Reload
	call	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	r9, qword ptr [rax]
	mov	r8, qword ptr [rbp - 24]
	mov	rdx, qword ptr [rbp - 32]
.Ltmp218:
	mov	rcx, qword ptr [rbp - 48] # 8-byte Reload
	call	"??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z"
.Ltmp219:
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	jmp	.LBB66_3
.LBB66_3:
	mov	rax, qword ptr [rbp - 48] # 8-byte Reload
	mov	rcx, rax
	call	"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	rcx, qword ptr [rbp - 56] # 8-byte Reload
	mov	qword ptr [rax], rcx
.Ltmp222:
.LBB66_4:
	.cv_loc	66 4 714 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:714:0
	add	rsp, 96
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z"
	.seh_endproc
	.def	 "?catch$2@?0???$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$2@?0???$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z@4HA":
.seh_proc "?catch$2@?0???$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z@4HA"
	.seh_handler __CxxFrameHandler3, @unwind, @except
.LBB66_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
	.seh_endprologue
.Ltmp223:
	.cv_loc	66 4 710 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:710:0
	mov	rcx, qword ptr [rbp - 48] # 8-byte Reload
	call	"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ"
	.cv_loc	66 4 711 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:711:0
	mov	rcx, qword ptr [rip + __imp__CxxThrowException]
	xor	eax, eax
	mov	edx, eax
	mov	qword ptr [rbp - 64], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	r8, qword ptr [rbp - 64] # 8-byte Reload
	call	r8
	ud2
.Ltmp224:
.Lfunc_end66:
	.seh_handlerdata
	.long	("$cppxdata$??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z"
	.p2align	2
"$cppxdata$??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z")@IMGREL # UnwindMap
	.long	1                       # NumTryBlocks
	.long	("$tryMap$??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z")@IMGREL # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z")@IMGREL # IPToStateXData
	.long	88                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z":
	.long	-1                      # ToState
	.long	0                       # Action
	.long	-1                      # ToState
	.long	0                       # Action
"$tryMap$??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z":
	.long	0                       # TryLow
	.long	0                       # TryHigh
	.long	1                       # CatchHigh
	.long	1                       # NumCatches
	.long	("$handlerMap$0$??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z")@IMGREL # HandlerArray
"$handlerMap$0$??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z":
	.long	64                      # Adjectives
	.long	0                       # Type
	.long	0                       # CatchObjOffset
	.long	"?catch$2@?0???$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z@4HA"@IMGREL # Handler
	.long	56                      # ParentFrameOffset
"$ip2state$??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z":
	.long	.Lfunc_begin66@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp218@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp219@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	"?catch$2@?0???$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z@4HA"@IMGREL # IP
	.long	1                       # ToState
	.section	.text,"xr",discard,"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z"
                                        # -- End function
	.def	 "?end@?$initializer_list@H@std@@QEBAPEBHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?end@?$initializer_list@H@std@@QEBAPEBHXZ"
	.globl	"?end@?$initializer_list@H@std@@QEBAPEBHXZ" # -- Begin function ?end@?$initializer_list@H@std@@QEBAPEBHXZ
	.p2align	4, 0x90
"?end@?$initializer_list@H@std@@QEBAPEBHXZ": # @"?end@?$initializer_list@H@std@@QEBAPEBHXZ"
.Lfunc_begin67:
	.cv_func_id 67
	.cv_file	11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list" "CCFEDEABD5697F0CB7E0DD8474E0C0CE" 1
	.cv_loc	67 11 46 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\initializer_list:46:0
.seh_proc "?end@?$initializer_list@H@std@@QEBAPEBHXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp225:
	.cv_loc	67 11 47 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\initializer_list:47:0
	mov	rax, qword ptr [rcx + 8]
	pop	rcx
	ret
.Ltmp226:
.Lfunc_end67:
	.seh_handlerdata
	.section	.text,"xr",discard,"?end@?$initializer_list@H@std@@QEBAPEBHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?begin@?$initializer_list@H@std@@QEBAPEBHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?begin@?$initializer_list@H@std@@QEBAPEBHXZ"
	.globl	"?begin@?$initializer_list@H@std@@QEBAPEBHXZ" # -- Begin function ?begin@?$initializer_list@H@std@@QEBAPEBHXZ
	.p2align	4, 0x90
"?begin@?$initializer_list@H@std@@QEBAPEBHXZ": # @"?begin@?$initializer_list@H@std@@QEBAPEBHXZ"
.Lfunc_begin68:
	.cv_func_id 68
	.cv_loc	68 11 41 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\initializer_list:41:0
.seh_proc "?begin@?$initializer_list@H@std@@QEBAPEBHXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp227:
	.cv_loc	68 11 42 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\initializer_list:42:0
	mov	rax, qword ptr [rcx]
	pop	rcx
	ret
.Ltmp228:
.Lfunc_end68:
	.seh_handlerdata
	.section	.text,"xr",discard,"?begin@?$initializer_list@H@std@@QEBAPEBHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
	.globl	"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
	.p2align	4, 0x90
"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ": # @"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
.Lfunc_begin69:
	.cv_func_id 69
	.cv_loc	69 4 460 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:460:0
.seh_proc "??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe 5, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx
	mov	rcx, qword ptr [rbp - 16]
	.cv_loc	69 4 461 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:461:0
.Ltmp229:
.Ltmp231:
	call	"?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
.Ltmp230:
	jmp	.LBB69_1
.Ltmp232:
.LBB69_1:
	.cv_loc	69 4 462 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:462:0
	add	rsp, 48
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ@4HA"
.LBB69_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
.Ltmp233:
	.cv_loc	69 4 461 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:461:0
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp234:
.Lfunc_end69:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
	.p2align	2
"$cppxdata$??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ":
	.long	.Lfunc_begin69@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp229@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp230@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
                                        # -- End function
	.def	 "??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z"
	.globl	"??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z" # -- Begin function ??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z
	.p2align	4, 0x90
"??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z": # @"??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z"
.Lfunc_begin70:
	.cv_func_id 70
	.cv_loc	70 6 1573 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1573:0
.seh_proc "??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp235:
	.cv_loc	70 6 1574 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1574:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp236:
.Lfunc_end70:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z"
	.globl	"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z" # -- Begin function ??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z
	.p2align	4, 0x90
"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z": # @"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z"
.Lfunc_begin71:
	.cv_func_id 71
	.cv_loc	71 10 287 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:287:0
.seh_proc "??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	byte ptr [rsp + 80], dl
	mov	qword ptr [rsp + 72], r8
	mov	qword ptr [rsp + 64], rcx
	mov	rcx, qword ptr [rsp + 64]
.Ltmp237:
	mov	r8, qword ptr [rsp + 72]
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	rcx, r8
	call	"??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z"
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ"
	.cv_loc	71 10 288 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:288:0
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 88
	ret
.Ltmp238:
.Lfunc_end71:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
	.globl	"?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ" # -- Begin function ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ
	.p2align	4, 0x90
"?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ": # @"?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
.Lfunc_begin72:
	.cv_func_id 72
	.cv_loc	72 4 501 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:501:0
.seh_proc "?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 112], rax
	mov	qword ptr [rsp + 80], rcx
	mov	rax, qword ptr [rsp + 80]
.Ltmp239:
	.cv_loc	72 4 502 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:502:0
	mov	rcx, rax
	mov	qword ptr [rsp + 72], rax # 8-byte Spill
	call	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ"
	lea	rcx, [rsp + 104]
	mov	rdx, rax
	call	"??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
	mov	r8d, 1
	mov	edx, r8d
	.cv_loc	72 4 503 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:503:0
	lea	rcx, [rsp + 104]
	mov	qword ptr [rsp + 64], rax # 8-byte Spill
	call	"?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z"
	mov	rcx, rax
	call	"??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z"
	mov	rcx, qword ptr [rsp + 72] # 8-byte Reload
	mov	qword ptr [rsp + 56], rax # 8-byte Spill
	call	"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ"
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rax], rcx
	.cv_loc	72 4 504 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:504:0
	lea	rcx, [rsp + 88]
	call	"??0_Container_proxy@std@@QEAA@XZ"
	mov	rcx, qword ptr [rsp + 72] # 8-byte Reload
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ"
	mov	rdx, qword ptr [rax]
	lea	rcx, [rsp + 104]
	lea	r8, [rsp + 88]
	call	"??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z"
	.cv_loc	72 4 505 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:505:0
	mov	rcx, qword ptr [rsp + 72] # 8-byte Reload
	call	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	mov	rcx, rax
	call	"??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z"
	mov	rcx, qword ptr [rsp + 72] # 8-byte Reload
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ"
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rax], rcx
	mov	rax, qword ptr [rsp + 112]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	.cv_loc	72 4 506 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:506:0
	nop
	add	rsp, 120
	ret
.Ltmp240:
.Lfunc_end72:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ"
	.globl	"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ" # -- Begin function ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ
	.p2align	4, 0x90
"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ": # @"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ"
.Lfunc_begin73:
	.cv_func_id 73
	.cv_loc	73 4 392 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:392:0
.seh_proc "??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp241:
	mov	rax, rcx
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rax
	call	"??0_Container_base12@std@@QEAA@XZ"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rcx + 8], 0
	mov	qword ptr [rcx + 16], 0
	mov	qword ptr [rcx + 24], 0
	.cv_loc	73 4 393 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:393:0
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 56
	ret
.Ltmp242:
.Lfunc_end73:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0_Container_base12@std@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0_Container_base12@std@@QEAA@XZ"
	.globl	"??0_Container_base12@std@@QEAA@XZ" # -- Begin function ??0_Container_base12@std@@QEAA@XZ
	.p2align	4, 0x90
"??0_Container_base12@std@@QEAA@XZ":    # @"??0_Container_base12@std@@QEAA@XZ"
.Lfunc_begin74:
	.cv_func_id 74
	.cv_loc	74 10 81 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:81:0
.seh_proc "??0_Container_base12@std@@QEAA@XZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp243:
	mov	qword ptr [rcx], 0
	.cv_loc	74 10 82 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:82:0
	mov	rax, rcx
	pop	rcx
	ret
.Ltmp244:
.Lfunc_end74:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0_Container_base12@std@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ"
	.globl	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ" # -- Begin function ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ
	.p2align	4, 0x90
"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ": # @"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ"
.Lfunc_begin75:
	.cv_func_id 75
	.cv_loc	75 4 544 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:544:0
.seh_proc "?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp245:
	.cv_loc	75 4 545 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:545:0
	call	"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ"
	nop
	add	rsp, 40
	ret
.Ltmp246:
.Lfunc_end75:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
	.globl	"??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z" # -- Begin function ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z
	.p2align	4, 0x90
"??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z": # @"??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
.Lfunc_begin76:
	.cv_func_id 76
	.cv_loc	76 3 986 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:986:0
.seh_proc "??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
	mov	rax, qword ptr [rsp]
.Ltmp247:
	.cv_loc	76 3 987 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:987:0
	add	rsp, 16
	ret
.Ltmp248:
.Lfunc_end76:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z"
	.globl	"??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z" # -- Begin function ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
	.p2align	4, 0x90
"??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z": # @"??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z"
.Lfunc_begin77:
	.cv_func_id 77
	.cv_file	12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef" "9F14E8187A77026EF6762781B0266A96" 1
	.cv_loc	77 12 345 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstddef:345:0
.seh_proc "??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp249:
	.cv_loc	77 12 346 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstddef:346:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp250:
.Lfunc_end77:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z"
	.globl	"?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z" # -- Begin function ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
	.p2align	4, 0x90
"?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z": # @"?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z"
.Lfunc_begin78:
	.cv_func_id 78
	.cv_loc	78 3 996 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:996:0
.seh_proc "?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp251:
	.cv_loc	78 3 997 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:997:0
	mov	rcx, qword ptr [rsp + 48]
	call	"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z"
	mov	rcx, rax
	call	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z"
	nop
	add	rsp, 56
	ret
.Ltmp252:
.Lfunc_end78:
	.seh_handlerdata
	.section	.text,"xr",discard,"?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ"
	.globl	"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ" # -- Begin function ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ
	.p2align	4, 0x90
"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ": # @"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ"
.Lfunc_begin79:
	.cv_func_id 79
	.cv_loc	79 4 523 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:523:0
.seh_proc "?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp253:
	.cv_loc	79 4 524 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:524:0
	call	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	nop
	add	rsp, 40
	ret
.Ltmp254:
.Lfunc_end79:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z"
	.globl	"??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z" # -- Begin function ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z
	.p2align	4, 0x90
"??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z": # @"??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z"
.Lfunc_begin80:
	.cv_func_id 80
	.cv_loc	80 3 879 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:879:0
.seh_proc "??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], r8
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
.Ltmp255:
	.cv_loc	80 3 880 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:880:0
	mov	rcx, qword ptr [rsp + 56]
	mov	rdx, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z"
	mov	rcx, qword ptr [rax]
	mov	rdx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	rax, qword ptr [rax + 8]
	mov	qword ptr [rdx + 8], rax
	.cv_loc	80 3 882 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:882:0
	add	rsp, 72
	ret
.Ltmp256:
.Lfunc_end80:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0_Container_proxy@std@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0_Container_proxy@std@@QEAA@XZ"
	.globl	"??0_Container_proxy@std@@QEAA@XZ" # -- Begin function ??0_Container_proxy@std@@QEAA@XZ
	.p2align	4, 0x90
"??0_Container_proxy@std@@QEAA@XZ":     # @"??0_Container_proxy@std@@QEAA@XZ"
.Lfunc_begin81:
	.cv_func_id 81
	.cv_loc	81 10 69 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:69:0
.seh_proc "??0_Container_proxy@std@@QEAA@XZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp257:
	mov	qword ptr [rcx], 0
	mov	qword ptr [rcx + 8], 0
	.cv_loc	81 10 70 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:70:0
	mov	rax, rcx
	pop	rcx
	ret
.Ltmp258:
.Lfunc_end81:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0_Container_proxy@std@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z"
	.globl	"??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z" # -- Begin function ??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z
	.p2align	4, 0x90
"??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z": # @"??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z"
.Lfunc_begin82:
	.cv_func_id 82
	.cv_loc	82 12 329 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstddef:329:0
.seh_proc "??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp259:
	.cv_loc	82 12 330 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstddef:330:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp260:
.Lfunc_end82:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ"
	.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ
	.p2align	4, 0x90
"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ"
.Lfunc_begin83:
	.cv_func_id 83
	.cv_loc	83 10 291 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:291:0
.seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp261:
	.cv_loc	83 10 292 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:292:0
	mov	rax, rcx
	pop	rcx
	ret
.Ltmp262:
.Lfunc_end83:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z"
	.globl	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z" # -- Begin function ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
	.p2align	4, 0x90
"??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z": # @"??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z"
.Lfunc_begin84:
	.cv_func_id 84
	.cv_loc	84 3 180 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:180:0
.seh_proc "??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 40], rcx
.Ltmp263:
	.cv_loc	84 3 182 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:182:0
	cmp	qword ptr [rsp + 40], 4096
	jb	.LBB84_2
# %bb.1:
.Ltmp264:
	.cv_loc	84 3 184 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:184:0
	mov	rcx, qword ptr [rsp + 40]
	call	"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
	mov	qword ptr [rsp + 48], rax
	jmp	.LBB84_5
.Ltmp265:
.LBB84_2:
	.cv_loc	84 3 188 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:188:0
	cmp	qword ptr [rsp + 40], 0
	je	.LBB84_4
# %bb.3:
.Ltmp266:
	.cv_loc	84 3 190 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:190:0
	mov	rcx, qword ptr [rsp + 40]
	call	"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z"
	mov	qword ptr [rsp + 48], rax
	jmp	.LBB84_5
.Ltmp267:
.LBB84_4:
	.cv_loc	84 3 193 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:193:0
	mov	qword ptr [rsp + 48], 0
.LBB84_5:
	.cv_loc	84 3 194 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:194:0
	mov	rax, qword ptr [rsp + 48]
	add	rsp, 56
	ret
.Ltmp268:
.Lfunc_end84:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z"
	.globl	"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z" # -- Begin function ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
	.p2align	4, 0x90
"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z": # @"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z"
.Lfunc_begin85:
	.cv_func_id 85
	.cv_loc	85 3 23 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:23:0
.seh_proc "??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	qword ptr [rsp + 16], rcx
.Ltmp269:
	.cv_loc	85 3 24 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:24:0
	movabs	rcx, 1152921504606846975
	mov	qword ptr [rsp + 8], rcx
	.cv_loc	85 3 25 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:25:0
	mov	rax, qword ptr [rsp + 16]
	shl	rax, 4
	mov	qword ptr [rsp], rax
	.cv_loc	85 3 26 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:26:0
	cmp	rcx, qword ptr [rsp + 16]
	jae	.LBB85_2
# %bb.1:
.Ltmp270:
	.cv_loc	85 3 29 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:29:0
	mov	qword ptr [rsp], -1
.Ltmp271:
.LBB85_2:
	.cv_loc	85 3 32 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:32:0
	mov	rax, qword ptr [rsp]
	add	rsp, 24
	ret
.Ltmp272:
.Lfunc_end85:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
	.globl	"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" # -- Begin function ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
	.p2align	4, 0x90
"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z": # @"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
.Lfunc_begin86:
	.cv_func_id 86
	.cv_loc	86 3 92 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:92:0
.seh_proc "??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	qword ptr [rsp + 80], rcx
.Ltmp273:
	.cv_loc	86 3 93 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:93:0
	mov	rcx, qword ptr [rsp + 80]
	add	rcx, 47
	mov	qword ptr [rsp + 72], rcx
	.cv_loc	86 3 94 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:94:0
	mov	rcx, qword ptr [rsp + 72]
	cmp	rcx, qword ptr [rsp + 80]
	ja	.LBB86_2
# %bb.1:
.Ltmp274:
	.cv_loc	86 3 97 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:97:0
	mov	qword ptr [rsp + 72], -1
.Ltmp275:
.LBB86_2:
	.cv_loc	86 3 100 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:100:0
	mov	rcx, qword ptr [rsp + 72]
	call	"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z"
	mov	qword ptr [rsp + 64], rax
# %bb.3:
.Ltmp276:
	.cv_loc	86 3 101 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:101:0
	cmp	qword ptr [rsp + 64], 0
	je	.LBB86_5
# %bb.4:
.Ltmp277:
	.cv_loc	86 3 101 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:101:0
	jmp	.LBB86_10
.Ltmp278:
.LBB86_5:
	.cv_loc	86 3 101 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:101:0
	jmp	.LBB86_6
.LBB86_6:
.Ltmp279:
	.cv_loc	86 3 101 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:101:0
	lea	rax, [rip + "??_C@_0BB@FCMFBGOM@invalid?5argument?$AA@"]
	mov	rcx, rsp
	mov	qword ptr [rcx + 40], rax
	lea	rax, [rip + "??_C@_02DKCKIIND@?$CFs?$AA@"]
	mov	qword ptr [rcx + 32], rax
	lea	rdx, [rip + "??_C@_0GJ@MAEDLLFA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@"]
	mov	rax, qword ptr [rip + __imp__CrtDbgReport]
	xor	r8d, r8d
	mov	r9d, r8d
	mov	ecx, 2
	mov	r8d, 101
	call	rax
	mov	ecx, 1
	cmp	ecx, eax
	jne	.LBB86_8
# %bb.7:
	int3
.LBB86_8:
	xor	eax, eax
	mov	ecx, eax
	lea	rdx, [rip + "??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@"]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	lea	rdx, [rip + "??_C@_1EE@NLJGENNL@?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe@"]
	lea	r8, [rip + "??_C@_1NC@LMCNBOC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@"]
	mov	r9d, 101
	mov	qword ptr [rsp + 32], 0
	call	qword ptr [rip + __imp__invalid_parameter]
.Ltmp280:
# %bb.9:
	.cv_loc	86 3 101 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:101:0
	jmp	.LBB86_10
.Ltmp281:
.LBB86_10:
	.cv_loc	86 3 101 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:101:0
	jmp	.LBB86_11
.Ltmp282:
.LBB86_11:
	.cv_loc	86 3 102 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:102:0
	mov	rax, qword ptr [rsp + 64]
	add	rax, 47
	and	rax, -32
	mov	qword ptr [rsp + 56], rax
	.cv_loc	86 3 104 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:104:0
	mov	rax, qword ptr [rsp + 64]
	mov	rcx, qword ptr [rsp + 56]
	mov	qword ptr [rcx - 8], rax
	.cv_loc	86 3 107 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:107:0
	mov	rax, qword ptr [rsp + 56]
	movabs	rcx, -361700864190383366
	mov	qword ptr [rax - 16], rcx
	.cv_loc	86 3 109 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:109:0
	mov	rax, qword ptr [rsp + 56]
	add	rsp, 88
	ret
.Ltmp283:
.Lfunc_end86:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z"
	.globl	"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z" # -- Begin function ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
	.p2align	4, 0x90
"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z": # @"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z"
.Lfunc_begin87:
	.cv_func_id 87
	.cv_loc	87 3 51 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:51:0
.seh_proc "?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
.Ltmp284:
	.cv_loc	87 3 52 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:52:0
	mov	rcx, qword ptr [rsp + 32]
	call	"??2@YAPEAX_K@Z"
	nop
	add	rsp, 40
	ret
.Ltmp285:
.Lfunc_end87:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z"
	.globl	"??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z" # -- Begin function ??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z
	.p2align	4, 0x90
"??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z": # @"??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z"
.Lfunc_begin88:
	.cv_func_id 88
	.cv_loc	88 6 1573 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1573:0
.seh_proc "??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp286:
	.cv_loc	88 6 1574 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1574:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp287:
.Lfunc_end88:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z"
	.globl	"?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z" # -- Begin function ?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z
	.p2align	4, 0x90
"?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z": # @"?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z"
.Lfunc_begin89:
	.cv_func_id 89
	.cv_loc	89 4 1872 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1872:0
.seh_proc "?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z"
# %bb.0:
	sub	rsp, 104
	.seh_stackalloc 104
	.seh_endprologue
	mov	qword ptr [rsp + 88], rdx
	mov	qword ptr [rsp + 80], rcx
	mov	rcx, qword ptr [rsp + 80]
.Ltmp288:
	.cv_loc	89 4 1873 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1873:0
	mov	rdx, rcx
	mov	qword ptr [rsp + 72], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	qword ptr [rax], 0
	.cv_loc	89 4 1874 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1874:0
	mov	rax, qword ptr [rsp + 72] # 8-byte Reload
	mov	rcx, rax
	call	"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	qword ptr [rax], 0
	.cv_loc	89 4 1875 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1875:0
	mov	rax, qword ptr [rsp + 72] # 8-byte Reload
	mov	rcx, rax
	call	"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	qword ptr [rax], 0
	.cv_loc	89 4 1877 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1877:0
	cmp	qword ptr [rsp + 88], 0
	jne	.LBB89_2
# %bb.1:
.Ltmp289:
	.cv_loc	89 4 1879 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1879:0
	mov	byte ptr [rsp + 103], 0
	jmp	.LBB89_5
.Ltmp290:
.LBB89_2:
	.cv_loc	89 4 1882 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1882:0
	mov	rax, qword ptr [rsp + 88]
	mov	rcx, qword ptr [rsp + 72] # 8-byte Reload
	mov	qword ptr [rsp + 64], rax # 8-byte Spill
	call	"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
	mov	rcx, qword ptr [rsp + 64] # 8-byte Reload
	cmp	rcx, rax
	jbe	.LBB89_4
# %bb.3:
.Ltmp291:
	.cv_loc	89 4 1884 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1884:0
	call	"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ"
	ud2
.Ltmp292:
.LBB89_4:
	.cv_loc	89 4 1887 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1887:0
	mov	rax, qword ptr [rsp + 72] # 8-byte Reload
	mov	rcx, rax
	call	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ"
	mov	rdx, qword ptr [rsp + 88]
	mov	rcx, rax
	call	"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z"
	mov	rcx, qword ptr [rsp + 72] # 8-byte Reload
	mov	qword ptr [rsp + 56], rax # 8-byte Spill
	call	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rax], rcx
	.cv_loc	89 4 1888 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1888:0
	mov	rax, qword ptr [rsp + 72] # 8-byte Reload
	mov	rcx, rax
	call	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rsp + 72] # 8-byte Reload
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rax], rcx
	.cv_loc	89 4 1889 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1889:0
	mov	rax, qword ptr [rsp + 72] # 8-byte Reload
	mov	rcx, rax
	call	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rsp + 88]
	shl	rcx, 2
	add	rax, rcx
	mov	rcx, qword ptr [rsp + 72] # 8-byte Reload
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rax], rcx
	.cv_loc	89 4 1891 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1891:0
	mov	byte ptr [rsp + 103], 1
.LBB89_5:
	.cv_loc	89 4 1892 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1892:0
	mov	al, byte ptr [rsp + 103]
	and	al, 1
	movzx	eax, al
	add	rsp, 104
	ret
.Ltmp293:
.Lfunc_end89:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Convert_size@_K@std@@YA_K_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Convert_size@_K@std@@YA_K_K@Z"
	.globl	"??$_Convert_size@_K@std@@YA_K_K@Z" # -- Begin function ??$_Convert_size@_K@std@@YA_K_K@Z
	.p2align	4, 0x90
"??$_Convert_size@_K@std@@YA_K_K@Z":    # @"??$_Convert_size@_K@std@@YA_K_K@Z"
.Lfunc_begin90:
	.cv_func_id 90
	.cv_loc	90 3 1203 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:1203:0
.seh_proc "??$_Convert_size@_K@std@@YA_K_K@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp294:
	.cv_loc	90 3 1204 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:1204:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp295:
.Lfunc_end90:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Convert_size@_K@std@@YA_K_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$distance@PEBH@std@@YA_JPEBH0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$distance@PEBH@std@@YA_JPEBH0@Z"
	.globl	"??$distance@PEBH@std@@YA_JPEBH0@Z" # -- Begin function ??$distance@PEBH@std@@YA_JPEBH0@Z
	.p2align	4, 0x90
"??$distance@PEBH@std@@YA_JPEBH0@Z":    # @"??$distance@PEBH@std@@YA_JPEBH0@Z"
.Lfunc_begin91:
	.cv_func_id 91
	.cv_loc	91 10 1240 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:1240:0
.seh_proc "??$distance@PEBH@std@@YA_JPEBH0@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp296:
	.cv_loc	91 10 1241 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:1241:0
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40]
	mov	r8b, byte ptr [rsp + 32]
	call	"??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z"
	nop
	add	rsp, 56
	ret
.Ltmp297:
.Lfunc_end91:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$distance@PEBH@std@@YA_JPEBH0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z"
	.globl	"??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z" # -- Begin function ??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z
	.p2align	4, 0x90
"??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z": # @"??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z"
.Lfunc_begin92:
	.cv_func_id 92
	.cv_loc	92 4 1822 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1822:0
.seh_proc "??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], r9
	mov	qword ptr [rsp + 56], r8
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
	mov	rcx, qword ptr [rsp + 40]
.Ltmp298:
	.cv_loc	92 4 1823 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1823:0
	call	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ"
	mov	r8, qword ptr [rsp + 64]
	mov	rdx, qword ptr [rsp + 56]
	mov	rcx, qword ptr [rsp + 48]
	mov	r9, rax
	call	"??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z"
	nop
	add	rsp, 72
	ret
.Ltmp299:
.Lfunc_end92:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	.globl	"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ" # -- Begin function ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ
	.p2align	4, 0x90
"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ": # @"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
.Lfunc_begin93:
	.cv_func_id 93
	.cv_loc	93 4 585 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:585:0
.seh_proc "?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp300:
	.cv_loc	93 4 586 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:586:0
	call	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	add	rax, 16
	add	rsp, 40
	ret
.Ltmp301:
.Lfunc_end93:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ"
	.globl	"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ" # -- Begin function ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
	.p2align	4, 0x90
"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ": # @"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ"
.Lfunc_begin94:
	.cv_func_id 94
	.cv_loc	94 4 1910 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1910:0
.seh_proc "?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rcx
	mov	rcx, qword ptr [rsp + 64]
.Ltmp302:
	.cv_loc	94 4 1911 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1911:0
	mov	rax, rcx
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	rcx, rax
	call	"?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
	.cv_loc	94 4 1913 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1913:0
	mov	rax, qword ptr [rsp + 56] # 8-byte Reload
	mov	rcx, rax
	call	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	cmp	qword ptr [rax], 0
	je	.LBB94_2
# %bb.1:
.Ltmp303:
	.cv_loc	94 4 1915 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1915:0
	mov	rax, qword ptr [rsp + 56] # 8-byte Reload
	mov	rcx, rax
	call	"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	r8, qword ptr [rax]
	mov	rax, qword ptr [rsp + 56] # 8-byte Reload
	mov	rcx, rax
	mov	qword ptr [rsp + 48], r8 # 8-byte Spill
	call	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	rdx, qword ptr [rax]
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	mov	r8, qword ptr [rsp + 48] # 8-byte Reload
	call	"?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z"
	.cv_loc	94 4 1916 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1916:0
	mov	rax, qword ptr [rsp + 56] # 8-byte Reload
	mov	rcx, rax
	call	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ"
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	rdx, qword ptr [rax]
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	r8, qword ptr [rsp + 32] # 8-byte Reload
	call	"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z"
	.cv_loc	94 4 1918 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1918:0
	mov	rax, qword ptr [rsp + 56] # 8-byte Reload
	mov	rcx, rax
	call	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	qword ptr [rax], 0
	.cv_loc	94 4 1919 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1919:0
	mov	rax, qword ptr [rsp + 56] # 8-byte Reload
	mov	rcx, rax
	call	"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	qword ptr [rax], 0
	.cv_loc	94 4 1920 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1920:0
	mov	rax, qword ptr [rsp + 56] # 8-byte Reload
	mov	rcx, rax
	call	"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	mov	qword ptr [rax], 0
.Ltmp304:
.LBB94_2:
	.cv_loc	94 4 1922 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1922:0
	add	rsp, 72
	ret
.Ltmp305:
.Lfunc_end94:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	.globl	"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ" # -- Begin function ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ
	.p2align	4, 0x90
"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ": # @"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
.Lfunc_begin95:
	.cv_func_id 95
	.cv_loc	95 4 595 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:595:0
.seh_proc "?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp306:
	.cv_loc	95 4 596 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:596:0
	call	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	add	rax, 24
	add	rsp, 40
	ret
.Ltmp307:
.Lfunc_end95:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
	.globl	"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # -- Begin function ?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
	.p2align	4, 0x90
"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ": # @"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
.Lfunc_begin96:
	.cv_func_id 96
	.cv_loc	96 4 1708 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1708:0
.seh_proc "?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	qword ptr [rsp + 40], rcx
	mov	rax, qword ptr [rsp + 40]
.Ltmp308:
	.cv_loc	96 4 1709 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1709:0
	mov	rcx, rax
	call	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ"
	mov	rcx, rax
	call	"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z"
	mov	qword ptr [rsp + 56], rax
	call	"?max@?$numeric_limits@_J@std@@SA_JXZ"
	mov	qword ptr [rsp + 48], rax
	lea	rcx, [rsp + 48]
	lea	rdx, [rsp + 56]
	call	"??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z"
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rsp + 64]
	xor	rcx, rsp
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 32] # 8-byte Reload
	add	rsp, 72
	ret
.Ltmp309:
.Lfunc_end96:
	.seh_handlerdata
	.section	.text,"xr",discard,"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ"
	.globl	"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ" # -- Begin function ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
	.p2align	4, 0x90
"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ": # @"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ"
.Lfunc_begin97:
	.cv_func_id 97
	.cv_loc	97 4 1925 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1925:0
.seh_proc "?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
.Ltmp310:
	.cv_loc	97 4 1926 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1926:0
	lea	rcx, [rip + "??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@"]
	call	"?_Xlength_error@std@@YAXPEBD@Z"
	ud2
.Ltmp311:
.Lfunc_end97:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?allocate@?$allocator@H@std@@QEAAPEAH_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z"
	.globl	"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z" # -- Begin function ?allocate@?$allocator@H@std@@QEAAPEAH_K@Z
	.p2align	4, 0x90
"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z": # @"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z"
.Lfunc_begin98:
	.cv_func_id 98
	.cv_loc	98 3 996 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:996:0
.seh_proc "?allocate@?$allocator@H@std@@QEAAPEAH_K@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp312:
	.cv_loc	98 3 997 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:997:0
	mov	rcx, qword ptr [rsp + 48]
	call	"??$_Get_size_of_n@$03@std@@YA_K_K@Z"
	mov	rcx, rax
	call	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z"
	nop
	add	rsp, 56
	ret
.Ltmp313:
.Lfunc_end98:
	.seh_handlerdata
	.section	.text,"xr",discard,"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z"
	.globl	"??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z" # -- Begin function ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z
	.p2align	4, 0x90
"??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z": # @"??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z"
.Lfunc_begin99:
	.cv_func_id 99
	.cv_file	13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility" "6DCFB0D398453B2C01F756F21EBE97AD" 1
	.cv_loc	99 13 23 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\utility:23:0
.seh_proc "??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	qword ptr [rsp + 16], rdx
	mov	qword ptr [rsp + 8], rcx
.Ltmp314:
	.cv_loc	99 13 24 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\utility:24:0
	mov	rcx, qword ptr [rsp + 16]
	mov	rcx, qword ptr [rcx]
	mov	rdx, qword ptr [rsp + 8]
	cmp	rcx, qword ptr [rdx]
	jae	.LBB99_2
# %bb.1:
	mov	rax, qword ptr [rsp + 16]
	mov	qword ptr [rsp], rax    # 8-byte Spill
	jmp	.LBB99_3
.LBB99_2:
	mov	rax, qword ptr [rsp + 8]
	mov	qword ptr [rsp], rax    # 8-byte Spill
.LBB99_3:
	mov	rax, qword ptr [rsp]    # 8-byte Reload
	add	rsp, 24
	ret
.Ltmp315:
.Lfunc_end99:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z"
	.globl	"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z" # -- Begin function ?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z
	.p2align	4, 0x90
"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z": # @"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z"
.Lfunc_begin100:
	.cv_func_id 100
	.cv_loc	100 3 891 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:891:0
.seh_proc "?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp316:
	.cv_loc	100 3 892 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:892:0
	movabs	rax, 4611686018427387903
	pop	rcx
	ret
.Ltmp317:
.Lfunc_end100:
	.seh_handlerdata
	.section	.text,"xr",discard,"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ"
	.globl	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ" # -- Begin function ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ
	.p2align	4, 0x90
"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ": # @"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ"
.Lfunc_begin101:
	.cv_func_id 101
	.cv_loc	101 4 549 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:549:0
.seh_proc "?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp318:
	.cv_loc	101 4 550 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:550:0
	call	"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ"
	nop
	add	rsp, 40
	ret
.Ltmp319:
.Lfunc_end101:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?max@?$numeric_limits@_J@std@@SA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?max@?$numeric_limits@_J@std@@SA_JXZ"
	.globl	"?max@?$numeric_limits@_J@std@@SA_JXZ" # -- Begin function ?max@?$numeric_limits@_J@std@@SA_JXZ
	.p2align	4, 0x90
"?max@?$numeric_limits@_J@std@@SA_JXZ": # @"?max@?$numeric_limits@_J@std@@SA_JXZ"
.Lfunc_begin102:
	.cv_func_id 102
# %bb.0:
	.cv_file	14 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits" "A85F6C29B0D4BF37FA72F4E1E598AB5F" 1
	.cv_loc	102 14 894 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\limits:894:0
	movabs	rax, 9223372036854775807
	ret
.Ltmp320:
.Lfunc_end102:
                                        # -- End function
	.def	 "?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ"
	.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ
	.p2align	4, 0x90
"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ"
.Lfunc_begin103:
	.cv_func_id 103
	.cv_loc	103 10 296 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:296:0
.seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp321:
	.cv_loc	103 10 297 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:297:0
	mov	rax, rcx
	pop	rcx
	ret
.Ltmp322:
.Lfunc_end103:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Get_size_of_n@$03@std@@YA_K_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Get_size_of_n@$03@std@@YA_K_K@Z"
	.globl	"??$_Get_size_of_n@$03@std@@YA_K_K@Z" # -- Begin function ??$_Get_size_of_n@$03@std@@YA_K_K@Z
	.p2align	4, 0x90
"??$_Get_size_of_n@$03@std@@YA_K_K@Z":  # @"??$_Get_size_of_n@$03@std@@YA_K_K@Z"
.Lfunc_begin104:
	.cv_func_id 104
	.cv_loc	104 3 23 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:23:0
.seh_proc "??$_Get_size_of_n@$03@std@@YA_K_K@Z"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	qword ptr [rsp + 16], rcx
.Ltmp323:
	.cv_loc	104 3 24 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:24:0
	movabs	rcx, 4611686018427387903
	mov	qword ptr [rsp + 8], rcx
	.cv_loc	104 3 25 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:25:0
	mov	rax, qword ptr [rsp + 16]
	shl	rax, 2
	mov	qword ptr [rsp], rax
	.cv_loc	104 3 26 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:26:0
	cmp	rcx, qword ptr [rsp + 16]
	jae	.LBB104_2
# %bb.1:
.Ltmp324:
	.cv_loc	104 3 29 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:29:0
	mov	qword ptr [rsp], -1
.Ltmp325:
.LBB104_2:
	.cv_loc	104 3 32 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:32:0
	mov	rax, qword ptr [rsp]
	add	rsp, 24
	ret
.Ltmp326:
.Lfunc_end104:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Get_size_of_n@$03@std@@YA_K_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z"
	.globl	"??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z" # -- Begin function ??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z
	.p2align	4, 0x90
"??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z": # @"??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z"
.Lfunc_begin105:
	.cv_func_id 105
	.cv_loc	105 10 1234 0           # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:1234:0
.seh_proc "??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	byte ptr [rsp + 16], r8b
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp327:
	.cv_loc	105 10 1235 0           # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:1235:0
	mov	rcx, qword ptr [rsp + 8]
	mov	rdx, qword ptr [rsp]
	sub	rcx, rdx
	sar	rcx, 2
	mov	rax, rcx
	add	rsp, 24
	ret
.Ltmp328:
.Lfunc_end105:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z"
	.globl	"??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z" # -- Begin function ??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z
	.p2align	4, 0x90
"??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z": # @"??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z"
.Lfunc_begin106:
	.cv_func_id 106
	.cv_file	15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory" "845C7EE7A72CC1DC0D3D28310F1C2156" 1
	.cv_loc	106 15 209 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory:209:0
.seh_proc "??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z"
# %bb.0:
	sub	rsp, 136
	.seh_stackalloc 136
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 128], rax
	mov	qword ptr [rsp + 80], r9
	mov	qword ptr [rsp + 120], r8
	mov	qword ptr [rsp + 72], rdx
	mov	qword ptr [rsp + 64], rcx
.Ltmp329:
	.cv_loc	106 15 211 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory:211:0
	mov	rcx, qword ptr [rsp + 64]
	call	"??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z"
	mov	qword ptr [rsp + 112], rax
	.cv_loc	106 15 212 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory:212:0
	mov	rcx, qword ptr [rsp + 72]
	call	"??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z"
	mov	qword ptr [rsp + 104], rax
	.cv_loc	106 15 213 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory:213:0
	lea	rcx, [rsp + 112]
	lea	rdx, [rsp + 104]
	call	"??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z"
	mov	rcx, qword ptr [rsp + 120]
	mov	rdx, rax
	call	"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
	mov	qword ptr [rsp + 96], rax
	.cv_loc	106 15 214 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory:214:0
	lea	rcx, [rsp + 88]
	lea	rdx, [rsp + 112]
	lea	r8, [rsp + 96]
	call	"??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z"
	mov	r9, qword ptr [rsp + 80]
	mov	r8, qword ptr [rsp + 96]
	mov	rdx, qword ptr [rsp + 104]
	mov	rcx, qword ptr [rsp + 112]
	mov	r10b, byte ptr [rsp + 88]
	mov	r11b, byte ptr [rsp + 56]
	mov	byte ptr [rsp + 32], r10b
	mov	byte ptr [rsp + 40], r11b
	call	"??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z"
	lea	rcx, [rsp + 120]
	mov	rdx, rax
	call	"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z"
	.cv_loc	106 15 219 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory:219:0
	mov	rax, qword ptr [rsp + 120]
	mov	rcx, qword ptr [rsp + 128]
	xor	rcx, rsp
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 48] # 8-byte Reload
	add	rsp, 136
	ret
.Ltmp330:
.Lfunc_end106:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z"
	.globl	"??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z" # -- Begin function ??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z
	.p2align	4, 0x90
"??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z": # @"??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z"
.Lfunc_begin107:
	.cv_func_id 107
	.cv_loc	107 10 662 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:662:0
.seh_proc "??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp331:
	.cv_loc	107 10 663 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:663:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp332:
.Lfunc_end107:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
	.globl	"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z" # -- Begin function ??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z
	.p2align	4, 0x90
"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z": # @"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
.Lfunc_begin108:
	.cv_func_id 108
	.cv_loc	108 10 808 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:808:0
.seh_proc "??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp333:
	.cv_loc	108 10 809 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:809:0
	mov	rax, qword ptr [rsp]
	add	rsp, 16
	ret
.Ltmp334:
.Lfunc_end108:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z"
	.globl	"??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z" # -- Begin function ??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z
	.p2align	4, 0x90
"??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z": # @"??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z"
.Lfunc_begin109:
	.cv_func_id 109
	.cv_loc	109 10 944 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:944:0
.seh_proc "??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp335:
	.cv_loc	109 10 947 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:947:0
	mov	rcx, qword ptr [rsp + 8]
	mov	rcx, qword ptr [rcx]
	mov	rdx, qword ptr [rsp]
	mov	rdx, qword ptr [rdx]
	sub	rcx, rdx
	sar	rcx, 2
	mov	rax, rcx
	add	rsp, 16
	ret
.Ltmp336:
.Lfunc_end109:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z"
	.globl	"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z" # -- Begin function ??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z
	.p2align	4, 0x90
"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z": # @"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z"
.Lfunc_begin110:
	.cv_func_id 110
	.cv_loc	110 10 871 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:871:0
.seh_proc "??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp337:
	.cv_loc	110 10 872 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:872:0
	mov	rcx, qword ptr [rsp + 8]
	mov	rdx, qword ptr [rsp]
	mov	qword ptr [rdx], rcx
	.cv_loc	110 10 873 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:873:0
	add	rsp, 16
	ret
.Ltmp338:
.Lfunc_end110:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z"
	.globl	"??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z" # -- Begin function ??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
	.p2align	4, 0x90
"??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z": # @"??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z"
.Lfunc_begin111:
	.cv_func_id 111
	.cv_loc	111 15 201 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory:201:0
.seh_proc "??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	al, byte ptr [rsp + 136]
	mov	r10b, byte ptr [rsp + 128]
	mov	byte ptr [rsp + 80], r10b
	mov	byte ptr [rsp + 72], al
	mov	qword ptr [rsp + 64], r9
	mov	qword ptr [rsp + 56], r8
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp339:
	.cv_loc	111 15 202 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory:202:0
	mov	r8, qword ptr [rsp + 56]
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40]
	call	"??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z"
	nop
	add	rsp, 88
	ret
.Ltmp340:
.Lfunc_end111:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z"
	.globl	"??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z" # -- Begin function ??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z
	.p2align	4, 0x90
"??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z": # @"??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z"
.Lfunc_begin112:
	.cv_func_id 112
	.cv_loc	112 10 1069 0           # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:1069:0
.seh_proc "??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	rax, rcx
	mov	qword ptr [rsp + 16], r8
	mov	qword ptr [rsp + 8], rdx
.Ltmp341:
	.cv_loc	112 10 1070 0           # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:1070:0
	mov	qword ptr [rsp], rcx    # 8-byte Spill
	add	rsp, 24
	ret
.Ltmp342:
.Lfunc_end112:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z"
	.globl	"??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z" # -- Begin function ??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z
	.p2align	4, 0x90
"??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z": # @"??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z"
.Lfunc_begin113:
	.cv_func_id 113
	.cv_loc	113 10 2398 0           # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2398:0
.seh_proc "??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z"
# %bb.0:
	sub	rsp, 104
	.seh_stackalloc 104
	.seh_endprologue
	mov	qword ptr [rsp + 96], r8
	mov	qword ptr [rsp + 88], rdx
	mov	qword ptr [rsp + 80], rcx
.Ltmp343:
	.cv_loc	113 10 2399 0           # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2399:0
	mov	rcx, qword ptr [rsp + 80]
	mov	qword ptr [rsp + 72], rcx
	.cv_loc	113 10 2400 0           # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2400:0
	mov	rcx, qword ptr [rsp + 88]
	mov	qword ptr [rsp + 64], rcx
	.cv_loc	113 10 2401 0           # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2401:0
	mov	rcx, qword ptr [rsp + 96]
	mov	qword ptr [rsp + 56], rcx
	.cv_loc	113 10 2402 0           # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2402:0
	mov	rcx, qword ptr [rsp + 64]
	mov	rdx, qword ptr [rsp + 72]
	sub	rcx, rdx
	mov	qword ptr [rsp + 48], rcx
	.cv_loc	113 10 2403 0           # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2403:0
	mov	rcx, qword ptr [rsp + 56]
	mov	rdx, qword ptr [rsp + 72]
	mov	r8, qword ptr [rsp + 48]
	call	memmove
	.cv_loc	113 10 2404 0           # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2404:0
	mov	rcx, qword ptr [rsp + 56]
	add	rcx, qword ptr [rsp + 48]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 104
	ret
.Ltmp344:
.Lfunc_end113:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
	.globl	"?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ" # -- Begin function ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ
	.p2align	4, 0x90
"?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ": # @"?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
.Lfunc_begin114:
	.cv_func_id 114
	.cv_loc	114 4 534 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:534:0
.seh_proc "?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp345:
	.cv_loc	114 4 535 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:535:0
	call	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	mov	rcx, rax
	call	"?_Orphan_all@_Container_base12@std@@QEAAXXZ"
	.cv_loc	114 4 536 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:536:0
	nop
	add	rsp, 40
	ret
.Ltmp346:
.Lfunc_end114:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z"
	.globl	"?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z" # -- Begin function ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z
	.p2align	4, 0x90
"?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z": # @"?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z"
.Lfunc_begin115:
	.cv_func_id 115
	.cv_loc	115 4 1848 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1848:0
.seh_proc "?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], r8
	mov	qword ptr [rsp + 40], rdx
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp347:
	.cv_loc	115 4 1849 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1849:0
	call	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ"
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40]
	mov	r8, rax
	call	"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z"
	.cv_loc	115 4 1850 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1850:0
	nop
	add	rsp, 56
	ret
.Ltmp348:
.Lfunc_end115:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z"
	.globl	"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z" # -- Begin function ?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z
	.p2align	4, 0x90
"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z": # @"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z"
.Lfunc_begin116:
	.cv_func_id 116
	.cv_loc	116 3 990 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:990:0
.seh_proc "?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], r8
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
.Ltmp349:
	.cv_loc	116 3 992 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:992:0
	mov	rcx, qword ptr [rsp + 64]
	shl	rcx, 2
	mov	rdx, qword ptr [rsp + 56]
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, qword ptr [rsp + 40] # 8-byte Reload
	call	"??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z"
	.cv_loc	116 3 993 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:993:0
	nop
	add	rsp, 72
	ret
.Ltmp350:
.Lfunc_end116:
	.seh_handlerdata
	.section	.text,"xr",discard,"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
	.globl	"?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # -- Begin function ?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
	.p2align	4, 0x90
"?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ": # @"?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
.Lfunc_begin117:
	.cv_func_id 117
	.cv_loc	117 4 1714 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1714:0
.seh_proc "?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp351:
	.cv_loc	117 4 1715 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:1715:0
	mov	rax, rcx
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rax
	call	"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rsp + 32] # 8-byte Reload
	sub	rcx, rax
	sar	rcx, 2
	mov	rax, rcx
	add	rsp, 56
	ret
.Ltmp352:
.Lfunc_end117:
	.seh_handlerdata
	.section	.text,"xr",discard,"?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Orphan_all@_Container_base12@std@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Orphan_all@_Container_base12@std@@QEAAXXZ"
	.globl	"?_Orphan_all@_Container_base12@std@@QEAAXXZ" # -- Begin function ?_Orphan_all@_Container_base12@std@@QEAAXXZ
	.p2align	4, 0x90
"?_Orphan_all@_Container_base12@std@@QEAAXXZ": # @"?_Orphan_all@_Container_base12@std@@QEAAXXZ"
.Lfunc_begin118:
	.cv_func_id 118
	.cv_loc	118 10 214 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:214:0
.seh_proc "?_Orphan_all@_Container_base12@std@@QEAAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe 5, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx
	mov	rcx, qword ptr [rbp - 16]
.Ltmp355:
	.cv_loc	118 10 216 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:216:0
	cmp	qword ptr [rcx], 0
	mov	qword ptr [rbp - 40], rcx # 8-byte Spill
	je	.LBB118_6
# %bb.1:
	.cv_loc	118 10 218 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:218:0
.Ltmp353:
.Ltmp356:
	mov	rax, qword ptr [rip + "__imp_??0_Lockit@std@@QEAA@H@Z"]
	lea	rcx, [rbp - 24]
	mov	edx, 3
	call	rax
.Ltmp354:
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	jmp	.LBB118_2
.LBB118_2:
.Ltmp357:
	.cv_loc	118 10 220 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:220:0
	mov	rax, qword ptr [rbp - 40] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	add	rcx, 8
	mov	qword ptr [rbp - 32], rcx
.LBB118_3:                              # =>This Inner Loop Header: Depth=1
	mov	rax, qword ptr [rbp - 32]
	cmp	qword ptr [rax], 0
	je	.LBB118_5
# %bb.4:                                #   in Loop: Header=BB118_3 Depth=1
.Ltmp358:
	.cv_loc	118 10 222 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:222:0
	mov	rax, qword ptr [rbp - 32]
	mov	rax, qword ptr [rax]
	mov	qword ptr [rax], 0
	.cv_loc	118 10 221 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:221:0
	mov	rax, qword ptr [rbp - 32]
	mov	rax, qword ptr [rax]
	mov	rax, qword ptr [rax + 8]
	mov	rcx, qword ptr [rbp - 32]
	mov	qword ptr [rcx], rax
	.cv_loc	118 10 220 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:220:0
	jmp	.LBB118_3
.Ltmp359:
.LBB118_5:
	.cv_loc	118 10 223 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:223:0
	mov	rax, qword ptr [rbp - 40] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	mov	qword ptr [rcx + 8], 0
	.cv_loc	118 10 224 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:224:0
	lea	rcx, [rbp - 24]
	call	qword ptr [rip + "__imp_??1_Lockit@std@@QEAA@XZ"]
.Ltmp360:
.LBB118_6:
	.cv_loc	118 10 226 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:226:0
	nop
	add	rsp, 80
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ")@IMGREL
	.section	.text,"xr",discard,"?_Orphan_all@_Container_base12@std@@QEAAXXZ"
	.seh_endproc
	.def	 "?dtor$7@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA":
.seh_proc "?dtor$7@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA"
.LBB118_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
.Ltmp361:
	.cv_loc	118 10 218 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:218:0
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp362:
.Lfunc_end118:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Orphan_all@_Container_base12@std@@QEAAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?_Orphan_all@_Container_base12@std@@QEAAXXZ"
	.p2align	2
"$cppxdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?_Orphan_all@_Container_base12@std@@QEAAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?_Orphan_all@_Container_base12@std@@QEAAXXZ")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?_Orphan_all@_Container_base12@std@@QEAAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$7@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA"@IMGREL # Action
"$ip2state$?_Orphan_all@_Container_base12@std@@QEAAXXZ":
	.long	.Lfunc_begin118@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp353@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp354@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?_Orphan_all@_Container_base12@std@@QEAAXXZ"
                                        # -- End function
	.def	 "??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z"
	.globl	"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z" # -- Begin function ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z
	.p2align	4, 0x90
"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z": # @"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z"
.Lfunc_begin119:
	.cv_func_id 119
	.cv_loc	119 3 1154 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:1154:0
.seh_proc "??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], r8
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
.Ltmp363:
	.cv_loc	119 3 1158 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:1158:0
	mov	r8, qword ptr [rsp + 64]
	mov	rdx, qword ptr [rsp + 56]
	mov	rcx, qword ptr [rsp + 48]
	mov	r9b, byte ptr [rsp + 40]
	call	"??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z"
	.cv_loc	119 3 1161 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:1161:0
	nop
	add	rsp, 72
	ret
.Ltmp364:
.Lfunc_end119:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z"
	.globl	"??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z" # -- Begin function ??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z
	.p2align	4, 0x90
"??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z": # @"??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z"
.Lfunc_begin120:
	.cv_func_id 120
	.cv_loc	120 3 1145 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:1145:0
.seh_proc "??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z"
# %bb.0:
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	byte ptr [rsp + 24], r9b
	mov	qword ptr [rsp + 16], r8
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp365:
	.cv_loc	120 3 1147 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:1147:0
	add	rsp, 32
	ret
.Ltmp366:
.Lfunc_end120:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z"
	.globl	"??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z" # -- Begin function ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
	.p2align	4, 0x90
"??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z": # @"??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z"
.Lfunc_begin121:
	.cv_func_id 121
	.cv_loc	121 3 199 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:199:0
.seh_proc "??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 48], rax
	mov	qword ptr [rsp + 40], rdx
	mov	qword ptr [rsp + 32], rcx
.Ltmp367:
	.cv_loc	121 3 201 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:201:0
	cmp	qword ptr [rsp + 40], 4096
	jb	.LBB121_2
# %bb.1:
.Ltmp368:
	.cv_loc	121 3 203 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:203:0
	lea	rcx, [rsp + 32]
	lea	rdx, [rsp + 40]
	call	"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z"
.Ltmp369:
.LBB121_2:
	.cv_loc	121 3 207 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:207:0
	mov	rdx, qword ptr [rsp + 40]
	mov	rcx, qword ptr [rsp + 32]
	call	"??3@YAXPEAX_K@Z"
	mov	rcx, qword ptr [rsp + 48]
	xor	rcx, rsp
	call	__security_check_cookie
	.cv_loc	121 3 208 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:208:0
	nop
	add	rsp, 56
	ret
.Ltmp370:
.Lfunc_end121:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z"
	.globl	"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z" # -- Begin function ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
	.p2align	4, 0x90
"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z": # @"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z"
.Lfunc_begin122:
	.cv_func_id 122
	.cv_loc	122 3 114 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:114:0
.seh_proc "?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	qword ptr [rsp + 112], rdx
	mov	qword ptr [rsp + 104], rcx
.Ltmp371:
	.cv_loc	122 3 115 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:115:0
	mov	rcx, qword ptr [rsp + 112]
	mov	rdx, qword ptr [rcx]
	add	rdx, 47
	mov	qword ptr [rcx], rdx
	.cv_loc	122 3 117 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:117:0
	mov	rcx, qword ptr [rsp + 104]
	mov	rcx, qword ptr [rcx]
	mov	qword ptr [rsp + 96], rcx
	.cv_loc	122 3 118 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:118:0
	mov	rcx, qword ptr [rsp + 96]
	mov	rcx, qword ptr [rcx - 8]
	mov	qword ptr [rsp + 88], rcx
# %bb.1:
.Ltmp372:
	.cv_loc	122 3 122 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:122:0
	mov	rax, qword ptr [rsp + 96]
	movabs	rcx, -361700864190383366
	cmp	qword ptr [rax - 16], rcx
	jne	.LBB122_3
# %bb.2:
.Ltmp373:
	.cv_loc	122 3 122 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:122:0
	jmp	.LBB122_8
.Ltmp374:
.LBB122_3:
	.cv_loc	122 3 122 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:122:0
	jmp	.LBB122_4
.LBB122_4:
.Ltmp375:
	.cv_loc	122 3 122 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:122:0
	lea	rax, [rip + "??_C@_0BB@FCMFBGOM@invalid?5argument?$AA@"]
	mov	rcx, rsp
	mov	qword ptr [rcx + 40], rax
	lea	rax, [rip + "??_C@_02DKCKIIND@?$CFs?$AA@"]
	mov	qword ptr [rcx + 32], rax
	lea	rdx, [rip + "??_C@_0GJ@MAEDLLFA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@"]
	mov	rax, qword ptr [rip + __imp__CrtDbgReport]
	xor	r8d, r8d
	mov	r9d, r8d
	mov	ecx, 2
	mov	r8d, 122
	call	rax
	mov	ecx, 1
	cmp	ecx, eax
	jne	.LBB122_6
# %bb.5:
	int3
.LBB122_6:
	xor	eax, eax
	mov	ecx, eax
	lea	rdx, [rip + "??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@"]
	mov	qword ptr [rsp + 64], rcx # 8-byte Spill
	mov	rcx, rdx
	lea	rdx, [rip + "??_C@_1EA@IKJNMLCJ@?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?$AA@"]
	lea	r8, [rip + "??_C@_1NC@LMCNBOC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@"]
	mov	r9d, 122
	mov	qword ptr [rsp + 32], 0
	call	qword ptr [rip + __imp__invalid_parameter]
.Ltmp376:
# %bb.7:
	.cv_loc	122 3 122 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:122:0
	jmp	.LBB122_8
.Ltmp377:
.LBB122_8:
	.cv_loc	122 3 122 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:122:0
	jmp	.LBB122_9
.Ltmp378:
.LBB122_9:
	.cv_loc	122 3 127 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:127:0
	mov	qword ptr [rsp + 80], 16
	.cv_loc	122 3 131 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:131:0
	mov	rax, qword ptr [rsp + 104]
	mov	rax, qword ptr [rax]
	sub	rax, qword ptr [rsp + 88]
	mov	qword ptr [rsp + 72], rax
# %bb.10:
.Ltmp379:
	.cv_loc	122 3 132 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:132:0
	cmp	qword ptr [rsp + 72], 16
	jb	.LBB122_13
# %bb.11:
	cmp	qword ptr [rsp + 72], 47
	ja	.LBB122_13
# %bb.12:
.Ltmp380:
	.cv_loc	122 3 132 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:132:0
	jmp	.LBB122_18
.Ltmp381:
.LBB122_13:
	.cv_loc	122 3 132 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:132:0
	jmp	.LBB122_14
.LBB122_14:
.Ltmp382:
	.cv_loc	122 3 132 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:132:0
	lea	rax, [rip + "??_C@_0BB@FCMFBGOM@invalid?5argument?$AA@"]
	mov	rcx, rsp
	mov	qword ptr [rcx + 40], rax
	lea	rax, [rip + "??_C@_02DKCKIIND@?$CFs?$AA@"]
	mov	qword ptr [rcx + 32], rax
	lea	rdx, [rip + "??_C@_0GJ@MAEDLLFA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@"]
	mov	rax, qword ptr [rip + __imp__CrtDbgReport]
	xor	r8d, r8d
	mov	r9d, r8d
	mov	ecx, 2
	mov	r8d, 132
	call	rax
	mov	ecx, 1
	cmp	ecx, eax
	jne	.LBB122_16
# %bb.15:
	int3
.LBB122_16:
	xor	eax, eax
	mov	ecx, eax
	lea	rdx, [rip + "??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@"]
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	rcx, rdx
	lea	rdx, [rip + "??_C@_1EA@IKJNMLCJ@?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?$AA@"]
	lea	r8, [rip + "??_C@_1NC@LMCNBOC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@"]
	mov	r9d, 132
	mov	qword ptr [rsp + 32], 0
	call	qword ptr [rip + __imp__invalid_parameter]
.Ltmp383:
# %bb.17:
	.cv_loc	122 3 132 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:132:0
	jmp	.LBB122_18
.Ltmp384:
.LBB122_18:
	.cv_loc	122 3 132 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:132:0
	jmp	.LBB122_19
.Ltmp385:
.LBB122_19:
	.cv_loc	122 3 133 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:133:0
	mov	rax, qword ptr [rsp + 88]
	mov	rcx, qword ptr [rsp + 104]
	mov	qword ptr [rcx], rax
	.cv_loc	122 3 134 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:134:0
	add	rsp, 120
	ret
.Ltmp386:
.Lfunc_end122:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	.globl	"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ" # -- Begin function ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ
	.p2align	4, 0x90
"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ": # @"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
.Lfunc_begin123:
	.cv_func_id 123
	.cv_loc	123 4 600 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:600:0
.seh_proc "?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp387:
	.cv_loc	123 4 601 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:601:0
	call	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	add	rax, 24
	add	rsp, 40
	ret
.Ltmp388:
.Lfunc_end123:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
	.globl	"?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ" # -- Begin function ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ
	.p2align	4, 0x90
"?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ": # @"?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
.Lfunc_begin124:
	.cv_func_id 124
	.cv_loc	124 4 509 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:509:0
.seh_proc "?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	qword ptr [rsp + 48], rcx
	mov	rax, qword ptr [rsp + 48]
.Ltmp389:
	.cv_loc	124 4 510 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:510:0
	mov	rcx, rax
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ"
	lea	rcx, [rsp + 56]
	mov	rdx, rax
	call	"??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
	.cv_loc	124 4 511 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:511:0
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	"?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
	.cv_loc	124 4 512 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:512:0
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	call	"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ"
	mov	rdx, qword ptr [rax]
	lea	rcx, [rsp + 56]
	call	"??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z"
	.cv_loc	124 4 513 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:513:0
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	call	"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ"
	mov	rdx, qword ptr [rax]
	lea	rcx, [rsp + 56]
	call	"??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z"
	.cv_loc	124 4 514 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:514:0
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	call	"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ"
	mov	qword ptr [rax], 0
	mov	rax, qword ptr [rsp + 64]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	.cv_loc	124 4 515 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector:515:0
	nop
	add	rsp, 72
	ret
.Ltmp390:
.Lfunc_end124:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z"
	.globl	"??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z" # -- Begin function ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z
	.p2align	4, 0x90
"??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z": # @"??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z"
.Lfunc_begin125:
	.cv_func_id 125
	.cv_loc	125 3 886 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:886:0
.seh_proc "??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp391:
	.cv_loc	125 3 888 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:888:0
	add	rsp, 16
	ret
.Ltmp392:
.Lfunc_end125:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z"
	.globl	"??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z" # -- Begin function ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
	.p2align	4, 0x90
"??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z": # @"??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z"
.Lfunc_begin126:
	.cv_func_id 126
	.cv_loc	126 3 1212 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:1212:0
.seh_proc "??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	eax, 1
	mov	r8d, eax
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp393:
	.cv_loc	126 3 1213 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:1213:0
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40]
	call	"?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z"
	.cv_loc	126 3 1214 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:1214:0
	nop
	add	rsp, 56
	ret
.Ltmp394:
.Lfunc_end126:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z"
	.globl	"?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z" # -- Begin function ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
	.p2align	4, 0x90
"?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z": # @"?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z"
.Lfunc_begin127:
	.cv_func_id 127
	.cv_loc	127 3 871 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:871:0
.seh_proc "?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], r8
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
.Ltmp395:
	.cv_loc	127 3 873 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:873:0
	mov	rcx, qword ptr [rsp + 64]
	shl	rcx, 4
	mov	rdx, qword ptr [rsp + 56]
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, qword ptr [rsp + 40] # 8-byte Reload
	call	"??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z"
	.cv_loc	127 3 874 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0:874:0
	nop
	add	rsp, 72
	ret
.Ltmp396:
.Lfunc_end127:
	.seh_handlerdata
	.section	.text,"xr",discard,"?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z"
	.seh_endproc
                                        # -- End function
	.section	.rdata,"dr",discard,"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 598"

	.section	.rdata,"dr",discard,"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 599"

	.section	.data,"dw",discard,"??_R0?AUfail_fast@gsl@@@8"
	.globl	"??_R0?AUfail_fast@gsl@@@8" # @"??_R0?AUfail_fast@gsl@@@8"
	.p2align	4
"??_R0?AUfail_fast@gsl@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUfail_fast@gsl@@"
	.zero	4

	.section	.xdata,"dr",discard,"_CT??_R0?AUfail_fast@gsl@@@824"
	.globl	"_CT??_R0?AUfail_fast@gsl@@@824" # @"_CT??_R0?AUfail_fast@gsl@@@824"
	.p2align	4
"_CT??_R0?AUfail_fast@gsl@@@824":
	.long	0                       # 0x0
	.long	"??_R0?AUfail_fast@gsl@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0fail_fast@gsl@@QEAA@AEBU01@@Z"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVlogic_error@std@@@8"
	.globl	"??_R0?AVlogic_error@std@@@8" # @"??_R0?AVlogic_error@std@@@8"
	.p2align	4
"??_R0?AVlogic_error@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVlogic_error@std@@"
	.zero	2

	.section	.xdata,"dr",discard,"_CT??_R0?AVlogic_error@std@@@824"
	.globl	"_CT??_R0?AVlogic_error@std@@@824" # @"_CT??_R0?AVlogic_error@std@@@824"
	.p2align	4
"_CT??_R0?AVlogic_error@std@@@824":
	.long	0                       # 0x0
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0logic_error@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVexception@std@@@8"
	.globl	"??_R0?AVexception@std@@@8" # @"??_R0?AVexception@std@@@8"
	.p2align	4
"??_R0?AVexception@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVexception@std@@"
	.zero	4

	.section	.xdata,"dr",discard,"_CT??_R0?AVexception@std@@@824"
	.globl	"_CT??_R0?AVexception@std@@@824" # @"_CT??_R0?AVexception@std@@@824"
	.p2align	4
"_CT??_R0?AVexception@std@@@824":
	.long	0                       # 0x0
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0exception@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA3?AUfail_fast@gsl@@"
	.globl	"_CTA3?AUfail_fast@gsl@@" # @"_CTA3?AUfail_fast@gsl@@"
	.p2align	3
"_CTA3?AUfail_fast@gsl@@":
	.long	3                       # 0x3
	.long	"_CT??_R0?AUfail_fast@gsl@@@824"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@824"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@824"@IMGREL

	.section	.xdata,"dr",discard,"_TI3?AUfail_fast@gsl@@"
	.globl	"_TI3?AUfail_fast@gsl@@" # @"_TI3?AUfail_fast@gsl@@"
	.p2align	3
"_TI3?AUfail_fast@gsl@@":
	.long	0                       # 0x0
	.long	"??1fail_fast@gsl@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA3?AUfail_fast@gsl@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7fail_fast@gsl@@6B@"
	.p2align	4               # @0
.L__unnamed_1:
	.quad	"??_R4fail_fast@gsl@@6B@"
	.quad	"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4fail_fast@gsl@@6B@"
	.globl	"??_R4fail_fast@gsl@@6B@" # @"??_R4fail_fast@gsl@@6B@"
	.p2align	4
"??_R4fail_fast@gsl@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUfail_fast@gsl@@@8"@IMGREL
	.long	"??_R3fail_fast@gsl@@8"@IMGREL
	.long	"??_R4fail_fast@gsl@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3fail_fast@gsl@@8"
	.globl	"??_R3fail_fast@gsl@@8" # @"??_R3fail_fast@gsl@@8"
	.p2align	3
"??_R3fail_fast@gsl@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	"??_R2fail_fast@gsl@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2fail_fast@gsl@@8"
	.globl	"??_R2fail_fast@gsl@@8" # @"??_R2fail_fast@gsl@@8"
	.p2align	2
"??_R2fail_fast@gsl@@8":
	.long	"??_R1A@?0A@EA@fail_fast@gsl@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@fail_fast@gsl@@8"
	.globl	"??_R1A@?0A@EA@fail_fast@gsl@@8" # @"??_R1A@?0A@EA@fail_fast@gsl@@8"
	.p2align	4
"??_R1A@?0A@EA@fail_fast@gsl@@8":
	.long	"??_R0?AUfail_fast@gsl@@@8"@IMGREL
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3fail_fast@gsl@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@logic_error@std@@8"
	.globl	"??_R1A@?0A@EA@logic_error@std@@8" # @"??_R1A@?0A@EA@logic_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@logic_error@std@@8":
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3logic_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R3logic_error@std@@8"
	.globl	"??_R3logic_error@std@@8" # @"??_R3logic_error@std@@8"
	.p2align	3
"??_R3logic_error@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2logic_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2logic_error@std@@8"
	.globl	"??_R2logic_error@std@@8" # @"??_R2logic_error@std@@8"
	.p2align	2
"??_R2logic_error@std@@8":
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@exception@std@@8"
	.globl	"??_R1A@?0A@EA@exception@std@@8" # @"??_R1A@?0A@EA@exception@std@@8"
	.p2align	4
"??_R1A@?0A@EA@exception@std@@8":
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3exception@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R3exception@std@@8"
	.globl	"??_R3exception@std@@8" # @"??_R3exception@std@@8"
	.p2align	3
"??_R3exception@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	"??_R2exception@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2exception@std@@8"
	.globl	"??_R2exception@std@@8" # @"??_R2exception@std@@8"
	.p2align	2
"??_R2exception@std@@8":
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",largest,"??_7logic_error@std@@6B@"
	.p2align	4               # @1
.L__unnamed_2:
	.quad	"??_R4logic_error@std@@6B@"
	.quad	"??_Glogic_error@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4logic_error@std@@6B@"
	.globl	"??_R4logic_error@std@@6B@" # @"??_R4logic_error@std@@6B@"
	.p2align	4
"??_R4logic_error@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	"??_R3logic_error@std@@8"@IMGREL
	.long	"??_R4logic_error@std@@6B@"@IMGREL

	.section	.rdata,"dr",largest,"??_7exception@std@@6B@"
	.p2align	4               # @2
.L__unnamed_3:
	.quad	"??_R4exception@std@@6B@"
	.quad	"??_Gexception@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4exception@std@@6B@"
	.globl	"??_R4exception@std@@6B@" # @"??_R4exception@std@@6B@"
	.p2align	4
"??_R4exception@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	"??_R3exception@std@@8"@IMGREL
	.long	"??_R4exception@std@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
	.globl	"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@" # @"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@":
	.asciz	"Unknown exception"

	.section	.data,"dw",discard,"??_R0?AUnarrowing_error@gsl@@@8"
	.globl	"??_R0?AUnarrowing_error@gsl@@@8" # @"??_R0?AUnarrowing_error@gsl@@@8"
	.p2align	4
"??_R0?AUnarrowing_error@gsl@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUnarrowing_error@gsl@@"
	.zero	6

	.section	.xdata,"dr",discard,"_CT??_R0?AUnarrowing_error@gsl@@@824"
	.globl	"_CT??_R0?AUnarrowing_error@gsl@@@824" # @"_CT??_R0?AUnarrowing_error@gsl@@@824"
	.p2align	4
"_CT??_R0?AUnarrowing_error@gsl@@@824":
	.long	0                       # 0x0
	.long	"??_R0?AUnarrowing_error@gsl@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0narrowing_error@gsl@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA2?AUnarrowing_error@gsl@@"
	.globl	"_CTA2?AUnarrowing_error@gsl@@" # @"_CTA2?AUnarrowing_error@gsl@@"
	.p2align	3
"_CTA2?AUnarrowing_error@gsl@@":
	.long	2                       # 0x2
	.long	"_CT??_R0?AUnarrowing_error@gsl@@@824"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@824"@IMGREL

	.section	.xdata,"dr",discard,"_TI2?AUnarrowing_error@gsl@@"
	.globl	"_TI2?AUnarrowing_error@gsl@@" # @"_TI2?AUnarrowing_error@gsl@@"
	.p2align	3
"_TI2?AUnarrowing_error@gsl@@":
	.long	0                       # 0x0
	.long	"??1narrowing_error@gsl@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA2?AUnarrowing_error@gsl@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7narrowing_error@gsl@@6B@"
	.p2align	4               # @3
.L__unnamed_4:
	.quad	"??_R4narrowing_error@gsl@@6B@"
	.quad	"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4narrowing_error@gsl@@6B@"
	.globl	"??_R4narrowing_error@gsl@@6B@" # @"??_R4narrowing_error@gsl@@6B@"
	.p2align	4
"??_R4narrowing_error@gsl@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUnarrowing_error@gsl@@@8"@IMGREL
	.long	"??_R3narrowing_error@gsl@@8"@IMGREL
	.long	"??_R4narrowing_error@gsl@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3narrowing_error@gsl@@8"
	.globl	"??_R3narrowing_error@gsl@@8" # @"??_R3narrowing_error@gsl@@8"
	.p2align	3
"??_R3narrowing_error@gsl@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2narrowing_error@gsl@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2narrowing_error@gsl@@8"
	.globl	"??_R2narrowing_error@gsl@@8" # @"??_R2narrowing_error@gsl@@8"
	.p2align	2
"??_R2narrowing_error@gsl@@8":
	.long	"??_R1A@?0A@EA@narrowing_error@gsl@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@narrowing_error@gsl@@8"
	.globl	"??_R1A@?0A@EA@narrowing_error@gsl@@8" # @"??_R1A@?0A@EA@narrowing_error@gsl@@8"
	.p2align	4
"??_R1A@?0A@EA@narrowing_error@gsl@@8":
	.long	"??_R0?AUnarrowing_error@gsl@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3narrowing_error@gsl@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_C@_0DG@LJIAFOPK@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@LJIAFOPK@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@LJIAFOPK@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@LJIAFOPK@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 336"

	.section	.rdata,"dr",discard,"??_C@_0DG@BJDFKDLA@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@BJDFKDLA@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@BJDFKDLA@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@BJDFKDLA@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 509"

	.section	.rdata,"dr",discard,"??_C@_0BB@FCMFBGOM@invalid?5argument?$AA@"
	.globl	"??_C@_0BB@FCMFBGOM@invalid?5argument?$AA@" # @"??_C@_0BB@FCMFBGOM@invalid?5argument?$AA@"
"??_C@_0BB@FCMFBGOM@invalid?5argument?$AA@":
	.asciz	"invalid argument"

	.section	.rdata,"dr",discard,"??_C@_02DKCKIIND@?$CFs?$AA@"
	.globl	"??_C@_02DKCKIIND@?$CFs?$AA@" # @"??_C@_02DKCKIIND@?$CFs?$AA@"
"??_C@_02DKCKIIND@?$CFs?$AA@":
	.asciz	"%s"

	.section	.rdata,"dr",discard,"??_C@_0GJ@MAEDLLFA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@"
	.globl	"??_C@_0GJ@MAEDLLFA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@" # @"??_C@_0GJ@MAEDLLFA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@"
"??_C@_0GJ@MAEDLLFA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@":
	.asciz	"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

	.section	.rdata,"dr",discard,"??_C@_1NC@LMCNBOC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@"
	.globl	"??_C@_1NC@LMCNBOC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@" # @"??_C@_1NC@LMCNBOC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@"
	.p2align	1
"??_C@_1NC@LMCNBOC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@":
	.short	67                      # 0x43
	.short	58                      # 0x3a
	.short	92                      # 0x5c
	.short	80                      # 0x50
	.short	114                     # 0x72
	.short	111                     # 0x6f
	.short	103                     # 0x67
	.short	114                     # 0x72
	.short	97                      # 0x61
	.short	109                     # 0x6d
	.short	32                      # 0x20
	.short	70                      # 0x46
	.short	105                     # 0x69
	.short	108                     # 0x6c
	.short	101                     # 0x65
	.short	115                     # 0x73
	.short	32                      # 0x20
	.short	40                      # 0x28
	.short	120                     # 0x78
	.short	56                      # 0x38
	.short	54                      # 0x36
	.short	41                      # 0x29
	.short	92                      # 0x5c
	.short	77                      # 0x4d
	.short	105                     # 0x69
	.short	99                      # 0x63
	.short	114                     # 0x72
	.short	111                     # 0x6f
	.short	115                     # 0x73
	.short	111                     # 0x6f
	.short	102                     # 0x66
	.short	116                     # 0x74
	.short	32                      # 0x20
	.short	86                      # 0x56
	.short	105                     # 0x69
	.short	115                     # 0x73
	.short	117                     # 0x75
	.short	97                      # 0x61
	.short	108                     # 0x6c
	.short	32                      # 0x20
	.short	83                      # 0x53
	.short	116                     # 0x74
	.short	117                     # 0x75
	.short	100                     # 0x64
	.short	105                     # 0x69
	.short	111                     # 0x6f
	.short	92                      # 0x5c
	.short	50                      # 0x32
	.short	48                      # 0x30
	.short	49                      # 0x31
	.short	55                      # 0x37
	.short	92                      # 0x5c
	.short	67                      # 0x43
	.short	111                     # 0x6f
	.short	109                     # 0x6d
	.short	109                     # 0x6d
	.short	117                     # 0x75
	.short	110                     # 0x6e
	.short	105                     # 0x69
	.short	116                     # 0x74
	.short	121                     # 0x79
	.short	92                      # 0x5c
	.short	86                      # 0x56
	.short	67                      # 0x43
	.short	92                      # 0x5c
	.short	84                      # 0x54
	.short	111                     # 0x6f
	.short	111                     # 0x6f
	.short	108                     # 0x6c
	.short	115                     # 0x73
	.short	92                      # 0x5c
	.short	77                      # 0x4d
	.short	83                      # 0x53
	.short	86                      # 0x56
	.short	67                      # 0x43
	.short	92                      # 0x5c
	.short	49                      # 0x31
	.short	52                      # 0x34
	.short	46                      # 0x2e
	.short	49                      # 0x31
	.short	54                      # 0x36
	.short	46                      # 0x2e
	.short	50                      # 0x32
	.short	55                      # 0x37
	.short	48                      # 0x30
	.short	50                      # 0x32
	.short	51                      # 0x33
	.short	92                      # 0x5c
	.short	105                     # 0x69
	.short	110                     # 0x6e
	.short	99                      # 0x63
	.short	108                     # 0x6c
	.short	117                     # 0x75
	.short	100                     # 0x64
	.short	101                     # 0x65
	.short	92                      # 0x5c
	.short	120                     # 0x78
	.short	109                     # 0x6d
	.short	101                     # 0x65
	.short	109                     # 0x6d
	.short	111                     # 0x6f
	.short	114                     # 0x72
	.short	121                     # 0x79
	.short	48                      # 0x30
	.short	0                       # 0x0

	.section	.rdata,"dr",discard,"??_C@_1EE@NLJGENNL@?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe@"
	.globl	"??_C@_1EE@NLJGENNL@?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe@" # @"??_C@_1EE@NLJGENNL@?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe@"
	.p2align	1
"??_C@_1EE@NLJGENNL@?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe@":
	.short	95                      # 0x5f
	.short	65                      # 0x41
	.short	108                     # 0x6c
	.short	108                     # 0x6c
	.short	111                     # 0x6f
	.short	99                      # 0x63
	.short	97                      # 0x61
	.short	116                     # 0x74
	.short	101                     # 0x65
	.short	95                      # 0x5f
	.short	109                     # 0x6d
	.short	97                      # 0x61
	.short	110                     # 0x6e
	.short	117                     # 0x75
	.short	97                      # 0x61
	.short	108                     # 0x6c
	.short	108                     # 0x6c
	.short	121                     # 0x79
	.short	95                      # 0x5f
	.short	118                     # 0x76
	.short	101                     # 0x65
	.short	99                      # 0x63
	.short	116                     # 0x74
	.short	111                     # 0x6f
	.short	114                     # 0x72
	.short	95                      # 0x5f
	.short	97                      # 0x61
	.short	108                     # 0x6c
	.short	105                     # 0x69
	.short	103                     # 0x67
	.short	110                     # 0x6e
	.short	101                     # 0x65
	.short	100                     # 0x64
	.short	0                       # 0x0

	.section	.rdata,"dr",discard,"??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@"
	.globl	"??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@" # @"??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@"
	.p2align	1
"??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@":
	.short	34                      # 0x22
	.short	105                     # 0x69
	.short	110                     # 0x6e
	.short	118                     # 0x76
	.short	97                      # 0x61
	.short	108                     # 0x6c
	.short	105                     # 0x69
	.short	100                     # 0x64
	.short	32                      # 0x20
	.short	97                      # 0x61
	.short	114                     # 0x72
	.short	103                     # 0x67
	.short	117                     # 0x75
	.short	109                     # 0x6d
	.short	101                     # 0x65
	.short	110                     # 0x6e
	.short	116                     # 0x74
	.short	34                      # 0x22
	.short	0                       # 0x0

	.section	.rdata,"dr",discard,"??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@"
	.globl	"??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@" # @"??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@"
"??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@":
	.asciz	"vector<T> too long"

	.section	.rdata,"dr",discard,"??_C@_1EA@IKJNMLCJ@?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?$AA@"
	.globl	"??_C@_1EA@IKJNMLCJ@?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?$AA@" # @"??_C@_1EA@IKJNMLCJ@?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?$AA@"
	.p2align	1
"??_C@_1EA@IKJNMLCJ@?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?$AA@":
	.short	95                      # 0x5f
	.short	65                      # 0x41
	.short	100                     # 0x64
	.short	106                     # 0x6a
	.short	117                     # 0x75
	.short	115                     # 0x73
	.short	116                     # 0x74
	.short	95                      # 0x5f
	.short	109                     # 0x6d
	.short	97                      # 0x61
	.short	110                     # 0x6e
	.short	117                     # 0x75
	.short	97                      # 0x61
	.short	108                     # 0x6c
	.short	108                     # 0x6c
	.short	121                     # 0x79
	.short	95                      # 0x5f
	.short	118                     # 0x76
	.short	101                     # 0x65
	.short	99                      # 0x63
	.short	116                     # 0x74
	.short	111                     # 0x6f
	.short	114                     # 0x72
	.short	95                      # 0x5f
	.short	97                      # 0x61
	.short	108                     # 0x6c
	.short	105                     # 0x69
	.short	103                     # 0x67
	.short	110                     # 0x6e
	.short	101                     # 0x65
	.short	100                     # 0x64
	.short	0                       # 0x0

	.section	.drectve,"yn"
	.ascii	" /DEFAULTLIB:msvcrtd.lib"
	.ascii	" /DEFAULTLIB:oldnames.lib"
	.ascii	" /FAILIFMISMATCH:\"_MSC_VER=1900\""
	.ascii	" /FAILIFMISMATCH:\"_ITERATOR_DEBUG_LEVEL=2\""
	.ascii	" /FAILIFMISMATCH:\"RuntimeLibrary=MDd_DynamicDebug\""
	.ascii	" /DEFAULTLIB:msvcprtd.lib"
	.ascii	" /FAILIFMISMATCH:\"_CRT_STDIO_ISO_WIDE_SPECIFIERS=0\""
	.section	.debug$S,"dr"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241
	.long	.Ltmp398-.Ltmp397       # Subsection size
.Ltmp397:
	.short	.Ltmp400-.Ltmp399       # Record length
.Ltmp399:
	.short	4412                    # Record kind: S_COMPILE3
	.long	1                       # Flags and language
	.short	208                     # CPUType
	.short	7                       # Frontend version
	.short	0
	.short	1
	.short	0
	.short	7001                    # Backend version
	.short	0
	.short	0
	.short	0
	.asciz	"clang version 7.0.1 (tags/RELEASE_701/final)" # Null-terminated compiler version string
.Ltmp400:
.Ltmp398:
	.p2align	2
	.long	241                     # Symbol subsection for foo
	.long	.Ltmp402-.Ltmp401       # Subsection size
.Ltmp401:
	.short	.Ltmp404-.Ltmp403       # Record length
.Ltmp403:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end0-"?foo@@YA_NXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4098                    # Function type index
	.secrel32	"?foo@@YA_NXZ"  # Function section relative address
	.secidx	"?foo@@YA_NXZ"          # Function section index
	.byte	0                       # Flags
	.asciz	"foo"                   # Function name
.Ltmp404:
	.short	.Ltmp406-.Ltmp405       # Record length
.Ltmp405:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp7-.Ltmp0           # Code size
	.secrel32	.Ltmp0          # Function section relative address
	.secidx	.Lfunc_begin0           # Function section index
	.byte	0                       # Lexical block name
.Ltmp406:
	.short	.Ltmp408-.Ltmp407       # Record length
.Ltmp407:
	.short	4414                    # Record kind: S_LOCAL
	.long	48                      # TypeIndex
	.short	0                       # Flags
	.asciz	"ret"
.Ltmp408:
	.cv_def_range	 .Ltmp0 .Ltmp7, "E\021O\001\000\000_\000\000\000"
	.short	.Ltmp410-.Ltmp409       # Record length
.Ltmp409:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
.Ltmp410:
	.cv_def_range	 .Ltmp0 .Ltmp7, "E\021O\001\000\000\200\000\000\000"
	.short	.Ltmp412-.Ltmp411       # Record length
.Ltmp411:
	.short	4414                    # Record kind: S_LOCAL
	.long	4210                    # TypeIndex
	.short	0                       # Flags
	.asciz	"cs"
.Ltmp412:
	.cv_def_range	 .Ltmp0 .Ltmp7, "E\021O\001\000\000p\000\000\000"
	.short	.Ltmp414-.Ltmp413       # Record length
.Ltmp413:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s2"
.Ltmp414:
	.cv_def_range	 .Ltmp0 .Ltmp7, "E\021O\001\000\000`\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp402:
	.p2align	2
	.cv_linetable	0, "?foo@@YA_NXZ", .Lfunc_end0
	.section	.debug$S,"dr",associative,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::span<0,void>
	.long	.Ltmp416-.Ltmp415       # Subsection size
.Ltmp415:
	.short	.Ltmp418-.Ltmp417       # Record length
.Ltmp417:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end1-"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4218                    # Function type index
	.secrel32	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ" # Function section relative address
	.secidx	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::span<0,void>" # Function name
.Ltmp418:
	.short	.Ltmp420-.Ltmp419       # Record length
.Ltmp419:
	.short	4414                    # Record kind: S_LOCAL
	.long	4102                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp420:
	.cv_def_range	 .Ltmp10 .Ltmp11, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp416:
	.p2align	2
	.cv_linetable	1, "??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ", .Lfunc_end1
	.section	.debug$S,"dr",associative,"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::size
	.long	.Ltmp422-.Ltmp421       # Subsection size
.Ltmp421:
	.short	.Ltmp424-.Ltmp423       # Record length
.Ltmp423:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end2-"?size@?$span@H$0?0@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4219                    # Function type index
	.secrel32	"?size@?$span@H$0?0@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$span@H$0?0@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::size" # Function name
.Ltmp424:
	.short	.Ltmp426-.Ltmp425       # Record length
.Ltmp425:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp426:
	.cv_def_range	 .Ltmp12 .Ltmp13, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp422:
	.p2align	2
	.cv_linetable	2, "?size@?$span@H$0?0@gsl@@QEBA_JXZ", .Lfunc_end2
	.section	.debug$S,"dr",associative,"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::data
	.long	.Ltmp428-.Ltmp427       # Subsection size
.Ltmp427:
	.short	.Ltmp430-.Ltmp429       # Record length
.Ltmp429:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end3-"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4220                    # Function type index
	.secrel32	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Function section relative address
	.secidx	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::data" # Function name
.Ltmp430:
	.short	.Ltmp432-.Ltmp431       # Record length
.Ltmp431:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp432:
	.cv_def_range	 .Ltmp14 .Ltmp15, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp428:
	.p2align	2
	.cv_linetable	3, "?data@?$span@H$0?0@gsl@@QEBAPEAHXZ", .Lfunc_end3
	.section	.debug$S,"dr",associative,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::span<0,void>
	.long	.Ltmp434-.Ltmp433       # Subsection size
.Ltmp433:
	.short	.Ltmp436-.Ltmp435       # Record length
.Ltmp435:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end4-"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4221                    # Function type index
	.secrel32	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ" # Function section relative address
	.secidx	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::span<0,void>" # Function name
.Ltmp436:
	.short	.Ltmp438-.Ltmp437       # Record length
.Ltmp437:
	.short	4414                    # Record kind: S_LOCAL
	.long	4169                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp438:
	.cv_def_range	 .Ltmp18 .Ltmp19, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp434:
	.p2align	2
	.cv_linetable	4, "??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ", .Lfunc_end4
	.section	.debug$S,"dr",associative,"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::size
	.long	.Ltmp440-.Ltmp439       # Subsection size
.Ltmp439:
	.short	.Ltmp442-.Ltmp441       # Record length
.Ltmp441:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end5-"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4222                    # Function type index
	.secrel32	"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::size" # Function name
.Ltmp442:
	.short	.Ltmp444-.Ltmp443       # Record length
.Ltmp443:
	.short	4414                    # Record kind: S_LOCAL
	.long	4189                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp444:
	.cv_def_range	 .Ltmp20 .Ltmp21, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp440:
	.p2align	2
	.cv_linetable	5, "?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ", .Lfunc_end5
	.section	.debug$S,"dr",associative,"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::data
	.long	.Ltmp446-.Ltmp445       # Subsection size
.Ltmp445:
	.short	.Ltmp448-.Ltmp447       # Record length
.Ltmp447:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end6-"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4223                    # Function type index
	.secrel32	"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # Function section relative address
	.secidx	"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::data" # Function name
.Ltmp448:
	.short	.Ltmp450-.Ltmp449       # Record length
.Ltmp449:
	.short	4414                    # Record kind: S_LOCAL
	.long	4189                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp450:
	.cv_def_range	 .Ltmp22 .Ltmp23, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp446:
	.p2align	2
	.cv_linetable	6, "?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ", .Lfunc_end6
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for bar
	.long	.Ltmp452-.Ltmp451       # Subsection size
.Ltmp451:
	.short	.Ltmp454-.Ltmp453       # Record length
.Ltmp453:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end7-"?bar@@YA_NXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4224                    # Function type index
	.secrel32	"?bar@@YA_NXZ"  # Function section relative address
	.secidx	"?bar@@YA_NXZ"          # Function section index
	.byte	0                       # Flags
	.asciz	"bar"                   # Function name
.Ltmp454:
	.short	.Ltmp456-.Ltmp455       # Record length
.Ltmp455:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp33-.Ltmp32         # Code size
	.secrel32	.Ltmp32         # Function section relative address
	.secidx	.Lfunc_begin7           # Function section index
	.byte	0                       # Lexical block name
.Ltmp456:
	.short	.Ltmp458-.Ltmp457       # Record length
.Ltmp457:
	.short	4414                    # Record kind: S_LOCAL
	.long	48                      # TypeIndex
	.short	0                       # Flags
	.asciz	"ret"
.Ltmp458:
	.cv_def_range	 .Ltmp32 .Ltmp33, "E\021N\001\000\000g\000\000\000"
	.short	.Ltmp460-.Ltmp459       # Record length
.Ltmp459:
	.short	4414                    # Record kind: S_LOCAL
	.long	4341                    # TypeIndex
	.short	0                       # Flags
	.asciz	"v"
.Ltmp460:
	.cv_def_range	 .Ltmp32 .Ltmp33, "E\021N\001\000\000@\000\000\000"
	.short	.Ltmp462-.Ltmp461       # Record length
.Ltmp461:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
.Ltmp462:
	.cv_def_range	 .Ltmp32 .Ltmp33, "E\021N\001\000\000\b\000\000\000"
	.short	.Ltmp464-.Ltmp463       # Record length
.Ltmp463:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"x"
.Ltmp464:
	.cv_def_range	 .Ltmp32 .Ltmp33, "E\021N\001\000\000\004\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp452:
	.p2align	2
	.cv_linetable	7, "?bar@@YA_NXZ", .Lfunc_end7
	.section	.debug$S,"dr",associative,"??0?$allocator@H@std@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::allocator<int>::allocator
	.long	.Ltmp466-.Ltmp465       # Subsection size
.Ltmp465:
	.short	.Ltmp468-.Ltmp467       # Record length
.Ltmp467:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end8-"??0?$allocator@H@std@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4559                    # Function type index
	.secrel32	"??0?$allocator@H@std@@QEAA@XZ" # Function section relative address
	.secidx	"??0?$allocator@H@std@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::allocator<int>::allocator" # Function name
.Ltmp468:
	.short	.Ltmp470-.Ltmp469       # Record length
.Ltmp469:
	.short	4414                    # Record kind: S_LOCAL
	.long	4397                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp470:
	.cv_def_range	 .Ltmp34 .Ltmp35, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp466:
	.p2align	2
	.cv_linetable	8, "??0?$allocator@H@std@@QEAA@XZ", .Lfunc_end8
	.section	.debug$S,"dr",associative,"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::vector<int,std::allocator<int> >::vector
	.long	.Ltmp472-.Ltmp471       # Subsection size
.Ltmp471:
	.short	.Ltmp474-.Ltmp473       # Record length
.Ltmp473:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end9-"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4560                    # Function type index
	.secrel32	"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z" # Function section relative address
	.secidx	"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::vector<int,std::allocator<int> >::vector" # Function name
.Ltmp474:
	.short	.Ltmp476-.Ltmp475       # Record length
.Ltmp475:
	.short	4414                    # Record kind: S_LOCAL
	.long	4227                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp476:
	.cv_def_range	 .Ltmp38 .Ltmp46, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp478-.Ltmp477       # Record length
.Ltmp477:
	.short	4414                    # Record kind: S_LOCAL
	.long	4561                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Ilist"
.Ltmp478:
	.cv_def_range	 .Lfunc_begin9 .Ltmp39, "A\021K\001\000\000"
	.cv_def_range	 .Ltmp39 .Ltmp42 .Ltmp43 .Ltmp44, "E\021N\001\000\000\320\377\377\377"
	.short	.Ltmp480-.Ltmp479       # Record length
.Ltmp479:
	.short	4414                    # Record kind: S_LOCAL
	.long	4231                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Al"
.Ltmp480:
	.cv_def_range	 .Ltmp38 .Ltmp46, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp472:
	.p2align	2
	.cv_linetable	9, "??0?$vector@HV?$allocator@H@std@@@std@@QEAA@V?$initializer_list@H@1@AEBV?$allocator@H@1@@Z", .Lfunc_end9
	.section	.debug$S,"dr",associative,"??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::span<std::vector<int,std::allocator<int> >,void>
	.long	.Ltmp482-.Ltmp481       # Subsection size
.Ltmp481:
	.short	.Ltmp484-.Ltmp483       # Record length
.Ltmp483:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end10-"??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4563                    # Function type index
	.secrel32	"??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z" # Function section relative address
	.secidx	"??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::span<std::vector<int,std::allocator<int> >,void>" # Function name
.Ltmp484:
	.short	.Ltmp486-.Ltmp485       # Record length
.Ltmp485:
	.short	4414                    # Record kind: S_LOCAL
	.long	4102                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp486:
	.cv_def_range	 .Ltmp47 .Ltmp48, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp488-.Ltmp487       # Record length
.Ltmp487:
	.short	4414                    # Record kind: S_LOCAL
	.long	4261                    # TypeIndex
	.short	1                       # Flags
	.asciz	"cont"
.Ltmp488:
	.cv_def_range	 .Ltmp47 .Ltmp48, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp482:
	.p2align	2
	.cv_linetable	10, "??$?0V?$vector@HV?$allocator@H@std@@@std@@X@?$span@H$0?0@gsl@@QEAA@AEAV?$vector@HV?$allocator@H@std@@@std@@@Z", .Lfunc_end10
	.section	.debug$S,"dr",associative,"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::operator[]
	.long	.Ltmp490-.Ltmp489       # Subsection size
.Ltmp489:
	.short	.Ltmp492-.Ltmp491       # Record length
.Ltmp491:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end11-"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4564                    # Function type index
	.secrel32	"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z" # Function section relative address
	.secidx	"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::operator[]" # Function name
.Ltmp492:
	.short	.Ltmp494-.Ltmp493       # Record length
.Ltmp493:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp494:
	.cv_def_range	 .Ltmp51 .Ltmp52, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp496-.Ltmp495       # Record length
.Ltmp495:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"idx"
.Ltmp496:
	.cv_def_range	 .Ltmp51 .Ltmp52, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp490:
	.p2align	2
	.cv_linetable	11, "??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z", .Lfunc_end11
	.section	.debug$S,"dr",associative,"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::vector<int,std::allocator<int> >::~vector
	.long	.Ltmp498-.Ltmp497       # Subsection size
.Ltmp497:
	.short	.Ltmp500-.Ltmp499       # Record length
.Ltmp499:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end12-"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4565                    # Function type index
	.secrel32	"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ" # Function section relative address
	.secidx	"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::vector<int,std::allocator<int> >::~vector" # Function name
.Ltmp500:
	.short	.Ltmp502-.Ltmp501       # Record length
.Ltmp501:
	.short	4414                    # Record kind: S_LOCAL
	.long	4227                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp502:
	.cv_def_range	 .Ltmp55 .Ltmp58, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp498:
	.p2align	2
	.cv_linetable	12, "??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ", .Lfunc_end12
	.section	.debug$S,"dr",associative,"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<0>::extent_type
	.long	.Ltmp504-.Ltmp503       # Subsection size
.Ltmp503:
	.short	.Ltmp506-.Ltmp505       # Record length
.Ltmp505:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end13-"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4577                    # Function type index
	.secrel32	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ" # Function section relative address
	.secidx	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<0>::extent_type" # Function name
.Ltmp506:
	.short	.Ltmp508-.Ltmp507       # Record length
.Ltmp507:
	.short	4414                    # Record kind: S_LOCAL
	.long	4567                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp508:
	.cv_def_range	 .Ltmp59 .Ltmp60, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp504:
	.p2align	2
	.cv_linetable	13, "??0?$extent_type@$0A@@details@gsl@@QEAA@XZ", .Lfunc_end13
	.section	.debug$S,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >
	.long	.Ltmp510-.Ltmp509       # Subsection size
.Ltmp509:
	.short	.Ltmp512-.Ltmp511       # Record length
.Ltmp511:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end14-"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4581                    # Function type index
	.secrel32	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z" # Function section relative address
	.secidx	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >" # Function name
.Ltmp512:
	.short	.Ltmp514-.Ltmp513       # Record length
.Ltmp513:
	.short	4414                    # Record kind: S_LOCAL
	.long	4578                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp514:
	.cv_def_range	 .Ltmp65 .Ltmp69, "E\021N\001\000\000(\000\000\000"
	.short	.Ltmp516-.Ltmp515       # Record length
.Ltmp515:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp516:
	.cv_def_range	 .Ltmp65 .Ltmp69, "E\021N\001\000\0000\000\000\000"
	.short	.Ltmp518-.Ltmp517       # Record length
.Ltmp517:
	.short	4414                    # Record kind: S_LOCAL
	.long	4575                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp518:
	.cv_def_range	 .Ltmp65 .Ltmp69, "E\021N\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp510:
	.p2align	2
	.cv_linetable	14, "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z", .Lfunc_end14
	.section	.debug$S,"dr",associative,"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<-1>::extent_type<0>
	.long	.Ltmp520-.Ltmp519       # Subsection size
.Ltmp519:
	.short	.Ltmp522-.Ltmp521       # Record length
.Ltmp521:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end15-"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4584                    # Function type index
	.secrel32	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z" # Function section relative address
	.secidx	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<-1>::extent_type<0>" # Function name
.Ltmp522:
	.short	.Ltmp524-.Ltmp523       # Record length
.Ltmp523:
	.short	4414                    # Record kind: S_LOCAL
	.long	4159                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp524:
	.cv_def_range	 .Ltmp70 .Ltmp72, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp526-.Ltmp525       # Record length
.Ltmp525:
	.short	4414                    # Record kind: S_LOCAL
	.long	4575                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp526:
	.cv_def_range	 .Ltmp70 .Ltmp72, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp520:
	.p2align	2
	.cv_linetable	15, "??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z", .Lfunc_end15
	.section	.debug$S,"dr",associative,"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<-1>::size
	.long	.Ltmp528-.Ltmp527       # Subsection size
.Ltmp527:
	.short	.Ltmp530-.Ltmp529       # Record length
.Ltmp529:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end16-"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4585                    # Function type index
	.secrel32	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<-1>::size" # Function name
.Ltmp530:
	.short	.Ltmp532-.Ltmp531       # Record length
.Ltmp531:
	.short	4414                    # Record kind: S_LOCAL
	.long	4162                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp532:
	.cv_def_range	 .Ltmp73 .Ltmp74, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp528:
	.p2align	2
	.cv_linetable	16, "?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ", .Lfunc_end16
	.section	.debug$S,"dr",associative,"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::throw_exception<gsl::fail_fast>
	.long	.Ltmp534-.Ltmp533       # Subsection size
.Ltmp533:
	.short	.Ltmp536-.Ltmp535       # Record length
.Ltmp535:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end17-"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4990                    # Function type index
	.secrel32	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z" # Function section relative address
	.secidx	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::throw_exception<gsl::fail_fast>" # Function name
.Ltmp536:
	.short	.Ltmp538-.Ltmp537       # Record length
.Ltmp537:
	.short	4414                    # Record kind: S_LOCAL
	.long	4588                    # TypeIndex
	.short	1                       # Flags
	.asciz	"exception"
.Ltmp538:
	.cv_def_range	 .Ltmp75 .Ltmp76, "E\021O\001\000\000P\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp534:
	.p2align	2
	.cv_linetable	17, "??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z", .Lfunc_end17
	.section	.debug$S,"dr",associative,"??0fail_fast@gsl@@QEAA@QEBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::fail_fast
	.long	.Ltmp540-.Ltmp539       # Subsection size
.Ltmp539:
	.short	.Ltmp542-.Ltmp541       # Record length
.Ltmp541:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end18-"??0fail_fast@gsl@@QEAA@QEBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4991                    # Function type index
	.secrel32	"??0fail_fast@gsl@@QEAA@QEBD@Z" # Function section relative address
	.secidx	"??0fail_fast@gsl@@QEAA@QEBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::fail_fast" # Function name
.Ltmp542:
	.short	.Ltmp544-.Ltmp543       # Record length
.Ltmp543:
	.short	4414                    # Record kind: S_LOCAL
	.long	4593                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp544:
	.cv_def_range	 .Ltmp77 .Ltmp78, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp546-.Ltmp545       # Record length
.Ltmp545:
	.short	4414                    # Record kind: S_LOCAL
	.long	4595                    # TypeIndex
	.short	1                       # Flags
	.asciz	"message"
.Ltmp546:
	.cv_def_range	 .Ltmp77 .Ltmp78, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp540:
	.p2align	2
	.cv_linetable	18, "??0fail_fast@gsl@@QEAA@QEBD@Z", .Lfunc_end18
	.section	.debug$S,"dr",associative,"??1fail_fast@gsl@@UEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::~fail_fast
	.long	.Ltmp548-.Ltmp547       # Subsection size
.Ltmp547:
	.short	.Ltmp550-.Ltmp549       # Record length
.Ltmp549:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end19-"??1fail_fast@gsl@@UEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4993                    # Function type index
	.secrel32	"??1fail_fast@gsl@@UEAA@XZ" # Function section relative address
	.secidx	"??1fail_fast@gsl@@UEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::~fail_fast" # Function name
.Ltmp550:
	.short	.Ltmp552-.Ltmp551       # Record length
.Ltmp551:
	.short	4414                    # Record kind: S_LOCAL
	.long	4593                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp552:
	.cv_def_range	 .Ltmp79 .Ltmp81, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp548:
	.p2align	2
	.cv_linetable	19, "??1fail_fast@gsl@@UEAA@XZ", .Lfunc_end19
	.section	.debug$S,"dr",associative,"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<0>::size
	.long	.Ltmp554-.Ltmp553       # Subsection size
.Ltmp553:
	.short	.Ltmp556-.Ltmp555       # Record length
.Ltmp555:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end20-"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4994                    # Function type index
	.secrel32	"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<0>::size" # Function name
.Ltmp556:
	.short	.Ltmp558-.Ltmp557       # Record length
.Ltmp557:
	.short	4414                    # Record kind: S_LOCAL
	.long	4572                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp558:
	.cv_def_range	 .Ltmp82 .Ltmp83, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp554:
	.p2align	2
	.cv_linetable	20, "?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ", .Lfunc_end20
	.section	.debug$S,"dr",associative,"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::forward<gsl::fail_fast>
	.long	.Ltmp560-.Ltmp559       # Subsection size
.Ltmp559:
	.short	.Ltmp562-.Ltmp561       # Record length
.Ltmp561:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end21-"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4999                    # Function type index
	.secrel32	"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z" # Function section relative address
	.secidx	"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::forward<gsl::fail_fast>" # Function name
.Ltmp562:
	.short	.Ltmp564-.Ltmp563       # Record length
.Ltmp563:
	.short	4414                    # Record kind: S_LOCAL
	.long	4996                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Arg"
.Ltmp564:
	.cv_def_range	 .Ltmp84 .Ltmp85, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp560:
	.p2align	2
	.cv_linetable	21, "??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z", .Lfunc_end21
	.section	.debug$S,"dr",associative,"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::fail_fast
	.long	.Ltmp566-.Ltmp565       # Subsection size
.Ltmp565:
	.short	.Ltmp568-.Ltmp567       # Record length
.Ltmp567:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end22-"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5001                    # Function type index
	.secrel32	"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z" # Function section relative address
	.secidx	"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::fail_fast" # Function name
.Ltmp568:
	.short	.Ltmp570-.Ltmp569       # Record length
.Ltmp569:
	.short	4414                    # Record kind: S_LOCAL
	.long	4593                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp570:
	.cv_def_range	 .Ltmp86 .Ltmp87, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp572-.Ltmp571       # Record length
.Ltmp571:
	.short	4414                    # Record kind: S_LOCAL
	.long	4588                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp572:
	.cv_def_range	 .Ltmp86 .Ltmp87, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp566:
	.p2align	2
	.cv_linetable	22, "??0fail_fast@gsl@@QEAA@$$QEAU01@@Z", .Lfunc_end22
	.section	.debug$S,"dr",associative,"??0fail_fast@gsl@@QEAA@AEBU01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::fail_fast
	.long	.Ltmp574-.Ltmp573       # Subsection size
.Ltmp573:
	.short	.Ltmp576-.Ltmp575       # Record length
.Ltmp575:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end23-"??0fail_fast@gsl@@QEAA@AEBU01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5006                    # Function type index
	.secrel32	"??0fail_fast@gsl@@QEAA@AEBU01@@Z" # Function section relative address
	.secidx	"??0fail_fast@gsl@@QEAA@AEBU01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::fail_fast" # Function name
.Ltmp576:
	.short	.Ltmp578-.Ltmp577       # Record length
.Ltmp577:
	.short	4414                    # Record kind: S_LOCAL
	.long	4593                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp578:
	.cv_def_range	 .Ltmp88 .Ltmp89, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp580-.Ltmp579       # Record length
.Ltmp579:
	.short	4414                    # Record kind: S_LOCAL
	.long	5003                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp580:
	.cv_def_range	 .Ltmp88 .Ltmp89, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp574:
	.p2align	2
	.cv_linetable	23, "??0fail_fast@gsl@@QEAA@AEBU01@@Z", .Lfunc_end23
	.section	.debug$S,"dr",associative,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::logic_error
	.long	.Ltmp582-.Ltmp581       # Subsection size
.Ltmp581:
	.short	.Ltmp584-.Ltmp583       # Record length
.Ltmp583:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end24-"??0logic_error@std@@QEAA@AEBV01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5011                    # Function type index
	.secrel32	"??0logic_error@std@@QEAA@AEBV01@@Z" # Function section relative address
	.secidx	"??0logic_error@std@@QEAA@AEBV01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::logic_error" # Function name
.Ltmp584:
	.short	.Ltmp586-.Ltmp585       # Record length
.Ltmp585:
	.short	4414                    # Record kind: S_LOCAL
	.long	4603                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp586:
	.cv_def_range	 .Ltmp90 .Ltmp91, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp588-.Ltmp587       # Record length
.Ltmp587:
	.short	4414                    # Record kind: S_LOCAL
	.long	5008                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp588:
	.cv_def_range	 .Ltmp90 .Ltmp91, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp582:
	.p2align	2
	.cv_linetable	24, "??0logic_error@std@@QEAA@AEBV01@@Z", .Lfunc_end24
	.section	.debug$S,"dr",associative,"??0exception@std@@QEAA@AEBV01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::exception
	.long	.Ltmp590-.Ltmp589       # Subsection size
.Ltmp589:
	.short	.Ltmp592-.Ltmp591       # Record length
.Ltmp591:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end25-"??0exception@std@@QEAA@AEBV01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5012                    # Function type index
	.secrel32	"??0exception@std@@QEAA@AEBV01@@Z" # Function section relative address
	.secidx	"??0exception@std@@QEAA@AEBV01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::exception" # Function name
.Ltmp592:
	.short	.Ltmp594-.Ltmp593       # Record length
.Ltmp593:
	.short	4414                    # Record kind: S_LOCAL
	.long	4619                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp594:
	.cv_def_range	 .Ltmp92 .Ltmp95, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp596-.Ltmp595       # Record length
.Ltmp595:
	.short	4414                    # Record kind: S_LOCAL
	.long	4625                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Other"
.Ltmp596:
	.cv_def_range	 .Ltmp92 .Ltmp95, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp590:
	.p2align	2
	.cv_linetable	25, "??0exception@std@@QEAA@AEBV01@@Z", .Lfunc_end25
	.section	.debug$S,"dr",associative,"??0logic_error@std@@QEAA@$$QEAV01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::logic_error
	.long	.Ltmp598-.Ltmp597       # Subsection size
.Ltmp597:
	.short	.Ltmp600-.Ltmp599       # Record length
.Ltmp599:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end26-"??0logic_error@std@@QEAA@$$QEAV01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5016                    # Function type index
	.secrel32	"??0logic_error@std@@QEAA@$$QEAV01@@Z" # Function section relative address
	.secidx	"??0logic_error@std@@QEAA@$$QEAV01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::logic_error" # Function name
.Ltmp600:
	.short	.Ltmp602-.Ltmp601       # Record length
.Ltmp601:
	.short	4414                    # Record kind: S_LOCAL
	.long	4603                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp602:
	.cv_def_range	 .Ltmp96 .Ltmp97, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp604-.Ltmp603       # Record length
.Ltmp603:
	.short	4414                    # Record kind: S_LOCAL
	.long	5013                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp604:
	.cv_def_range	 .Ltmp96 .Ltmp97, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp598:
	.p2align	2
	.cv_linetable	26, "??0logic_error@std@@QEAA@$$QEAV01@@Z", .Lfunc_end26
	.section	.debug$S,"dr",associative,"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::~fail_fast
	.long	.Ltmp606-.Ltmp605       # Subsection size
.Ltmp605:
	.short	.Ltmp608-.Ltmp607       # Record length
.Ltmp607:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end27-"??_Gfail_fast@gsl@@UEAAPEAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4993                    # Function type index
	.secrel32	"??_Gfail_fast@gsl@@UEAAPEAXI@Z" # Function section relative address
	.secidx	"??_Gfail_fast@gsl@@UEAAPEAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::~fail_fast" # Function name
.Ltmp608:
	.short	.Ltmp610-.Ltmp609       # Record length
.Ltmp609:
	.short	4414                    # Record kind: S_LOCAL
	.long	4593                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp610:
	.cv_def_range	 .Ltmp98 .Ltmp99, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp612-.Ltmp611       # Record length
.Ltmp611:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
.Ltmp612:
	.cv_def_range	 .Ltmp98 .Ltmp99, "E\021O\001\000\000<\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp606:
	.p2align	2
	.cv_linetable	27, "??_Gfail_fast@gsl@@UEAAPEAXI@Z", .Lfunc_end27
	.section	.debug$S,"dr",associative,"?what@exception@std@@UEBAPEBDXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::what
	.long	.Ltmp614-.Ltmp613       # Subsection size
.Ltmp613:
	.short	.Ltmp616-.Ltmp615       # Record length
.Ltmp615:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end28-"?what@exception@std@@UEBAPEBDXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5017                    # Function type index
	.secrel32	"?what@exception@std@@UEBAPEBDXZ" # Function section relative address
	.secidx	"?what@exception@std@@UEBAPEBDXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::what"  # Function name
.Ltmp616:
	.short	.Ltmp618-.Ltmp617       # Record length
.Ltmp617:
	.short	4414                    # Record kind: S_LOCAL
	.long	4631                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp618:
	.cv_def_range	 .Ltmp100 .Ltmp101, "E\021O\001\000\000\020\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp614:
	.p2align	2
	.cv_linetable	28, "?what@exception@std@@UEBAPEBDXZ", .Lfunc_end28
	.section	.debug$S,"dr",associative,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::~logic_error
	.long	.Ltmp620-.Ltmp619       # Subsection size
.Ltmp619:
	.short	.Ltmp622-.Ltmp621       # Record length
.Ltmp621:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end29-"??_Glogic_error@std@@UEAAPEAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5019                    # Function type index
	.secrel32	"??_Glogic_error@std@@UEAAPEAXI@Z" # Function section relative address
	.secidx	"??_Glogic_error@std@@UEAAPEAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::~logic_error" # Function name
.Ltmp622:
	.short	.Ltmp624-.Ltmp623       # Record length
.Ltmp623:
	.short	4414                    # Record kind: S_LOCAL
	.long	4603                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp624:
	.cv_def_range	 .Ltmp102 .Ltmp103, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp626-.Ltmp625       # Record length
.Ltmp625:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
.Ltmp626:
	.cv_def_range	 .Ltmp102 .Ltmp103, "E\021O\001\000\000<\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp620:
	.p2align	2
	.cv_linetable	29, "??_Glogic_error@std@@UEAAPEAXI@Z", .Lfunc_end29
	.section	.debug$S,"dr",associative,"??1logic_error@std@@UEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::~logic_error
	.long	.Ltmp628-.Ltmp627       # Subsection size
.Ltmp627:
	.short	.Ltmp630-.Ltmp629       # Record length
.Ltmp629:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end30-"??1logic_error@std@@UEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5019                    # Function type index
	.secrel32	"??1logic_error@std@@UEAA@XZ" # Function section relative address
	.secidx	"??1logic_error@std@@UEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::~logic_error" # Function name
.Ltmp630:
	.short	.Ltmp632-.Ltmp631       # Record length
.Ltmp631:
	.short	4414                    # Record kind: S_LOCAL
	.long	4603                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp632:
	.cv_def_range	 .Ltmp104 .Ltmp106, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp628:
	.p2align	2
	.cv_linetable	30, "??1logic_error@std@@UEAA@XZ", .Lfunc_end30
	.section	.debug$S,"dr",associative,"??1exception@std@@UEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::~exception
	.long	.Ltmp634-.Ltmp633       # Subsection size
.Ltmp633:
	.short	.Ltmp636-.Ltmp635       # Record length
.Ltmp635:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end31-"??1exception@std@@UEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5020                    # Function type index
	.secrel32	"??1exception@std@@UEAA@XZ" # Function section relative address
	.secidx	"??1exception@std@@UEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::~exception" # Function name
.Ltmp636:
	.short	.Ltmp638-.Ltmp637       # Record length
.Ltmp637:
	.short	4414                    # Record kind: S_LOCAL
	.long	4619                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp638:
	.cv_def_range	 .Ltmp107 .Ltmp110, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp634:
	.p2align	2
	.cv_linetable	31, "??1exception@std@@UEAA@XZ", .Lfunc_end31
	.section	.debug$S,"dr",associative,"??_Gexception@std@@UEAAPEAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::~exception
	.long	.Ltmp640-.Ltmp639       # Subsection size
.Ltmp639:
	.short	.Ltmp642-.Ltmp641       # Record length
.Ltmp641:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end32-"??_Gexception@std@@UEAAPEAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5020                    # Function type index
	.secrel32	"??_Gexception@std@@UEAAPEAXI@Z" # Function section relative address
	.secidx	"??_Gexception@std@@UEAAPEAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::~exception" # Function name
.Ltmp642:
	.short	.Ltmp644-.Ltmp643       # Record length
.Ltmp643:
	.short	4414                    # Record kind: S_LOCAL
	.long	4619                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp644:
	.cv_def_range	 .Ltmp111 .Ltmp112, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp646-.Ltmp645       # Record length
.Ltmp645:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
.Ltmp646:
	.cv_def_range	 .Ltmp111 .Ltmp112, "E\021O\001\000\000<\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp640:
	.p2align	2
	.cv_linetable	32, "??_Gexception@std@@UEAAPEAXI@Z", .Lfunc_end32
	.section	.debug$S,"dr",associative,"??0logic_error@std@@QEAA@PEBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::logic_error
	.long	.Ltmp648-.Ltmp647       # Subsection size
.Ltmp647:
	.short	.Ltmp650-.Ltmp649       # Record length
.Ltmp649:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end33-"??0logic_error@std@@QEAA@PEBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5021                    # Function type index
	.secrel32	"??0logic_error@std@@QEAA@PEBD@Z" # Function section relative address
	.secidx	"??0logic_error@std@@QEAA@PEBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::logic_error" # Function name
.Ltmp650:
	.short	.Ltmp652-.Ltmp651       # Record length
.Ltmp651:
	.short	4414                    # Record kind: S_LOCAL
	.long	4603                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp652:
	.cv_def_range	 .Ltmp113 .Ltmp114, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp654-.Ltmp653       # Record length
.Ltmp653:
	.short	4414                    # Record kind: S_LOCAL
	.long	4609                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Message"
.Ltmp654:
	.cv_def_range	 .Ltmp113 .Ltmp114, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp648:
	.p2align	2
	.cv_linetable	33, "??0logic_error@std@@QEAA@PEBD@Z", .Lfunc_end33
	.section	.debug$S,"dr",associative,"??0exception@std@@QEAA@QEBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::exception
	.long	.Ltmp656-.Ltmp655       # Subsection size
.Ltmp655:
	.short	.Ltmp658-.Ltmp657       # Record length
.Ltmp657:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end34-"??0exception@std@@QEAA@QEBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5022                    # Function type index
	.secrel32	"??0exception@std@@QEAA@QEBD@Z" # Function section relative address
	.secidx	"??0exception@std@@QEAA@QEBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::exception" # Function name
.Ltmp658:
	.short	.Ltmp660-.Ltmp659       # Record length
.Ltmp659:
	.short	4414                    # Record kind: S_LOCAL
	.long	4619                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp660:
	.cv_def_range	 .Ltmp115 .Ltmp120, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp662-.Ltmp661       # Record length
.Ltmp661:
	.short	4414                    # Record kind: S_LOCAL
	.long	4595                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Message"
.Ltmp662:
	.cv_def_range	 .Ltmp115 .Ltmp120, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp664-.Ltmp663       # Record length
.Ltmp663:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp119-.Ltmp116       # Code size
	.secrel32	.Ltmp116        # Function section relative address
	.secidx	.Lfunc_begin34          # Function section index
	.byte	0                       # Lexical block name
.Ltmp664:
	.short	.Ltmp666-.Ltmp665       # Record length
.Ltmp665:
	.short	4414                    # Record kind: S_LOCAL
	.long	4832                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_InitData"
.Ltmp666:
	.cv_def_range	 .Ltmp116 .Ltmp119, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp656:
	.p2align	2
	.cv_linetable	34, "??0exception@std@@QEAA@QEBD@Z", .Lfunc_end34
	.section	.debug$S,"dr",associative,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data
	.long	.Ltmp668-.Ltmp667       # Subsection size
.Ltmp667:
	.short	.Ltmp670-.Ltmp669       # Record length
.Ltmp669:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end35-"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5023                    # Function type index
	.secrel32	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Function section relative address
	.secidx	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data" # Function name
.Ltmp670:
	.short	.Ltmp672-.Ltmp671       # Record length
.Ltmp671:
	.short	4414                    # Record kind: S_LOCAL
	.long	4154                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp672:
	.cv_def_range	 .Ltmp121 .Ltmp122, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp668:
	.p2align	2
	.cv_linetable	35, "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ", .Lfunc_end35
	.section	.debug$S,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >
	.long	.Ltmp674-.Ltmp673       # Subsection size
.Ltmp673:
	.short	.Ltmp676-.Ltmp675       # Record length
.Ltmp675:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end36-"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5027                    # Function type index
	.secrel32	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z" # Function section relative address
	.secidx	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >" # Function name
.Ltmp676:
	.short	.Ltmp678-.Ltmp677       # Record length
.Ltmp677:
	.short	4414                    # Record kind: S_LOCAL
	.long	5024                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp678:
	.cv_def_range	 .Ltmp127 .Ltmp131, "E\021N\001\000\000(\000\000\000"
	.short	.Ltmp680-.Ltmp679       # Record length
.Ltmp679:
	.short	4414                    # Record kind: S_LOCAL
	.long	4171                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp680:
	.cv_def_range	 .Ltmp127 .Ltmp131, "E\021N\001\000\0000\000\000\000"
	.short	.Ltmp682-.Ltmp681       # Record length
.Ltmp681:
	.short	4414                    # Record kind: S_LOCAL
	.long	4575                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp682:
	.cv_def_range	 .Ltmp127 .Ltmp131, "E\021N\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp674:
	.p2align	2
	.cv_linetable	36, "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z", .Lfunc_end36
	.section	.debug$S,"dr",associative,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data
	.long	.Ltmp684-.Ltmp683       # Subsection size
.Ltmp683:
	.short	.Ltmp686-.Ltmp685       # Record length
.Ltmp685:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end37-"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5028                    # Function type index
	.secrel32	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # Function section relative address
	.secidx	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data" # Function name
.Ltmp686:
	.short	.Ltmp688-.Ltmp687       # Record length
.Ltmp687:
	.short	4414                    # Record kind: S_LOCAL
	.long	4213                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp688:
	.cv_def_range	 .Ltmp132 .Ltmp133, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp684:
	.p2align	2
	.cv_linetable	37, "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ", .Lfunc_end37
	.section	.debug$S,"dr",associative,"??$narrow@_J_K@gsl@@YA_J_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrow<long long,unsigned long long>
	.long	.Ltmp690-.Ltmp689       # Subsection size
.Ltmp689:
	.short	.Ltmp692-.Ltmp691       # Record length
.Ltmp691:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end38-"??$narrow@_J_K@gsl@@YA_J_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5032                    # Function type index
	.secrel32	"??$narrow@_J_K@gsl@@YA_J_K@Z" # Function section relative address
	.secidx	"??$narrow@_J_K@gsl@@YA_J_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrow<long long,unsigned long long>" # Function name
.Ltmp692:
	.short	.Ltmp694-.Ltmp693       # Record length
.Ltmp693:
	.short	4414                    # Record kind: S_LOCAL
	.long	35                      # TypeIndex
	.short	1                       # Flags
	.asciz	"u"
.Ltmp694:
	.cv_def_range	 .Ltmp138 .Ltmp147, "E\021N\001\000\000\000\000\000\000"
	.short	.Ltmp696-.Ltmp695       # Record length
.Ltmp695:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	0                       # Flags
	.asciz	"t"
.Ltmp696:
	.cv_def_range	 .Ltmp138 .Ltmp147, "E\021N\001\000\000\370\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp690:
	.p2align	2
	.cv_linetable	38, "??$narrow@_J_K@gsl@@YA_J_K@Z", .Lfunc_end38
	.section	.debug$S,"dr",associative,"?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::vector<int,std::allocator<int> >::size
	.long	.Ltmp698-.Ltmp697       # Subsection size
.Ltmp697:
	.short	.Ltmp700-.Ltmp699       # Record length
.Ltmp699:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end39-"?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5033                    # Function type index
	.secrel32	"?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # Function section relative address
	.secidx	"?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::vector<int,std::allocator<int> >::size" # Function name
.Ltmp700:
	.short	.Ltmp702-.Ltmp701       # Record length
.Ltmp701:
	.short	4414                    # Record kind: S_LOCAL
	.long	4299                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp702:
	.cv_def_range	 .Ltmp148 .Ltmp149, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp698:
	.p2align	2
	.cv_linetable	39, "?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ", .Lfunc_end39
	.section	.debug$S,"dr",associative,"?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::vector<int,std::allocator<int> >::data
	.long	.Ltmp704-.Ltmp703       # Subsection size
.Ltmp703:
	.short	.Ltmp706-.Ltmp705       # Record length
.Ltmp705:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end40-"?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5034                    # Function type index
	.secrel32	"?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ" # Function section relative address
	.secidx	"?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::vector<int,std::allocator<int> >::data" # Function name
.Ltmp706:
	.short	.Ltmp708-.Ltmp707       # Record length
.Ltmp707:
	.short	4414                    # Record kind: S_LOCAL
	.long	4227                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp708:
	.cv_def_range	 .Ltmp150 .Ltmp151, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp704:
	.p2align	2
	.cv_linetable	40, "?data@?$vector@HV?$allocator@H@std@@@std@@QEAAPEAHXZ", .Lfunc_end40
	.section	.debug$S,"dr",associative,"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::span
	.long	.Ltmp710-.Ltmp709       # Subsection size
.Ltmp709:
	.short	.Ltmp712-.Ltmp711       # Record length
.Ltmp711:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end41-"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5035                    # Function type index
	.secrel32	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # Function section relative address
	.secidx	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::span" # Function name
.Ltmp712:
	.short	.Ltmp714-.Ltmp713       # Record length
.Ltmp713:
	.short	4414                    # Record kind: S_LOCAL
	.long	4102                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp714:
	.cv_def_range	 .Ltmp152 .Ltmp153, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp716-.Ltmp715       # Record length
.Ltmp715:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ptr"
.Ltmp716:
	.cv_def_range	 .Ltmp152 .Ltmp153, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp718-.Ltmp717       # Record length
.Ltmp717:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"count"
.Ltmp718:
	.cv_def_range	 .Ltmp152 .Ltmp153, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp710:
	.p2align	2
	.cv_linetable	41, "??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z", .Lfunc_end41
	.section	.debug$S,"dr",associative,"??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrow_cast<long long,unsigned long long &>
	.long	.Ltmp720-.Ltmp719       # Subsection size
.Ltmp719:
	.short	.Ltmp722-.Ltmp721       # Record length
.Ltmp721:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end42-"??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5039                    # Function type index
	.secrel32	"??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z" # Function section relative address
	.secidx	"??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrow_cast<long long,unsigned long long &>" # Function name
.Ltmp722:
	.short	.Ltmp724-.Ltmp723       # Record length
.Ltmp723:
	.short	4414                    # Record kind: S_LOCAL
	.long	5036                    # TypeIndex
	.short	1                       # Flags
	.asciz	"u"
.Ltmp724:
	.cv_def_range	 .Ltmp154 .Ltmp155, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp720:
	.p2align	2
	.cv_linetable	42, "??$narrow_cast@_JAEA_K@gsl@@YA_JAEA_K@Z", .Lfunc_end42
	.section	.debug$S,"dr",associative,"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::throw_exception<gsl::narrowing_error>
	.long	.Ltmp726-.Ltmp725       # Subsection size
.Ltmp725:
	.short	.Ltmp728-.Ltmp727       # Record length
.Ltmp727:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end43-"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5048                    # Function type index
	.secrel32	"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z" # Function section relative address
	.secidx	"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::throw_exception<gsl::narrowing_error>" # Function name
.Ltmp728:
	.short	.Ltmp730-.Ltmp729       # Record length
.Ltmp729:
	.short	4414                    # Record kind: S_LOCAL
	.long	5041                    # TypeIndex
	.short	1                       # Flags
	.asciz	"exception"
.Ltmp730:
	.cv_def_range	 .Ltmp156 .Ltmp157, "E\021O\001\000\000P\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp726:
	.p2align	2
	.cv_linetable	43, "??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z", .Lfunc_end43
	.section	.debug$S,"dr",associative,"??0narrowing_error@gsl@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrowing_error::narrowing_error
	.long	.Ltmp732-.Ltmp731       # Subsection size
.Ltmp731:
	.short	.Ltmp734-.Ltmp733       # Record length
.Ltmp733:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end44-"??0narrowing_error@gsl@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5051                    # Function type index
	.secrel32	"??0narrowing_error@gsl@@QEAA@XZ" # Function section relative address
	.secidx	"??0narrowing_error@gsl@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrowing_error::narrowing_error" # Function name
.Ltmp734:
	.short	.Ltmp736-.Ltmp735       # Record length
.Ltmp735:
	.short	4414                    # Record kind: S_LOCAL
	.long	5049                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp736:
	.cv_def_range	 .Ltmp158 .Ltmp159, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp732:
	.p2align	2
	.cv_linetable	44, "??0narrowing_error@gsl@@QEAA@XZ", .Lfunc_end44
	.section	.debug$S,"dr",associative,"??1narrowing_error@gsl@@UEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrowing_error::~narrowing_error
	.long	.Ltmp738-.Ltmp737       # Subsection size
.Ltmp737:
	.short	.Ltmp740-.Ltmp739       # Record length
.Ltmp739:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end45-"??1narrowing_error@gsl@@UEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5052                    # Function type index
	.secrel32	"??1narrowing_error@gsl@@UEAA@XZ" # Function section relative address
	.secidx	"??1narrowing_error@gsl@@UEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrowing_error::~narrowing_error" # Function name
.Ltmp740:
	.short	.Ltmp742-.Ltmp741       # Record length
.Ltmp741:
	.short	4414                    # Record kind: S_LOCAL
	.long	5049                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp742:
	.cv_def_range	 .Ltmp160 .Ltmp162, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp738:
	.p2align	2
	.cv_linetable	45, "??1narrowing_error@gsl@@UEAA@XZ", .Lfunc_end45
	.section	.debug$S,"dr",associative,"??$forward@AEA_K@std@@YAAEA_KAEA_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::forward<unsigned long long &>
	.long	.Ltmp744-.Ltmp743       # Subsection size
.Ltmp743:
	.short	.Ltmp746-.Ltmp745       # Record length
.Ltmp745:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end46-"??$forward@AEA_K@std@@YAAEA_KAEA_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5054                    # Function type index
	.secrel32	"??$forward@AEA_K@std@@YAAEA_KAEA_K@Z" # Function section relative address
	.secidx	"??$forward@AEA_K@std@@YAAEA_KAEA_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::forward<unsigned long long &>" # Function name
.Ltmp746:
	.short	.Ltmp748-.Ltmp747       # Record length
.Ltmp747:
	.short	4414                    # Record kind: S_LOCAL
	.long	5036                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Arg"
.Ltmp748:
	.cv_def_range	 .Ltmp163 .Ltmp164, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp744:
	.p2align	2
	.cv_linetable	46, "??$forward@AEA_K@std@@YAAEA_KAEA_K@Z", .Lfunc_end46
	.section	.debug$S,"dr",associative,"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::forward<gsl::narrowing_error>
	.long	.Ltmp750-.Ltmp749       # Subsection size
.Ltmp749:
	.short	.Ltmp752-.Ltmp751       # Record length
.Ltmp751:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end47-"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5058                    # Function type index
	.secrel32	"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z" # Function section relative address
	.secidx	"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::forward<gsl::narrowing_error>" # Function name
.Ltmp752:
	.short	.Ltmp754-.Ltmp753       # Record length
.Ltmp753:
	.short	4414                    # Record kind: S_LOCAL
	.long	5055                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Arg"
.Ltmp754:
	.cv_def_range	 .Ltmp165 .Ltmp166, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp750:
	.p2align	2
	.cv_linetable	47, "??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z", .Lfunc_end47
	.section	.debug$S,"dr",associative,"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrowing_error::narrowing_error
	.long	.Ltmp756-.Ltmp755       # Subsection size
.Ltmp755:
	.short	.Ltmp758-.Ltmp757       # Record length
.Ltmp757:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end48-"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5060                    # Function type index
	.secrel32	"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z" # Function section relative address
	.secidx	"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrowing_error::narrowing_error" # Function name
.Ltmp758:
	.short	.Ltmp760-.Ltmp759       # Record length
.Ltmp759:
	.short	4414                    # Record kind: S_LOCAL
	.long	5049                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp760:
	.cv_def_range	 .Ltmp167 .Ltmp168, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp762-.Ltmp761       # Record length
.Ltmp761:
	.short	4414                    # Record kind: S_LOCAL
	.long	5041                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp762:
	.cv_def_range	 .Ltmp167 .Ltmp168, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp756:
	.p2align	2
	.cv_linetable	48, "??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z", .Lfunc_end48
	.section	.debug$S,"dr",associative,"??0narrowing_error@gsl@@QEAA@AEBU01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrowing_error::narrowing_error
	.long	.Ltmp764-.Ltmp763       # Subsection size
.Ltmp763:
	.short	.Ltmp766-.Ltmp765       # Record length
.Ltmp765:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end49-"??0narrowing_error@gsl@@QEAA@AEBU01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5065                    # Function type index
	.secrel32	"??0narrowing_error@gsl@@QEAA@AEBU01@@Z" # Function section relative address
	.secidx	"??0narrowing_error@gsl@@QEAA@AEBU01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrowing_error::narrowing_error" # Function name
.Ltmp766:
	.short	.Ltmp768-.Ltmp767       # Record length
.Ltmp767:
	.short	4414                    # Record kind: S_LOCAL
	.long	5049                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp768:
	.cv_def_range	 .Ltmp169 .Ltmp170, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp770-.Ltmp769       # Record length
.Ltmp769:
	.short	4414                    # Record kind: S_LOCAL
	.long	5062                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp770:
	.cv_def_range	 .Ltmp169 .Ltmp170, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp764:
	.p2align	2
	.cv_linetable	49, "??0narrowing_error@gsl@@QEAA@AEBU01@@Z", .Lfunc_end49
	.section	.debug$S,"dr",associative,"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrowing_error::~narrowing_error
	.long	.Ltmp772-.Ltmp771       # Subsection size
.Ltmp771:
	.short	.Ltmp774-.Ltmp773       # Record length
.Ltmp773:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end50-"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5052                    # Function type index
	.secrel32	"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z" # Function section relative address
	.secidx	"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrowing_error::~narrowing_error" # Function name
.Ltmp774:
	.short	.Ltmp776-.Ltmp775       # Record length
.Ltmp775:
	.short	4414                    # Record kind: S_LOCAL
	.long	5049                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp776:
	.cv_def_range	 .Ltmp171 .Ltmp172, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp778-.Ltmp777       # Record length
.Ltmp777:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
.Ltmp778:
	.cv_def_range	 .Ltmp171 .Ltmp172, "E\021O\001\000\000<\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp772:
	.p2align	2
	.cv_linetable	50, "??_Gnarrowing_error@gsl@@UEAAPEAXI@Z", .Lfunc_end50
	.section	.debug$S,"dr",associative,"??0exception@std@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::exception
	.long	.Ltmp780-.Ltmp779       # Subsection size
.Ltmp779:
	.short	.Ltmp782-.Ltmp781       # Record length
.Ltmp781:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end51-"??0exception@std@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5066                    # Function type index
	.secrel32	"??0exception@std@@QEAA@XZ" # Function section relative address
	.secidx	"??0exception@std@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::exception" # Function name
.Ltmp782:
	.short	.Ltmp784-.Ltmp783       # Record length
.Ltmp783:
	.short	4414                    # Record kind: S_LOCAL
	.long	4619                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp784:
	.cv_def_range	 .Ltmp173 .Ltmp174, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp780:
	.p2align	2
	.cv_linetable	51, "??0exception@std@@QEAA@XZ", .Lfunc_end51
	.section	.debug$S,"dr",associative,"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
	.long	.Ltmp786-.Ltmp785       # Subsection size
.Ltmp785:
	.short	.Ltmp788-.Ltmp787       # Record length
.Ltmp787:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end52-"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5067                    # Function type index
	.secrel32	"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ" # Function section relative address
	.secidx	"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast" # Function name
.Ltmp788:
	.short	.Ltmp790-.Ltmp789       # Record length
.Ltmp789:
	.short	4414                    # Record kind: S_LOCAL
	.long	4355                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp790:
	.cv_def_range	 .Ltmp175 .Ltmp176, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp786:
	.p2align	2
	.cv_linetable	52, "?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ", .Lfunc_end52
	.section	.debug$S,"dr",associative,"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
	.long	.Ltmp792-.Ltmp791       # Subsection size
.Ltmp791:
	.short	.Ltmp794-.Ltmp793       # Record length
.Ltmp793:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end53-"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5068                    # Function type index
	.secrel32	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ" # Function section relative address
	.secidx	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst" # Function name
.Ltmp794:
	.short	.Ltmp796-.Ltmp795       # Record length
.Ltmp795:
	.short	4414                    # Record kind: S_LOCAL
	.long	4355                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp796:
	.cv_def_range	 .Ltmp177 .Ltmp178, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp792:
	.p2align	2
	.cv_linetable	53, "?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ", .Lfunc_end53
	.section	.debug$S,"dr",associative,"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
	.long	.Ltmp798-.Ltmp797       # Subsection size
.Ltmp797:
	.short	.Ltmp800-.Ltmp799       # Record length
.Ltmp799:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end54-"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5069                    # Function type index
	.secrel32	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # Function section relative address
	.secidx	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data" # Function name
.Ltmp800:
	.short	.Ltmp802-.Ltmp801       # Record length
.Ltmp801:
	.short	4414                    # Record kind: S_LOCAL
	.long	4355                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp802:
	.cv_def_range	 .Ltmp179 .Ltmp180, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp798:
	.p2align	2
	.cv_linetable	54, "?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ", .Lfunc_end54
	.section	.debug$S,"dr",associative,"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
	.long	.Ltmp804-.Ltmp803       # Subsection size
.Ltmp803:
	.short	.Ltmp806-.Ltmp805       # Record length
.Ltmp805:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end55-"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5070                    # Function type index
	.secrel32	"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # Function section relative address
	.secidx	"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second" # Function name
.Ltmp806:
	.short	.Ltmp808-.Ltmp807       # Record length
.Ltmp807:
	.short	4414                    # Record kind: S_LOCAL
	.long	4448                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp808:
	.cv_def_range	 .Ltmp181 .Ltmp182, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp804:
	.p2align	2
	.cv_linetable	55, "?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ", .Lfunc_end55
	.section	.debug$S,"dr",associative,"??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Unfancy_maybe_null<int>
	.long	.Ltmp810-.Ltmp809       # Subsection size
.Ltmp809:
	.short	.Ltmp812-.Ltmp811       # Record length
.Ltmp811:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end56-"??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5073                    # Function type index
	.secrel32	"??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z" # Function section relative address
	.secidx	"??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Unfancy_maybe_null<int>" # Function name
.Ltmp812:
	.short	.Ltmp814-.Ltmp813       # Record length
.Ltmp813:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Ptr"
.Ltmp814:
	.cv_def_range	 .Ltmp183 .Ltmp184, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp810:
	.p2align	2
	.cv_linetable	56, "??$_Unfancy_maybe_null@H@std@@YAPEAHPEAH@Z", .Lfunc_end56
	.section	.debug$S,"dr",associative,"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
	.long	.Ltmp816-.Ltmp815       # Subsection size
.Ltmp815:
	.short	.Ltmp818-.Ltmp817       # Record length
.Ltmp817:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end57-"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5074                    # Function type index
	.secrel32	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ" # Function section relative address
	.secidx	"?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst" # Function name
.Ltmp818:
	.short	.Ltmp820-.Ltmp819       # Record length
.Ltmp819:
	.short	4414                    # Record kind: S_LOCAL
	.long	4345                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp820:
	.cv_def_range	 .Ltmp185 .Ltmp186, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp816:
	.p2align	2
	.cv_linetable	57, "?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ", .Lfunc_end57
	.section	.debug$S,"dr",associative,"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
	.long	.Ltmp822-.Ltmp821       # Subsection size
.Ltmp821:
	.short	.Ltmp824-.Ltmp823       # Record length
.Ltmp823:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end58-"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5075                    # Function type index
	.secrel32	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # Function section relative address
	.secidx	"?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data" # Function name
.Ltmp824:
	.short	.Ltmp826-.Ltmp825       # Record length
.Ltmp825:
	.short	4414                    # Record kind: S_LOCAL
	.long	4345                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp826:
	.cv_def_range	 .Ltmp187 .Ltmp188, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp822:
	.p2align	2
	.cv_linetable	58, "?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ", .Lfunc_end58
	.section	.debug$S,"dr",associative,"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
	.long	.Ltmp828-.Ltmp827       # Subsection size
.Ltmp827:
	.short	.Ltmp830-.Ltmp829       # Record length
.Ltmp829:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end59-"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5076                    # Function type index
	.secrel32	"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # Function section relative address
	.secidx	"?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second" # Function name
.Ltmp830:
	.short	.Ltmp832-.Ltmp831       # Record length
.Ltmp831:
	.short	4414                    # Record kind: S_LOCAL
	.long	4445                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp832:
	.cv_def_range	 .Ltmp189 .Ltmp190, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp828:
	.p2align	2
	.cv_linetable	59, "?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ", .Lfunc_end59
	.section	.debug$S,"dr",associative,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<long long>
	.long	.Ltmp834-.Ltmp833       # Subsection size
.Ltmp833:
	.short	.Ltmp836-.Ltmp835       # Record length
.Ltmp835:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end60-"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5078                    # Function type index
	.secrel32	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # Function section relative address
	.secidx	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<long long>" # Function name
.Ltmp836:
	.short	.Ltmp838-.Ltmp837       # Record length
.Ltmp837:
	.short	4414                    # Record kind: S_LOCAL
	.long	4578                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp838:
	.cv_def_range	 .Ltmp195 .Ltmp199, "E\021N\001\000\000\030\000\000\000"
	.short	.Ltmp840-.Ltmp839       # Record length
.Ltmp839:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp840:
	.cv_def_range	 .Ltmp195 .Ltmp199, "E\021N\001\000\000 \000\000\000"
	.short	.Ltmp842-.Ltmp841       # Record length
.Ltmp841:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp842:
	.cv_def_range	 .Ltmp195 .Ltmp199, "E\021N\001\000\000(\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp834:
	.p2align	2
	.cv_linetable	60, "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z", .Lfunc_end60
	.section	.debug$S,"dr",associative,"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<-1>::extent_type
	.long	.Ltmp844-.Ltmp843       # Subsection size
.Ltmp843:
	.short	.Ltmp846-.Ltmp845       # Record length
.Ltmp845:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end61-"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5079                    # Function type index
	.secrel32	"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z" # Function section relative address
	.secidx	"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<-1>::extent_type" # Function name
.Ltmp846:
	.short	.Ltmp848-.Ltmp847       # Record length
.Ltmp847:
	.short	4414                    # Record kind: S_LOCAL
	.long	4159                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp848:
	.cv_def_range	 .Ltmp202 .Ltmp206, "E\021N\001\000\000\340\377\377\377"
	.short	.Ltmp850-.Ltmp849       # Record length
.Ltmp849:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"size"
.Ltmp850:
	.cv_def_range	 .Ltmp202 .Ltmp206, "E\021N\001\000\000\350\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp844:
	.p2align	2
	.cv_linetable	61, "??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z", .Lfunc_end61
	.section	.debug$S,"dr",associative,"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::CheckRange
	.long	.Ltmp852-.Ltmp851       # Subsection size
.Ltmp851:
	.short	.Ltmp854-.Ltmp853       # Record length
.Ltmp853:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end62-"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5080                    # Function type index
	.secrel32	"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z" # Function section relative address
	.secidx	"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::CheckRange" # Function name
.Ltmp854:
	.short	.Ltmp856-.Ltmp855       # Record length
.Ltmp855:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"idx"
.Ltmp856:
	.cv_def_range	 .Ltmp207 .Ltmp209, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp858-.Ltmp857       # Record length
.Ltmp857:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"size"
.Ltmp858:
	.cv_def_range	 .Ltmp207 .Ltmp209, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp852:
	.p2align	2
	.cv_linetable	62, "?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z", .Lfunc_end62
	.section	.debug$S,"dr",associative,"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrow_cast<unsigned long long,long long &>
	.long	.Ltmp860-.Ltmp859       # Subsection size
.Ltmp859:
	.short	.Ltmp862-.Ltmp861       # Record length
.Ltmp861:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end63-"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5084                    # Function type index
	.secrel32	"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z" # Function section relative address
	.secidx	"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrow_cast<unsigned long long,long long &>" # Function name
.Ltmp862:
	.short	.Ltmp864-.Ltmp863       # Record length
.Ltmp863:
	.short	4414                    # Record kind: S_LOCAL
	.long	5081                    # TypeIndex
	.short	1                       # Flags
	.asciz	"u"
.Ltmp864:
	.cv_def_range	 .Ltmp210 .Ltmp211, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp860:
	.p2align	2
	.cv_linetable	63, "??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z", .Lfunc_end63
	.section	.debug$S,"dr",associative,"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::forward<long long &>
	.long	.Ltmp866-.Ltmp865       # Subsection size
.Ltmp865:
	.short	.Ltmp868-.Ltmp867       # Record length
.Ltmp867:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end64-"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5086                    # Function type index
	.secrel32	"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z" # Function section relative address
	.secidx	"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::forward<long long &>" # Function name
.Ltmp868:
	.short	.Ltmp870-.Ltmp869       # Record length
.Ltmp869:
	.short	4414                    # Record kind: S_LOCAL
	.long	5081                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Arg"
.Ltmp870:
	.cv_def_range	 .Ltmp212 .Ltmp213, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp866:
	.p2align	2
	.cv_linetable	64, "??$forward@AEA_J@std@@YAAEA_JAEA_J@Z", .Lfunc_end64
	.section	.debug$S,"dr",associative,"??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<const std::allocator<int> &,void>
	.long	.Ltmp872-.Ltmp871       # Subsection size
.Ltmp871:
	.short	.Ltmp874-.Ltmp873       # Record length
.Ltmp873:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end65-"??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5087                    # Function type index
	.secrel32	"??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z" # Function section relative address
	.secidx	"??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<const std::allocator<int> &,void>" # Function name
.Ltmp874:
	.short	.Ltmp876-.Ltmp875       # Record length
.Ltmp875:
	.short	4414                    # Record kind: S_LOCAL
	.long	4345                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp876:
	.cv_def_range	 .Ltmp214 .Ltmp217, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp878-.Ltmp877       # Record length
.Ltmp877:
	.short	4414                    # Record kind: S_LOCAL
	.long	4231                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Al"
.Ltmp878:
	.cv_def_range	 .Ltmp214 .Ltmp217, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp872:
	.p2align	2
	.cv_linetable	65, "??$?0AEBV?$allocator@H@std@@X@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z", .Lfunc_end65
	.section	.debug$S,"dr",associative,"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<const int *>
	.long	.Ltmp880-.Ltmp879       # Subsection size
.Ltmp879:
	.short	.Ltmp882-.Ltmp881       # Record length
.Ltmp881:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end66-"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5090                    # Function type index
	.secrel32	"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z" # Function section relative address
	.secidx	"??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<const int *>" # Function name
.Ltmp882:
	.short	.Ltmp884-.Ltmp883       # Record length
.Ltmp883:
	.short	4414                    # Record kind: S_LOCAL
	.long	4227                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp884:
	.cv_def_range	 .Ltmp220 .Ltmp224, "E\021N\001\000\000\330\377\377\377"
	.short	.Ltmp886-.Ltmp885       # Record length
.Ltmp885:
	.short	4414                    # Record kind: S_LOCAL
	.long	4171                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp886:
	.cv_def_range	 .Ltmp220 .Ltmp224, "E\021N\001\000\000\340\377\377\377"
	.short	.Ltmp888-.Ltmp887       # Record length
.Ltmp887:
	.short	4414                    # Record kind: S_LOCAL
	.long	4171                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp888:
	.cv_def_range	 .Ltmp220 .Ltmp224, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp890-.Ltmp889       # Record length
.Ltmp889:
	.short	4414                    # Record kind: S_LOCAL
	.long	4985                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp890:
	.cv_def_range	 .Ltmp220 .Ltmp224, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp880:
	.p2align	2
	.cv_linetable	66, "??$_Range_construct_or_tidy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEBH0Uforward_iterator_tag@1@@Z", .Lfunc_end66
	.section	.debug$S,"dr",associative,"?end@?$initializer_list@H@std@@QEBAPEBHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::initializer_list<int>::end
	.long	.Ltmp892-.Ltmp891       # Subsection size
.Ltmp891:
	.short	.Ltmp894-.Ltmp893       # Record length
.Ltmp893:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end67-"?end@?$initializer_list@H@std@@QEBAPEBHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5091                    # Function type index
	.secrel32	"?end@?$initializer_list@H@std@@QEBAPEBHXZ" # Function section relative address
	.secidx	"?end@?$initializer_list@H@std@@QEBAPEBHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::initializer_list<int>::end" # Function name
.Ltmp894:
	.short	.Ltmp896-.Ltmp895       # Record length
.Ltmp895:
	.short	4414                    # Record kind: S_LOCAL
	.long	4420                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp896:
	.cv_def_range	 .Ltmp225 .Ltmp226, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp892:
	.p2align	2
	.cv_linetable	67, "?end@?$initializer_list@H@std@@QEBAPEBHXZ", .Lfunc_end67
	.section	.debug$S,"dr",associative,"?begin@?$initializer_list@H@std@@QEBAPEBHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::initializer_list<int>::begin
	.long	.Ltmp898-.Ltmp897       # Subsection size
.Ltmp897:
	.short	.Ltmp900-.Ltmp899       # Record length
.Ltmp899:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end68-"?begin@?$initializer_list@H@std@@QEBAPEBHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5092                    # Function type index
	.secrel32	"?begin@?$initializer_list@H@std@@QEBAPEBHXZ" # Function section relative address
	.secidx	"?begin@?$initializer_list@H@std@@QEBAPEBHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::initializer_list<int>::begin" # Function name
.Ltmp900:
	.short	.Ltmp902-.Ltmp901       # Record length
.Ltmp901:
	.short	4414                    # Record kind: S_LOCAL
	.long	4420                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp902:
	.cv_def_range	 .Ltmp227 .Ltmp228, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp898:
	.p2align	2
	.cv_linetable	68, "?begin@?$initializer_list@H@std@@QEBAPEBHXZ", .Lfunc_end68
	.section	.debug$S,"dr",associative,"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc
	.long	.Ltmp904-.Ltmp903       # Subsection size
.Ltmp903:
	.short	.Ltmp906-.Ltmp905       # Record length
.Ltmp905:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end69-"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5093                    # Function type index
	.secrel32	"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ" # Function section relative address
	.secidx	"??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::~_Vector_alloc" # Function name
.Ltmp906:
	.short	.Ltmp908-.Ltmp907       # Record length
.Ltmp907:
	.short	4414                    # Record kind: S_LOCAL
	.long	4345                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp908:
	.cv_def_range	 .Ltmp231 .Ltmp234, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp904:
	.p2align	2
	.cv_linetable	69, "??1?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ", .Lfunc_end69
	.section	.debug$S,"dr",associative,"??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::forward<const std::allocator<int> &>
	.long	.Ltmp910-.Ltmp909       # Subsection size
.Ltmp909:
	.short	.Ltmp912-.Ltmp911       # Record length
.Ltmp911:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end70-"??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5095                    # Function type index
	.secrel32	"??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z" # Function section relative address
	.secidx	"??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::forward<const std::allocator<int> &>" # Function name
.Ltmp912:
	.short	.Ltmp914-.Ltmp913       # Record length
.Ltmp913:
	.short	4414                    # Record kind: S_LOCAL
	.long	4231                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Arg"
.Ltmp914:
	.cv_def_range	 .Ltmp235 .Ltmp236, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp910:
	.p2align	2
	.cv_linetable	70, "??$forward@AEBV?$allocator@H@std@@@std@@YAAEBV?$allocator@H@0@AEBV10@@Z", .Lfunc_end70
	.section	.debug$S,"dr",associative,"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<const std::allocator<int> &>
	.long	.Ltmp916-.Ltmp915       # Subsection size
.Ltmp915:
	.short	.Ltmp918-.Ltmp917       # Record length
.Ltmp917:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end71-"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5101                    # Function type index
	.secrel32	"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z" # Function section relative address
	.secidx	"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<const std::allocator<int> &>" # Function name
.Ltmp918:
	.short	.Ltmp920-.Ltmp919       # Record length
.Ltmp919:
	.short	4414                    # Record kind: S_LOCAL
	.long	4445                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp920:
	.cv_def_range	 .Ltmp237 .Ltmp238, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp922-.Ltmp921       # Record length
.Ltmp921:
	.short	4414                    # Record kind: S_LOCAL
	.long	5099                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp922:
	.cv_def_range	 .Ltmp237 .Ltmp238, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp924-.Ltmp923       # Record length
.Ltmp923:
	.short	4414                    # Record kind: S_LOCAL
	.long	4231                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Val1"
.Ltmp924:
	.cv_def_range	 .Ltmp237 .Ltmp238, "E\021O\001\000\000H\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp916:
	.p2align	2
	.cv_linetable	71, "??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z", .Lfunc_end71
	.section	.debug$S,"dr",associative,"?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy
	.long	.Ltmp926-.Ltmp925       # Subsection size
.Ltmp925:
	.short	.Ltmp928-.Ltmp927       # Record length
.Ltmp927:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end72-"?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5102                    # Function type index
	.secrel32	"?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ" # Function section relative address
	.secidx	"?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Alloc_proxy" # Function name
.Ltmp928:
	.short	.Ltmp930-.Ltmp929       # Record length
.Ltmp929:
	.short	4414                    # Record kind: S_LOCAL
	.long	4345                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp930:
	.cv_def_range	 .Ltmp239 .Ltmp240, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp932-.Ltmp931       # Record length
.Ltmp931:
	.short	4414                    # Record kind: S_LOCAL
	.long	4386                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Proxy_allocator"
.Ltmp932:
	.cv_def_range	 .Ltmp239 .Ltmp240, "E\021O\001\000\000h\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp926:
	.p2align	2
	.cv_linetable	72, "?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ", .Lfunc_end72
	.section	.debug$S,"dr",associative,"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_val<std::_Simple_types<int> >::_Vector_val
	.long	.Ltmp934-.Ltmp933       # Subsection size
.Ltmp933:
	.short	.Ltmp936-.Ltmp935       # Record length
.Ltmp935:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end73-"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5103                    # Function type index
	.secrel32	"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ" # Function section relative address
	.secidx	"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_val<std::_Simple_types<int> >::_Vector_val" # Function name
.Ltmp936:
	.short	.Ltmp938-.Ltmp937       # Record length
.Ltmp937:
	.short	4414                    # Record kind: S_LOCAL
	.long	4481                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp938:
	.cv_def_range	 .Ltmp241 .Ltmp242, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp934:
	.p2align	2
	.cv_linetable	73, "??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ", .Lfunc_end73
	.section	.debug$S,"dr",associative,"??0_Container_base12@std@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Container_base12::_Container_base12
	.long	.Ltmp940-.Ltmp939       # Subsection size
.Ltmp939:
	.short	.Ltmp942-.Ltmp941       # Record length
.Ltmp941:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end74-"??0_Container_base12@std@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5104                    # Function type index
	.secrel32	"??0_Container_base12@std@@QEAA@XZ" # Function section relative address
	.secidx	"??0_Container_base12@std@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Container_base12::_Container_base12" # Function name
.Ltmp942:
	.short	.Ltmp944-.Ltmp943       # Record length
.Ltmp943:
	.short	4414                    # Record kind: S_LOCAL
	.long	4531                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp944:
	.cv_def_range	 .Ltmp243 .Ltmp244, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp940:
	.p2align	2
	.cv_linetable	74, "??0_Container_base12@std@@QEAA@XZ", .Lfunc_end74
	.section	.debug$S,"dr",associative,"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	.long	.Ltmp946-.Ltmp945       # Subsection size
.Ltmp945:
	.short	.Ltmp948-.Ltmp947       # Record length
.Ltmp947:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end75-"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5105                    # Function type index
	.secrel32	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ" # Function section relative address
	.secidx	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal" # Function name
.Ltmp948:
	.short	.Ltmp950-.Ltmp949       # Record length
.Ltmp949:
	.short	4414                    # Record kind: S_LOCAL
	.long	4345                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp950:
	.cv_def_range	 .Ltmp245 .Ltmp246, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp946:
	.p2align	2
	.cv_linetable	75, "?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$allocator@H@2@XZ", .Lfunc_end75
	.section	.debug$S,"dr",associative,"??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::allocator<std::_Container_proxy>::allocator<int>
	.long	.Ltmp952-.Ltmp951       # Subsection size
.Ltmp951:
	.short	.Ltmp954-.Ltmp953       # Record length
.Ltmp953:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end76-"??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5107                    # Function type index
	.secrel32	"??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z" # Function section relative address
	.secidx	"??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::allocator<std::_Container_proxy>::allocator<int>" # Function name
.Ltmp954:
	.short	.Ltmp956-.Ltmp955       # Record length
.Ltmp955:
	.short	4414                    # Record kind: S_LOCAL
	.long	4497                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp956:
	.cv_def_range	 .Ltmp247 .Ltmp248, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp958-.Ltmp957       # Record length
.Ltmp957:
	.short	4414                    # Record kind: S_LOCAL
	.long	4231                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp958:
	.cv_def_range	 .Ltmp247 .Ltmp248, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp952:
	.p2align	2
	.cv_linetable	76, "??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z", .Lfunc_end76
	.section	.debug$S,"dr",associative,"??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Unfancy<std::_Container_proxy>
	.long	.Ltmp960-.Ltmp959       # Subsection size
.Ltmp959:
	.short	.Ltmp962-.Ltmp961       # Record length
.Ltmp961:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end77-"??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5110                    # Function type index
	.secrel32	"??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z" # Function section relative address
	.secidx	"??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Unfancy<std::_Container_proxy>" # Function name
.Ltmp962:
	.short	.Ltmp964-.Ltmp963       # Record length
.Ltmp963:
	.short	4414                    # Record kind: S_LOCAL
	.long	4358                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Ptr"
.Ltmp964:
	.cv_def_range	 .Ltmp249 .Ltmp250, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp960:
	.p2align	2
	.cv_linetable	77, "??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z", .Lfunc_end77
	.section	.debug$S,"dr",associative,"?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::allocator<std::_Container_proxy>::allocate
	.long	.Ltmp966-.Ltmp965       # Subsection size
.Ltmp965:
	.short	.Ltmp968-.Ltmp967       # Record length
.Ltmp967:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end78-"?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5111                    # Function type index
	.secrel32	"?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z" # Function section relative address
	.secidx	"?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::allocator<std::_Container_proxy>::allocate" # Function name
.Ltmp968:
	.short	.Ltmp970-.Ltmp969       # Record length
.Ltmp969:
	.short	4414                    # Record kind: S_LOCAL
	.long	4497                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp970:
	.cv_def_range	 .Ltmp251 .Ltmp252, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp972-.Ltmp971       # Record length
.Ltmp971:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Count"
.Ltmp972:
	.cv_def_range	 .Ltmp251 .Ltmp252, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp966:
	.p2align	2
	.cv_linetable	78, "?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z", .Lfunc_end78
	.section	.debug$S,"dr",associative,"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myproxy
	.long	.Ltmp974-.Ltmp973       # Subsection size
.Ltmp973:
	.short	.Ltmp976-.Ltmp975       # Record length
.Ltmp975:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end79-"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5112                    # Function type index
	.secrel32	"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ" # Function section relative address
	.secidx	"?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myproxy" # Function name
.Ltmp976:
	.short	.Ltmp978-.Ltmp977       # Record length
.Ltmp977:
	.short	4414                    # Record kind: S_LOCAL
	.long	4345                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp978:
	.cv_def_range	 .Ltmp253 .Ltmp254, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp974:
	.p2align	2
	.cv_linetable	79, "?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ", .Lfunc_end79
	.section	.debug$S,"dr",associative,"??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	.long	.Ltmp980-.Ltmp979       # Subsection size
.Ltmp979:
	.short	.Ltmp982-.Ltmp981       # Record length
.Ltmp981:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end80-"??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5116                    # Function type index
	.secrel32	"??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z" # Function section relative address
	.secidx	"??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>" # Function name
.Ltmp982:
	.short	.Ltmp984-.Ltmp983       # Record length
.Ltmp983:
	.short	4414                    # Record kind: S_LOCAL
	.long	4545                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp984:
	.cv_def_range	 .Ltmp255 .Ltmp256, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp986-.Ltmp985       # Record length
.Ltmp985:
	.short	4414                    # Record kind: S_LOCAL
	.long	4361                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Ptr"
.Ltmp986:
	.cv_def_range	 .Ltmp255 .Ltmp256, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp988-.Ltmp987       # Record length
.Ltmp987:
	.short	4414                    # Record kind: S_LOCAL
	.long	5113                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Args"
.Ltmp988:
	.cv_def_range	 .Ltmp255 .Ltmp256, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp980:
	.p2align	2
	.cv_linetable	80, "??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z", .Lfunc_end80
	.section	.debug$S,"dr",associative,"??0_Container_proxy@std@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Container_proxy::_Container_proxy
	.long	.Ltmp990-.Ltmp989       # Subsection size
.Ltmp989:
	.short	.Ltmp992-.Ltmp991       # Record length
.Ltmp991:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end81-"??0_Container_proxy@std@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5117                    # Function type index
	.secrel32	"??0_Container_proxy@std@@QEAA@XZ" # Function section relative address
	.secidx	"??0_Container_proxy@std@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Container_proxy::_Container_proxy" # Function name
.Ltmp992:
	.short	.Ltmp994-.Ltmp993       # Record length
.Ltmp993:
	.short	4414                    # Record kind: S_LOCAL
	.long	4358                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp994:
	.cv_def_range	 .Ltmp257 .Ltmp258, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp990:
	.p2align	2
	.cv_linetable	81, "??0_Container_proxy@std@@QEAA@XZ", .Lfunc_end81
	.section	.debug$S,"dr",associative,"??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::addressof<std::_Vector_val<std::_Simple_types<int> > >
	.long	.Ltmp996-.Ltmp995       # Subsection size
.Ltmp995:
	.short	.Ltmp998-.Ltmp997       # Record length
.Ltmp997:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end82-"??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5120                    # Function type index
	.secrel32	"??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z" # Function section relative address
	.secidx	"??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::addressof<std::_Vector_val<std::_Simple_types<int> > >" # Function name
.Ltmp998:
	.short	.Ltmp1000-.Ltmp999      # Record length
.Ltmp999:
	.short	4414                    # Record kind: S_LOCAL
	.long	4372                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Val"
.Ltmp1000:
	.cv_def_range	 .Ltmp259 .Ltmp260, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp996:
	.p2align	2
	.cv_linetable	82, "??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AEAV10@@Z", .Lfunc_end82
	.section	.debug$S,"dr",associative,"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
	.long	.Ltmp1002-.Ltmp1001     # Subsection size
.Ltmp1001:
	.short	.Ltmp1004-.Ltmp1003     # Record length
.Ltmp1003:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end83-"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5121                    # Function type index
	.secrel32	"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ" # Function section relative address
	.secidx	"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first" # Function name
.Ltmp1004:
	.short	.Ltmp1006-.Ltmp1005     # Record length
.Ltmp1005:
	.short	4414                    # Record kind: S_LOCAL
	.long	4445                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1006:
	.cv_def_range	 .Ltmp261 .Ltmp262, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1002:
	.p2align	2
	.cv_linetable	83, "?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ", .Lfunc_end83
	.section	.debug$S,"dr",associative,"??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Allocate<16,std::_Default_allocate_traits,0>
	.long	.Ltmp1008-.Ltmp1007     # Subsection size
.Ltmp1007:
	.short	.Ltmp1010-.Ltmp1009     # Record length
.Ltmp1009:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end84-"??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5123                    # Function type index
	.secrel32	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z" # Function section relative address
	.secidx	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Allocate<16,std::_Default_allocate_traits,0>" # Function name
.Ltmp1010:
	.short	.Ltmp1012-.Ltmp1011     # Record length
.Ltmp1011:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Bytes"
.Ltmp1012:
	.cv_def_range	 .Ltmp263 .Ltmp268, "E\021O\001\000\000(\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1008:
	.p2align	2
	.cv_linetable	84, "??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z", .Lfunc_end84
	.section	.debug$S,"dr",associative,"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Get_size_of_n<16>
	.long	.Ltmp1014-.Ltmp1013     # Subsection size
.Ltmp1013:
	.short	.Ltmp1016-.Ltmp1015     # Record length
.Ltmp1015:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end85-"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5125                    # Function type index
	.secrel32	"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z" # Function section relative address
	.secidx	"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Get_size_of_n<16>" # Function name
.Ltmp1016:
	.short	.Ltmp1018-.Ltmp1017     # Record length
.Ltmp1017:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Count"
.Ltmp1018:
	.cv_def_range	 .Ltmp269 .Ltmp272, "E\021O\001\000\000\020\000\000\000"
	.short	.Ltmp1020-.Ltmp1019     # Record length
.Ltmp1019:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Max_possible"
.Ltmp1020:
	.cv_def_range	 .Ltmp269 .Ltmp272, "E\021O\001\000\000\b\000\000\000"
	.short	.Ltmp1022-.Ltmp1021     # Record length
.Ltmp1021:
	.short	4414                    # Record kind: S_LOCAL
	.long	35                      # TypeIndex
	.short	0                       # Flags
	.asciz	"_Result"
.Ltmp1022:
	.cv_def_range	 .Ltmp269 .Ltmp272, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1014:
	.p2align	2
	.cv_linetable	85, "??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z", .Lfunc_end85
	.section	.debug$S,"dr",associative,"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	.long	.Ltmp1024-.Ltmp1023     # Subsection size
.Ltmp1023:
	.short	.Ltmp1026-.Ltmp1025     # Record length
.Ltmp1025:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end86-"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5126                    # Function type index
	.secrel32	"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" # Function section relative address
	.secidx	"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>" # Function name
.Ltmp1026:
	.short	.Ltmp1028-.Ltmp1027     # Record length
.Ltmp1027:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Bytes"
.Ltmp1028:
	.cv_def_range	 .Ltmp273 .Ltmp283, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp1030-.Ltmp1029     # Record length
.Ltmp1029:
	.short	4414                    # Record kind: S_LOCAL
	.long	35                      # TypeIndex
	.short	0                       # Flags
	.asciz	"_Block_size"
.Ltmp1030:
	.cv_def_range	 .Ltmp273 .Ltmp283, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp1032-.Ltmp1031     # Record length
.Ltmp1031:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Ptr_container"
.Ltmp1032:
	.cv_def_range	 .Ltmp273 .Ltmp283, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp1034-.Ltmp1033     # Record length
.Ltmp1033:
	.short	4414                    # Record kind: S_LOCAL
	.long	5127                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Ptr"
.Ltmp1034:
	.cv_def_range	 .Ltmp273 .Ltmp283, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1024:
	.p2align	2
	.cv_linetable	86, "??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z", .Lfunc_end86
	.section	.debug$S,"dr",associative,"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Default_allocate_traits::_Allocate
	.long	.Ltmp1036-.Ltmp1035     # Subsection size
.Ltmp1035:
	.short	.Ltmp1038-.Ltmp1037     # Record length
.Ltmp1037:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end87-"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5134                    # Function type index
	.secrel32	"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z" # Function section relative address
	.secidx	"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Default_allocate_traits::_Allocate" # Function name
.Ltmp1038:
	.short	.Ltmp1040-.Ltmp1039     # Record length
.Ltmp1039:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Bytes"
.Ltmp1040:
	.cv_def_range	 .Ltmp284 .Ltmp285, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1036:
	.p2align	2
	.cv_linetable	87, "?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z", .Lfunc_end87
	.section	.debug$S,"dr",associative,"??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::forward<std::_Container_proxy>
	.long	.Ltmp1042-.Ltmp1041     # Subsection size
.Ltmp1041:
	.short	.Ltmp1044-.Ltmp1043     # Record length
.Ltmp1043:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end88-"??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5136                    # Function type index
	.secrel32	"??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z" # Function section relative address
	.secidx	"??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::forward<std::_Container_proxy>" # Function name
.Ltmp1044:
	.short	.Ltmp1046-.Ltmp1045     # Record length
.Ltmp1045:
	.short	4414                    # Record kind: S_LOCAL
	.long	4488                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Arg"
.Ltmp1046:
	.cv_def_range	 .Ltmp286 .Ltmp287, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1042:
	.p2align	2
	.cv_linetable	88, "??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z", .Lfunc_end88
	.section	.debug$S,"dr",associative,"?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::vector<int,std::allocator<int> >::_Buy
	.long	.Ltmp1048-.Ltmp1047     # Subsection size
.Ltmp1047:
	.short	.Ltmp1050-.Ltmp1049     # Record length
.Ltmp1049:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end89-"?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5137                    # Function type index
	.secrel32	"?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z" # Function section relative address
	.secidx	"?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::vector<int,std::allocator<int> >::_Buy" # Function name
.Ltmp1050:
	.short	.Ltmp1052-.Ltmp1051     # Record length
.Ltmp1051:
	.short	4414                    # Record kind: S_LOCAL
	.long	4227                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1052:
	.cv_def_range	 .Ltmp288 .Ltmp293, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp1054-.Ltmp1053     # Record length
.Ltmp1053:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Newcapacity"
.Ltmp1054:
	.cv_def_range	 .Ltmp288 .Ltmp293, "E\021O\001\000\000X\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1048:
	.p2align	2
	.cv_linetable	89, "?_Buy@?$vector@HV?$allocator@H@std@@@std@@AEAA_N_K@Z", .Lfunc_end89
	.section	.debug$S,"dr",associative,"??$_Convert_size@_K@std@@YA_K_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Convert_size<unsigned long long>
	.long	.Ltmp1056-.Ltmp1055     # Subsection size
.Ltmp1055:
	.short	.Ltmp1058-.Ltmp1057     # Record length
.Ltmp1057:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end90-"??$_Convert_size@_K@std@@YA_K_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5138                    # Function type index
	.secrel32	"??$_Convert_size@_K@std@@YA_K_K@Z" # Function section relative address
	.secidx	"??$_Convert_size@_K@std@@YA_K_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Convert_size<unsigned long long>" # Function name
.Ltmp1058:
	.short	.Ltmp1060-.Ltmp1059     # Record length
.Ltmp1059:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Len"
.Ltmp1060:
	.cv_def_range	 .Ltmp294 .Ltmp295, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1056:
	.p2align	2
	.cv_linetable	90, "??$_Convert_size@_K@std@@YA_K_K@Z", .Lfunc_end90
	.section	.debug$S,"dr",associative,"??$distance@PEBH@std@@YA_JPEBH0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::distance<const int *>
	.long	.Ltmp1062-.Ltmp1061     # Subsection size
.Ltmp1061:
	.short	.Ltmp1064-.Ltmp1063     # Record length
.Ltmp1063:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end91-"??$distance@PEBH@std@@YA_JPEBH0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5140                    # Function type index
	.secrel32	"??$distance@PEBH@std@@YA_JPEBH0@Z" # Function section relative address
	.secidx	"??$distance@PEBH@std@@YA_JPEBH0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::distance<const int *>" # Function name
.Ltmp1064:
	.short	.Ltmp1066-.Ltmp1065     # Record length
.Ltmp1065:
	.short	4414                    # Record kind: S_LOCAL
	.long	4171                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1066:
	.cv_def_range	 .Ltmp296 .Ltmp297, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1068-.Ltmp1067     # Record length
.Ltmp1067:
	.short	4414                    # Record kind: S_LOCAL
	.long	4171                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1068:
	.cv_def_range	 .Ltmp296 .Ltmp297, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1062:
	.p2align	2
	.cv_linetable	91, "??$distance@PEBH@std@@YA_JPEBH0@Z", .Lfunc_end91
	.section	.debug$S,"dr",associative,"??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::vector<int,std::allocator<int> >::_Ucopy<const int *>
	.long	.Ltmp1070-.Ltmp1069     # Subsection size
.Ltmp1069:
	.short	.Ltmp1072-.Ltmp1071     # Record length
.Ltmp1071:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end92-"??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5143                    # Function type index
	.secrel32	"??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z" # Function section relative address
	.secidx	"??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::vector<int,std::allocator<int> >::_Ucopy<const int *>" # Function name
.Ltmp1072:
	.short	.Ltmp1074-.Ltmp1073     # Record length
.Ltmp1073:
	.short	4414                    # Record kind: S_LOCAL
	.long	4227                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1074:
	.cv_def_range	 .Ltmp298 .Ltmp299, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1076-.Ltmp1075     # Record length
.Ltmp1075:
	.short	4414                    # Record kind: S_LOCAL
	.long	4171                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1076:
	.cv_def_range	 .Ltmp298 .Ltmp299, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1078-.Ltmp1077     # Record length
.Ltmp1077:
	.short	4414                    # Record kind: S_LOCAL
	.long	4171                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1078:
	.cv_def_range	 .Ltmp298 .Ltmp299, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1080-.Ltmp1079     # Record length
.Ltmp1079:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp1080:
	.cv_def_range	 .Ltmp298 .Ltmp299, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1070:
	.p2align	2
	.cv_linetable	92, "??$_Ucopy@PEBH@?$vector@HV?$allocator@H@std@@@std@@AEAAPEAHPEBH0PEAH@Z", .Lfunc_end92
	.section	.debug$S,"dr",associative,"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
	.long	.Ltmp1082-.Ltmp1081     # Subsection size
.Ltmp1081:
	.short	.Ltmp1084-.Ltmp1083     # Record length
.Ltmp1083:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end93-"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5144                    # Function type index
	.secrel32	"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ" # Function section relative address
	.secidx	"?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast" # Function name
.Ltmp1084:
	.short	.Ltmp1086-.Ltmp1085     # Record length
.Ltmp1085:
	.short	4414                    # Record kind: S_LOCAL
	.long	4345                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1086:
	.cv_def_range	 .Ltmp300 .Ltmp301, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1082:
	.p2align	2
	.cv_linetable	93, "?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ", .Lfunc_end93
	.section	.debug$S,"dr",associative,"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::vector<int,std::allocator<int> >::_Tidy
	.long	.Ltmp1088-.Ltmp1087     # Subsection size
.Ltmp1087:
	.short	.Ltmp1090-.Ltmp1089     # Record length
.Ltmp1089:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end94-"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5145                    # Function type index
	.secrel32	"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ" # Function section relative address
	.secidx	"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::vector<int,std::allocator<int> >::_Tidy" # Function name
.Ltmp1090:
	.short	.Ltmp1092-.Ltmp1091     # Record length
.Ltmp1091:
	.short	4414                    # Record kind: S_LOCAL
	.long	4227                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1092:
	.cv_def_range	 .Ltmp302 .Ltmp305, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1088:
	.p2align	2
	.cv_linetable	94, "?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ", .Lfunc_end94
	.section	.debug$S,"dr",associative,"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
	.long	.Ltmp1094-.Ltmp1093     # Subsection size
.Ltmp1093:
	.short	.Ltmp1096-.Ltmp1095     # Record length
.Ltmp1095:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end95-"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5146                    # Function type index
	.secrel32	"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ" # Function section relative address
	.secidx	"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend" # Function name
.Ltmp1096:
	.short	.Ltmp1098-.Ltmp1097     # Record length
.Ltmp1097:
	.short	4414                    # Record kind: S_LOCAL
	.long	4345                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1098:
	.cv_def_range	 .Ltmp306 .Ltmp307, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1094:
	.p2align	2
	.cv_linetable	95, "?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ", .Lfunc_end95
	.section	.debug$S,"dr",associative,"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::vector<int,std::allocator<int> >::max_size
	.long	.Ltmp1100-.Ltmp1099     # Subsection size
.Ltmp1099:
	.short	.Ltmp1102-.Ltmp1101     # Record length
.Ltmp1101:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end96-"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5147                    # Function type index
	.secrel32	"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # Function section relative address
	.secidx	"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::vector<int,std::allocator<int> >::max_size" # Function name
.Ltmp1102:
	.short	.Ltmp1104-.Ltmp1103     # Record length
.Ltmp1103:
	.short	4414                    # Record kind: S_LOCAL
	.long	4299                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1104:
	.cv_def_range	 .Ltmp308 .Ltmp309, "E\021O\001\000\000(\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1100:
	.p2align	2
	.cv_linetable	96, "?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ", .Lfunc_end96
	.section	.debug$S,"dr",associative,"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::vector<int,std::allocator<int> >::_Xlength
	.long	.Ltmp1106-.Ltmp1105     # Subsection size
.Ltmp1105:
	.short	.Ltmp1108-.Ltmp1107     # Record length
.Ltmp1107:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end97-"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5148                    # Function type index
	.secrel32	"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ" # Function section relative address
	.secidx	"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::vector<int,std::allocator<int> >::_Xlength" # Function name
.Ltmp1108:
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1106:
	.p2align	2
	.cv_linetable	97, "?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ", .Lfunc_end97
	.section	.debug$S,"dr",associative,"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::allocator<int>::allocate
	.long	.Ltmp1110-.Ltmp1109     # Subsection size
.Ltmp1109:
	.short	.Ltmp1112-.Ltmp1111     # Record length
.Ltmp1111:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end98-"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5149                    # Function type index
	.secrel32	"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z" # Function section relative address
	.secidx	"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::allocator<int>::allocate" # Function name
.Ltmp1112:
	.short	.Ltmp1114-.Ltmp1113     # Record length
.Ltmp1113:
	.short	4414                    # Record kind: S_LOCAL
	.long	4397                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1114:
	.cv_def_range	 .Ltmp312 .Ltmp313, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1116-.Ltmp1115     # Record length
.Ltmp1115:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Count"
.Ltmp1116:
	.cv_def_range	 .Ltmp312 .Ltmp313, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1110:
	.p2align	2
	.cv_linetable	98, "?allocate@?$allocator@H@std@@QEAAPEAH_K@Z", .Lfunc_end98
	.section	.debug$S,"dr",associative,"??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Min_value<unsigned long long>
	.long	.Ltmp1118-.Ltmp1117     # Subsection size
.Ltmp1117:
	.short	.Ltmp1120-.Ltmp1119     # Record length
.Ltmp1119:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end99-"??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5153                    # Function type index
	.secrel32	"??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z" # Function section relative address
	.secidx	"??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Min_value<unsigned long long>" # Function name
.Ltmp1120:
	.short	.Ltmp1122-.Ltmp1121     # Record length
.Ltmp1121:
	.short	4414                    # Record kind: S_LOCAL
	.long	5150                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Left"
.Ltmp1122:
	.cv_def_range	 .Ltmp314 .Ltmp315, "E\021O\001\000\000\b\000\000\000"
	.short	.Ltmp1124-.Ltmp1123     # Record length
.Ltmp1123:
	.short	4414                    # Record kind: S_LOCAL
	.long	5150                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Right"
.Ltmp1124:
	.cv_def_range	 .Ltmp314 .Ltmp315, "E\021O\001\000\000\020\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1118:
	.p2align	2
	.cv_linetable	99, "??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z", .Lfunc_end99
	.section	.debug$S,"dr",associative,"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Default_allocator_traits<std::allocator<int> >::max_size
	.long	.Ltmp1126-.Ltmp1125     # Subsection size
.Ltmp1125:
	.short	.Ltmp1128-.Ltmp1127     # Record length
.Ltmp1127:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end100-"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5154                    # Function type index
	.secrel32	"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z" # Function section relative address
	.secidx	"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Default_allocator_traits<std::allocator<int> >::max_size" # Function name
.Ltmp1128:
	.short	.Ltmp1130-.Ltmp1129     # Record length
.Ltmp1129:
	.short	4414                    # Record kind: S_LOCAL
	.long	4231                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1130:
	.cv_def_range	 .Ltmp316 .Ltmp317, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1126:
	.p2align	2
	.cv_linetable	100, "?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z", .Lfunc_end100
	.section	.debug$S,"dr",associative,"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
	.long	.Ltmp1132-.Ltmp1131     # Subsection size
.Ltmp1131:
	.short	.Ltmp1134-.Ltmp1133     # Record length
.Ltmp1133:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end101-"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5155                    # Function type index
	.secrel32	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ" # Function section relative address
	.secidx	"?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal" # Function name
.Ltmp1134:
	.short	.Ltmp1136-.Ltmp1135     # Record length
.Ltmp1135:
	.short	4414                    # Record kind: S_LOCAL
	.long	4355                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1136:
	.cv_def_range	 .Ltmp318 .Ltmp319, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1132:
	.p2align	2
	.cv_linetable	101, "?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$allocator@H@2@XZ", .Lfunc_end101
	.section	.debug$S,"dr",associative,"?max@?$numeric_limits@_J@std@@SA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::numeric_limits<long long>::max
	.long	.Ltmp1138-.Ltmp1137     # Subsection size
.Ltmp1137:
	.short	.Ltmp1140-.Ltmp1139     # Record length
.Ltmp1139:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end102-"?max@?$numeric_limits@_J@std@@SA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5178                    # Function type index
	.secrel32	"?max@?$numeric_limits@_J@std@@SA_JXZ" # Function section relative address
	.secidx	"?max@?$numeric_limits@_J@std@@SA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::numeric_limits<long long>::max" # Function name
.Ltmp1140:
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1138:
	.p2align	2
	.cv_linetable	102, "?max@?$numeric_limits@_J@std@@SA_JXZ", .Lfunc_end102
	.section	.debug$S,"dr",associative,"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
	.long	.Ltmp1142-.Ltmp1141     # Subsection size
.Ltmp1141:
	.short	.Ltmp1144-.Ltmp1143     # Record length
.Ltmp1143:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end103-"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5179                    # Function type index
	.secrel32	"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ" # Function section relative address
	.secidx	"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first" # Function name
.Ltmp1144:
	.short	.Ltmp1146-.Ltmp1145     # Record length
.Ltmp1145:
	.short	4414                    # Record kind: S_LOCAL
	.long	4448                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1146:
	.cv_def_range	 .Ltmp321 .Ltmp322, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1142:
	.p2align	2
	.cv_linetable	103, "?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ", .Lfunc_end103
	.section	.debug$S,"dr",associative,"??$_Get_size_of_n@$03@std@@YA_K_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Get_size_of_n<4>
	.long	.Ltmp1148-.Ltmp1147     # Subsection size
.Ltmp1147:
	.short	.Ltmp1150-.Ltmp1149     # Record length
.Ltmp1149:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end104-"??$_Get_size_of_n@$03@std@@YA_K_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5125                    # Function type index
	.secrel32	"??$_Get_size_of_n@$03@std@@YA_K_K@Z" # Function section relative address
	.secidx	"??$_Get_size_of_n@$03@std@@YA_K_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Get_size_of_n<4>" # Function name
.Ltmp1150:
	.short	.Ltmp1152-.Ltmp1151     # Record length
.Ltmp1151:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Count"
.Ltmp1152:
	.cv_def_range	 .Ltmp323 .Ltmp326, "E\021O\001\000\000\020\000\000\000"
	.short	.Ltmp1154-.Ltmp1153     # Record length
.Ltmp1153:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Max_possible"
.Ltmp1154:
	.cv_def_range	 .Ltmp323 .Ltmp326, "E\021O\001\000\000\b\000\000\000"
	.short	.Ltmp1156-.Ltmp1155     # Record length
.Ltmp1155:
	.short	4414                    # Record kind: S_LOCAL
	.long	35                      # TypeIndex
	.short	0                       # Flags
	.asciz	"_Result"
.Ltmp1156:
	.cv_def_range	 .Ltmp323 .Ltmp326, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1148:
	.p2align	2
	.cv_linetable	104, "??$_Get_size_of_n@$03@std@@YA_K_K@Z", .Lfunc_end104
	.section	.debug$S,"dr",associative,"??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Distance1<const int *>
	.long	.Ltmp1158-.Ltmp1157     # Subsection size
.Ltmp1157:
	.short	.Ltmp1160-.Ltmp1159     # Record length
.Ltmp1159:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end105-"??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5182                    # Function type index
	.secrel32	"??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z" # Function section relative address
	.secidx	"??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Distance1<const int *>" # Function name
.Ltmp1160:
	.short	.Ltmp1162-.Ltmp1161     # Record length
.Ltmp1161:
	.short	4414                    # Record kind: S_LOCAL
	.long	4171                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1162:
	.cv_def_range	 .Ltmp327 .Ltmp328, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1164-.Ltmp1163     # Record length
.Ltmp1163:
	.short	4414                    # Record kind: S_LOCAL
	.long	4171                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1164:
	.cv_def_range	 .Ltmp327 .Ltmp328, "E\021O\001\000\000\b\000\000\000"
	.short	.Ltmp1166-.Ltmp1165     # Record length
.Ltmp1165:
	.short	4414                    # Record kind: S_LOCAL
	.long	4890                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1166:
	.cv_def_range	 .Ltmp327 .Ltmp328, "E\021O\001\000\000\020\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1158:
	.p2align	2
	.cv_linetable	105, "??$_Distance1@PEBH@std@@YA_JPEBH0Urandom_access_iterator_tag@0@@Z", .Lfunc_end105
	.section	.debug$S,"dr",associative,"??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Uninitialized_copy<const int *,int *,std::allocator<int> >
	.long	.Ltmp1168-.Ltmp1167     # Subsection size
.Ltmp1167:
	.short	.Ltmp1170-.Ltmp1169     # Record length
.Ltmp1169:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end106-"??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5186                    # Function type index
	.secrel32	"??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z" # Function section relative address
	.secidx	"??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Uninitialized_copy<const int *,int *,std::allocator<int> >" # Function name
.Ltmp1170:
	.short	.Ltmp1172-.Ltmp1171     # Record length
.Ltmp1171:
	.short	4414                    # Record kind: S_LOCAL
	.long	5183                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1172:
	.cv_def_range	 .Ltmp329 .Ltmp330, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp1174-.Ltmp1173     # Record length
.Ltmp1173:
	.short	4414                    # Record kind: S_LOCAL
	.long	5183                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1174:
	.cv_def_range	 .Ltmp329 .Ltmp330, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp1176-.Ltmp1175     # Record length
.Ltmp1175:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp1176:
	.cv_def_range	 .Ltmp329 .Ltmp330, "E\021O\001\000\000x\000\000\000"
	.short	.Ltmp1178-.Ltmp1177     # Record length
.Ltmp1177:
	.short	4414                    # Record kind: S_LOCAL
	.long	4348                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Al"
.Ltmp1178:
	.cv_def_range	 .Ltmp329 .Ltmp330, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp1180-.Ltmp1179     # Record length
.Ltmp1179:
	.short	4414                    # Record kind: S_LOCAL
	.long	5183                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_UFirst"
.Ltmp1180:
	.cv_def_range	 .Ltmp329 .Ltmp330, "E\021O\001\000\000p\000\000\000"
	.short	.Ltmp1182-.Ltmp1181     # Record length
.Ltmp1181:
	.short	4414                    # Record kind: S_LOCAL
	.long	5183                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_ULast"
.Ltmp1182:
	.cv_def_range	 .Ltmp329 .Ltmp330, "E\021O\001\000\000h\000\000\000"
	.short	.Ltmp1184-.Ltmp1183     # Record length
.Ltmp1183:
	.short	4414                    # Record kind: S_LOCAL
	.long	4401                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_UDest"
.Ltmp1184:
	.cv_def_range	 .Ltmp329 .Ltmp330, "E\021O\001\000\000`\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1168:
	.p2align	2
	.cv_linetable	106, "??$_Uninitialized_copy@PEBHPEAHV?$allocator@H@std@@@std@@YAPEAHQEBH0PEAHAEAV?$allocator@H@0@@Z", .Lfunc_end106
	.section	.debug$S,"dr",associative,"??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Get_unwrapped<const int>
	.long	.Ltmp1186-.Ltmp1185     # Subsection size
.Ltmp1185:
	.short	.Ltmp1188-.Ltmp1187     # Record length
.Ltmp1187:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end107-"??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5189                    # Function type index
	.secrel32	"??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z" # Function section relative address
	.secidx	"??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Get_unwrapped<const int>" # Function name
.Ltmp1188:
	.short	.Ltmp1190-.Ltmp1189     # Record length
.Ltmp1189:
	.short	4414                    # Record kind: S_LOCAL
	.long	5183                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Ptr"
.Ltmp1190:
	.cv_def_range	 .Ltmp331 .Ltmp332, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1186:
	.p2align	2
	.cv_linetable	107, "??$_Get_unwrapped@$$CBH@std@@YAPEBHQEBH@Z", .Lfunc_end107
	.section	.debug$S,"dr",associative,"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Get_unwrapped_n<int,long long,0>
	.long	.Ltmp1192-.Ltmp1191     # Subsection size
.Ltmp1191:
	.short	.Ltmp1194-.Ltmp1193     # Record length
.Ltmp1193:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end108-"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5192                    # Function type index
	.secrel32	"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z" # Function section relative address
	.secidx	"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Get_unwrapped_n<int,long long,0>" # Function name
.Ltmp1194:
	.short	.Ltmp1196-.Ltmp1195     # Record length
.Ltmp1195:
	.short	4414                    # Record kind: S_LOCAL
	.long	4401                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Src"
.Ltmp1196:
	.cv_def_range	 .Ltmp333 .Ltmp334, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1198-.Ltmp1197     # Record length
.Ltmp1197:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1198:
	.cv_def_range	 .Ltmp333 .Ltmp334, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1192:
	.p2align	2
	.cv_linetable	108, "??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z", .Lfunc_end108
	.section	.debug$S,"dr",associative,"??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Idl_distance<const int *,const int *>
	.long	.Ltmp1200-.Ltmp1199     # Subsection size
.Ltmp1199:
	.short	.Ltmp1202-.Ltmp1201     # Record length
.Ltmp1201:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end109-"??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5196                    # Function type index
	.secrel32	"??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z" # Function section relative address
	.secidx	"??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Idl_distance<const int *,const int *>" # Function name
.Ltmp1202:
	.short	.Ltmp1204-.Ltmp1203     # Record length
.Ltmp1203:
	.short	4414                    # Record kind: S_LOCAL
	.long	5193                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1204:
	.cv_def_range	 .Ltmp335 .Ltmp336, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1206-.Ltmp1205     # Record length
.Ltmp1205:
	.short	4414                    # Record kind: S_LOCAL
	.long	5193                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1206:
	.cv_def_range	 .Ltmp335 .Ltmp336, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1200:
	.p2align	2
	.cv_linetable	109, "??$_Idl_distance@PEBHPEBH@std@@YA?A?<auto>@@AEBQEBH0@Z", .Lfunc_end109
	.section	.debug$S,"dr",associative,"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Seek_wrapped<int>
	.long	.Ltmp1208-.Ltmp1207     # Subsection size
.Ltmp1207:
	.short	.Ltmp1210-.Ltmp1209     # Record length
.Ltmp1209:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end110-"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5199                    # Function type index
	.secrel32	"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z" # Function section relative address
	.secidx	"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Seek_wrapped<int>" # Function name
.Ltmp1210:
	.short	.Ltmp1212-.Ltmp1211     # Record length
.Ltmp1211:
	.short	4414                    # Record kind: S_LOCAL
	.long	4381                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_It"
.Ltmp1212:
	.cv_def_range	 .Ltmp337 .Ltmp338, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1214-.Ltmp1213     # Record length
.Ltmp1213:
	.short	4414                    # Record kind: S_LOCAL
	.long	4401                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_UIt"
.Ltmp1214:
	.cv_def_range	 .Ltmp337 .Ltmp338, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1208:
	.p2align	2
	.cv_linetable	110, "??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z", .Lfunc_end110
	.section	.debug$S,"dr",associative,"??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Uninitialized_copy_al_unchecked<const int,int,std::allocator<int> >
	.long	.Ltmp1216-.Ltmp1215     # Subsection size
.Ltmp1215:
	.short	.Ltmp1218-.Ltmp1217     # Record length
.Ltmp1217:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end111-"??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5213                    # Function type index
	.secrel32	"??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z" # Function section relative address
	.secidx	"??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Uninitialized_copy_al_unchecked<const int,int,std::allocator<int> >" # Function name
.Ltmp1218:
	.short	.Ltmp1220-.Ltmp1219     # Record length
.Ltmp1219:
	.short	4414                    # Record kind: S_LOCAL
	.long	5183                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1220:
	.cv_def_range	 .Ltmp339 .Ltmp340, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1222-.Ltmp1221     # Record length
.Ltmp1221:
	.short	4414                    # Record kind: S_LOCAL
	.long	5183                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1222:
	.cv_def_range	 .Ltmp339 .Ltmp340, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1224-.Ltmp1223     # Record length
.Ltmp1223:
	.short	4414                    # Record kind: S_LOCAL
	.long	4401                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp1224:
	.cv_def_range	 .Ltmp339 .Ltmp340, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1226-.Ltmp1225     # Record length
.Ltmp1225:
	.short	4414                    # Record kind: S_LOCAL
	.long	4348                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1226:
	.cv_def_range	 .Ltmp339 .Ltmp340, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp1228-.Ltmp1227     # Record length
.Ltmp1227:
	.short	4414                    # Record kind: S_LOCAL
	.long	5205                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1228:
	.cv_def_range	 .Ltmp339 .Ltmp340, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp1230-.Ltmp1229     # Record length
.Ltmp1229:
	.short	4414                    # Record kind: S_LOCAL
	.long	4254                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1230:
	.cv_def_range	 .Ltmp339 .Ltmp340, "E\021O\001\000\000H\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1216:
	.p2align	2
	.cv_linetable	111, "??$_Uninitialized_copy_al_unchecked@$$CBHHV?$allocator@H@std@@@std@@YAPEAHQEBH0QEAHAEAV?$allocator@H@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z", .Lfunc_end111
	.section	.debug$S,"dr",associative,"??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Ptr_copy_cat<const int,int>
	.long	.Ltmp1232-.Ltmp1231     # Subsection size
.Ltmp1231:
	.short	.Ltmp1234-.Ltmp1233     # Record length
.Ltmp1233:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end112-"??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5217                    # Function type index
	.secrel32	"??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z" # Function section relative address
	.secidx	"??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Ptr_copy_cat<const int,int>" # Function name
.Ltmp1234:
	.short	.Ltmp1236-.Ltmp1235     # Record length
.Ltmp1235:
	.short	4414                    # Record kind: S_LOCAL
	.long	5193                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1236:
	.cv_def_range	 .Ltmp341 .Ltmp342, "E\021O\001\000\000\b\000\000\000"
	.short	.Ltmp1238-.Ltmp1237     # Record length
.Ltmp1237:
	.short	4414                    # Record kind: S_LOCAL
	.long	5214                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1238:
	.cv_def_range	 .Ltmp341 .Ltmp342, "E\021O\001\000\000\020\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1232:
	.p2align	2
	.cv_linetable	112, "??$_Ptr_copy_cat@$$CBHH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBHAEBQEAH@Z", .Lfunc_end112
	.section	.debug$S,"dr",associative,"??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Copy_memmove<const int *,int *>
	.long	.Ltmp1240-.Ltmp1239     # Subsection size
.Ltmp1239:
	.short	.Ltmp1242-.Ltmp1241     # Record length
.Ltmp1241:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end113-"??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5219                    # Function type index
	.secrel32	"??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z" # Function section relative address
	.secidx	"??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Copy_memmove<const int *,int *>" # Function name
.Ltmp1242:
	.short	.Ltmp1244-.Ltmp1243     # Record length
.Ltmp1243:
	.short	4414                    # Record kind: S_LOCAL
	.long	4171                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1244:
	.cv_def_range	 .Ltmp343 .Ltmp344, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp1246-.Ltmp1245     # Record length
.Ltmp1245:
	.short	4414                    # Record kind: S_LOCAL
	.long	4171                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1246:
	.cv_def_range	 .Ltmp343 .Ltmp344, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp1248-.Ltmp1247     # Record length
.Ltmp1247:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp1248:
	.cv_def_range	 .Ltmp343 .Ltmp344, "E\021O\001\000\000`\000\000\000"
	.short	.Ltmp1250-.Ltmp1249     # Record length
.Ltmp1249:
	.short	4414                    # Record kind: S_LOCAL
	.long	4595                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_First_ch"
.Ltmp1250:
	.cv_def_range	 .Ltmp343 .Ltmp344, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp1252-.Ltmp1251     # Record length
.Ltmp1251:
	.short	4414                    # Record kind: S_LOCAL
	.long	4595                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Last_ch"
.Ltmp1252:
	.cv_def_range	 .Ltmp343 .Ltmp344, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp1254-.Ltmp1253     # Record length
.Ltmp1253:
	.short	4414                    # Record kind: S_LOCAL
	.long	4668                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Dest_ch"
.Ltmp1254:
	.cv_def_range	 .Ltmp343 .Ltmp344, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1256-.Ltmp1255     # Record length
.Ltmp1255:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Count"
.Ltmp1256:
	.cv_def_range	 .Ltmp343 .Ltmp344, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1240:
	.p2align	2
	.cv_linetable	113, "??$_Copy_memmove@PEBHPEAH@std@@YAPEAHPEBH0PEAH@Z", .Lfunc_end113
	.section	.debug$S,"dr",associative,"?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all
	.long	.Ltmp1258-.Ltmp1257     # Subsection size
.Ltmp1257:
	.short	.Ltmp1260-.Ltmp1259     # Record length
.Ltmp1259:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end114-"?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5220                    # Function type index
	.secrel32	"?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ" # Function section relative address
	.secidx	"?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all" # Function name
.Ltmp1260:
	.short	.Ltmp1262-.Ltmp1261     # Record length
.Ltmp1261:
	.short	4414                    # Record kind: S_LOCAL
	.long	4345                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1262:
	.cv_def_range	 .Ltmp345 .Ltmp346, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1258:
	.p2align	2
	.cv_linetable	114, "?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ", .Lfunc_end114
	.section	.debug$S,"dr",associative,"?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::vector<int,std::allocator<int> >::_Destroy
	.long	.Ltmp1264-.Ltmp1263     # Subsection size
.Ltmp1263:
	.short	.Ltmp1266-.Ltmp1265     # Record length
.Ltmp1265:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end115-"?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5221                    # Function type index
	.secrel32	"?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z" # Function section relative address
	.secidx	"?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::vector<int,std::allocator<int> >::_Destroy" # Function name
.Ltmp1266:
	.short	.Ltmp1268-.Ltmp1267     # Record length
.Ltmp1267:
	.short	4414                    # Record kind: S_LOCAL
	.long	4227                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1268:
	.cv_def_range	 .Ltmp347 .Ltmp348, "E\021O\001\000\000 \000\000\000"
	.short	.Ltmp1270-.Ltmp1269     # Record length
.Ltmp1269:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1270:
	.cv_def_range	 .Ltmp347 .Ltmp348, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1272-.Ltmp1271     # Record length
.Ltmp1271:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1272:
	.cv_def_range	 .Ltmp347 .Ltmp348, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1264:
	.p2align	2
	.cv_linetable	115, "?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AEAAXPEAH0@Z", .Lfunc_end115
	.section	.debug$S,"dr",associative,"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::allocator<int>::deallocate
	.long	.Ltmp1274-.Ltmp1273     # Subsection size
.Ltmp1273:
	.short	.Ltmp1276-.Ltmp1275     # Record length
.Ltmp1275:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end116-"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5222                    # Function type index
	.secrel32	"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z" # Function section relative address
	.secidx	"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::allocator<int>::deallocate" # Function name
.Ltmp1276:
	.short	.Ltmp1278-.Ltmp1277     # Record length
.Ltmp1277:
	.short	4414                    # Record kind: S_LOCAL
	.long	4397                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1278:
	.cv_def_range	 .Ltmp349 .Ltmp350, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1280-.Ltmp1279     # Record length
.Ltmp1279:
	.short	4414                    # Record kind: S_LOCAL
	.long	4401                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Ptr"
.Ltmp1280:
	.cv_def_range	 .Ltmp349 .Ltmp350, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1282-.Ltmp1281     # Record length
.Ltmp1281:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Count"
.Ltmp1282:
	.cv_def_range	 .Ltmp349 .Ltmp350, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1274:
	.p2align	2
	.cv_linetable	116, "?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z", .Lfunc_end116
	.section	.debug$S,"dr",associative,"?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::vector<int,std::allocator<int> >::capacity
	.long	.Ltmp1284-.Ltmp1283     # Subsection size
.Ltmp1283:
	.short	.Ltmp1286-.Ltmp1285     # Record length
.Ltmp1285:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end117-"?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5223                    # Function type index
	.secrel32	"?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # Function section relative address
	.secidx	"?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::vector<int,std::allocator<int> >::capacity" # Function name
.Ltmp1286:
	.short	.Ltmp1288-.Ltmp1287     # Record length
.Ltmp1287:
	.short	4414                    # Record kind: S_LOCAL
	.long	4299                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1288:
	.cv_def_range	 .Ltmp351 .Ltmp352, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1284:
	.p2align	2
	.cv_linetable	117, "?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ", .Lfunc_end117
	.section	.debug$S,"dr",associative,"?_Orphan_all@_Container_base12@std@@QEAAXXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Container_base12::_Orphan_all
	.long	.Ltmp1290-.Ltmp1289     # Subsection size
.Ltmp1289:
	.short	.Ltmp1292-.Ltmp1291     # Record length
.Ltmp1291:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end118-"?_Orphan_all@_Container_base12@std@@QEAAXXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5224                    # Function type index
	.secrel32	"?_Orphan_all@_Container_base12@std@@QEAAXXZ" # Function section relative address
	.secidx	"?_Orphan_all@_Container_base12@std@@QEAAXXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Container_base12::_Orphan_all" # Function name
.Ltmp1292:
	.short	.Ltmp1294-.Ltmp1293     # Record length
.Ltmp1293:
	.short	4414                    # Record kind: S_LOCAL
	.long	4531                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1294:
	.cv_def_range	 .Ltmp355 .Ltmp362, "E\021N\001\000\000\360\377\377\377"
	.short	.Ltmp1296-.Ltmp1295     # Record length
.Ltmp1295:
	.short	4414                    # Record kind: S_LOCAL
	.long	5245                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Lock"
.Ltmp1296:
	.cv_def_range	 .Ltmp356 .Ltmp360 .Ltmp361 .Ltmp362, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp1298-.Ltmp1297     # Record length
.Ltmp1297:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp359-.Ltmp357       # Code size
	.secrel32	.Ltmp357        # Function section relative address
	.secidx	.Lfunc_begin118         # Function section index
	.byte	0                       # Lexical block name
.Ltmp1298:
	.short	.Ltmp1300-.Ltmp1299     # Record length
.Ltmp1299:
	.short	4414                    # Record kind: S_LOCAL
	.long	4353                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Pnext"
.Ltmp1300:
	.cv_def_range	 .Ltmp357 .Ltmp359, "E\021N\001\000\000\340\377\377\377"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1290:
	.p2align	2
	.cv_linetable	118, "?_Orphan_all@_Container_base12@std@@QEAAXXZ", .Lfunc_end118
	.section	.debug$S,"dr",associative,"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Destroy_range<std::allocator<int> >
	.long	.Ltmp1302-.Ltmp1301     # Subsection size
.Ltmp1301:
	.short	.Ltmp1304-.Ltmp1303     # Record length
.Ltmp1303:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end119-"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5250                    # Function type index
	.secrel32	"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z" # Function section relative address
	.secidx	"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Destroy_range<std::allocator<int> >" # Function name
.Ltmp1304:
	.short	.Ltmp1306-.Ltmp1305     # Record length
.Ltmp1305:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1306:
	.cv_def_range	 .Ltmp363 .Ltmp364, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1308-.Ltmp1307     # Record length
.Ltmp1307:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1308:
	.cv_def_range	 .Ltmp363 .Ltmp364, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1310-.Ltmp1309     # Record length
.Ltmp1309:
	.short	4414                    # Record kind: S_LOCAL
	.long	4348                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Al"
.Ltmp1310:
	.cv_def_range	 .Ltmp363 .Ltmp364, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1302:
	.p2align	2
	.cv_linetable	119, "??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@@Z", .Lfunc_end119
	.section	.debug$S,"dr",associative,"??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Destroy_range1<std::allocator<int> >
	.long	.Ltmp1312-.Ltmp1311     # Subsection size
.Ltmp1311:
	.short	.Ltmp1314-.Ltmp1313     # Record length
.Ltmp1313:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end120-"??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5253                    # Function type index
	.secrel32	"??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z" # Function section relative address
	.secidx	"??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Destroy_range1<std::allocator<int> >" # Function name
.Ltmp1314:
	.short	.Ltmp1316-.Ltmp1315     # Record length
.Ltmp1315:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1316:
	.cv_def_range	 .Ltmp365 .Ltmp366, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1318-.Ltmp1317     # Record length
.Ltmp1317:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1318:
	.cv_def_range	 .Ltmp365 .Ltmp366, "E\021O\001\000\000\b\000\000\000"
	.short	.Ltmp1320-.Ltmp1319     # Record length
.Ltmp1319:
	.short	4414                    # Record kind: S_LOCAL
	.long	4348                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1320:
	.cv_def_range	 .Ltmp365 .Ltmp366, "E\021O\001\000\000\020\000\000\000"
	.short	.Ltmp1322-.Ltmp1321     # Record length
.Ltmp1321:
	.short	4414                    # Record kind: S_LOCAL
	.long	4254                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1322:
	.cv_def_range	 .Ltmp365 .Ltmp366, "E\021O\001\000\000\030\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1312:
	.p2align	2
	.cv_linetable	120, "??$_Destroy_range1@V?$allocator@H@std@@@std@@YAXPEAH0AEAV?$allocator@H@0@U?$integral_constant@_N$00@0@@Z", .Lfunc_end120
	.section	.debug$S,"dr",associative,"??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Deallocate<16,0>
	.long	.Ltmp1324-.Ltmp1323     # Subsection size
.Ltmp1323:
	.short	.Ltmp1326-.Ltmp1325     # Record length
.Ltmp1325:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end121-"??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5256                    # Function type index
	.secrel32	"??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z" # Function section relative address
	.secidx	"??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Deallocate<16,0>" # Function name
.Ltmp1326:
	.short	.Ltmp1328-.Ltmp1327     # Record length
.Ltmp1327:
	.short	4414                    # Record kind: S_LOCAL
	.long	1539                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Ptr"
.Ltmp1328:
	.cv_def_range	 .Ltmp367 .Ltmp370, "E\021O\001\000\000 \000\000\000"
	.short	.Ltmp1330-.Ltmp1329     # Record length
.Ltmp1329:
	.short	4414                    # Record kind: S_LOCAL
	.long	35                      # TypeIndex
	.short	1                       # Flags
	.asciz	"_Bytes"
.Ltmp1330:
	.cv_def_range	 .Ltmp367 .Ltmp370, "E\021O\001\000\000(\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1324:
	.p2align	2
	.cv_linetable	121, "??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z", .Lfunc_end121
	.section	.debug$S,"dr",associative,"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Adjust_manually_vector_aligned
	.long	.Ltmp1332-.Ltmp1331     # Subsection size
.Ltmp1331:
	.short	.Ltmp1334-.Ltmp1333     # Record length
.Ltmp1333:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end122-"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5260                    # Function type index
	.secrel32	"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z" # Function section relative address
	.secidx	"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Adjust_manually_vector_aligned" # Function name
.Ltmp1334:
	.short	.Ltmp1336-.Ltmp1335     # Record length
.Ltmp1335:
	.short	4414                    # Record kind: S_LOCAL
	.long	5257                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Ptr"
.Ltmp1336:
	.cv_def_range	 .Ltmp371 .Ltmp386, "E\021O\001\000\000h\000\000\000"
	.short	.Ltmp1338-.Ltmp1337     # Record length
.Ltmp1337:
	.short	4414                    # Record kind: S_LOCAL
	.long	5036                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Bytes"
.Ltmp1338:
	.cv_def_range	 .Ltmp371 .Ltmp386, "E\021O\001\000\000p\000\000\000"
	.short	.Ltmp1340-.Ltmp1339     # Record length
.Ltmp1339:
	.short	4414                    # Record kind: S_LOCAL
	.long	5261                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Ptr_user"
.Ltmp1340:
	.cv_def_range	 .Ltmp371 .Ltmp386, "E\021O\001\000\000`\000\000\000"
	.short	.Ltmp1342-.Ltmp1341     # Record length
.Ltmp1341:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Ptr_container"
.Ltmp1342:
	.cv_def_range	 .Ltmp371 .Ltmp386, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp1344-.Ltmp1343     # Record length
.Ltmp1343:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Min_back_shift"
.Ltmp1344:
	.cv_def_range	 .Ltmp371 .Ltmp386, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp1346-.Ltmp1345     # Record length
.Ltmp1345:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Back_shift"
.Ltmp1346:
	.cv_def_range	 .Ltmp371 .Ltmp386, "E\021O\001\000\000H\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1332:
	.p2align	2
	.cv_linetable	122, "?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z", .Lfunc_end122
	.section	.debug$S,"dr",associative,"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
	.long	.Ltmp1348-.Ltmp1347     # Subsection size
.Ltmp1347:
	.short	.Ltmp1350-.Ltmp1349     # Record length
.Ltmp1349:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end123-"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5262                    # Function type index
	.secrel32	"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ" # Function section relative address
	.secidx	"?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend" # Function name
.Ltmp1350:
	.short	.Ltmp1352-.Ltmp1351     # Record length
.Ltmp1351:
	.short	4414                    # Record kind: S_LOCAL
	.long	4355                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1352:
	.cv_def_range	 .Ltmp387 .Ltmp388, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1348:
	.p2align	2
	.cv_linetable	123, "?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ", .Lfunc_end123
	.section	.debug$S,"dr",associative,"?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy
	.long	.Ltmp1354-.Ltmp1353     # Subsection size
.Ltmp1353:
	.short	.Ltmp1356-.Ltmp1355     # Record length
.Ltmp1355:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end124-"?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5263                    # Function type index
	.secrel32	"?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ" # Function section relative address
	.secidx	"?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Free_proxy" # Function name
.Ltmp1356:
	.short	.Ltmp1358-.Ltmp1357     # Record length
.Ltmp1357:
	.short	4414                    # Record kind: S_LOCAL
	.long	4345                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1358:
	.cv_def_range	 .Ltmp389 .Ltmp390, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1360-.Ltmp1359     # Record length
.Ltmp1359:
	.short	4414                    # Record kind: S_LOCAL
	.long	4386                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Proxy_allocator"
.Ltmp1360:
	.cv_def_range	 .Ltmp389 .Ltmp390, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1354:
	.p2align	2
	.cv_linetable	124, "?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ", .Lfunc_end124
	.section	.debug$S,"dr",associative,"??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	.long	.Ltmp1362-.Ltmp1361     # Subsection size
.Ltmp1361:
	.short	.Ltmp1364-.Ltmp1363     # Record length
.Ltmp1363:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end125-"??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5266                    # Function type index
	.secrel32	"??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z" # Function section relative address
	.secidx	"??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>" # Function name
.Ltmp1364:
	.short	.Ltmp1366-.Ltmp1365     # Record length
.Ltmp1365:
	.short	4414                    # Record kind: S_LOCAL
	.long	4545                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1366:
	.cv_def_range	 .Ltmp391 .Ltmp392, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1368-.Ltmp1367     # Record length
.Ltmp1367:
	.short	4414                    # Record kind: S_LOCAL
	.long	4361                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Ptr"
.Ltmp1368:
	.cv_def_range	 .Ltmp391 .Ltmp392, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1362:
	.p2align	2
	.cv_linetable	125, "??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z", .Lfunc_end125
	.section	.debug$S,"dr",associative,"??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
	.long	.Ltmp1370-.Ltmp1369     # Subsection size
.Ltmp1369:
	.short	.Ltmp1372-.Ltmp1371     # Record length
.Ltmp1371:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end126-"??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5268                    # Function type index
	.secrel32	"??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z" # Function section relative address
	.secidx	"??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>" # Function name
.Ltmp1372:
	.short	.Ltmp1374-.Ltmp1373     # Record length
.Ltmp1373:
	.short	4414                    # Record kind: S_LOCAL
	.long	4545                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Al"
.Ltmp1374:
	.cv_def_range	 .Ltmp393 .Ltmp394, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1376-.Ltmp1375     # Record length
.Ltmp1375:
	.short	4414                    # Record kind: S_LOCAL
	.long	4361                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Ptr"
.Ltmp1376:
	.cv_def_range	 .Ltmp393 .Ltmp394, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1370:
	.p2align	2
	.cv_linetable	126, "??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z", .Lfunc_end126
	.section	.debug$S,"dr",associative,"?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	.long	.Ltmp1378-.Ltmp1377     # Subsection size
.Ltmp1377:
	.short	.Ltmp1380-.Ltmp1379     # Record length
.Ltmp1379:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end127-"?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5269                    # Function type index
	.secrel32	"?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z" # Function section relative address
	.secidx	"?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate" # Function name
.Ltmp1380:
	.short	.Ltmp1382-.Ltmp1381     # Record length
.Ltmp1381:
	.short	4414                    # Record kind: S_LOCAL
	.long	4545                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1382:
	.cv_def_range	 .Ltmp395 .Ltmp396, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1384-.Ltmp1383     # Record length
.Ltmp1383:
	.short	4414                    # Record kind: S_LOCAL
	.long	4551                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Ptr"
.Ltmp1384:
	.cv_def_range	 .Ltmp395 .Ltmp396, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1386-.Ltmp1385     # Record length
.Ltmp1385:
	.short	4414                    # Record kind: S_LOCAL
	.long	4234                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Count"
.Ltmp1386:
	.cv_def_range	 .Ltmp395 .Ltmp396, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1378:
	.p2align	2
	.cv_linetable	127, "?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z", .Lfunc_end127
	.section	.debug$S,"dr"
	.long	241
	.long	.Ltmp1388-.Ltmp1387     # Subsection size
.Ltmp1387:
	.short	.Ltmp1390-.Ltmp1389     # Record length
.Ltmp1389:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"ptrdiff_t"
.Ltmp1390:
	.short	.Ltmp1392-.Ltmp1391     # Record length
.Ltmp1391:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"index_type"
.Ltmp1392:
	.short	.Ltmp1394-.Ltmp1393     # Record length
.Ltmp1393:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"std::remove_cv_t<int>"
.Ltmp1394:
	.short	.Ltmp1396-.Ltmp1395     # Record length
.Ltmp1395:
	.short	4360                    # Record kind: S_UDT
	.long	4149                    # Type
	.asciz	"gsl::span<int,-1>"
.Ltmp1396:
	.short	.Ltmp1398-.Ltmp1397     # Record length
.Ltmp1397:
	.short	4360                    # Record kind: S_UDT
	.long	4157                    # Type
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >"
.Ltmp1398:
	.short	.Ltmp1400-.Ltmp1399     # Record length
.Ltmp1399:
	.short	4360                    # Record kind: S_UDT
	.long	4165                    # Type
	.asciz	"gsl::details::extent_type<-1>"
.Ltmp1400:
	.short	.Ltmp1402-.Ltmp1401     # Record length
.Ltmp1401:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"std::remove_cv_t<const int>"
.Ltmp1402:
	.short	.Ltmp1404-.Ltmp1403     # Record length
.Ltmp1403:
	.short	4360                    # Record kind: S_UDT
	.long	4210                    # Type
	.asciz	"gsl::span<const int,-1>"
.Ltmp1404:
	.short	.Ltmp1406-.Ltmp1405     # Record length
.Ltmp1405:
	.short	4360                    # Record kind: S_UDT
	.long	4216                    # Type
	.asciz	"gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >"
.Ltmp1406:
	.short	.Ltmp1408-.Ltmp1407     # Record length
.Ltmp1407:
	.short	4360                    # Record kind: S_UDT
	.long	35                      # Type
	.asciz	"size_t"
.Ltmp1408:
	.short	.Ltmp1410-.Ltmp1409     # Record length
.Ltmp1409:
	.short	4360                    # Record kind: S_UDT
	.long	4254                    # Type
	.asciz	"std::bool_constant<true>"
.Ltmp1410:
	.short	.Ltmp1412-.Ltmp1411     # Record length
.Ltmp1411:
	.short	4360                    # Record kind: S_UDT
	.long	4254                    # Type
	.asciz	"std::true_type"
.Ltmp1412:
	.short	.Ltmp1414-.Ltmp1413     # Record length
.Ltmp1413:
	.short	4360                    # Record kind: S_UDT
	.long	4257                    # Type
	.asciz	"std::bool_constant<false>"
.Ltmp1414:
	.short	.Ltmp1416-.Ltmp1415     # Record length
.Ltmp1415:
	.short	4360                    # Record kind: S_UDT
	.long	4257                    # Type
	.asciz	"std::false_type"
.Ltmp1416:
	.short	.Ltmp1418-.Ltmp1417     # Record length
.Ltmp1417:
	.short	4360                    # Record kind: S_UDT
	.long	4229                    # Type
	.asciz	"std::_Rebind_alloc_t<std::allocator<int>,int>"
.Ltmp1418:
	.short	.Ltmp1420-.Ltmp1419     # Record length
.Ltmp1419:
	.short	4360                    # Record kind: S_UDT
	.long	4341                    # Type
	.asciz	"std::vector<int,std::allocator<int> >"
.Ltmp1420:
	.short	.Ltmp1422-.Ltmp1421     # Record length
.Ltmp1421:
	.short	4360                    # Record kind: S_UDT
	.long	4386                    # Type
	.asciz	"std::_Rebind_alloc_t<std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Alty,std::_Container_proxy>"
.Ltmp1422:
	.short	.Ltmp1424-.Ltmp1423     # Record length
.Ltmp1423:
	.short	4360                    # Record kind: S_UDT
	.long	4388                    # Type
	.asciz	"std::conditional_t<_Is_simple_alloc_v<std::_Vec_base_types<int,std::allocator<int> >::_Alty>,_Simple_types<int>,_Vec_iter_types<int,typename _Alty_traits::size_type,typename _Alty_traits::difference_type,typename _Alty_traits::pointer,typename _Alty_traits::const_pointer,int &,const int &> >"
.Ltmp1424:
	.short	.Ltmp1426-.Ltmp1425     # Record length
.Ltmp1425:
	.short	4360                    # Record kind: S_UDT
	.long	4390                    # Type
	.asciz	"std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >"
.Ltmp1426:
	.short	.Ltmp1428-.Ltmp1427     # Record length
.Ltmp1427:
	.short	4360                    # Record kind: S_UDT
	.long	4412                    # Type
	.asciz	"std::allocator<int>"
.Ltmp1428:
	.short	.Ltmp1430-.Ltmp1429     # Record length
.Ltmp1429:
	.short	4360                    # Record kind: S_UDT
	.long	4424                    # Type
	.asciz	"std::initializer_list<int>"
.Ltmp1430:
	.short	.Ltmp1432-.Ltmp1431     # Record length
.Ltmp1431:
	.short	4360                    # Record kind: S_UDT
	.long	4432                    # Type
	.asciz	"std::integral_constant<bool,1>"
.Ltmp1432:
	.short	.Ltmp1434-.Ltmp1433     # Record length
.Ltmp1433:
	.short	4360                    # Record kind: S_UDT
	.long	4439                    # Type
	.asciz	"std::integral_constant<bool,0>"
.Ltmp1434:
	.short	.Ltmp1436-.Ltmp1435     # Record length
.Ltmp1435:
	.short	4360                    # Record kind: S_UDT
	.long	4441                    # Type
	.asciz	"std::conditional_t<_Is_default_allocator<allocator<int> >::value,_Default_allocator_traits<std::allocator<int> >,_Normal_allocator_traits<std::allocator<int> > >"
.Ltmp1436:
	.short	.Ltmp1438-.Ltmp1437     # Record length
.Ltmp1437:
	.short	4360                    # Record kind: S_UDT
	.long	4443                    # Type
	.asciz	"std::allocator_traits<std::allocator<int> >"
.Ltmp1438:
	.short	.Ltmp1440-.Ltmp1439     # Record length
.Ltmp1439:
	.short	4360                    # Record kind: S_UDT
	.long	4455                    # Type
	.asciz	"std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>"
.Ltmp1440:
	.short	.Ltmp1442-.Ltmp1441     # Record length
.Ltmp1441:
	.short	4360                    # Record kind: S_UDT
	.long	4475                    # Type
	.asciz	"std::_Iterator_base12"
.Ltmp1442:
	.short	.Ltmp1444-.Ltmp1443     # Record length
.Ltmp1443:
	.short	4360                    # Record kind: S_UDT
	.long	4479                    # Type
	.asciz	"std::_Container_proxy"
.Ltmp1444:
	.short	.Ltmp1446-.Ltmp1445     # Record length
.Ltmp1445:
	.short	4360                    # Record kind: S_UDT
	.long	4466                    # Type
	.asciz	"std::_Container_base"
.Ltmp1446:
	.short	.Ltmp1448-.Ltmp1447     # Record length
.Ltmp1447:
	.short	4360                    # Record kind: S_UDT
	.long	4484                    # Type
	.asciz	"std::_Vector_val<std::_Simple_types<int> >"
.Ltmp1448:
	.short	.Ltmp1450-.Ltmp1449     # Record length
.Ltmp1449:
	.short	4360                    # Record kind: S_UDT
	.long	4510                    # Type
	.asciz	"std::allocator<std::_Container_proxy>"
.Ltmp1450:
	.short	.Ltmp1452-.Ltmp1451     # Record length
.Ltmp1451:
	.short	4360                    # Record kind: S_UDT
	.long	4512                    # Type
	.asciz	"std::conditional_t<_Is_default_allocator<allocator<_Container_proxy> >::value,_Default_allocator_traits<std::allocator<std::_Container_proxy> >,_Normal_allocator_traits<std::allocator<std::_Container_proxy> > >"
.Ltmp1452:
	.short	.Ltmp1454-.Ltmp1453     # Record length
.Ltmp1453:
	.short	4360                    # Record kind: S_UDT
	.long	4514                    # Type
	.asciz	"std::allocator_traits<std::allocator<std::_Container_proxy> >"
.Ltmp1454:
	.short	.Ltmp1456-.Ltmp1455     # Record length
.Ltmp1455:
	.short	4360                    # Record kind: S_UDT
	.long	4517                    # Type
	.asciz	"std::_Simple_types<int>"
.Ltmp1456:
	.short	.Ltmp1458-.Ltmp1457     # Record length
.Ltmp1457:
	.short	4360                    # Record kind: S_UDT
	.long	35                      # Type
	.asciz	"size_type"
.Ltmp1458:
	.short	.Ltmp1460-.Ltmp1459     # Record length
.Ltmp1459:
	.short	4360                    # Record kind: S_UDT
	.long	4529                    # Type
	.asciz	"std::_Default_allocator_traits<std::allocator<int> >"
.Ltmp1460:
	.short	.Ltmp1462-.Ltmp1461     # Record length
.Ltmp1461:
	.short	4360                    # Record kind: S_UDT
	.long	4543                    # Type
	.asciz	"std::_Container_base12"
.Ltmp1462:
	.short	.Ltmp1464-.Ltmp1463     # Record length
.Ltmp1463:
	.short	4360                    # Record kind: S_UDT
	.long	4557                    # Type
	.asciz	"std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >"
.Ltmp1464:
	.short	.Ltmp1466-.Ltmp1465     # Record length
.Ltmp1465:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"index_type"
.Ltmp1466:
	.short	.Ltmp1468-.Ltmp1467     # Record length
.Ltmp1467:
	.short	4360                    # Record kind: S_UDT
	.long	4575                    # Type
	.asciz	"gsl::details::extent_type<0>"
.Ltmp1468:
	.short	.Ltmp1470-.Ltmp1469     # Record length
.Ltmp1469:
	.short	4360                    # Record kind: S_UDT
	.long	4599                    # Type
	.asciz	"gsl::fail_fast"
.Ltmp1470:
	.short	.Ltmp1472-.Ltmp1471     # Record length
.Ltmp1471:
	.short	4360                    # Record kind: S_UDT
	.long	4604                    # Type
	.asciz	"std::string"
.Ltmp1472:
	.short	.Ltmp1474-.Ltmp1473     # Record length
.Ltmp1473:
	.short	4360                    # Record kind: S_UDT
	.long	4614                    # Type
	.asciz	"std::logic_error"
.Ltmp1474:
	.short	.Ltmp1476-.Ltmp1475     # Record length
.Ltmp1475:
	.short	4360                    # Record kind: S_UDT
	.long	4634                    # Type
	.asciz	"std::exception"
.Ltmp1476:
	.short	.Ltmp1478-.Ltmp1477     # Record length
.Ltmp1477:
	.short	4360                    # Record kind: S_UDT
	.long	4640                    # Type
	.asciz	"std::_Rebind_alloc_t<std::allocator<char>,char>"
.Ltmp1478:
	.short	.Ltmp1480-.Ltmp1479     # Record length
.Ltmp1479:
	.short	4360                    # Record kind: S_UDT
	.long	4254                    # Type
	.asciz	"std::bool_constant<_Is_specialization_v<std::char_traits<char>,char_traits> && is_trivial_v<std::basic_string<char,std::char_traits<char>,std::allocator<char> >::pointer> >"
.Ltmp1480:
	.short	.Ltmp1482-.Ltmp1481     # Record length
.Ltmp1481:
	.short	4360                    # Record kind: S_UDT
	.long	4828                    # Type
	.asciz	"std::basic_string<char,std::char_traits<char>,std::allocator<char> >"
.Ltmp1482:
	.short	.Ltmp1484-.Ltmp1483     # Record length
.Ltmp1483:
	.short	4360                    # Record kind: S_UDT
	.long	4832                    # Type
	.asciz	"__std_exception_data"
.Ltmp1484:
	.short	.Ltmp1486-.Ltmp1485     # Record length
.Ltmp1485:
	.short	4360                    # Record kind: S_UDT
	.long	4386                    # Type
	.asciz	"std::_Rebind_alloc_t<std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alty,std::_Container_proxy>"
.Ltmp1486:
	.short	.Ltmp1488-.Ltmp1487     # Record length
.Ltmp1487:
	.short	4360                    # Record kind: S_UDT
	.long	4858                    # Type
	.asciz	"std::conditional_t<_Is_simple_alloc_v<std::_String_base_types<char,std::allocator<char> >::_Alty>,_Simple_types<char>,_String_iter_types<char,typename _Alty_traits::size_type,typename _Alty_traits::difference_type,typename _Alty_traits::pointer,typename _Alty_traits::const_pointer,char &,const char &> >"
.Ltmp1488:
	.short	.Ltmp1490-.Ltmp1489     # Record length
.Ltmp1489:
	.short	4360                    # Record kind: S_UDT
	.long	4867                    # Type
	.asciz	"std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >"
.Ltmp1490:
	.short	.Ltmp1492-.Ltmp1491     # Record length
.Ltmp1491:
	.short	4360                    # Record kind: S_UDT
	.long	4886                    # Type
	.asciz	"std::allocator<char>"
.Ltmp1492:
	.short	.Ltmp1494-.Ltmp1493     # Record length
.Ltmp1493:
	.short	4360                    # Record kind: S_UDT
	.long	4890                    # Type
	.asciz	"std::random_access_iterator_tag"
.Ltmp1494:
	.short	.Ltmp1496-.Ltmp1495     # Record length
.Ltmp1495:
	.short	4360                    # Record kind: S_UDT
	.long	4907                    # Type
	.asciz	"std::_String_val<std::_Simple_types<char> >"
.Ltmp1496:
	.short	.Ltmp1498-.Ltmp1497     # Record length
.Ltmp1497:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::streamoff"
.Ltmp1498:
	.short	.Ltmp1500-.Ltmp1499     # Record length
.Ltmp1499:
	.short	4360                    # Record kind: S_UDT
	.long	4932                    # Type
	.asciz	"_Mbstatet"
.Ltmp1500:
	.short	.Ltmp1502-.Ltmp1501     # Record length
.Ltmp1501:
	.short	4360                    # Record kind: S_UDT
	.long	4932                    # Type
	.asciz	"mbstate_t"
.Ltmp1502:
	.short	.Ltmp1504-.Ltmp1503     # Record length
.Ltmp1503:
	.short	4360                    # Record kind: S_UDT
	.long	4932                    # Type
	.asciz	"_Mbstatet"
.Ltmp1504:
	.short	.Ltmp1506-.Ltmp1505     # Record length
.Ltmp1505:
	.short	4360                    # Record kind: S_UDT
	.long	4934                    # Type
	.asciz	"std::char_traits<char>"
.Ltmp1506:
	.short	.Ltmp1508-.Ltmp1507     # Record length
.Ltmp1507:
	.short	4360                    # Record kind: S_UDT
	.long	4937                    # Type
	.asciz	"std::conditional_t<_Is_default_allocator<allocator<char> >::value,_Default_allocator_traits<std::allocator<char> >,_Normal_allocator_traits<std::allocator<char> > >"
.Ltmp1508:
	.short	.Ltmp1510-.Ltmp1509     # Record length
.Ltmp1509:
	.short	4360                    # Record kind: S_UDT
	.long	4939                    # Type
	.asciz	"std::allocator_traits<std::allocator<char> >"
.Ltmp1510:
	.short	.Ltmp1512-.Ltmp1511     # Record length
.Ltmp1511:
	.short	4360                    # Record kind: S_UDT
	.long	4951                    # Type
	.asciz	"std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>"
.Ltmp1512:
	.short	.Ltmp1514-.Ltmp1513     # Record length
.Ltmp1513:
	.short	4360                    # Record kind: S_UDT
	.long	4954                    # Type
	.asciz	"std::_Simple_types<char>"
.Ltmp1514:
	.short	.Ltmp1516-.Ltmp1515     # Record length
.Ltmp1515:
	.short	4360                    # Record kind: S_UDT
	.long	4960                    # Type
	.asciz	"std::_String_val<std::_Simple_types<char> >::_Bxty"
.Ltmp1516:
	.short	.Ltmp1518-.Ltmp1517     # Record length
.Ltmp1517:
	.short	4360                    # Record kind: S_UDT
	.long	4964                    # Type
	.asciz	"std::bidirectional_iterator_tag"
.Ltmp1518:
	.short	.Ltmp1520-.Ltmp1519     # Record length
.Ltmp1519:
	.short	4360                    # Record kind: S_UDT
	.long	4967                    # Type
	.asciz	"_Mbstatet"
.Ltmp1520:
	.short	.Ltmp1522-.Ltmp1521     # Record length
.Ltmp1521:
	.short	4360                    # Record kind: S_UDT
	.long	4981                    # Type
	.asciz	"std::_Default_allocator_traits<std::allocator<char> >"
.Ltmp1522:
	.short	.Ltmp1524-.Ltmp1523     # Record length
.Ltmp1523:
	.short	4360                    # Record kind: S_UDT
	.long	4985                    # Type
	.asciz	"std::forward_iterator_tag"
.Ltmp1524:
	.short	.Ltmp1526-.Ltmp1525     # Record length
.Ltmp1525:
	.short	4360                    # Record kind: S_UDT
	.long	4988                    # Type
	.asciz	"std::input_iterator_tag"
.Ltmp1526:
	.short	.Ltmp1528-.Ltmp1527     # Record length
.Ltmp1527:
	.short	4360                    # Record kind: S_UDT
	.long	4587                    # Type
	.asciz	"std::remove_reference_t<gsl::fail_fast>"
.Ltmp1528:
	.short	.Ltmp1530-.Ltmp1529     # Record length
.Ltmp1529:
	.short	4360                    # Record kind: S_UDT
	.long	5045                    # Type
	.asciz	"gsl::narrowing_error"
.Ltmp1530:
	.short	.Ltmp1532-.Ltmp1531     # Record length
.Ltmp1531:
	.short	4360                    # Record kind: S_UDT
	.long	35                      # Type
	.asciz	"std::remove_reference_t<unsigned long long &>"
.Ltmp1532:
	.short	.Ltmp1534-.Ltmp1533     # Record length
.Ltmp1533:
	.short	4360                    # Record kind: S_UDT
	.long	5040                    # Type
	.asciz	"std::remove_reference_t<gsl::narrowing_error>"
.Ltmp1534:
	.short	.Ltmp1536-.Ltmp1535     # Record length
.Ltmp1535:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::remove_reference_t<long long &>"
.Ltmp1536:
	.short	.Ltmp1538-.Ltmp1537     # Record length
.Ltmp1537:
	.short	4360                    # Record kind: S_UDT
	.long	4230                    # Type
	.asciz	"std::remove_reference_t<const std::allocator<int> &>"
.Ltmp1538:
	.short	.Ltmp1540-.Ltmp1539     # Record length
.Ltmp1539:
	.short	4360                    # Record kind: S_UDT
	.long	5099                    # Type
	.asciz	"std::_One_then_variadic_args_t"
.Ltmp1540:
	.short	.Ltmp1542-.Ltmp1541     # Record length
.Ltmp1541:
	.short	4360                    # Record kind: S_UDT
	.long	35                      # Type
	.asciz	"uintptr_t"
.Ltmp1542:
	.short	.Ltmp1544-.Ltmp1543     # Record length
.Ltmp1543:
	.short	4360                    # Record kind: S_UDT
	.long	5132                    # Type
	.asciz	"std::_Default_allocate_traits"
.Ltmp1544:
	.short	.Ltmp1546-.Ltmp1545     # Record length
.Ltmp1545:
	.short	4360                    # Record kind: S_UDT
	.long	4357                    # Type
	.asciz	"std::remove_reference_t<std::_Container_proxy>"
.Ltmp1546:
	.short	.Ltmp1548-.Ltmp1547     # Record length
.Ltmp1547:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::_Iter_diff_t<const int *>"
.Ltmp1548:
	.short	.Ltmp1550-.Ltmp1549     # Record length
.Ltmp1549:
	.short	4360                    # Record kind: S_UDT
	.long	5160                    # Type
	.asciz	"std::numeric_limits<long long>"
.Ltmp1550:
	.short	.Ltmp1552-.Ltmp1551     # Record length
.Ltmp1551:
	.short	4360                    # Record kind: S_UDT
	.long	5165                    # Type
	.asciz	"std::_Num_int_base"
.Ltmp1552:
	.short	.Ltmp1554-.Ltmp1553     # Record length
.Ltmp1553:
	.short	4360                    # Record kind: S_UDT
	.long	5176                    # Type
	.asciz	"std::_Num_base"
.Ltmp1554:
	.short	.Ltmp1556-.Ltmp1555     # Record length
.Ltmp1555:
	.short	4360                    # Record kind: S_UDT
	.long	5205                    # Type
	.asciz	"std::_Really_trivial_ptr_iterator_tag"
.Ltmp1556:
	.short	.Ltmp1558-.Ltmp1557     # Record length
.Ltmp1557:
	.short	4360                    # Record kind: S_UDT
	.long	5209                    # Type
	.asciz	"std::_Trivially_copyable_ptr_iterator_tag"
.Ltmp1558:
	.short	.Ltmp1560-.Ltmp1559     # Record length
.Ltmp1559:
	.short	4360                    # Record kind: S_UDT
	.long	5211                    # Type
	.asciz	"std::_General_ptr_iterator_tag"
.Ltmp1560:
	.short	.Ltmp1562-.Ltmp1561     # Record length
.Ltmp1561:
	.short	4360                    # Record kind: S_UDT
	.long	5200                    # Type
	.asciz	"std::conditional_t<is_trivially_assignable_v<int &,const int &>,typename _Ptr_cat_helper<remove_cv_t<const int>,remove_cv_t<int> >::type,std::_General_ptr_iterator_tag>"
.Ltmp1562:
	.short	.Ltmp1564-.Ltmp1563     # Record length
.Ltmp1563:
	.short	4360                    # Record kind: S_UDT
	.long	5245                    # Type
	.asciz	"std::_Lockit"
.Ltmp1564:
	.short	.Ltmp1566-.Ltmp1565     # Record length
.Ltmp1565:
	.short	4360                    # Record kind: S_UDT
	.long	4254                    # Type
	.asciz	"std::bool_constant<conjunction_v<is_trivially_destructible<_Val>,_Uses_default_destroy<std::allocator<int>,_Val *> > >"
.Ltmp1566:
.Ltmp1388:
	.p2align	2
	.cv_filechecksums               # File index to string table offset subsection
	.cv_stringtable                 # String table
	.section	.debug$T,"dr"
	.p2align	2
	.long	4                       # Debug section magic
	# ArgList (0x1000) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 0
	#   Arguments [
	#   ]
	# }
	.byte	0x06, 0x00, 0x01, 0x12
	.byte	0x00, 0x00, 0x00, 0x00
	# Procedure (0x1001) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: bool (0x30)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	# FuncId (0x1002) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: bool () (0x1001)
	#   Name: foo
	# }
	.byte	0x0e, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x10, 0x00, 0x00
	.byte	0x66, 0x6f, 0x6f, 0x00
	# Class (0x1003) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>
	#   LinkageName: .?AV?$span@H$0?0@gsl@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# Modifier (0x1004) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: __int64 (0x13)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Class (0x1005) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x74, 0x6f
	.byte	0x72, 0x61, 0x67, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x64, 0x79, 0x6e, 0x61
	.byte	0x6d, 0x69, 0x63, 0x5f
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x40
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Pointer (0x1006) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1> (0x1003)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x1007) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1008) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, __int64) (0x1007)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x07, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1009) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	# MemberFunction (0x100A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, int*) (0x1009)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x09, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x100B) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::array<int,0>
	#   LinkageName: .?AV?$array@H$0A@@std@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x72, 0x72, 0x61, 0x79
	.byte	0x3c, 0x69, 0x6e, 0x74
	.byte	0x2c, 0x30, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x61, 0x72
	.byte	0x72, 0x61, 0x79, 0x40
	.byte	0x48, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# Pointer (0x100C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::array<int,0> (0x100B)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x0b, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x100D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::array<int,0>& (0x100C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x0c, 0x10, 0x00, 0x00
	# MemberFunction (0x100E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::array<int,0>&) (0x100D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x0d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x100F) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::array<int,0> (0x100B)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x0b, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1010) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::array<int,0> (0x100F)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x0f, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1011) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::array<int,0>& (0x1010)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x10, 0x10, 0x00, 0x00
	# MemberFunction (0x1012) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::array<int,0>&) (0x1011)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x11, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1013) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<int,-1> (0x1003)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1014) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,-1> (0x1013)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x13, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1015) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::span<int,-1>& (0x1014)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x14, 0x10, 0x00, 0x00
	# MemberFunction (0x1016) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<int,-1>&) (0x1015)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x15, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1017) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@H$0?0@gsl@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x4b, 0x6e, 0x6f
	.byte	0x77, 0x6e, 0x4e, 0x6f
	.byte	0x74, 0x4e, 0x75, 0x6c
	.byte	0x6c, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x4b, 0x6e
	.byte	0x6f, 0x77, 0x6e, 0x4e
	.byte	0x6f, 0x74, 0x4e, 0x75
	.byte	0x6c, 0x6c, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# ArgList (0x1018) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<int,-1>::KnownNotNull (0x1017)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x17, 0x10, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1019) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<int,-1>::KnownNotNull, __int64) (0x1018)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x18, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x101A) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(int*, __int64) (0x1008)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(int*, int*) (0x100A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(std::array<int,0>&) (0x100E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(const std::array<int,0>&) (0x1012)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(const gsl::span<int,-1>&) (0x1016)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void gsl::span<int,-1>::(gsl::span<int,-1>::KnownNotNull, __int64) (0x1019)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x08, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0a, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0e, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x12, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x16, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x19, 0x10, 0x00, 0x00
	# MemberFunction (0x101B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x101C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1> (0x1003)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x101D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1>& (0x101C)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<int,-1>&) (0x1015)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x1c, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x15, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x101E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,-1> (0x1013)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x13, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x101F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1020) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1003)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1021) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1022) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1003)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1023) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1024) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1025) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: int (0x74)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1026) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int& (0x1025)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1027) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1028) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<int,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x82, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x41, 0x40, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x1029) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x102A) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<int,-1>,1>
	#   LinkageName: .?AV?$span_iterator@V?$span@H$0?0@gsl@@$00@details@gsl@@
	# }
	.byte	0x7e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x31, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x30, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# MemberFunction (0x102B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,1> (0x102A)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2a, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x102C) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x30, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x72, 0x65, 0x76
	.byte	0x65, 0x72, 0x73, 0x65
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x41, 0x40, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x102D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > (0x102C)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2c, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x102E) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@H$0?0@gsl@@$00@details@gsl@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x31, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x72, 0x65, 0x76
	.byte	0x65, 0x72, 0x73, 0x65
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x30, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x102F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > (0x102E)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2e, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1030) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1031) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>::subspan_selector<-1>
	#   LinkageName: .?AV?$subspan_selector@$0?0@?$span@H$0?0@gsl@@
	# }
	.byte	0x6e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x73, 0x65, 0x6c
	.byte	0x65, 0x63, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x40, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1032) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#     ArgType: gsl::span<int,-1>::subspan_selector<-1> (0x1031)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x31, 0x10, 0x00, 0x00
	# MemberFunction (0x1033) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1003)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (__int64, __int64, gsl::span<int,-1>::subspan_selector<-1>) (0x1032)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x32, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1034) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const __int64 (0x1004)
	#     Name: extent
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#     FieldOffset: 0x0
	#     Name: storage_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x101A
	#     Name: span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::() (0x101B)
	#     Name: ~span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1>& gsl::span<int,-1>::(const gsl::span<int,-1>&) (0x101D)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(__int64) (0x1020)
	#     Name: first
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(__int64) (0x1020)
	#     Name: last
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(__int64, __int64) (0x1022)
	#     Name: subspan
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<int,-1>::() (0x1023)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<int,-1>::() (0x1023)
	#     Name: size_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool gsl::span<int,-1>::() (0x1024)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,-1>::(__int64) (0x1026)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,-1>::(__int64) (0x1026)
	#     Name: at
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,-1>::(__int64) (0x1026)
	#     Name: operator()
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::() (0x1027)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::span<int,-1>::() (0x1029)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::span<int,-1>::() (0x1029)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,1> gsl::span<int,-1>::() (0x102B)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,1> gsl::span<int,-1>::() (0x102B)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > gsl::span<int,-1>::() (0x102D)
	#     Name: rbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > gsl::span<int,-1>::() (0x102D)
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > gsl::span<int,-1>::() (0x102F)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > gsl::span<int,-1>::() (0x102F)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::() (0x1027)
	#     Name: _Unchecked_begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::() (0x1027)
	#     Name: _Unchecked_end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: bool gsl::span<int,-1>::(__int64, __int64) (0x1030)
	#     Name: CheckRange
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(__int64, __int64, gsl::span<int,-1>::subspan_selector<-1>) (0x1033)
	#     Name: make_subspan
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: element_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x674)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int& (0x1025)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,1> (0x102A)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > (0x102C)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > (0x102E)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::span<int,-1>::KnownNotNull (0x1017)
	#     Name: KnownNotNull
	#   }
	# }
	.byte	0xd6, 0x02, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1b, 0x10, 0x00, 0x00
	.byte	0x7e, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1d, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x10, 0x00, 0x00
	.byte	0x66, 0x69, 0x72, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x10, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x22, 0x10, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x23, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x23, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x24, 0x10, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x29, 0x10, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x29, 0x10, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2b, 0x10, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2b, 0x10, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2d, 0x10, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2d, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2f, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2f, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0x30, 0x10, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x33, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x2a, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x2c, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x2e, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x17, 0x10, 0x00, 0x00
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1035) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 43
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1034)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<int,-1>
	#   LinkageName: .?AV?$span@H$0?0@gsl@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x2b, 0x00, 0x10, 0x02
	.byte	0x34, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x1036) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\projects\gsl\include\gsl\span
	# }
	.byte	0x2a, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x70
	.byte	0x72, 0x6f, 0x6a, 0x65
	.byte	0x63, 0x74, 0x73, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1037) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,-1> (0x1035)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 355
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x35, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x63, 0x01, 0x00, 0x00
	# Class (0x1038) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::extent_type<-1>
	#   LinkageName: .?AV?$extent_type@$0?0@details@gsl@@
	# }
	.byte	0x5a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x1039) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x103A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1039)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x39, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x103B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   ThisType: const gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x103A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x3a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x103C) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: gsl::details::extent_type<-1> (0x1038)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: int* (0x674)
	#     FieldOffset: 0x8
	#     Name: data_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x103B)
	#     Name: data
	#   }
	# }
	.byte	0x2e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x08, 0x00, 0x64, 0x61
	.byte	0x74, 0x61, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x3b, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x103D) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 3
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x103C)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x03, 0x00, 0x08, 0x02
	.byte	0x3c, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x74, 0x6f
	.byte	0x72, 0x61, 0x67, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x64, 0x79, 0x6e, 0x61
	.byte	0x6d, 0x69, 0x63, 0x5f
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x40
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x103E) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x103D)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 583
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x3d, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x02, 0x00, 0x00
	# Pointer (0x103F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::extent_type<-1> (0x1038)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1040) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: gsl::details::extent_type<-1>* (0x103F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x3f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1041) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::extent_type<-1> (0x1038)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1042) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::extent_type<-1> (0x1041)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x41, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1043) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: const gsl::details::extent_type<-1>* (0x1042)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x42, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1044) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: __int64 (0x13)
	#     FieldOffset: 0x0
	#     Name: size_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<-1>::(__int64) (0x1040)
	#     Name: extent_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::details::extent_type<-1>::() (0x1043)
	#     Name: size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	# }
	.byte	0x4a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x69
	.byte	0x7a, 0x65, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x40, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x43, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Class (0x1045) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1044)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: gsl::details::extent_type<-1>
	#   LinkageName: .?AV?$extent_type@$0?0@details@gsl@@
	# }
	.byte	0x5a, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0x44, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1046) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::extent_type<-1> (0x1045)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 327
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x45, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x01, 0x00, 0x00
	# Class (0x1047) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const int,-1>
	#   LinkageName: .?AV?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1048) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x73
	.byte	0x74, 0x6f, 0x72, 0x61
	.byte	0x67, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x64, 0x79
	.byte	0x6e, 0x61, 0x6d, 0x69
	.byte	0x63, 0x5f, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x24, 0x24, 0x43, 0x42
	.byte	0x48, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# Pointer (0x1049) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const int,-1> (0x1047)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Modifier (0x104A) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: int (0x74)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x104B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const int (0x104A)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x104C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int* (0x104B)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x104D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int*, __int64) (0x104C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x4c, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x104E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int* (0x104B)
	#     ArgType: const int* (0x104B)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	# MemberFunction (0x104F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int*, const int*) (0x104E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x4e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1050) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::array<int,0>&) (0x100D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x0d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1051) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::array<int,0>&) (0x1011)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x11, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1052) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<const int,-1> (0x1047)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1053) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<const int,-1> (0x1052)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x52, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1054) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::span<const int,-1>& (0x1053)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x53, 0x10, 0x00, 0x00
	# MemberFunction (0x1055) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<const int,-1>&) (0x1054)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x54, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1056) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const int,-1>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0x62, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x4b
	.byte	0x6e, 0x6f, 0x77, 0x6e
	.byte	0x4e, 0x6f, 0x74, 0x4e
	.byte	0x75, 0x6c, 0x6c, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x24, 0x24, 0x43, 0x42
	.byte	0x48, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# ArgList (0x1057) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<const int,-1>::KnownNotNull (0x1056)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x56, 0x10, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1058) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<const int,-1>::KnownNotNull, __int64) (0x1057)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x57, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1059) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(const int*, __int64) (0x104D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(const int*, const int*) (0x104F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(std::array<int,0>&) (0x1050)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(const std::array<int,0>&) (0x1051)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(const gsl::span<const int,-1>&) (0x1055)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void gsl::span<const int,-1>::(gsl::span<const int,-1>::KnownNotNull, __int64) (0x1058)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4d, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4f, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x50, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x51, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x55, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x58, 0x10, 0x00, 0x00
	# MemberFunction (0x105A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x105B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const int,-1> (0x1047)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x105C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const int,-1>& (0x105B)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<const int,-1>&) (0x1054)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x5b, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x54, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x105D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<const int,-1> (0x1052)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x52, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x105E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const int,-1> (0x1047)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x105F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const int,-1> (0x1047)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1060) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1061) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1062) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const int (0x104A)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1063) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int& (0x1062)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1064) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int* (0x104B)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1065) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<const int,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@$$CBH$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x41, 0x40
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x1066) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const int,-1>,0> (0x1065)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x65, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1067) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<const int,-1>,1>
	#   LinkageName: .?AV?$span_iterator@V?$span@$$CBH$0?0@gsl@@$00@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x1068) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const int,-1>,1> (0x1067)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x67, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1069) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@$$CBH$0?0@gsl@@$0A@@details@gsl@@@std@@
	# }
	.byte	0xbe, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x20
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x30, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x41, 0x40
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x106A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> > (0x1069)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x69, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x106B) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@$$CBH$0?0@gsl@@$00@details@gsl@@@std@@
	# }
	.byte	0xba, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x20
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x31, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# MemberFunction (0x106C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> > (0x106B)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x6b, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x106D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x106E) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const int,-1>::subspan_selector<-1>
	#   LinkageName: .?AV?$subspan_selector@$0?0@?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0x76, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x73
	.byte	0x75, 0x62, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x73
	.byte	0x65, 0x6c, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x73, 0x65
	.byte	0x6c, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x40, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x24
	.byte	0x24, 0x43, 0x42, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# ArgList (0x106F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#     ArgType: gsl::span<const int,-1>::subspan_selector<-1> (0x106E)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	# MemberFunction (0x1070) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const int,-1> (0x1047)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (__int64, __int64, gsl::span<const int,-1>::subspan_selector<-1>) (0x106F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x6f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1071) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const __int64 (0x1004)
	#     Name: extent
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#     FieldOffset: 0x0
	#     Name: storage_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x1059
	#     Name: span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::() (0x105A)
	#     Name: ~span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const int,-1>& gsl::span<const int,-1>::(const gsl::span<const int,-1>&) (0x105C)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const int,-1> gsl::span<const int,-1>::(__int64) (0x105E)
	#     Name: first
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const int,-1> gsl::span<const int,-1>::(__int64) (0x105E)
	#     Name: last
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const int,-1> gsl::span<const int,-1>::(__int64, __int64) (0x105F)
	#     Name: subspan
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<const int,-1>::() (0x1060)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<const int,-1>::() (0x1060)
	#     Name: size_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool gsl::span<const int,-1>::() (0x1061)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int& gsl::span<const int,-1>::(__int64) (0x1063)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int& gsl::span<const int,-1>::(__int64) (0x1063)
	#     Name: at
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int& gsl::span<const int,-1>::(__int64) (0x1063)
	#     Name: operator()
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* gsl::span<const int,-1>::() (0x1064)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,0> gsl::span<const int,-1>::() (0x1066)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,0> gsl::span<const int,-1>::() (0x1066)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,1> gsl::span<const int,-1>::() (0x1068)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,1> gsl::span<const int,-1>::() (0x1068)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> > gsl::span<const int,-1>::() (0x106A)
	#     Name: rbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> > gsl::span<const int,-1>::() (0x106A)
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> > gsl::span<const int,-1>::() (0x106C)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> > gsl::span<const int,-1>::() (0x106C)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* gsl::span<const int,-1>::() (0x1064)
	#     Name: _Unchecked_begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* gsl::span<const int,-1>::() (0x1064)
	#     Name: _Unchecked_end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: bool gsl::span<const int,-1>::(__int64, __int64) (0x106D)
	#     Name: CheckRange
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<const int,-1> gsl::span<const int,-1>::(__int64, __int64, gsl::span<const int,-1>::subspan_selector<-1>) (0x1070)
	#     Name: make_subspan
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int (0x104A)
	#     Name: element_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int* (0x104B)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int& (0x1062)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,0> (0x1065)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,1> (0x1067)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> > (0x1069)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> > (0x106B)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::span<const int,-1>::KnownNotNull (0x1056)
	#     Name: KnownNotNull
	#   }
	# }
	.byte	0xd6, 0x02, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x59, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5a, 0x10, 0x00, 0x00
	.byte	0x7e, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5e, 0x10, 0x00, 0x00
	.byte	0x66, 0x69, 0x72, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5e, 0x10, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5f, 0x10, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x60, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x60, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x61, 0x10, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x64, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x66, 0x10, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x66, 0x10, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x68, 0x10, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x68, 0x10, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6a, 0x10, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6a, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6c, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6c, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x64, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x64, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0x6d, 0x10, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x70, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x65, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x67, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x69, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x6b, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x56, 0x10, 0x00, 0x00
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1072) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 43
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1071)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<const int,-1>
	#   LinkageName: .?AV?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x2b, 0x00, 0x10, 0x02
	.byte	0x71, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1073) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<const int,-1> (0x1072)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 355
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x72, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x63, 0x01, 0x00, 0x00
	# Modifier (0x1074) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1075) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1074)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x74, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1076) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int* (0x104B)
	#   ClassType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   ThisType: const gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x1075)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x75, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1077) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: gsl::details::extent_type<-1> (0x1038)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: const int* (0x104B)
	#     FieldOffset: 0x8
	#     Name: data_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x1076)
	#     Name: data
	#   }
	# }
	.byte	0x2e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x08, 0x00, 0x64, 0x61
	.byte	0x74, 0x61, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x76, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1078) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 3
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x1077)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x03, 0x00, 0x08, 0x02
	.byte	0x77, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x73
	.byte	0x74, 0x6f, 0x72, 0x61
	.byte	0x67, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x64, 0x79
	.byte	0x6e, 0x61, 0x6d, 0x69
	.byte	0x63, 0x5f, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x24, 0x24, 0x43, 0x42
	.byte	0x48, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1079) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1078)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 583
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x78, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x02, 0x00, 0x00
	# MemberFuncId (0x107A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: void gsl::span<int,-1>::() (0x101B)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1b, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: __int64 gsl::span<int,-1>::() (0x1023)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x23, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107C) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: int* gsl::span<int,-1>::() (0x1027)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107D) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   FunctionType: void gsl::span<const int,-1>::() (0x105A)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5a, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   FunctionType: __int64 gsl::span<const int,-1>::() (0x1060)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x60, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107F) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   FunctionType: const int* gsl::span<const int,-1>::() (0x1064)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x64, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# FuncId (0x1080) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: bool () (0x1001)
	#   Name: bar
	# }
	.byte	0x0e, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x10, 0x00, 0x00
	.byte	0x62, 0x61, 0x72, 0x00
	# Class (0x1081) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::vector<int,std::allocator<int> >
	#   LinkageName: .?AV?$vector@HV?$allocator@H@std@@@std@@
	# }
	.byte	0x66, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x76
	.byte	0x65, 0x63, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x69, 0x6e, 0x74
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x76, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x40, 0x48, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x48
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1082) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >
	#   LinkageName: .?AV?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@
	# }
	.byte	0xa2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x56
	.byte	0x65, 0x63, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x69, 0x6e, 0x74
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x56, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x56, 0x65
	.byte	0x63, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x48, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x48
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x1083) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::vector<int,std::allocator<int> > (0x1081)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1084) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1085) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator<int>
	#   LinkageName: .?AV?$allocator@H@std@@
	# }
	.byte	0x42, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x69, 0x6e, 0x74
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x48, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Modifier (0x1086) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::allocator<int> (0x1085)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1087) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<int> (0x1086)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x86, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1088) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::allocator<int>& (0x1087)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x87, 0x10, 0x00, 0x00
	# MemberFunction (0x1089) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<int>&) (0x1088)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x88, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x108A) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: unsigned __int64 (0x23)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x108B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const std::allocator<int>& (0x1087)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x87, 0x10, 0x00, 0x00
	# MemberFunction (0x108C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const std::allocator<int>&) (0x108B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x8b, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x108D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const int& (0x1062)
	#     ArgType: const std::allocator<int>& (0x1087)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x87, 0x10, 0x00, 0x00
	# MemberFunction (0x108E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const int&, const std::allocator<int>&) (0x108D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x8d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x108F) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::initializer_list<int>
	#   LinkageName: .?AV?$initializer_list@H@std@@
	# }
	.byte	0x4e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x69, 0x74, 0x69
	.byte	0x61, 0x6c, 0x69, 0x7a
	.byte	0x65, 0x72, 0x5f, 0x6c
	.byte	0x69, 0x73, 0x74, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x69, 0x74, 0x69
	.byte	0x61, 0x6c, 0x69, 0x7a
	.byte	0x65, 0x72, 0x5f, 0x6c
	.byte	0x69, 0x73, 0x74, 0x40
	.byte	0x48, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# ArgList (0x1090) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::initializer_list<int> (0x108F)
	#     ArgType: const std::allocator<int>& (0x1087)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x8f, 0x10, 0x00, 0x00
	.byte	0x87, 0x10, 0x00, 0x00
	# MemberFunction (0x1091) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::initializer_list<int>, const std::allocator<int>&) (0x1090)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1092) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::vector<int,std::allocator<int> > (0x1081)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1093) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::vector<int,std::allocator<int> > (0x1092)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x92, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1094) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::vector<int,std::allocator<int> >& (0x1093)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x93, 0x10, 0x00, 0x00
	# MemberFunction (0x1095) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::vector<int,std::allocator<int> >&) (0x1094)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1096) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::vector<int,std::allocator<int> >& (0x1093)
	#     ArgType: const std::allocator<int>& (0x1087)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x93, 0x10, 0x00, 0x00
	.byte	0x87, 0x10, 0x00, 0x00
	# MemberFunction (0x1097) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::vector<int,std::allocator<int> >&, const std::allocator<int>&) (0x1096)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x96, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1098) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::vector<int,std::allocator<int> > (0x1081)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x1099) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::vector<int,std::allocator<int> >&& (0x1098)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x98, 0x10, 0x00, 0x00
	# MemberFunction (0x109A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::vector<int,std::allocator<int> >&&) (0x1099)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x109B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::vector<int,std::allocator<int> >&& (0x1098)
	#     ArgType: const std::allocator<int>& (0x1087)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x98, 0x10, 0x00, 0x00
	.byte	0x87, 0x10, 0x00, 0x00
	# MemberFunction (0x109C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::vector<int,std::allocator<int> >&&, const std::allocator<int>&) (0x109B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x109D) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::() (0x1084)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(const std::allocator<int>&) (0x1089)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(const unsigned __int64, const std::allocator<int>&) (0x108C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(const unsigned __int64, const int&, const std::allocator<int>&) (0x108E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(std::initializer_list<int>, const std::allocator<int>&) (0x1091)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(const std::vector<int,std::allocator<int> >&) (0x1095)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(const std::vector<int,std::allocator<int> >&, const std::allocator<int>&) (0x1097)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(std::vector<int,std::allocator<int> >&&) (0x109A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(std::vector<int,std::allocator<int> >&&, const std::allocator<int>&) (0x109C)
	#   ]
	# }
	.byte	0x4a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x84, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x89, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8c, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8e, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x91, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x97, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# Struct (0x109E) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::integral_constant<bool,1>
	#   LinkageName: .?AU?$integral_constant@_N$00@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x30, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x109F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::vector<int,std::allocator<int> >&& (0x1098)
	#     ArgType: std::integral_constant<bool,1> (0x109E)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x98, 0x10, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	# MemberFunction (0x10A0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::vector<int,std::allocator<int> >&&, std::integral_constant<bool,1>) (0x109F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x9f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x10A1) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::integral_constant<bool,0>
	#   LinkageName: .?AU?$integral_constant@_N$0A@@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x41, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# ArgList (0x10A2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::vector<int,std::allocator<int> >&& (0x1098)
	#     ArgType: std::integral_constant<bool,0> (0x10A1)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x98, 0x10, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	# MemberFunction (0x10A3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::vector<int,std::allocator<int> >&&, std::integral_constant<bool,0>) (0x10A2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xa2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10A4) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::vector<int,std::allocator<int> >::(std::vector<int,std::allocator<int> >&&, std::integral_constant<bool,1>) (0x10A0)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::vector<int,std::allocator<int> >::(std::vector<int,std::allocator<int> >&&, std::integral_constant<bool,0>) (0x10A3)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa0, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa3, 0x10, 0x00, 0x00
	# Pointer (0x10A5) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::vector<int,std::allocator<int> > (0x1081)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x10A6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::vector<int,std::allocator<int> >& (0x10A5)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::vector<int,std::allocator<int> >&&) (0x1099)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10A7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::vector<int,std::allocator<int> >& (0x10A5)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::vector<int,std::allocator<int> >&) (0x1094)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10A8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::initializer_list<int> (0x108F)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x8f, 0x10, 0x00, 0x00
	# MemberFunction (0x10A9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::vector<int,std::allocator<int> >& (0x10A5)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::initializer_list<int>) (0x10A8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10AA) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::vector<int,std::allocator<int> >& std::vector<int,std::allocator<int> >::(std::vector<int,std::allocator<int> >&&) (0x10A6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::vector<int,std::allocator<int> >& std::vector<int,std::allocator<int> >::(const std::vector<int,std::allocator<int> >&) (0x10A7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::vector<int,std::allocator<int> >& std::vector<int,std::allocator<int> >::(std::initializer_list<int>) (0x10A9)
	#   ]
	# }
	.byte	0x1a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa9, 0x10, 0x00, 0x00
	# ArgList (0x10AB) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const int& (0x1062)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	# MemberFunction (0x10AC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int&) (0x10AB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10AD) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: int (0x74)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x10AE) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: int&& (0x10AD)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xad, 0x10, 0x00, 0x00
	# MemberFunction (0x10AF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int&&) (0x10AE)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xae, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10B0) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(const int&) (0x10AC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(int&&) (0x10AF)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xac, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xaf, 0x10, 0x00, 0x00
	# Class (0x10B1) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
	#   LinkageName: .?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@
	# }
	.byte	0xa2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x56, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x3e
	.byte	0x20, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x40
	.byte	0x48, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# Class (0x10B2) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
	#   LinkageName: .?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@
	# }
	.byte	0xae, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x63
	.byte	0x6f, 0x6e, 0x73, 0x74
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x3e, 0x20, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x5f, 0x56, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x40
	.byte	0x48, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# ArgList (0x10B3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B2)
	#     ArgType: const int& (0x1062)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	# MemberFunction (0x10B4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B1)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, const int&) (0x10B3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xb3, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10B5) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B2)
	#     ArgType: int&& (0x10AD)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0xad, 0x10, 0x00, 0x00
	# MemberFunction (0x10B6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B1)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, int&&) (0x10B5)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10B7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B2)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const int& (0x1062)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	# MemberFunction (0x10B8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B1)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, const unsigned __int64, const int&) (0x10B7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xb7, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10B9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B2)
	#     ArgType: std::initializer_list<int> (0x108F)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x8f, 0x10, 0x00, 0x00
	# MemberFunction (0x10BA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B1)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, std::initializer_list<int>) (0x10B9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xb9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10BB) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > std::vector<int,std::allocator<int> >::(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, const int&) (0x10B4)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > std::vector<int,std::allocator<int> >::(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, int&&) (0x10B6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > std::vector<int,std::allocator<int> >::(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, const unsigned __int64, const int&) (0x10B8)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > std::vector<int,std::allocator<int> >::(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, std::initializer_list<int>) (0x10BA)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb4, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb6, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb8, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xba, 0x10, 0x00, 0x00
	# ArgList (0x10BC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const int& (0x1062)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	# MemberFunction (0x10BD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const int&) (0x10BC)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xbc, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10BE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::initializer_list<int>) (0x10A8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10BF) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(const unsigned __int64, const int&) (0x10BD)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(std::initializer_list<int>) (0x10BE)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbd, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbe, 0x10, 0x00, 0x00
	# ArgList (0x10C0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x10C1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10C2) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(const unsigned __int64) (0x10C1)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(const unsigned __int64, const int&) (0x10BD)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc1, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbd, 0x10, 0x00, 0x00
	# ArgList (0x10C3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	# MemberFunction (0x10C4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B1)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >) (0x10C3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc3, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10C5) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B2)
	#     ArgType: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B2)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	# MemberFunction (0x10C6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B1)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >) (0x10C5)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xc5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10C7) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > std::vector<int,std::allocator<int> >::(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >) (0x10C4)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > std::vector<int,std::allocator<int> >::(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >) (0x10C6)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc4, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# ArgList (0x10C8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::vector<int,std::allocator<int> >& (0x10A5)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	# MemberFunction (0x10C9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::vector<int,std::allocator<int> >&) (0x10C8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10CA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10CB) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::vector<int,std::allocator<int> > (0x1092)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x92, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x10CC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int* (0x104B)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: const std::vector<int,std::allocator<int> >* (0x10CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10CD) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int* std::vector<int,std::allocator<int> >::() (0x10CA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* std::vector<int,std::allocator<int> >::() (0x10CC)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcc, 0x10, 0x00, 0x00
	# MemberFunction (0x10CE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B1)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10CF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B2)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: const std::vector<int,std::allocator<int> >* (0x10CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10D0) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > std::vector<int,std::allocator<int> >::() (0x10CE)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > std::vector<int,std::allocator<int> >::() (0x10CF)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xce, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	# Class (0x10D1) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	#   LinkageName: .?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@
	# }
	.byte	0xd6, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x56, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x3e, 0x20, 0x3e
	.byte	0x20, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x40
	.byte	0x48, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x10D2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > > (0x10D1)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10D3) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > >
	#   LinkageName: .?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@
	# }
	.byte	0xe2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x56, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x56, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x3e
	.byte	0x20, 0x3e, 0x20, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x72, 0x65, 0x76
	.byte	0x65, 0x72, 0x73, 0x65
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x5f, 0x56, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x40
	.byte	0x48, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x10D4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > > (0x10D3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: const std::vector<int,std::allocator<int> >* (0x10CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xd3, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10D5) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > > std::vector<int,std::allocator<int> >::() (0x10D2)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > > std::vector<int,std::allocator<int> >::() (0x10D4)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd4, 0x10, 0x00, 0x00
	# MemberFunction (0x10D6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: const std::vector<int,std::allocator<int> >* (0x10CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10D7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: const std::vector<int,std::allocator<int> >* (0x10CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10D8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int& (0x1025)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10D9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int& (0x1062)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: const std::vector<int,std::allocator<int> >* (0x10CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10DA) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int& std::vector<int,std::allocator<int> >::(const unsigned __int64) (0x10D8)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const int& std::vector<int,std::allocator<int> >::(const unsigned __int64) (0x10D9)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd8, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd9, 0x10, 0x00, 0x00
	# MemberFunction (0x10DB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int& (0x1025)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10DC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int& (0x1062)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: const std::vector<int,std::allocator<int> >* (0x10CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10DD) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int& std::vector<int,std::allocator<int> >::() (0x10DB)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const int& std::vector<int,std::allocator<int> >::() (0x10DC)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xdb, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xdc, 0x10, 0x00, 0x00
	# MemberFunction (0x10DE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<int> (0x1085)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: const std::vector<int,std::allocator<int> >* (0x10CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10DF) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x10E0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, const unsigned __int64) (0x10DF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xdf, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10E1) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const int& (0x1062)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	# MemberFunction (0x10E2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (int*, const unsigned __int64, const int&) (0x10E1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xe1, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10E3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	# MemberFunction (0x10E4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (int*, int*, int*) (0x10E3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xe3, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10E5) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#     ArgType: std::integral_constant<bool,1> (0x109E)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	# MemberFunction (0x10E6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (int*, int*, int*, std::integral_constant<bool,1>) (0x10E5)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0xe5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10E7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#     ArgType: std::integral_constant<bool,0> (0x10A1)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	# MemberFunction (0x10E8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (int*, int*, int*, std::integral_constant<bool,0>) (0x10E7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0xe7, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10E9) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::vector<int,std::allocator<int> >::(int*, int*, int*, std::integral_constant<bool,1>) (0x10E6)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::vector<int,std::allocator<int> >::(int*, int*, int*, std::integral_constant<bool,0>) (0x10E8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xe6, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xe8, 0x10, 0x00, 0x00
	# MemberFunction (0x10EA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (int*, int*, int*) (0x10E3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xe3, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10EB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, int*) (0x1009)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x09, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10EC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: const std::vector<int,std::allocator<int> >* (0x10CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10ED) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x10EE) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: int* (0x674)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x10EF) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const int* (0x10EE)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xee, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x10F0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const int*, const unsigned __int64, const unsigned __int64) (0x10EF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xef, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10F1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10F2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: const std::vector<int,std::allocator<int> >* (0x10CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, int*) (0x1009)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x09, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x10F3) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator_traits<std::allocator<int> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@H@std@@@std@@
	# }
	.byte	0x72, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x69
	.byte	0x6e, 0x74, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x48, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# FieldList (0x10F4) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#     BaseOffset: 0x0
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x9
	#     MethodListIndex: 0x109D
	#     Name: vector
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10A4
	#     Name: _Move_from
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10A4
	#     Name: _Move_assign_from
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x3
	#     MethodListIndex: 0x10AA
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::() (0x1084)
	#     Name: ~vector
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10B0
	#     Name: push_back
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x10BB
	#     Name: insert
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10BF
	#     Name: assign
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10C2
	#     Name: resize
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::vector<int,std::allocator<int> >::(const unsigned __int64) (0x10C1)
	#     Name: _Reallocate_exactly
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(const unsigned __int64) (0x10C1)
	#     Name: reserve
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::() (0x1084)
	#     Name: shrink_to_fit
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::() (0x1084)
	#     Name: pop_back
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10C7
	#     Name: erase
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::() (0x1084)
	#     Name: clear
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::vector<int,std::allocator<int> >::(std::vector<int,std::allocator<int> >&) (0x10C9)
	#     Name: swap
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10CD
	#     Name: data
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10D0
	#     Name: begin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10D0
	#     Name: end
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10D5
	#     Name: rbegin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10D5
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > std::vector<int,std::allocator<int> >::() (0x10CF)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > std::vector<int,std::allocator<int> >::() (0x10CF)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > > std::vector<int,std::allocator<int> >::() (0x10D4)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > > std::vector<int,std::allocator<int> >::() (0x10D4)
	#     Name: crend
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10CD
	#     Name: _Unchecked_begin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10CD
	#     Name: _Unchecked_end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::vector<int,std::allocator<int> >::() (0x10D6)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::vector<int,std::allocator<int> >::() (0x10D7)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::vector<int,std::allocator<int> >::() (0x10D7)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::vector<int,std::allocator<int> >::() (0x10D7)
	#     Name: capacity
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: unsigned __int64 std::vector<int,std::allocator<int> >::() (0x10D7)
	#     Name: _Unused_capacity
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: bool std::vector<int,std::allocator<int> >::() (0x10D6)
	#     Name: _Has_unused_capacity
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10DA
	#     Name: operator[]
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10DA
	#     Name: at
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10DD
	#     Name: front
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10DD
	#     Name: back
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<int> std::vector<int,std::allocator<int> >::() (0x10DE)
	#     Name: get_allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: int* std::vector<int,std::allocator<int> >::(int*, const unsigned __int64) (0x10E0)
	#     Name: _Udefault
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: int* std::vector<int,std::allocator<int> >::(int*, const unsigned __int64, const int&) (0x10E2)
	#     Name: _Ufill
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: int* std::vector<int,std::allocator<int> >::(int*, int*, int*) (0x10E4)
	#     Name: _Umove
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10E9
	#     Name: _Umove_if_noexcept1
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::vector<int,std::allocator<int> >::(int*, int*, int*) (0x10EA)
	#     Name: _Umove_if_noexcept
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::vector<int,std::allocator<int> >::(int*, int*) (0x10EB)
	#     Name: _Destroy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: unsigned __int64 std::vector<int,std::allocator<int> >::(const unsigned __int64) (0x10EC)
	#     Name: _Calculate_growth
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: bool std::vector<int,std::allocator<int> >::(const unsigned __int64) (0x10ED)
	#     Name: _Buy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::vector<int,std::allocator<int> >::(const int*, const unsigned __int64, const unsigned __int64) (0x10F0)
	#     Name: _Change_array
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::vector<int,std::allocator<int> >::() (0x1084)
	#     Name: _Tidy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: void std::vector<int,std::allocator<int> >::() (0x10F1)
	#     Name: _Xlength
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: void std::vector<int,std::allocator<int> >::() (0x10F1)
	#     Name: _Xrange
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::vector<int,std::allocator<int> >::(int*, int*) (0x10F2)
	#     Name: _Orphan_range
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#     Name: _Mybase
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<int> (0x1085)
	#     Name: _Alty
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<int> > (0x10F3)
	#     Name: _Alty_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<int> (0x1085)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x674)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int* (0x104B)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int& (0x1025)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int& (0x1062)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B1)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B2)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > > (0x10D1)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > > (0x10D3)
	#     Name: const_reverse_iterator
	#   }
	# }
	.byte	0x36, 0x05, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x09, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x76, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x6f, 0x76
	.byte	0x65, 0x5f, 0x66, 0x72
	.byte	0x6f, 0x6d, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x6f, 0x76
	.byte	0x65, 0x5f, 0x61, 0x73
	.byte	0x73, 0x69, 0x67, 0x6e
	.byte	0x5f, 0x66, 0x72, 0x6f
	.byte	0x6d, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x03, 0x00
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x84, 0x10, 0x00, 0x00
	.byte	0x7e, 0x76, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xb0, 0x10, 0x00, 0x00
	.byte	0x70, 0x75, 0x73, 0x68
	.byte	0x5f, 0x62, 0x61, 0x63
	.byte	0x6b, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xbb, 0x10, 0x00, 0x00
	.byte	0x69, 0x6e, 0x73, 0x65
	.byte	0x72, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xbf, 0x10, 0x00, 0x00
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xc2, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x73, 0x69
	.byte	0x7a, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xc1, 0x10, 0x00, 0x00
	.byte	0x5f, 0x52, 0x65, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x65, 0x5f
	.byte	0x65, 0x78, 0x61, 0x63
	.byte	0x74, 0x6c, 0x79, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xc1, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x73, 0x65
	.byte	0x72, 0x76, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x84, 0x10, 0x00, 0x00
	.byte	0x73, 0x68, 0x72, 0x69
	.byte	0x6e, 0x6b, 0x5f, 0x74
	.byte	0x6f, 0x5f, 0x66, 0x69
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x84, 0x10, 0x00, 0x00
	.byte	0x70, 0x6f, 0x70, 0x5f
	.byte	0x62, 0x61, 0x63, 0x6b
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x65, 0x72, 0x61, 0x73
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x84, 0x10, 0x00, 0x00
	.byte	0x63, 0x6c, 0x65, 0x61
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x73, 0x77, 0x61, 0x70
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xd5, 0x10, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xd5, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd4, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd4, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd6, 0x10, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x63, 0x61, 0x70, 0x61
	.byte	0x63, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x75
	.byte	0x73, 0x65, 0x64, 0x5f
	.byte	0x63, 0x61, 0x70, 0x61
	.byte	0x63, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xd6, 0x10, 0x00, 0x00
	.byte	0x5f, 0x48, 0x61, 0x73
	.byte	0x5f, 0x75, 0x6e, 0x75
	.byte	0x73, 0x65, 0x64, 0x5f
	.byte	0x63, 0x61, 0x70, 0x61
	.byte	0x63, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xda, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xda, 0x10, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xdd, 0x10, 0x00, 0x00
	.byte	0x66, 0x72, 0x6f, 0x6e
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xdd, 0x10, 0x00, 0x00
	.byte	0x62, 0x61, 0x63, 0x6b
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xde, 0x10, 0x00, 0x00
	.byte	0x67, 0x65, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xe0, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x64, 0x65
	.byte	0x66, 0x61, 0x75, 0x6c
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xe2, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x66, 0x69
	.byte	0x6c, 0x6c, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xe4, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6d, 0x6f
	.byte	0x76, 0x65, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xe9, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6d, 0x6f
	.byte	0x76, 0x65, 0x5f, 0x69
	.byte	0x66, 0x5f, 0x6e, 0x6f
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x31, 0x00
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6d, 0x6f
	.byte	0x76, 0x65, 0x5f, 0x69
	.byte	0x66, 0x5f, 0x6e, 0x6f
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	.byte	0x5f, 0x44, 0x65, 0x73
	.byte	0x74, 0x72, 0x6f, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xec, 0x10, 0x00, 0x00
	.byte	0x5f, 0x43, 0x61, 0x6c
	.byte	0x63, 0x75, 0x6c, 0x61
	.byte	0x74, 0x65, 0x5f, 0x67
	.byte	0x72, 0x6f, 0x77, 0x74
	.byte	0x68, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xed, 0x10, 0x00, 0x00
	.byte	0x5f, 0x42, 0x75, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xf0, 0x10, 0x00, 0x00
	.byte	0x5f, 0x43, 0x68, 0x61
	.byte	0x6e, 0x67, 0x65, 0x5f
	.byte	0x61, 0x72, 0x72, 0x61
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x84, 0x10, 0x00, 0x00
	.byte	0x5f, 0x54, 0x69, 0x64
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0x5f, 0x58, 0x6c, 0x65
	.byte	0x6e, 0x67, 0x74, 0x68
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0x5f, 0x58, 0x72, 0x61
	.byte	0x6e, 0x67, 0x65, 0x00
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x72, 0x61, 0x6e, 0x67
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf3, 0x10, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xd3, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	# Class (0x10F5) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 98
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x10F4)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 32
	#   Name: std::vector<int,std::allocator<int> >
	#   LinkageName: .?AV?$vector@HV?$allocator@H@std@@@std@@
	# }
	.byte	0x66, 0x00, 0x04, 0x15
	.byte	0x62, 0x00, 0x10, 0x02
	.byte	0xf4, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x20, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x76
	.byte	0x65, 0x63, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x69, 0x6e, 0x74
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x76, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x40, 0x48, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x48
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x10F6) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector
	# }
	.byte	0x6e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x76, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	# UdtSourceLine (0x10F7) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::vector<int,std::allocator<int> > (0x10F5)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector (0x10F6)
	#   LineNumber: 624
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0xf6, 0x10, 0x00, 0x00
	.byte	0x70, 0x02, 0x00, 0x00
	# Class (0x10F8) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>
	#   LinkageName: .?AV?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@
	# }
	.byte	0xce, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6d, 0x70
	.byte	0x72, 0x65, 0x73, 0x73
	.byte	0x65, 0x64, 0x5f, 0x70
	.byte	0x61, 0x69, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x69
	.byte	0x6e, 0x74, 0x3e, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x56, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x3e
	.byte	0x20, 0x3e, 0x2c, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x43, 0x6f, 0x6d
	.byte	0x70, 0x72, 0x65, 0x73
	.byte	0x73, 0x65, 0x64, 0x5f
	.byte	0x70, 0x61, 0x69, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x48, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x56, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x48, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x32, 0x40, 0x24
	.byte	0x30, 0x30, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x10F9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x10FA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x10F9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10FB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x10F9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<int>&) (0x1088)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x88, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10FC) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<int> (0x1085)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x10FD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::allocator<int>& (0x10FC)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	# MemberFunction (0x10FE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x10F9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::allocator<int>&) (0x10FD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xfd, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x10FF) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Iterator_base12
	#   LinkageName: .?AU_Iterator_base12@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x49, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x62, 0x61, 0x73
	.byte	0x65, 0x31, 0x32, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x49, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x1100) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Iterator_base12 (0x10FF)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Pointer (0x1101) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Iterator_base12* (0x1100)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Modifier (0x1102) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1103) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1102)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x02, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1104) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1101)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: const std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x1103)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x01, 0x11, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1105) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Container_proxy
	#   LinkageName: .?AU_Container_proxy@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x1106) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy (0x1105)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x05, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Pointer (0x1107) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy* (0x1106)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1108) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy*& (0x1107)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x10F9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x07, 0x11, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1109) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy (0x1105)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x05, 0x11, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# Pointer (0x110A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy* const (0x1109)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x09, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x110B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* const& (0x110A)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: const std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x1103)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0a, 0x11, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x110C) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy*& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1108)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* const& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x110B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x08, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0b, 0x11, 0x00, 0x00
	# Pointer (0x110D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x110E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >& (0x110D)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	# MemberFunction (0x110F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x10F9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >&) (0x110E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x0e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1110) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<int>& (0x10FC)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x10F9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xfc, 0x10, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1111) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::allocator<int>& (0x1087)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: const std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x1103)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x87, 0x10, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1112) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<int>& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1110)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::allocator<int>& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1111)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x11, 0x11, 0x00, 0x00
	# Class (0x1113) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Vector_val<std::_Simple_types<int> >
	#   LinkageName: .?AV?$_Vector_val@U?$_Simple_types@H@std@@@std@@
	# }
	.byte	0x72, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x40
	.byte	0x48, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Pointer (0x1114) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Vector_val<std::_Simple_types<int> > (0x1113)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x13, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1115) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Vector_val<std::_Simple_types<int> >& (0x1114)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x10F9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x14, 0x11, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1116) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Vector_val<std::_Simple_types<int> > (0x1113)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x13, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1117) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Vector_val<std::_Simple_types<int> > (0x1116)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x16, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1118) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_Vector_val<std::_Simple_types<int> >& (0x1117)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: const std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x1103)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x17, 0x11, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1119) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_val<std::_Simple_types<int> >& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1115)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Vector_val<std::_Simple_types<int> >& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1118)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x15, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x18, 0x11, 0x00, 0x00
	# ArgList (0x111A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const int* (0x10EE)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xee, 0x10, 0x00, 0x00
	# MemberFunction (0x111B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B1)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x10F9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int*) (0x111A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x111C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B1)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x10F9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x111D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: int* (0x674)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x111E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int*& (0x111D)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x10F9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x1d, 0x11, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x111F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const int* (0x10EE)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xee, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1120) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int*& (0x111F)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   ThisType: const std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >* (0x1103)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x1f, 0x11, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1121) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int*& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x111E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const int*& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1120)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1e, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x20, 0x11, 0x00, 0x00
	# Class (0x1122) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator<std::_Container_proxy>
	#   LinkageName: .?AV?$allocator@U_Container_proxy@std@@@std@@
	# }
	.byte	0x6a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x43
	.byte	0x6f, 0x6e, 0x74, 0x61
	.byte	0x69, 0x6e, 0x65, 0x72
	.byte	0x5f, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Struct (0x1123) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator_traits<std::allocator<std::_Container_proxy> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@
	# }
	.byte	0x9a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# Struct (0x1124) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Simple_types<int>
	#   LinkageName: .?AU?$_Simple_types@H@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x69, 0x6e, 0x74
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x48, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# FieldList (0x1125) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#     FieldOffset: 0x0
	#     Name: _Mypair
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x10FA)
	#     Name: _Vector_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x10FA)
	#     Name: ~_Vector_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::(const std::allocator<int>&) (0x10FB)
	#     Name: _Copy_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::(std::allocator<int>&) (0x10FE)
	#     Name: _Move_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x10FA)
	#     Name: _Alloc_proxy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x10FA)
	#     Name: _Free_proxy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12** std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1104)
	#     Name: _Getpfirst
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x110C
	#     Name: _Myproxy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x10FA)
	#     Name: _Orphan_all
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::(std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >&) (0x110F)
	#     Name: _Swap_all
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1112
	#     Name: _Getal
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1119
	#     Name: _Get_data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::(const int*) (0x111B)
	#     Name: _Make_iterator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::(const unsigned __int64) (0x111C)
	#     Name: _Make_iterator_offset
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1121
	#     Name: _Myfirst
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1121
	#     Name: _Mylast
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1121
	#     Name: _Myend
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<int> (0x1085)
	#     Name: _Alty
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<int> > (0x10F3)
	#     Name: _Alty_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<std::_Container_proxy> (0x1122)
	#     Name: _Alproxy
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<std::_Container_proxy> > (0x1123)
	#     Name: _Alproxy_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Simple_types<int> (0x1124)
	#     Name: _Val_types
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x674)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int* (0x104B)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B1)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > (0x10B2)
	#     Name: const_iterator
	#   }
	# }
	.byte	0x62, 0x02, 0x03, 0x12
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x61, 0x69
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	.byte	0x5f, 0x56, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x56, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xfb, 0x10, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xfe, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x6f, 0x76
	.byte	0x65, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	.byte	0x5f, 0x46, 0x72, 0x65
	.byte	0x65, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x04, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x0c, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x0f, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x12, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x61, 0x6c, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x19, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x64, 0x61, 0x74
	.byte	0x61, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1b, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x61, 0x6b
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1c, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x61, 0x6b
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x6f
	.byte	0x66, 0x66, 0x73, 0x65
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x21, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x66
	.byte	0x69, 0x72, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x21, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x6c
	.byte	0x61, 0x73, 0x74, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x21, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf3, 0x10, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x24, 0x11, 0x00, 0x00
	.byte	0x5f, 0x56, 0x61, 0x6c
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	# Class (0x1126) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 35
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1125)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 32
	#   Name: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >
	#   LinkageName: .?AV?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@
	# }
	.byte	0xa2, 0x00, 0x04, 0x15
	.byte	0x23, 0x00, 0x10, 0x02
	.byte	0x25, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x20, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x56
	.byte	0x65, 0x63, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x69, 0x6e, 0x74
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x56, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x56, 0x65
	.byte	0x63, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x48, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x48
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1127) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1126)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector (0x10F6)
	#   LineNumber: 402
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x26, 0x11, 0x00, 0x00
	.byte	0xf6, 0x10, 0x00, 0x00
	.byte	0x92, 0x01, 0x00, 0x00
	# Pointer (0x1128) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<int> (0x1086)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x86, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x1129) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: int& (0x1025)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x25, 0x10, 0x00, 0x00
	# MemberFunction (0x112A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: std::allocator<int> (0x1085)
	#   ThisType: const std::allocator<int>* (0x1128)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int&) (0x1129)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x28, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x29, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x112B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int* (0x104B)
	#   ClassType: std::allocator<int> (0x1085)
	#   ThisType: const std::allocator<int>* (0x1128)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int&) (0x10AB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x28, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x112C) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int* std::allocator<int>::(int&) (0x112A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* std::allocator<int>::(const int&) (0x112B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2a, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2b, 0x11, 0x00, 0x00
	# Pointer (0x112D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<int> (0x1085)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x112E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<int> (0x1085)
	#   ThisType: std::allocator<int>* (0x112D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x2d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x112F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<int> (0x1085)
	#   ThisType: std::allocator<int>* (0x112D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<int>&) (0x1088)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x2d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x88, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1130) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<int>::() (0x112E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<int>::(const std::allocator<int>&) (0x112F)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2e, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2f, 0x11, 0x00, 0x00
	# Pointer (0x1131) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: int (0x74)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# ArgList (0x1132) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* const (0x1131)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x31, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x1133) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<int> (0x1085)
	#   ThisType: std::allocator<int>* (0x112D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int* const, const unsigned __int64) (0x1132)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x2d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1134) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: std::allocator<int> (0x1085)
	#   ThisType: std::allocator<int>* (0x112D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x2d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1135) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: void (0x3)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1136) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const void (0x1135)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x35, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x1137) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const void* (0x1136)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x36, 0x11, 0x00, 0x00
	# MemberFunction (0x1138) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: std::allocator<int> (0x1085)
	#   ThisType: std::allocator<int>* (0x112D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const void*) (0x1137)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x2d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x37, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1139) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int* std::allocator<int>::(const unsigned __int64) (0x1134)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int* std::allocator<int>::(const unsigned __int64, const void*) (0x1138)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x11, 0x00, 0x00
	# MemberFunction (0x113A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::allocator<int> (0x1085)
	#   ThisType: const std::allocator<int>* (0x1128)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x28, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x113B) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x112C
	#     Name: address
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1130
	#     Name: allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<int>::(int* const, const unsigned __int64) (0x1133)
	#     Name: deallocate
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1139
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::allocator<int>::() (0x113A)
	#     Name: max_size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void (0x3)
	#     Name: _Not_user_specialized
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x674)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int* (0x104B)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int& (0x1025)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int& (0x1062)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0x5e, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x2c, 0x11, 0x00, 0x00
	.byte	0x61, 0x64, 0x64, 0x72
	.byte	0x65, 0x73, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x30, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x33, 0x11, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x39, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x3a, 0x11, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5f, 0x4e, 0x6f, 0x74
	.byte	0x5f, 0x75, 0x73, 0x65
	.byte	0x72, 0x5f, 0x73, 0x70
	.byte	0x65, 0x63, 0x69, 0x61
	.byte	0x6c, 0x69, 0x7a, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Class (0x113C) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 18
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x113B)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator<int>
	#   LinkageName: .?AV?$allocator@H@std@@
	# }
	.byte	0x42, 0x00, 0x04, 0x15
	.byte	0x12, 0x00, 0x10, 0x02
	.byte	0x3b, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x69, 0x6e, 0x74
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x48, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# StringId (0x113D) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x78, 0x6d, 0x65, 0x6d
	.byte	0x6f, 0x72, 0x79, 0x30
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x113E) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator<int> (0x113C)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x113D)
	#   LineNumber: 940
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x3c, 0x11, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0xac, 0x03, 0x00, 0x00
	# Pointer (0x113F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::initializer_list<int> (0x108F)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8f, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1140) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::initializer_list<int> (0x108F)
	#   ThisType: std::initializer_list<int>* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8f, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1141) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::initializer_list<int> (0x108F)
	#   ThisType: std::initializer_list<int>* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int*, const int*) (0x104E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8f, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x4e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1142) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::initializer_list<int>::() (0x1140)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::initializer_list<int>::(const int*, const int*) (0x1141)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x40, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x41, 0x11, 0x00, 0x00
	# Modifier (0x1143) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::initializer_list<int> (0x108F)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x8f, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1144) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::initializer_list<int> (0x1143)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x43, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1145) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int* (0x104B)
	#   ClassType: std::initializer_list<int> (0x108F)
	#   ThisType: const std::initializer_list<int>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x8f, 0x10, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1146) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::initializer_list<int> (0x108F)
	#   ThisType: const std::initializer_list<int>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x8f, 0x10, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1147) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: const int* (0x104B)
	#     FieldOffset: 0x0
	#     Name: _First
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: const int* (0x104B)
	#     FieldOffset: 0x8
	#     Name: _Last
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1142
	#     Name: initializer_list
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* std::initializer_list<int>::() (0x1145)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* std::initializer_list<int>::() (0x1145)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::initializer_list<int>::() (0x1146)
	#     Name: size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int& (0x1062)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int& (0x1062)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int* (0x104B)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int* (0x104B)
	#     Name: const_iterator
	#   }
	# }
	.byte	0xee, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x46
	.byte	0x69, 0x72, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x4c
	.byte	0x61, 0x73, 0x74, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x42, 0x11, 0x00, 0x00
	.byte	0x69, 0x6e, 0x69, 0x74
	.byte	0x69, 0x61, 0x6c, 0x69
	.byte	0x7a, 0x65, 0x72, 0x5f
	.byte	0x6c, 0x69, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x45, 0x11, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x45, 0x11, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x46, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	# Class (0x1148) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 13
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1147)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: std::initializer_list<int>
	#   LinkageName: .?AV?$initializer_list@H@std@@
	# }
	.byte	0x4e, 0x00, 0x04, 0x15
	.byte	0x0d, 0x00, 0x10, 0x02
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x69, 0x74, 0x69
	.byte	0x61, 0x6c, 0x69, 0x7a
	.byte	0x65, 0x72, 0x5f, 0x6c
	.byte	0x69, 0x73, 0x74, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x69, 0x74, 0x69
	.byte	0x61, 0x6c, 0x69, 0x7a
	.byte	0x65, 0x72, 0x5f, 0x6c
	.byte	0x69, 0x73, 0x74, 0x40
	.byte	0x48, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# StringId (0x1149) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\initializer_list
	# }
	.byte	0x7a, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x69, 0x6e, 0x69, 0x74
	.byte	0x69, 0x61, 0x6c, 0x69
	.byte	0x7a, 0x65, 0x72, 0x5f
	.byte	0x6c, 0x69, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x114A) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::initializer_list<int> (0x1148)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\initializer_list (0x1149)
	#   LineNumber: 18
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x48, 0x11, 0x00, 0x00
	.byte	0x49, 0x11, 0x00, 0x00
	.byte	0x12, 0x00, 0x00, 0x00
	# Modifier (0x114B) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: bool (0x30)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Modifier (0x114C) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::integral_constant<bool,1> (0x109E)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x114D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::integral_constant<bool,1> (0x114C)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x4c, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x114E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::integral_constant<bool,1> (0x109E)
	#   ThisType: const std::integral_constant<bool,1>* (0x114D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x4d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x114F) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: value
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,1>::() (0x114E)
	#     Name: operator bool
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,1>::() (0x114E)
	#     Name: operator()
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: bool (0x30)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: type
	#   }
	# }
	.byte	0x62, 0x00, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4e, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x20, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4e, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x1150) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 5
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x114F)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::integral_constant<bool,1>
	#   LinkageName: .?AU?$integral_constant@_N$00@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x05, 0x00, 0x10, 0x02
	.byte	0x4f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x30, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x1151) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xtr1common
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x78, 0x74, 0x72, 0x31
	.byte	0x63, 0x6f, 0x6d, 0x6d
	.byte	0x6f, 0x6e, 0x00, 0xf1
	# UdtSourceLine (0x1152) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::integral_constant<bool,1> (0x1150)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xtr1common (0x1151)
	#   LineNumber: 19
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x50, 0x11, 0x00, 0x00
	.byte	0x51, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Modifier (0x1153) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::integral_constant<bool,0> (0x10A1)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xa1, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1154) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::integral_constant<bool,0> (0x1153)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x53, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1155) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::integral_constant<bool,0> (0x10A1)
	#   ThisType: const std::integral_constant<bool,0>* (0x1154)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	.byte	0x54, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1156) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: value
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,0>::() (0x1155)
	#     Name: operator bool
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,0>::() (0x1155)
	#     Name: operator()
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: bool (0x30)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x10A1)
	#     Name: type
	#   }
	# }
	.byte	0x62, 0x00, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x55, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x20, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x55, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x1157) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 5
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1156)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::integral_constant<bool,0>
	#   LinkageName: .?AU?$integral_constant@_N$0A@@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x05, 0x00, 0x10, 0x02
	.byte	0x56, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x41, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1158) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::integral_constant<bool,0> (0x1157)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xtr1common (0x1151)
	#   LineNumber: 19
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x57, 0x11, 0x00, 0x00
	.byte	0x51, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Struct (0x1159) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Default_allocator_traits<std::allocator<int> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@H@std@@@std@@
	# }
	.byte	0x86, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x44, 0x65
	.byte	0x66, 0x61, 0x75, 0x6c
	.byte	0x74, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x48, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# FieldList (0x115A) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Default_allocator_traits<std::allocator<int> > (0x1159)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x59, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x115B) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x115A)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator_traits<std::allocator<int> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@H@std@@@std@@
	# }
	.byte	0x72, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x69
	.byte	0x6e, 0x74, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x48, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x115C) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator_traits<std::allocator<int> > (0x115B)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x113D)
	#   LineNumber: 902
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x5b, 0x11, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x86, 0x03, 0x00, 0x00
	# Pointer (0x115D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x115E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<int>& (0x10FC)
	#   ClassType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#   ThisType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>* (0x115D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xfc, 0x10, 0x00, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x5d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x115F) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1160) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x115F)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1161) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::allocator<int>& (0x1087)
	#   ClassType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#   ThisType: const std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>* (0x1160)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x87, 0x10, 0x00, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x60, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1162) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<int>& std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::() (0x115E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::allocator<int>& std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::() (0x1161)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5e, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x61, 0x11, 0x00, 0x00
	# MemberFunction (0x1163) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Vector_val<std::_Simple_types<int> >& (0x1114)
	#   ClassType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#   ThisType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>* (0x115D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x14, 0x11, 0x00, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x5d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1164) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_Vector_val<std::_Simple_types<int> >& (0x1117)
	#   ClassType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#   ThisType: const std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>* (0x1160)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x17, 0x11, 0x00, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x60, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1165) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Vector_val<std::_Simple_types<int> >& std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::() (0x1163)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Vector_val<std::_Simple_types<int> >& std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::() (0x1164)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x63, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x64, 0x11, 0x00, 0x00
	# FieldList (0x1166) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Private (0x1)
	#     BaseType: std::allocator<int> (0x1085)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_Vector_val<std::_Simple_types<int> > (0x1113)
	#     FieldOffset: 0x0
	#     Name: _Myval2
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1162
	#     Name: _Get_first
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1165
	#     Name: _Get_second
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<int> (0x1085)
	#     Name: _Mybase
	#   }
	# }
	.byte	0x5a, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x01, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x13, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x76, 0x61, 0x6c
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x65, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x73, 0x65, 0x63
	.byte	0x6f, 0x6e, 0x64, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	# Class (0x1167) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 7
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1166)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 32
	#   Name: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>
	#   LinkageName: .?AV?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@
	# }
	.byte	0xce, 0x00, 0x04, 0x15
	.byte	0x07, 0x00, 0x10, 0x02
	.byte	0x66, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x20, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6d, 0x70
	.byte	0x72, 0x65, 0x73, 0x73
	.byte	0x65, 0x64, 0x5f, 0x70
	.byte	0x61, 0x69, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x69
	.byte	0x6e, 0x74, 0x3e, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x56, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x3e
	.byte	0x20, 0x3e, 0x2c, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x43, 0x6f, 0x6d
	.byte	0x70, 0x72, 0x65, 0x73
	.byte	0x73, 0x65, 0x64, 0x5f
	.byte	0x70, 0x61, 0x69, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x48, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x56, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x48, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x32, 0x40, 0x24
	.byte	0x30, 0x30, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x1168) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x78, 0x75, 0x74, 0x69
	.byte	0x6c, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1169) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x1167)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 265
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x67, 0x11, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x09, 0x01, 0x00, 0x00
	# MemberFunction (0x116A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Iterator_base12 (0x10FF)
	#   ThisType: std::_Iterator_base12* (0x1100)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x116B) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Iterator_base12 (0x10FF)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x116C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Iterator_base12 (0x116B)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x6b, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x116D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Iterator_base12& (0x116C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x6c, 0x11, 0x00, 0x00
	# MemberFunction (0x116E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Iterator_base12 (0x10FF)
	#   ThisType: std::_Iterator_base12* (0x1100)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Iterator_base12&) (0x116D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x6d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x116F) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x116A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::(const std::_Iterator_base12&) (0x116E)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6a, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6e, 0x11, 0x00, 0x00
	# Pointer (0x1170) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Iterator_base12 (0x10FF)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1171) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12& (0x1170)
	#   ClassType: std::_Iterator_base12 (0x10FF)
	#   ThisType: std::_Iterator_base12* (0x1100)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Iterator_base12&) (0x116D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x11, 0x00, 0x00
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x6d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1172) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Container_base12
	#   LinkageName: .?AU_Container_base12@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x31, 0x32, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x1173) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Container_base12 (0x1172)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1174) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_base12 (0x1173)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x73, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x1175) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Container_base12* (0x1174)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x74, 0x11, 0x00, 0x00
	# MemberFunction (0x1176) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Iterator_base12 (0x10FF)
	#   ThisType: std::_Iterator_base12* (0x1100)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_base12*) (0x1175)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x75, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1177) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Iterator_base12 (0x116B)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x6b, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1178) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_Container_base12* (0x1174)
	#   ClassType: std::_Iterator_base12 (0x10FF)
	#   ThisType: const std::_Iterator_base12* (0x1177)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x11, 0x00, 0x00
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x77, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1179) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1101)
	#   ClassType: std::_Iterator_base12 (0x10FF)
	#   ThisType: std::_Iterator_base12* (0x1100)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x01, 0x11, 0x00, 0x00
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x117A) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: _Unwrap_when_unverified
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* (0x1106)
	#     FieldOffset: 0x0
	#     Name: _Myproxy
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12* (0x1100)
	#     FieldOffset: 0x8
	#     Name: _Mynextiter
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x116F
	#     Name: _Iterator_base12
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12& std::_Iterator_base12::(const std::_Iterator_base12&) (0x1171)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x116A)
	#     Name: ~_Iterator_base12
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::(const std::_Container_base12*) (0x1176)
	#     Name: _Adopt
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x116A)
	#     Name: _Clrcont
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Container_base12* std::_Iterator_base12::() (0x1178)
	#     Name: _Getcont
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12** std::_Iterator_base12::() (0x1179)
	#     Name: _Getpnext
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x116A)
	#     Name: _Orphan_me
	#   }
	# }
	.byte	0xfa, 0x00, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x5f
	.byte	0x77, 0x68, 0x65, 0x6e
	.byte	0x5f, 0x75, 0x6e, 0x76
	.byte	0x65, 0x72, 0x69, 0x66
	.byte	0x69, 0x65, 0x64, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x6e, 0x65, 0x78
	.byte	0x74, 0x69, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x6f, 0x11, 0x00, 0x00
	.byte	0x5f, 0x49, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x71, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6a, 0x11, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x49, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x31
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x76, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x64, 0x6f
	.byte	0x70, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6a, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6c, 0x72
	.byte	0x63, 0x6f, 0x6e, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x78, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x63, 0x6f, 0x6e, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x79, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x6e, 0x65, 0x78
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6a, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x6d, 0x65, 0x00, 0xf1
	# Struct (0x117B) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 12
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x117A)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: std::_Iterator_base12
	#   LinkageName: .?AU_Iterator_base12@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x0c, 0x00, 0x00, 0x02
	.byte	0x7a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x49, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x62, 0x61, 0x73
	.byte	0x65, 0x31, 0x32, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x49, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x117C) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Iterator_base12 (0x117B)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 105
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x7b, 0x11, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x69, 0x00, 0x00, 0x00
	# MemberFunction (0x117D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_proxy (0x1105)
	#   ThisType: std::_Container_proxy* (0x1106)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x05, 0x11, 0x00, 0x00
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x117E) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Container_base12* (0x1174)
	#     FieldOffset: 0x0
	#     Name: _Mycont
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12* (0x1100)
	#     FieldOffset: 0x8
	#     Name: _Myfirstiter
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_proxy::() (0x117D)
	#     Name: _Container_proxy
	#   }
	# }
	.byte	0x4a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x74, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x69, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x7d, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x117F) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 3
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x117E)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: std::_Container_proxy
	#   LinkageName: .?AU_Container_proxy@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x03, 0x00, 0x00, 0x02
	.byte	0x7e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1180) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Container_proxy (0x117F)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 65
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x7f, 0x11, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x41, 0x00, 0x00, 0x00
	# Pointer (0x1181) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Vector_val<std::_Simple_types<int> > (0x1113)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x13, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1182) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Vector_val<std::_Simple_types<int> > (0x1113)
	#   ThisType: std::_Vector_val<std::_Simple_types<int> >* (0x1181)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x11, 0x00, 0x00
	.byte	0x81, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1183) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Container_base12 (0x1172)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* (0x674)
	#     FieldOffset: 0x8
	#     Name: _Myfirst
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* (0x674)
	#     FieldOffset: 0x10
	#     Name: _Mylast
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* (0x674)
	#     FieldOffset: 0x18
	#     Name: _Myend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Vector_val<std::_Simple_types<int> >::() (0x1182)
	#     Name: _Vector_val
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x674)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int* (0x104B)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int& (0x1025)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int& (0x1062)
	#     Name: const_reference
	#   }
	# }
	.byte	0xf2, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x10, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x6c, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x18, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x82, 0x11, 0x00, 0x00
	.byte	0x5f, 0x56, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	# Class (0x1184) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 12
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1183)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 32
	#   Name: std::_Vector_val<std::_Simple_types<int> >
	#   LinkageName: .?AV?$_Vector_val@U?$_Simple_types@H@std@@@std@@
	# }
	.byte	0x72, 0x00, 0x04, 0x15
	.byte	0x0c, 0x00, 0x10, 0x02
	.byte	0x83, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x20, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x5f
	.byte	0x56, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x40
	.byte	0x48, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1185) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Vector_val<std::_Simple_types<int> > (0x1184)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vector (0x10F6)
	#   LineNumber: 376
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x84, 0x11, 0x00, 0x00
	.byte	0xf6, 0x10, 0x00, 0x00
	.byte	0x78, 0x01, 0x00, 0x00
	# Modifier (0x1186) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::allocator<std::_Container_proxy> (0x1122)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1187) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<std::_Container_proxy> (0x1186)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x86, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Pointer (0x1188) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy (0x1105)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x05, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1189) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Container_proxy& (0x1188)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x88, 0x11, 0x00, 0x00
	# MemberFunction (0x118A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x1106)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1122)
	#   ThisType: const std::allocator<std::_Container_proxy>* (0x1187)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Container_proxy&) (0x1189)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x87, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x89, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x118B) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Container_proxy (0x1105)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x05, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x118C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_proxy (0x118B)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8b, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Pointer (0x118D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_proxy (0x118B)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8b, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x118E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Container_proxy& (0x118D)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x8d, 0x11, 0x00, 0x00
	# MemberFunction (0x118F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_Container_proxy* (0x118C)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1122)
	#   ThisType: const std::allocator<std::_Container_proxy>* (0x1187)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_proxy&) (0x118E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x8c, 0x11, 0x00, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x87, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x8e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1190) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* std::allocator<std::_Container_proxy>::(std::_Container_proxy&) (0x118A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Container_proxy* std::allocator<std::_Container_proxy>::(const std::_Container_proxy&) (0x118F)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8a, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8f, 0x11, 0x00, 0x00
	# Pointer (0x1191) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<std::_Container_proxy> (0x1122)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1192) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1122)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x1191)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1193) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<std::_Container_proxy> (0x1186)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x86, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1194) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::allocator<std::_Container_proxy>& (0x1193)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	# MemberFunction (0x1195) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1122)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x1191)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<std::_Container_proxy>&) (0x1194)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1196) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<std::_Container_proxy>::() (0x1192)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<std::_Container_proxy>::(const std::allocator<std::_Container_proxy>&) (0x1195)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	# ArgList (0x1197) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_Container_proxy* const (0x1109)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x09, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x1198) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1122)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x1191)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_Container_proxy* const, const unsigned __int64) (0x1197)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x97, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1199) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x1106)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1122)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x1191)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x119A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x1106)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1122)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x1191)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const void*) (0x1137)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x37, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x119B) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* std::allocator<std::_Container_proxy>::(const unsigned __int64) (0x1199)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* std::allocator<std::_Container_proxy>::(const unsigned __int64, const void*) (0x119A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x99, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9a, 0x11, 0x00, 0x00
	# MemberFunction (0x119C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1122)
	#   ThisType: const std::allocator<std::_Container_proxy>* (0x1187)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x87, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x119D) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1190
	#     Name: address
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1196
	#     Name: allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<std::_Container_proxy>::(std::_Container_proxy* const, const unsigned __int64) (0x1198)
	#     Name: deallocate
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x119B
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::allocator<std::_Container_proxy>::() (0x119C)
	#     Name: max_size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void (0x3)
	#     Name: _Not_user_specialized
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy (0x1105)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy* (0x1106)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const std::_Container_proxy* (0x118C)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy& (0x1188)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const std::_Container_proxy& (0x118D)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0x5e, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x90, 0x11, 0x00, 0x00
	.byte	0x61, 0x64, 0x64, 0x72
	.byte	0x65, 0x73, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x98, 0x11, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5f, 0x4e, 0x6f, 0x74
	.byte	0x5f, 0x75, 0x73, 0x65
	.byte	0x72, 0x5f, 0x73, 0x70
	.byte	0x65, 0x63, 0x69, 0x61
	.byte	0x6c, 0x69, 0x7a, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x05, 0x11, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8d, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Class (0x119E) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 18
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x119D)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator<std::_Container_proxy>
	#   LinkageName: .?AV?$allocator@U_Container_proxy@std@@@std@@
	# }
	.byte	0x6a, 0x00, 0x04, 0x15
	.byte	0x12, 0x00, 0x10, 0x02
	.byte	0x9d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x43
	.byte	0x6f, 0x6e, 0x74, 0x61
	.byte	0x69, 0x6e, 0x65, 0x72
	.byte	0x5f, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x119F) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator<std::_Container_proxy> (0x119E)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x113D)
	#   LineNumber: 940
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0xac, 0x03, 0x00, 0x00
	# Struct (0x11A0) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@
	# }
	.byte	0xae, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x55, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# FieldList (0x11A1) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x11A0)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x11A2) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11A1)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator_traits<std::allocator<std::_Container_proxy> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@
	# }
	.byte	0x9a, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0xa1, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x11A3) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator_traits<std::allocator<std::_Container_proxy> > (0x11A2)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x113D)
	#   LineNumber: 902
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xa2, 0x11, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x86, 0x03, 0x00, 0x00
	# FieldList (0x11A4) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x674)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int* (0x104B)
	#     Name: const_pointer
	#   }
	# }
	.byte	0x6a, 0x00, 0x03, 0x12
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	# Struct (0x11A5) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 5
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11A4)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Simple_types<int>
	#   LinkageName: .?AU?$_Simple_types@H@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x05, 0x00, 0x10, 0x02
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x69, 0x6e, 0x74
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x48, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x11A6) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Simple_types<int> (0x11A5)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x113D)
	#   LineNumber: 928
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xa5, 0x11, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0xa0, 0x03, 0x00, 0x00
	# ArgList (0x11A7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::allocator<int>& (0x10FC)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x11A8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: std::_Default_allocator_traits<std::allocator<int> > (0x1159)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::allocator<int>&, const unsigned __int64) (0x11A7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x59, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11A9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<int>& (0x10FC)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const void* (0x1136)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x36, 0x11, 0x00, 0x00
	# MemberFunction (0x11AA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: std::_Default_allocator_traits<std::allocator<int> > (0x1159)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<int>&, const unsigned __int64, const void*) (0x11A9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x59, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xa9, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11AB) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int* std::_Default_allocator_traits<std::allocator<int> >::(std::allocator<int>&, const unsigned __int64) (0x11A8)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int* std::_Default_allocator_traits<std::allocator<int> >::(std::allocator<int>&, const unsigned __int64, const void*) (0x11AA)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0xa8, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0xaa, 0x11, 0x00, 0x00
	# ArgList (0x11AC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<int>& (0x10FC)
	#     ArgType: const int* (0x10EE)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	.byte	0xee, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x11AD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Default_allocator_traits<std::allocator<int> > (0x1159)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<int>&, const int*, const unsigned __int64) (0x11AC)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x59, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11AE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::_Default_allocator_traits<std::allocator<int> > (0x1159)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<int>&) (0x1088)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x59, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x88, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11AF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<int> (0x1085)
	#   ClassType: std::_Default_allocator_traits<std::allocator<int> > (0x1159)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<int>&) (0x1088)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x59, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x88, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11B0) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11AB
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Default_allocator_traits<std::allocator<int> >::(std::allocator<int>&, const int*, const unsigned __int64) (0x11AD)
	#     Name: deallocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: unsigned __int64 std::_Default_allocator_traits<std::allocator<int> >::(const std::allocator<int>&) (0x11AE)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::allocator<int> std::_Default_allocator_traits<std::allocator<int> >::(const std::allocator<int>&) (0x11AF)
	#     Name: select_on_container_copy_construction
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<int> (0x1085)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x674)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int* (0x104B)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void* (0x603)
	#     Name: void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const void* (0x1136)
	#     Name: const_void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x10A1)
	#     Name: propagate_on_container_copy_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x10A1)
	#     Name: propagate_on_container_swap
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0xbe, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xab, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xad, 0x11, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xaf, 0x11, 0x00, 0x00
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x5f, 0x6f
	.byte	0x6e, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x06, 0x00, 0x00
	.byte	0x76, 0x6f, 0x69, 0x64
	.byte	0x5f, 0x70, 0x6f, 0x69
	.byte	0x6e, 0x74, 0x65, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x36, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x76, 0x6f
	.byte	0x69, 0x64, 0x5f, 0x70
	.byte	0x6f, 0x69, 0x6e, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x73
	.byte	0x77, 0x61, 0x70, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Struct (0x11B1) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 17
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11B0)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Default_allocator_traits<std::allocator<int> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@H@std@@@std@@
	# }
	.byte	0x86, 0x00, 0x05, 0x15
	.byte	0x11, 0x00, 0x10, 0x02
	.byte	0xb0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x44, 0x65
	.byte	0x66, 0x61, 0x75, 0x6c
	.byte	0x74, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x48, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x11B2) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Default_allocator_traits<std::allocator<int> > (0x11B1)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x113D)
	#   LineNumber: 835
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x43, 0x03, 0x00, 0x00
	# Pointer (0x11B3) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_base12 (0x1172)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11B4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_base12 (0x1172)
	#   ThisType: std::_Container_base12* (0x11B3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0xb3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x11B5) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_base12 (0x1173)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x73, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x11B6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Container_base12& (0x11B5)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xb5, 0x11, 0x00, 0x00
	# MemberFunction (0x11B7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_base12 (0x1172)
	#   ThisType: std::_Container_base12* (0x11B3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_base12&) (0x11B6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0xb3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xb6, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11B8) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::() (0x11B4)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::(const std::_Container_base12&) (0x11B7)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb4, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb7, 0x11, 0x00, 0x00
	# Pointer (0x11B9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_base12 (0x1172)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x11BA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_base12& (0x11B9)
	#   ClassType: std::_Container_base12 (0x1172)
	#   ThisType: std::_Container_base12* (0x11B3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_base12&) (0x11B6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb9, 0x11, 0x00, 0x00
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0xb3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xb6, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11BB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1101)
	#   ClassType: std::_Container_base12 (0x1172)
	#   ThisType: const std::_Container_base12* (0x1174)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x01, 0x11, 0x00, 0x00
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0x74, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11BC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Container_base12& (0x11B9)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xb9, 0x11, 0x00, 0x00
	# MemberFunction (0x11BD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_base12 (0x1172)
	#   ThisType: std::_Container_base12* (0x11B3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Container_base12&) (0x11BC)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0xb3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xbc, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11BE) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* (0x1106)
	#     FieldOffset: 0x0
	#     Name: _Myproxy
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11B8
	#     Name: _Container_base12
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_base12& std::_Container_base12::(const std::_Container_base12&) (0x11BA)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12** std::_Container_base12::() (0x11BB)
	#     Name: _Getpfirst
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::() (0x11B4)
	#     Name: _Orphan_all
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::(std::_Container_base12&) (0x11BD)
	#     Name: _Swap_all
	#   }
	# }
	.byte	0x82, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xb8, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x31
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xba, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xbb, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb4, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xbd, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	# Struct (0x11BF) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 7
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11BE)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: std::_Container_base12
	#   LinkageName: .?AU_Container_base12@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x07, 0x00, 0x00, 0x02
	.byte	0xbe, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x31, 0x32, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x11C0) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Container_base12 (0x11BF)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 76
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xbf, 0x11, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x4c, 0x00, 0x00, 0x00
	# Pointer (0x11C1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<std::_Container_proxy> (0x1122)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x11C2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::allocator<std::_Container_proxy>& (0x11C1)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x11C3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x1106)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x11A0)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::allocator<std::_Container_proxy>&, const unsigned __int64) (0x11C2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xc2, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11C4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<std::_Container_proxy>& (0x11C1)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const void* (0x1136)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x36, 0x11, 0x00, 0x00
	# MemberFunction (0x11C5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x1106)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x11A0)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<std::_Container_proxy>&, const unsigned __int64, const void*) (0x11C4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xc4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11C6) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::_Container_proxy* std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(std::allocator<std::_Container_proxy>&, const unsigned __int64) (0x11C3)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::_Container_proxy* std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(std::allocator<std::_Container_proxy>&, const unsigned __int64, const void*) (0x11C5)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0xc3, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0xc5, 0x11, 0x00, 0x00
	# Modifier (0x11C7) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Container_proxy* (0x1106)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x11C8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<std::_Container_proxy>& (0x11C1)
	#     ArgType: const std::_Container_proxy* (0x11C7)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	.byte	0xc7, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x11C9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x11A0)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<std::_Container_proxy>&, const std::_Container_proxy*, const unsigned __int64) (0x11C8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xc8, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11CA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x11A0)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<std::_Container_proxy>&) (0x1194)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11CB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<std::_Container_proxy> (0x1122)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x11A0)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<std::_Container_proxy>&) (0x1194)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11CC) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11C6
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(std::allocator<std::_Container_proxy>&, const std::_Container_proxy*, const unsigned __int64) (0x11C9)
	#     Name: deallocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: unsigned __int64 std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(const std::allocator<std::_Container_proxy>&) (0x11CA)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::allocator<std::_Container_proxy> std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(const std::allocator<std::_Container_proxy>&) (0x11CB)
	#     Name: select_on_container_copy_construction
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<std::_Container_proxy> (0x1122)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy (0x1105)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy* (0x1106)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const std::_Container_proxy* (0x118C)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void* (0x603)
	#     Name: void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const void* (0x1136)
	#     Name: const_void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x10A1)
	#     Name: propagate_on_container_copy_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x10A1)
	#     Name: propagate_on_container_swap
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0xbe, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xc6, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xc9, 0x11, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xca, 0x11, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xcb, 0x11, 0x00, 0x00
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x5f, 0x6f
	.byte	0x6e, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x05, 0x11, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x06, 0x00, 0x00
	.byte	0x76, 0x6f, 0x69, 0x64
	.byte	0x5f, 0x70, 0x6f, 0x69
	.byte	0x6e, 0x74, 0x65, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x36, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x76, 0x6f
	.byte	0x69, 0x64, 0x5f, 0x70
	.byte	0x6f, 0x69, 0x6e, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x73
	.byte	0x77, 0x61, 0x70, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Struct (0x11CD) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 17
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11CC)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@
	# }
	.byte	0xae, 0x00, 0x05, 0x15
	.byte	0x11, 0x00, 0x10, 0x02
	.byte	0xcc, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x55, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x11CE) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x11CD)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x113D)
	#   LineNumber: 835
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xcd, 0x11, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x43, 0x03, 0x00, 0x00
	# MemberFuncId (0x11CF) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::allocator<int> (0x1085)
	#   FunctionType: void std::allocator<int>::() (0x112E)
	#   Name: allocator
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x2e, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x11D0) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   FunctionType: void std::vector<int,std::allocator<int> >::(std::initializer_list<int>, const std::allocator<int>&) (0x1091)
	#   Name: vector
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x91, 0x10, 0x00, 0x00
	.byte	0x76, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	# Pointer (0x11D1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::initializer_list<int> (0x108F)
	#   PointerAttributes: 0x2002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 16
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8f, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x02, 0x00
	# MemberFunction (0x11D2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::vector<int,std::allocator<int> >&) (0x10C8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x11D3) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: void gsl::span<int,-1>::(std::vector<int,std::allocator<int> >&) (0x11D2)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0xd2, 0x11, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x11D4) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: int& gsl::span<int,-1>::(__int64) (0x1026)
	#   Name: operator[]
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	# MemberFuncId (0x11D5) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   FunctionType: void std::vector<int,std::allocator<int> >::() (0x1084)
	#   Name: ~vector
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x84, 0x10, 0x00, 0x00
	.byte	0x7e, 0x76, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x00
	# Class (0x11D6) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::extent_type<0>
	#   LinkageName: .?AV?$extent_type@$0A@@details@gsl@@
	# }
	.byte	0x56, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x65, 0x78, 0x74
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# Pointer (0x11D7) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::extent_type<0> (0x11D6)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xd6, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11D8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<0> (0x11D6)
	#   ThisType: gsl::details::extent_type<0>* (0x11D7)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd6, 0x11, 0x00, 0x00
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11D9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<0> (0x11D6)
	#   ThisType: gsl::details::extent_type<0>* (0x11D7)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd6, 0x11, 0x00, 0x00
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11DA) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<0>::() (0x11D8)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<0>::(__int64) (0x11D9)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd8, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd9, 0x11, 0x00, 0x00
	# Modifier (0x11DB) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::extent_type<0> (0x11D6)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xd6, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11DC) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::extent_type<0> (0x11DB)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xdb, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11DD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::details::extent_type<0> (0x11D6)
	#   ThisType: const gsl::details::extent_type<0>* (0x11DC)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0xd6, 0x11, 0x00, 0x00
	.byte	0xdc, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11DE) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11DA
	#     Name: extent_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::details::extent_type<0>::() (0x11DD)
	#     Name: size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	# }
	.byte	0x3a, 0x00, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xda, 0x11, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdd, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Class (0x11DF) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11DE)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: gsl::details::extent_type<0>
	#   LinkageName: .?AV?$extent_type@$0A@@details@gsl@@
	# }
	.byte	0x56, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0xde, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x65, 0x78, 0x74
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# UdtSourceLine (0x11E0) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::extent_type<0> (0x11DF)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 304
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xdf, 0x11, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x30, 0x01, 0x00, 0x00
	# MemberFuncId (0x11E1) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<0> (0x11D6)
	#   FunctionType: void gsl::details::extent_type<0>::() (0x11D8)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xd6, 0x11, 0x00, 0x00
	.byte	0xd8, 0x11, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# Pointer (0x11E2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x11E3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: gsl::details::extent_type<0> (0x11D6)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0xd6, 0x11, 0x00, 0x00
	# MemberFunction (0x11E4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   ThisType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x11E2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, gsl::details::extent_type<0>) (0x11E3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0xe2, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xe3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x11E5) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   FunctionType: void gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(int*, gsl::details::extent_type<0>) (0x11E4)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0xe4, 0x11, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x11E6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::details::extent_type<0> (0x11D6)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xd6, 0x11, 0x00, 0x00
	# MemberFunction (0x11E7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: gsl::details::extent_type<-1>* (0x103F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::details::extent_type<0>) (0x11E6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x3f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xe6, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x11E8) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   FunctionType: void gsl::details::extent_type<-1>::(gsl::details::extent_type<0>) (0x11E7)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0xe7, 0x11, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# MemberFuncId (0x11E9) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   FunctionType: __int64 gsl::details::extent_type<-1>::() (0x1043)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x43, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x11EA) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: gsl::details
	# }
	.byte	0x16, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x11EB) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::fail_fast
	#   LinkageName: .?AUfail_fast@gsl@@
	# }
	.byte	0x3a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x66
	.byte	0x61, 0x69, 0x6c, 0x5f
	.byte	0x66, 0x61, 0x73, 0x74
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x66, 0x61, 0x69
	.byte	0x6c, 0x5f, 0x66, 0x61
	.byte	0x73, 0x74, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x11EC) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::fail_fast (0x11EB)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x11ED) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::fail_fast&& (0x11EC)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xec, 0x11, 0x00, 0x00
	# Procedure (0x11EE) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::fail_fast&&) (0x11ED)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xed, 0x11, 0x00, 0x00
	# VFTableShape (0x11EF) {
	#   TypeLeafKind: LF_VTSHAPE (0xA)
	#   VFEntryCount: 2
	# }
	.byte	0x06, 0x00, 0x0a, 0x00
	.byte	0x02, 0x00, 0x55, 0xf1
	# Class (0x11F0) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::logic_error
	#   LinkageName: .?AVlogic_error@std@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x11F1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::fail_fast (0x11EB)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Modifier (0x11F2) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: char (0x70)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11F3) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char (0x11F2)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xf2, 0x11, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# ArgList (0x11F4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char* const (0x11F3)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	# MemberFunction (0x11F5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x11EB)
	#   ThisType: gsl::fail_fast* (0x11F1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x11F4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0xf1, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11F6) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::logic_error (0x11F0)
	#     BaseOffset: 0x0
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::fail_fast::(const char* const) (0x11F5)
	#     Name: fail_fast
	#   }
	# }
	.byte	0x22, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf5, 0x11, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Struct (0x11F7) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 2
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11F6)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x11EF)
	#   SizeOf: 24
	#   Name: gsl::fail_fast
	#   LinkageName: .?AUfail_fast@gsl@@
	# }
	.byte	0x3a, 0x00, 0x05, 0x15
	.byte	0x02, 0x00, 0x00, 0x02
	.byte	0xf6, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0xef, 0x11, 0x00, 0x00
	.byte	0x18, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x66
	.byte	0x61, 0x69, 0x6c, 0x5f
	.byte	0x66, 0x61, 0x73, 0x74
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x66, 0x61, 0x69
	.byte	0x6c, 0x5f, 0x66, 0x61
	.byte	0x73, 0x74, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x11F8) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\projects\gsl\include\gsl\gsl_assert
	# }
	.byte	0x2e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x70
	.byte	0x72, 0x6f, 0x6a, 0x65
	.byte	0x63, 0x74, 0x73, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5f
	.byte	0x61, 0x73, 0x73, 0x65
	.byte	0x72, 0x74, 0x00, 0xf1
	# UdtSourceLine (0x11F9) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::fail_fast (0x11F7)
	#   SourceFile: C:\projects\gsl\include\gsl\gsl_assert (0x11F8)
	#   LineNumber: 97
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xf7, 0x11, 0x00, 0x00
	.byte	0xf8, 0x11, 0x00, 0x00
	.byte	0x61, 0x00, 0x00, 0x00
	# Class (0x11FA) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::exception
	#   LinkageName: .?AVexception@std@@
	# }
	.byte	0x3a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x63, 0x65, 0x70
	.byte	0x74, 0x69, 0x6f, 0x6e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x11FB) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::logic_error (0x11F0)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Class (0x11FC) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::basic_string<char,std::char_traits<char>,std::allocator<char> >
	#   LinkageName: .?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@
	# }
	.byte	0x9e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x61, 0x73, 0x69, 0x63
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x40, 0x44, 0x55
	.byte	0x3f, 0x24, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x44, 0x40
	.byte	0x32, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x11FD) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11FE) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FD)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xfd, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x11FF) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	# MemberFunction (0x1200) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x11F0)
	#   ThisType: std::logic_error* (0x11FB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x11FF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0xfb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xff, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1201) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char (0x11F2)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xf2, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x1202) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char* (0x1201)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x01, 0x12, 0x00, 0x00
	# MemberFunction (0x1203) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x11F0)
	#   ThisType: std::logic_error* (0x11FB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char*) (0x1202)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0xfb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x02, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1204) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::logic_error::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1200)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::logic_error::(const char*) (0x1203)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x12, 0x00, 0x00
	# FieldList (0x1205) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::exception (0x11FA)
	#     BaseOffset: 0x0
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1204
	#     Name: logic_error
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::exception (0x11FA)
	#     Name: _Mybase
	#   }
	# }
	.byte	0x32, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x04, 0x12, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	# Class (0x1206) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1205)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x11EF)
	#   SizeOf: 24
	#   Name: std::logic_error
	#   LinkageName: .?AVlogic_error@std@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0x05, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0xef, 0x11, 0x00, 0x00
	.byte	0x18, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x1207) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x73, 0x74, 0x64, 0x65
	.byte	0x78, 0x63, 0x65, 0x70
	.byte	0x74, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1208) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::logic_error (0x1206)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept (0x1207)
	#   LineNumber: 17
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x06, 0x12, 0x00, 0x00
	.byte	0x07, 0x12, 0x00, 0x00
	.byte	0x11, 0x00, 0x00, 0x00
	# Pointer (0x1209) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: <vftable 2 methods> (0x11EF)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xef, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Struct (0x120A) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: __std_exception_data
	#   LinkageName: .?AU__std_exception_data@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x5f
	.byte	0x73, 0x74, 0x64, 0x5f
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x5f, 0x64, 0x61
	.byte	0x74, 0x61, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x5f
	.byte	0x5f, 0x73, 0x74, 0x64
	.byte	0x5f, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x5f, 0x64
	.byte	0x61, 0x74, 0x61, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Pointer (0x120B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::exception (0x11FA)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x120C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x11FA)
	#   ThisType: std::exception* (0x120B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x0b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x120D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x11FA)
	#   ThisType: std::exception* (0x120B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x11F4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x0b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x120E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x11F3)
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x120F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x11FA)
	#   ThisType: std::exception* (0x120B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, int) (0x120E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x0b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x0e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1210) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::exception (0x11FA)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1211) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::exception (0x1210)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x10, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1212) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::exception& (0x1211)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x11, 0x12, 0x00, 0x00
	# MemberFunction (0x1213) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x11FA)
	#   ThisType: std::exception* (0x120B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::exception&) (0x1212)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x0b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x12, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1214) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::() (0x120C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::(const char* const) (0x120D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::(const char* const, int) (0x120F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::(const std::exception&) (0x1213)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0c, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0d, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0f, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x12, 0x00, 0x00
	# Pointer (0x1215) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::exception (0x11FA)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1216) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::exception& (0x1215)
	#   ClassType: std::exception (0x11FA)
	#   ThisType: std::exception* (0x120B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::exception&) (0x1212)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x15, 0x12, 0x00, 0x00
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x0b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x12, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1217) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::exception (0x1210)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x10, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1218) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x1201)
	#   ClassType: std::exception (0x11FA)
	#   ThisType: const std::exception* (0x1217)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x17, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1219) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   VFPtr {
	#     TypeLeafKind: LF_VFUNCTAB (0x1409)
	#     Type: <vftable 2 methods>* (0x1209)
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: __std_exception_data (0x120A)
	#     FieldOffset: 0x8
	#     Name: _Data
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x1214
	#     Name: exception
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::exception& std::exception::(const std::exception&) (0x1216)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: IntroducingVirtual (0x4)
	#     Type: void std::exception::() (0x120C)
	#     VFTableOffset: 0x0
	#     Name: ~exception
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: IntroducingVirtual (0x4)
	#     Type: const char* std::exception::() (0x1218)
	#     VFTableOffset: 0x8
	#     Name: what
	#   }
	# }
	.byte	0x6e, 0x00, 0x03, 0x12
	.byte	0x09, 0x14, 0x00, 0x00
	.byte	0x09, 0x12, 0x00, 0x00
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x0a, 0x12, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x44
	.byte	0x61, 0x74, 0x61, 0x00
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x16, 0x12, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x13, 0x00
	.byte	0x0c, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x7e, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x13, 0x00
	.byte	0x18, 0x12, 0x00, 0x00
	.byte	0x08, 0x00, 0x00, 0x00
	.byte	0x77, 0x68, 0x61, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x121A) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 9
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1219)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x11EF)
	#   SizeOf: 24
	#   Name: std::exception
	#   LinkageName: .?AVexception@std@@
	# }
	.byte	0x3a, 0x00, 0x04, 0x15
	.byte	0x09, 0x00, 0x00, 0x02
	.byte	0x19, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0xef, 0x11, 0x00, 0x00
	.byte	0x18, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x63, 0x65, 0x70
	.byte	0x74, 0x69, 0x6f, 0x6e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x121B) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h
	# }
	.byte	0x7e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x76, 0x63, 0x72, 0x75
	.byte	0x6e, 0x74, 0x69, 0x6d
	.byte	0x65, 0x5f, 0x65, 0x78
	.byte	0x63, 0x65, 0x70, 0x74
	.byte	0x69, 0x6f, 0x6e, 0x2e
	.byte	0x68, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x121C) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::exception (0x121A)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h (0x121B)
	#   LineNumber: 44
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x1a, 0x12, 0x00, 0x00
	.byte	0x1b, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x00, 0x00
	# Class (0x121D) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
	#   LinkageName: .?AV?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x121E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x121F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x11FF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xff, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1220) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator<char>
	#   LinkageName: .?AV?$allocator@D@std@@
	# }
	.byte	0x42, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Modifier (0x1221) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::allocator<char> (0x1220)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1222) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<char> (0x1221)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x21, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1223) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#     ArgType: const std::allocator<char>& (0x1222)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	.byte	0x22, 0x12, 0x00, 0x00
	# MemberFunction (0x1224) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::allocator<char>&) (0x1223)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x23, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1225) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1226) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::allocator<char>& (0x1222)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x22, 0x12, 0x00, 0x00
	# MemberFunction (0x1227) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x1226)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x26, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1228) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const std::allocator<char>& (0x1222)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x22, 0x12, 0x00, 0x00
	# MemberFunction (0x1229) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const std::allocator<char>&) (0x1228)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x28, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x122A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const std::allocator<char>& (0x1222)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x22, 0x12, 0x00, 0x00
	# MemberFunction (0x122B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const unsigned __int64, const std::allocator<char>&) (0x122A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x2a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x122C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x122D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const unsigned __int64) (0x122C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x2c, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x122E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const std::allocator<char>& (0x1222)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x22, 0x12, 0x00, 0x00
	# MemberFunction (0x122F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const unsigned __int64, const std::allocator<char>&) (0x122E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x2e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1230) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x11F4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1231) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const char (0x11F2)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	# MemberFunction (0x1232) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const char) (0x1231)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1233) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x1234) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x1233)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	# MemberFunction (0x1235) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x1234)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x34, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1236) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x1233)
	#     ArgType: const std::allocator<char>& (0x1222)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x22, 0x12, 0x00, 0x00
	# MemberFunction (0x1237) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, const std::allocator<char>&) (0x1236)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x36, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1238) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::initializer_list<char>
	#   LinkageName: .?AV?$initializer_list@D@std@@
	# }
	.byte	0x52, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x69, 0x74, 0x69
	.byte	0x61, 0x6c, 0x69, 0x7a
	.byte	0x65, 0x72, 0x5f, 0x6c
	.byte	0x69, 0x73, 0x74, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x69, 0x6e, 0x69, 0x74
	.byte	0x69, 0x61, 0x6c, 0x69
	.byte	0x7a, 0x65, 0x72, 0x5f
	.byte	0x6c, 0x69, 0x73, 0x74
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1239) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::initializer_list<char> (0x1238)
	#     ArgType: const std::allocator<char>& (0x1222)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x38, 0x12, 0x00, 0x00
	.byte	0x22, 0x12, 0x00, 0x00
	# MemberFunction (0x123A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::initializer_list<char>, const std::allocator<char>&) (0x1239)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x39, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x123B) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x121F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::allocator<char>&) (0x1224)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1225)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::allocator<char>&) (0x1227)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const std::allocator<char>&) (0x1229)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const unsigned __int64, const std::allocator<char>&) (0x122B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x122D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64, const std::allocator<char>&) (0x122F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1230)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char) (0x1232)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x1235)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, const std::allocator<char>&) (0x1237)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>, const std::allocator<char>&) (0x123A)
	#   ]
	# }
	.byte	0x6a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1f, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x25, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x27, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2b, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2d, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2f, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x30, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x32, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x37, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3a, 0x12, 0x00, 0x00
	# Pointer (0x123C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: char (0x70)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# Struct (0x123D) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::random_access_iterator_tag
	#   LinkageName: .?AUrandom_access_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x61, 0x6e, 0x64, 0x6f
	.byte	0x6d, 0x5f, 0x61, 0x63
	.byte	0x63, 0x65, 0x73, 0x73
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x72, 0x61
	.byte	0x6e, 0x64, 0x6f, 0x6d
	.byte	0x5f, 0x61, 0x63, 0x63
	.byte	0x65, 0x73, 0x73, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# ArgList (0x123E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x123C)
	#     ArgType: char* const (0x123C)
	#     ArgType: std::random_access_iterator_tag (0x123D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0x3d, 0x12, 0x00, 0x00
	# MemberFunction (0x123F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, char* const, std::random_access_iterator_tag) (0x123E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x3e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1240) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const char* const (0x11F3)
	#     ArgType: std::random_access_iterator_tag (0x123D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x3d, 0x12, 0x00, 0x00
	# MemberFunction (0x1241) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const char* const, std::random_access_iterator_tag) (0x1240)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x40, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1242) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char* const, char* const, std::random_access_iterator_tag) (0x123F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const char* const, std::random_access_iterator_tag) (0x1241)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3f, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x41, 0x12, 0x00, 0x00
	# Pointer (0x1243) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1244) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x1234)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x34, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1245) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::initializer_list<char> (0x1238)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x38, 0x12, 0x00, 0x00
	# MemberFunction (0x1246) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::initializer_list<char>) (0x1245)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x45, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1247) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x11FF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xff, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1248) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x11F4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1249) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char (0x11F2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	# MemberFunction (0x124A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char) (0x1249)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x49, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x124B) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x1244)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x1246)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1247)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1248)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char) (0x124A)
	#   ]
	# }
	.byte	0x2a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x44, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x46, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x48, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4a, 0x12, 0x00, 0x00
	# ArgList (0x124C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x124D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x124C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x4c, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x124E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const unsigned __int64) (0x122C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x2c, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x124F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const char) (0x1231)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1250) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x1244)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x1246)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1247)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x124D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x124E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1248)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char) (0x124F)
	#   ]
	# }
	.byte	0x3a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x44, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x46, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4d, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4e, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x48, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4f, 0x12, 0x00, 0x00
	# ArgList (0x1251) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x1233)
	#     ArgType: std::integral_constant<bool,1> (0x109E)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	# MemberFunction (0x1252) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, std::integral_constant<bool,1>) (0x1251)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x51, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1253) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x1233)
	#     ArgType: std::integral_constant<bool,0> (0x10A1)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	# MemberFunction (0x1254) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, std::integral_constant<bool,0>) (0x1253)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1255) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, std::integral_constant<bool,1>) (0x1252)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, std::integral_constant<bool,0>) (0x1254)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x52, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# ArgList (0x1256) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: char (0x70)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	# MemberFunction (0x1257) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (char) (0x1256)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x56, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1258) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x1246)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1247)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1248)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char) (0x1257)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x46, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x48, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	# MethodOverloadList (0x1259) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x1246)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1247)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x124D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x124E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1248)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char) (0x124F)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x46, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4d, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4e, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x48, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4f, 0x12, 0x00, 0x00
	# Class (0x125A) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_iterator<std::_String_val<std::_Simple_types<char> > >
	#   LinkageName: .?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@
	# }
	.byte	0xa6, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x125B) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
	#   LinkageName: .?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x63
	.byte	0x6f, 0x6e, 0x73, 0x74
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x125C) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125B)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x5b, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Modifier (0x125D) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::initializer_list<char> (0x1238)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x38, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x125E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const std::initializer_list<char> (0x125D)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x5d, 0x12, 0x00, 0x00
	# MemberFunction (0x125F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x125A)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x125E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x5a, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x5e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1260) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	# MemberFunction (0x1261) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1260)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x60, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1262) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x1263) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x1262)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x62, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1264) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x1265) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const char* const, const unsigned __int64) (0x1264)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x64, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1266) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const char* const (0x11F3)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	# MemberFunction (0x1267) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const char* const) (0x1266)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x66, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1268) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const char (0x11F2)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	# MemberFunction (0x1269) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const char) (0x1268)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x68, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x126A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const char (0x11F2)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	# MemberFunction (0x126B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x125A)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char) (0x126A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x5a, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x6a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x126C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const char (0x11F2)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	# MemberFunction (0x126D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x125A)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned __int64, const char) (0x126C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x5a, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x6c, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x126E) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x125F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1261)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x1263)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char* const, const unsigned __int64) (0x1265)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char* const) (0x1267)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const char) (0x1269)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char) (0x126B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned __int64, const char) (0x126D)
	#   ]
	# }
	.byte	0x42, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5f, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x61, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x63, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x65, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x67, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6b, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6d, 0x12, 0x00, 0x00
	# ArgList (0x126F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const std::initializer_list<char> (0x125D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x5d, 0x12, 0x00, 0x00
	# MemberFunction (0x1270) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x126F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x6f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1271) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	# MemberFunction (0x1272) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1271)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x71, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1273) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 5
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x1a, 0x00, 0x01, 0x12
	.byte	0x05, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x1274) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 5
	#   ArgListType: (const unsigned __int64, unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x1273)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x05, 0x00
	.byte	0x73, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1275) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x1276) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned __int64, unsigned __int64, const char* const, const unsigned __int64) (0x1275)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x75, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1277) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const char* const (0x11F3)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	# MemberFunction (0x1278) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const char* const) (0x1277)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x77, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1279) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const char (0x11F2)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	# MemberFunction (0x127A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned __int64, unsigned __int64, const unsigned __int64, const char) (0x1279)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x79, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x127B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	# MemberFunction (0x127C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x127B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x7b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x127D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x127E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const, const unsigned __int64) (0x127D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x127F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const char* const (0x11F3)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	# MemberFunction (0x1280) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const) (0x127F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x7f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1281) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const char (0x11F2)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	# MemberFunction (0x1282) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned __int64, const char) (0x1281)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x81, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1283) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x1270)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1272)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x1274)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, unsigned __int64, const char* const, const unsigned __int64) (0x1276)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const char* const) (0x1278)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, unsigned __int64, const unsigned __int64, const char) (0x127A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x127C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const, const unsigned __int64) (0x127E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const) (0x1280)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned __int64, const char) (0x1282)
	#   ]
	# }
	.byte	0x52, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x70, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x72, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x74, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x76, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x78, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7a, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7c, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7e, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x80, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x82, 0x12, 0x00, 0x00
	# MemberFunction (0x1284) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1285) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x1286) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, unsigned __int64) (0x1285)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x85, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1287) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	# MemberFunction (0x1288) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x125A)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x1287)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x5a, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x87, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1289) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125C)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	# MemberFunction (0x128A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x125A)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x1289)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x5a, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x89, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x128B) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x1284)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, unsigned __int64) (0x1286)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x1288)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x128A)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x84, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x86, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x88, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8a, 0x12, 0x00, 0x00
	# MemberFunction (0x128C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x125A)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x5a, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x128D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FD)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xfd, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x128E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125B)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x5b, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x128F) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x128C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x128E)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8c, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8e, 0x12, 0x00, 0x00
	# MemberFunction (0x1290) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1291) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x1201)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1292) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1290)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1291)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x90, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x91, 0x12, 0x00, 0x00
	# Class (0x1293) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >
	#   LinkageName: .?AV?$reverse_iterator@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@
	# }
	.byte	0xd6, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x1294) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > > (0x1293)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x93, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1295) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > >
	#   LinkageName: .?AV?$reverse_iterator@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@
	# }
	.byte	0xe2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x1296) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > (0x1295)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x95, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1297) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1294)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1296)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x96, 0x12, 0x00, 0x00
	# Pointer (0x1298) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: char (0x70)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1299) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char& (0x1298)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x129A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char (0x11F2)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xf2, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x129B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char& (0x129A)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9a, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x129C) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x1299)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x129B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x99, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9b, 0x12, 0x00, 0x00
	# Class (0x129D) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::basic_string_view<char,std::char_traits<char> >
	#   LinkageName: .?AV?$basic_string_view@DU?$char_traits@D@std@@@std@@
	# }
	.byte	0x82, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x61, 0x73, 0x69, 0x63
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x69, 0x65, 0x77
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x69
	.byte	0x65, 0x77, 0x40, 0x44
	.byte	0x55, 0x3f, 0x24, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x129E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string_view<char,std::char_traits<char> > (0x129D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9d, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x129F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char) (0x1249)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x49, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12A0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char& (0x1298)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12A1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char& (0x129A)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9a, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12A2) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12A0)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12A1)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa0, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa1, 0x12, 0x00, 0x00
	# MethodOverloadList (0x12A3) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1291)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1290)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x91, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x90, 0x12, 0x00, 0x00
	# MemberFunction (0x12A4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12A5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12A6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12A7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x123C)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x12A8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, unsigned __int64, const unsigned __int64) (0x12A7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xa7, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12A9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: char* const (0x123C)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x12AA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (char* const, const unsigned __int64, unsigned __int64, const unsigned __int64) (0x12A9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0xa9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12AB) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#     ArgType: std::integral_constant<bool,1> (0x109E)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	# MemberFunction (0x12AC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,1>) (0x12AB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xab, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12AD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#     ArgType: std::integral_constant<bool,0> (0x10A1)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	# MemberFunction (0x12AE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,0>) (0x12AD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xad, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12AF) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,1>) (0x12AC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,0>) (0x12AE)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xac, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xae, 0x12, 0x00, 0x00
	# Class (0x12B0) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_val<std::_Simple_types<char> >
	#   LinkageName: .?AV?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x72, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x12B1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x12B2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_String_val<std::_Simple_types<char> >& (0x12B1)
	#     ArgType: std::_String_val<std::_Simple_types<char> >& (0x12B1)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xb1, 0x12, 0x00, 0x00
	.byte	0xb1, 0x12, 0x00, 0x00
	# MemberFunction (0x12B3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_String_val<std::_Simple_types<char> >&, std::_String_val<std::_Simple_types<char> >&) (0x12B2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xb2, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12B4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1243)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x43, 0x12, 0x00, 0x00
	# MemberFunction (0x12B5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x121E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12B4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xb4, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12B6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x12B7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64) (0x12B6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xb6, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12B8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x12B9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const unsigned __int64, const unsigned __int64) (0x12B8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xb8, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12BA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const unsigned __int64) (0x122C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x2c, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12BB) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char (0x11F2)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x12BC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char, const unsigned __int64) (0x12BB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xbb, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12BD) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64) (0x12B7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64, const unsigned __int64) (0x12B9)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x12BA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char, const unsigned __int64) (0x12BC)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb7, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb9, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xba, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbc, 0x12, 0x00, 0x00
	# ArgList (0x12BE) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x12BF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, unsigned __int64) (0x12BE)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xbe, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12C0) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, unsigned __int64) (0x12BF)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64, const unsigned __int64) (0x12B9)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x12BA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char, const unsigned __int64) (0x12BC)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbf, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb9, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xba, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbc, 0x12, 0x00, 0x00
	# ArgList (0x12C1) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x11F3)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x12C2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, unsigned __int64) (0x12C1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xc1, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12C3) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64) (0x12B7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64, const unsigned __int64) (0x12B9)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, unsigned __int64) (0x12C2)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char, const unsigned __int64) (0x12BC)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb7, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb9, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc2, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbc, 0x12, 0x00, 0x00
	# Modifier (0x12C4) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::basic_string_view<char,std::char_traits<char> > (0x129D)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x9d, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x12C5) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::basic_string_view<char,std::char_traits<char> > (0x12C4)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xc4, 0x12, 0x00, 0x00
	# MemberFunction (0x12C6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string_view<char,std::char_traits<char> >) (0x12C5)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc5, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12C7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x12C8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const unsigned __int64) (0x12C7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xc7, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12C9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x11FF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xff, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12CA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x11F4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12CB) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12C9)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x12CA)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc9, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	# MemberFunction (0x12CC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x11FF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xff, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12CD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	# MemberFunction (0x12CE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (unsigned __int64, unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12CD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xcd, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12CF) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 5
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x11FE)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x1a, 0x00, 0x01, 0x12
	.byte	0x05, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x12D0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 5
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const unsigned __int64) (0x12CF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x05, 0x00
	.byte	0xcf, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12D1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x11F4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12D2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const char* const) (0x1277)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x77, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12D3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x12D4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const char* const, const unsigned __int64) (0x12D3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0xd3, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12D5) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12CC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(unsigned __int64, unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12CE)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const unsigned __int64) (0x12D0)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x12D1)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const char* const) (0x12D2)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const char* const, const unsigned __int64) (0x12D4)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcc, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xce, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd0, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd1, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd2, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd4, 0x12, 0x00, 0x00
	# MemberFunction (0x12D6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char> (0x1220)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12D7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x128D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12D8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11FC)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x12D9) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::char_traits<char>
	#   LinkageName: .?AU?$char_traits@D@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Struct (0x12DA) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# FieldList (0x12DB) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#     BaseOffset: 0x0
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const unsigned __int64 (0x108A)
	#     Name: _Memcpy_move_offset
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const unsigned __int64 (0x108A)
	#     Name: _Memcpy_move_size
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const unsigned __int64 (0x108A)
	#     Name: npos
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0xD
	#     MethodListIndex: 0x123B
	#     Name: basic_string
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1242
	#     Name: _Construct
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x5
	#     MethodListIndex: 0x124B
	#     Name: operator=
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x7
	#     MethodListIndex: 0x1250
	#     Name: assign
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1255
	#     Name: _Assign_rv_contents
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1255
	#     Name: _Assign_rv_contents_with_alloc_always_equal
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x121F)
	#     Name: _Construct_lv_contents
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x1258
	#     Name: operator+=
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x1259
	#     Name: append
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x8
	#     MethodListIndex: 0x126E
	#     Name: insert
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0xA
	#     MethodListIndex: 0x1283
	#     Name: replace
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1225)
	#     Name: ~basic_string
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x128B
	#     Name: erase
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1225)
	#     Name: clear
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x128F
	#     Name: begin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x128F
	#     Name: end
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1292
	#     Name: _Unchecked_begin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1292
	#     Name: _Unchecked_end
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1297
	#     Name: rbegin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1297
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x128E)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x128E)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1296)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1296)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1225)
	#     Name: shrink_to_fit
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x129C
	#     Name: at
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x129C
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string_view<char,std::char_traits<char> > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x129E)
	#     Name: operator basic_string_view
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char) (0x129F)
	#     Name: push_back
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1225)
	#     Name: pop_back
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12A2
	#     Name: front
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12A2
	#     Name: back
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1291)
	#     Name: c_str
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12A3
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12A4)
	#     Name: length
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12A4)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12A4)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char) (0x1232)
	#     Name: resize
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12A4)
	#     Name: capacity
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x12A5)
	#     Name: reserve
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12A6)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char* const, unsigned __int64, const unsigned __int64) (0x12A8)
	#     Name: copy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char* const, const unsigned __int64, unsigned __int64, const unsigned __int64) (0x12AA)
	#     Name: _Copy_s
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12AF
	#     Name: _Swap_data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::_String_val<std::_Simple_types<char> >&, std::_String_val<std::_Simple_types<char> >&) (0x12B3)
	#     Name: _Swap_bx_large_with_small
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12B5)
	#     Name: swap
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12BD
	#     Name: find
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12BD
	#     Name: rfind
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12BD
	#     Name: find_first_of
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12C0
	#     Name: find_last_of
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12C3
	#     Name: find_first_not_of
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12BD
	#     Name: find_last_not_of
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string_view<char,std::char_traits<char> >) (0x12C6)
	#     Name: _Starts_with
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64) (0x12C8)
	#     Name: substr
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12CB
	#     Name: _Equal
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x12D5
	#     Name: compare
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<char> std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12D6)
	#     Name: get_allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x12D7)
	#     Name: _Calculate_growth
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1225)
	#     Name: _Become_small
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x12A5)
	#     Name: _Eos
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1225)
	#     Name: _Tidy_init
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1225)
	#     Name: _Tidy_deallocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12D8)
	#     Name: _Xlen
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#     Name: _Mybase
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::char_traits<char> (0x12D9)
	#     Name: traits_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x1220)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x1220)
	#     Name: _Alty
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<char> > (0x12DA)
	#     Name: _Alty_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#     Name: _Mydata_t
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x1201)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x1298)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x129A)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x125A)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125B)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > > (0x1293)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > (0x1295)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: _Use_memcpy_move
	#   }
	# }
	.byte	0xe2, 0x06, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x65, 0x6d
	.byte	0x63, 0x70, 0x79, 0x5f
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x5f, 0x6f, 0x66, 0x66
	.byte	0x73, 0x65, 0x74, 0x00
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x65, 0x6d
	.byte	0x63, 0x70, 0x79, 0x5f
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x5f, 0x73, 0x69, 0x7a
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x6e, 0x70, 0x6f, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x0d, 0x00
	.byte	0x3b, 0x12, 0x00, 0x00
	.byte	0x62, 0x61, 0x73, 0x69
	.byte	0x63, 0x5f, 0x73, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x42, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x05, 0x00
	.byte	0x4b, 0x12, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x07, 0x00
	.byte	0x50, 0x12, 0x00, 0x00
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x5f, 0x41, 0x73, 0x73
	.byte	0x69, 0x67, 0x6e, 0x5f
	.byte	0x72, 0x76, 0x5f, 0x63
	.byte	0x6f, 0x6e, 0x74, 0x65
	.byte	0x6e, 0x74, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x5f, 0x41, 0x73, 0x73
	.byte	0x69, 0x67, 0x6e, 0x5f
	.byte	0x72, 0x76, 0x5f, 0x63
	.byte	0x6f, 0x6e, 0x74, 0x65
	.byte	0x6e, 0x74, 0x73, 0x5f
	.byte	0x77, 0x69, 0x74, 0x68
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1f, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x5f, 0x6c
	.byte	0x76, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x65, 0x6e
	.byte	0x74, 0x73, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x58, 0x12, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x3d, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x59, 0x12, 0x00, 0x00
	.byte	0x61, 0x70, 0x70, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x08, 0x00
	.byte	0x6e, 0x12, 0x00, 0x00
	.byte	0x69, 0x6e, 0x73, 0x65
	.byte	0x72, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x0a, 0x00
	.byte	0x83, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x70, 0x6c
	.byte	0x61, 0x63, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x25, 0x12, 0x00, 0x00
	.byte	0x7e, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x65, 0x72, 0x61, 0x73
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x25, 0x12, 0x00, 0x00
	.byte	0x63, 0x6c, 0x65, 0x61
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x8f, 0x12, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x8f, 0x12, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x92, 0x12, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x92, 0x12, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x97, 0x12, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x97, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x8e, 0x12, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x8e, 0x12, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x96, 0x12, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x96, 0x12, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x25, 0x12, 0x00, 0x00
	.byte	0x73, 0x68, 0x72, 0x69
	.byte	0x6e, 0x6b, 0x5f, 0x74
	.byte	0x6f, 0x5f, 0x66, 0x69
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x9c, 0x12, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x9c, 0x12, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x9e, 0x12, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x20, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x69
	.byte	0x65, 0x77, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x9f, 0x12, 0x00, 0x00
	.byte	0x70, 0x75, 0x73, 0x68
	.byte	0x5f, 0x62, 0x61, 0x63
	.byte	0x6b, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x25, 0x12, 0x00, 0x00
	.byte	0x70, 0x6f, 0x70, 0x5f
	.byte	0x62, 0x61, 0x63, 0x6b
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xa2, 0x12, 0x00, 0x00
	.byte	0x66, 0x72, 0x6f, 0x6e
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xa2, 0x12, 0x00, 0x00
	.byte	0x62, 0x61, 0x63, 0x6b
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x91, 0x12, 0x00, 0x00
	.byte	0x63, 0x5f, 0x73, 0x74
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xa3, 0x12, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa4, 0x12, 0x00, 0x00
	.byte	0x6c, 0x65, 0x6e, 0x67
	.byte	0x74, 0x68, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa4, 0x12, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa4, 0x12, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x32, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x73, 0x69
	.byte	0x7a, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa4, 0x12, 0x00, 0x00
	.byte	0x63, 0x61, 0x70, 0x61
	.byte	0x63, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa5, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x73, 0x65
	.byte	0x72, 0x76, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa6, 0x12, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa8, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xaa, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xaf, 0x12, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x64, 0x61
	.byte	0x74, 0x61, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb3, 0x12, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x62, 0x78
	.byte	0x5f, 0x6c, 0x61, 0x72
	.byte	0x67, 0x65, 0x5f, 0x77
	.byte	0x69, 0x74, 0x68, 0x5f
	.byte	0x73, 0x6d, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb5, 0x12, 0x00, 0x00
	.byte	0x73, 0x77, 0x61, 0x70
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xbd, 0x12, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xbd, 0x12, 0x00, 0x00
	.byte	0x72, 0x66, 0x69, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xbd, 0x12, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x5f, 0x6f
	.byte	0x66, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xc0, 0x12, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x6c, 0x61, 0x73
	.byte	0x74, 0x5f, 0x6f, 0x66
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xc3, 0x12, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x5f, 0x6e
	.byte	0x6f, 0x74, 0x5f, 0x6f
	.byte	0x66, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xbd, 0x12, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x6c, 0x61, 0x73
	.byte	0x74, 0x5f, 0x6e, 0x6f
	.byte	0x74, 0x5f, 0x6f, 0x66
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xc6, 0x12, 0x00, 0x00
	.byte	0x5f, 0x53, 0x74, 0x61
	.byte	0x72, 0x74, 0x73, 0x5f
	.byte	0x77, 0x69, 0x74, 0x68
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xc8, 0x12, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x74, 0x72, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xcb, 0x12, 0x00, 0x00
	.byte	0x5f, 0x45, 0x71, 0x75
	.byte	0x61, 0x6c, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0xd5, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6d, 0x70
	.byte	0x61, 0x72, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd6, 0x12, 0x00, 0x00
	.byte	0x67, 0x65, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd7, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x61, 0x6c
	.byte	0x63, 0x75, 0x6c, 0x61
	.byte	0x74, 0x65, 0x5f, 0x67
	.byte	0x72, 0x6f, 0x77, 0x74
	.byte	0x68, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x25, 0x12, 0x00, 0x00
	.byte	0x5f, 0x42, 0x65, 0x63
	.byte	0x6f, 0x6d, 0x65, 0x5f
	.byte	0x73, 0x6d, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa5, 0x12, 0x00, 0x00
	.byte	0x5f, 0x45, 0x6f, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x25, 0x12, 0x00, 0x00
	.byte	0x5f, 0x54, 0x69, 0x64
	.byte	0x79, 0x5f, 0x69, 0x6e
	.byte	0x69, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x25, 0x12, 0x00, 0x00
	.byte	0x5f, 0x54, 0x69, 0x64
	.byte	0x79, 0x5f, 0x64, 0x65
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xd8, 0x12, 0x00, 0x00
	.byte	0x5f, 0x58, 0x6c, 0x65
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xda, 0x12, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x64
	.byte	0x61, 0x74, 0x61, 0x5f
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9a, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x5a, 0x12, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x5b, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x93, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x95, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x73, 0x65
	.byte	0x5f, 0x6d, 0x65, 0x6d
	.byte	0x63, 0x70, 0x79, 0x5f
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x12DC) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 173
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x12DB)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 40
	#   Name: std::basic_string<char,std::char_traits<char>,std::allocator<char> >
	#   LinkageName: .?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@
	# }
	.byte	0x9e, 0x00, 0x04, 0x15
	.byte	0xad, 0x00, 0x10, 0x02
	.byte	0xdb, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x61, 0x73, 0x69, 0x63
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x40, 0x44, 0x55
	.byte	0x3f, 0x24, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x44, 0x40
	.byte	0x32, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x12DD) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring
	# }
	.byte	0x6e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x78, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x00
	# UdtSourceLine (0x12DE) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x12DC)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x12DD)
	#   LineNumber: 2064
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xdc, 0x12, 0x00, 0x00
	.byte	0xdd, 0x12, 0x00, 0x00
	.byte	0x10, 0x08, 0x00, 0x00
	# FieldList (0x12DF) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* (0x1201)
	#     FieldOffset: 0x0
	#     Name: _What
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool (0x30)
	#     FieldOffset: 0x8
	#     Name: _DoFree
	#   }
	# }
	.byte	0x26, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x57
	.byte	0x68, 0x61, 0x74, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x44
	.byte	0x6f, 0x46, 0x72, 0x65
	.byte	0x65, 0x00, 0xf2, 0xf1
	# Struct (0x12E0) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 2
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x12DF)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: __std_exception_data
	#   LinkageName: .?AU__std_exception_data@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x02, 0x00, 0x00, 0x02
	.byte	0xdf, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x5f, 0x5f
	.byte	0x73, 0x74, 0x64, 0x5f
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x5f, 0x64, 0x61
	.byte	0x74, 0x61, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x5f
	.byte	0x5f, 0x73, 0x74, 0x64
	.byte	0x5f, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x5f, 0x64
	.byte	0x61, 0x74, 0x61, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x12E1) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: __std_exception_data (0x12E0)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h (0x121B)
	#   LineNumber: 21
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xe0, 0x12, 0x00, 0x00
	.byte	0x1b, 0x12, 0x00, 0x00
	.byte	0x15, 0x00, 0x00, 0x00
	# Class (0x12E2) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
	#   LinkageName: .?AV?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@
	# }
	.byte	0xce, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6d, 0x70
	.byte	0x72, 0x65, 0x73, 0x73
	.byte	0x65, 0x64, 0x5f, 0x70
	.byte	0x61, 0x69, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x2c, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x43
	.byte	0x6f, 0x6d, 0x70, 0x72
	.byte	0x65, 0x73, 0x73, 0x65
	.byte	0x64, 0x5f, 0x70, 0x61
	.byte	0x69, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x32
	.byte	0x40, 0x24, 0x30, 0x30
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x12E3) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x12E4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x12E3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0xe3, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12E5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x12E3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x1226)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0xe3, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x26, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x12E6) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<char> (0x1220)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x12E7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x12E6)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xe6, 0x12, 0x00, 0x00
	# MemberFunction (0x12E8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x12E3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::allocator<char>&) (0x12E7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0xe3, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xe7, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x12E9) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x12EA) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x12E9)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x12EB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1101)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   ThisType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x12EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x01, 0x11, 0x00, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0xea, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12EC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy*& (0x1107)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x12E3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x07, 0x11, 0x00, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0xe3, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12ED) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* const& (0x110A)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   ThisType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x12EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0a, 0x11, 0x00, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0xea, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12EE) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy*& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x12EC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* const& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x12ED)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xec, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xed, 0x12, 0x00, 0x00
	# Pointer (0x12EF) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x12F0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >& (0x12EF)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xef, 0x12, 0x00, 0x00
	# MemberFunction (0x12F1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x12E3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >&) (0x12F0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0xe3, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12F2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char>& (0x12E6)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x12E3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xe6, 0x12, 0x00, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0xe3, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12F3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::allocator<char>& (0x1222)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   ThisType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x12EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x22, 0x12, 0x00, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0xea, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12F4) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<char>& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x12F2)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::allocator<char>& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x12F3)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf2, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf3, 0x12, 0x00, 0x00
	# MemberFunction (0x12F5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_val<std::_Simple_types<char> >& (0x12B1)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x12E3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb1, 0x12, 0x00, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0xe3, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x12F6) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x12F7) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_String_val<std::_Simple_types<char> > (0x12F6)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xf6, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x12F8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_String_val<std::_Simple_types<char> >& (0x12F7)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x121D)
	#   ThisType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x12EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf7, 0x12, 0x00, 0x00
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0xea, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12F9) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_val<std::_Simple_types<char> >& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x12F5)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_String_val<std::_Simple_types<char> >& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x12F8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf5, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf8, 0x12, 0x00, 0x00
	# Struct (0x12FA) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Simple_types<char>
	#   LinkageName: .?AU?$_Simple_types@D@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Union (0x12FB) {
	#   TypeLeafKind: LF_UNION (0x1506)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   SizeOf: 0
	#   Name: std::_String_val<std::_Simple_types<char> >::_Bxty
	#   LinkageName: .?AT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x06, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x3a, 0x3a, 0x5f
	.byte	0x42, 0x78, 0x74, 0x79
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x54, 0x5f, 0x42, 0x78
	.byte	0x74, 0x79, 0x40, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x40, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# FieldList (0x12FC) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 16
	#     Name: _BUF_SIZE
	#   }
	# }
	.byte	0x12, 0x00, 0x03, 0x12
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x10, 0x00, 0x5f, 0x42
	.byte	0x55, 0x46, 0x5f, 0x53
	.byte	0x49, 0x5a, 0x45, 0x00
	# Enum (0x12FD) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   UnderlyingType: unsigned (0x75)
	#   FieldListType: <field list> (0x12FC)
	#   Name: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag>
	#   LinkageName: .?AW4<unnamed-enum-_BUF_SIZE>@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@
	# }
	.byte	0xce, 0x00, 0x07, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xfc, 0x12, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x20, 0x3e
	.byte	0x3a, 0x3a, 0x3c, 0x75
	.byte	0x6e, 0x6e, 0x61, 0x6d
	.byte	0x65, 0x64, 0x2d, 0x74
	.byte	0x61, 0x67, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x57
	.byte	0x34, 0x3c, 0x75, 0x6e
	.byte	0x6e, 0x61, 0x6d, 0x65
	.byte	0x64, 0x2d, 0x65, 0x6e
	.byte	0x75, 0x6d, 0x2d, 0x5f
	.byte	0x42, 0x55, 0x46, 0x5f
	.byte	0x53, 0x49, 0x5a, 0x45
	.byte	0x3e, 0x40, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x62, 0x61, 0x73
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x40
	.byte	0x44, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x12FE) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag> (0x12FD)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x12DD)
	#   LineNumber: 1897
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xfd, 0x12, 0x00, 0x00
	.byte	0xdd, 0x12, 0x00, 0x00
	.byte	0x69, 0x07, 0x00, 0x00
	# FieldList (0x12FF) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 15
	#     Name: _ALLOC_MASK
	#   }
	# }
	.byte	0x16, 0x00, 0x03, 0x12
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x0f, 0x00, 0x5f, 0x41
	.byte	0x4c, 0x4c, 0x4f, 0x43
	.byte	0x5f, 0x4d, 0x41, 0x53
	.byte	0x4b, 0x00, 0xf2, 0xf1
	# Enum (0x1300) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   UnderlyingType: unsigned (0x75)
	#   FieldListType: <field list> (0x12FF)
	#   Name: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag>
	#   LinkageName: .?AW4<unnamed-enum-_ALLOC_MASK>@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@
	# }
	.byte	0xce, 0x00, 0x07, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xff, 0x12, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x20, 0x3e
	.byte	0x3a, 0x3a, 0x3c, 0x75
	.byte	0x6e, 0x6e, 0x61, 0x6d
	.byte	0x65, 0x64, 0x2d, 0x74
	.byte	0x61, 0x67, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x57
	.byte	0x34, 0x3c, 0x75, 0x6e
	.byte	0x6e, 0x61, 0x6d, 0x65
	.byte	0x64, 0x2d, 0x65, 0x6e
	.byte	0x75, 0x6d, 0x2d, 0x5f
	.byte	0x41, 0x4c, 0x4c, 0x4f
	.byte	0x43, 0x5f, 0x4d, 0x41
	.byte	0x53, 0x4b, 0x3e, 0x40
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1301) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag> (0x1300)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x12DD)
	#   LineNumber: 1902
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x00, 0x13, 0x00, 0x00
	.byte	0xdd, 0x12, 0x00, 0x00
	.byte	0x6e, 0x07, 0x00, 0x00
	# FieldList (0x1302) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x12E2)
	#     FieldOffset: 0x0
	#     Name: _Mypair
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x12E4)
	#     Name: _String_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x12E4)
	#     Name: ~_String_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::(const std::allocator<char>&) (0x12E5)
	#     Name: _Copy_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::(std::allocator<char>&) (0x12E8)
	#     Name: _Move_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x12E4)
	#     Name: _Alloc_proxy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x12E4)
	#     Name: _Free_proxy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12** std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x12EB)
	#     Name: _Getpfirst
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12EE
	#     Name: _Myproxy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x12E4)
	#     Name: _Orphan_all
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::(std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >&) (0x12F1)
	#     Name: _Swap_all
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12F4
	#     Name: _Getal
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12F9
	#     Name: _Get_data
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x1220)
	#     Name: _Alty
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<char> > (0x12DA)
	#     Name: _Alty_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<std::_Container_proxy> (0x1122)
	#     Name: _Alproxy
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<std::_Container_proxy> > (0x1123)
	#     Name: _Alproxy_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Simple_types<char> (0x12FA)
	#     Name: _Val_types
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#     Name: _Mydata_t
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::_Bxty (0x12FB)
	#     Name: _Bxty
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x1201)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x1298)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x129A)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x125A)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x125B)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag> (0x12FD)
	#     Name: 
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag> (0x1300)
	#     Name: 
	#   }
	# }
	.byte	0x72, 0x02, 0x03, 0x12
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0xe2, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x61, 0x69
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe4, 0x12, 0x00, 0x00
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe4, 0x12, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe5, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe8, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x6f, 0x76
	.byte	0x65, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe4, 0x12, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe4, 0x12, 0x00, 0x00
	.byte	0x5f, 0x46, 0x72, 0x65
	.byte	0x65, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xeb, 0x12, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xee, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe4, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf1, 0x12, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xf4, 0x12, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x61, 0x6c, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xf9, 0x12, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x64, 0x61, 0x74
	.byte	0x61, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xda, 0x12, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xfa, 0x12, 0x00, 0x00
	.byte	0x5f, 0x56, 0x61, 0x6c
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x64
	.byte	0x61, 0x74, 0x61, 0x5f
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xfb, 0x12, 0x00, 0x00
	.byte	0x5f, 0x42, 0x78, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9a, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x5a, 0x12, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x5b, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xfd, 0x12, 0x00, 0x00
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x00, 0x13, 0x00, 0x00
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1303) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 34
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1302)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 40
	#   Name: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
	#   LinkageName: .?AV?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x22, 0x00, 0x10, 0x02
	.byte	0x02, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1304) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1303)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x12DD)
	#   LineNumber: 1875
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x03, 0x13, 0x00, 0x00
	.byte	0xdd, 0x12, 0x00, 0x00
	.byte	0x53, 0x07, 0x00, 0x00
	# Pointer (0x1305) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<char> (0x1221)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x21, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x1306) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: char& (0x1298)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	# MemberFunction (0x1307) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::allocator<char> (0x1220)
	#   ThisType: const std::allocator<char>* (0x1305)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (char&) (0x1306)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x05, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x06, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1308) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char& (0x129A)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x9a, 0x12, 0x00, 0x00
	# MemberFunction (0x1309) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x1201)
	#   ClassType: std::allocator<char> (0x1220)
	#   ThisType: const std::allocator<char>* (0x1305)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char&) (0x1308)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x05, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x08, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x130A) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::allocator<char>::(char&) (0x1307)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::allocator<char>::(const char&) (0x1309)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x07, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x09, 0x13, 0x00, 0x00
	# Pointer (0x130B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<char> (0x1220)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x130C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<char> (0x1220)
	#   ThisType: std::allocator<char>* (0x130B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x0b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x130D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<char> (0x1220)
	#   ThisType: std::allocator<char>* (0x130B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x1226)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x0b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x26, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x130E) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<char>::() (0x130C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<char>::(const std::allocator<char>&) (0x130D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0c, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0d, 0x13, 0x00, 0x00
	# ArgList (0x130F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: char* const (0x123C)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x1310) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<char> (0x1220)
	#   ThisType: std::allocator<char>* (0x130B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (char* const, const unsigned __int64) (0x130F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x0b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1311) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::allocator<char> (0x1220)
	#   ThisType: std::allocator<char>* (0x130B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x0b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1312) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::allocator<char> (0x1220)
	#   ThisType: std::allocator<char>* (0x130B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const void*) (0x1137)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x0b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x37, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1313) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::allocator<char>::(const unsigned __int64) (0x1311)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::allocator<char>::(const unsigned __int64, const void*) (0x1312)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x11, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x12, 0x13, 0x00, 0x00
	# MemberFunction (0x1314) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::allocator<char> (0x1220)
	#   ThisType: const std::allocator<char>* (0x1305)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x05, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1315) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x130A
	#     Name: address
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x130E
	#     Name: allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<char>::(char* const, const unsigned __int64) (0x1310)
	#     Name: deallocate
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1313
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::allocator<char>::() (0x1314)
	#     Name: max_size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void (0x3)
	#     Name: _Not_user_specialized
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x1201)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x1298)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x129A)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0x5e, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x0a, 0x13, 0x00, 0x00
	.byte	0x61, 0x64, 0x64, 0x72
	.byte	0x65, 0x73, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x0e, 0x13, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x10, 0x13, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x13, 0x13, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x14, 0x13, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5f, 0x4e, 0x6f, 0x74
	.byte	0x5f, 0x75, 0x73, 0x65
	.byte	0x72, 0x5f, 0x73, 0x70
	.byte	0x65, 0x63, 0x69, 0x61
	.byte	0x6c, 0x69, 0x7a, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9a, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Class (0x1316) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 18
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1315)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator<char>
	#   LinkageName: .?AV?$allocator@D@std@@
	# }
	.byte	0x42, 0x00, 0x04, 0x15
	.byte	0x12, 0x00, 0x10, 0x02
	.byte	0x15, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1317) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator<char> (0x1316)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x113D)
	#   LineNumber: 940
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x16, 0x13, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0xac, 0x03, 0x00, 0x00
	# Struct (0x1318) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::bidirectional_iterator_tag
	#   LinkageName: .?AUbidirectional_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x69, 0x64, 0x69, 0x72
	.byte	0x65, 0x63, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x61, 0x6c
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x62, 0x69
	.byte	0x64, 0x69, 0x72, 0x65
	.byte	0x63, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x61, 0x6c, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x1319) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::bidirectional_iterator_tag (0x1318)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x18, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x131A) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1319)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::random_access_iterator_tag
	#   LinkageName: .?AUrandom_access_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x19, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x61, 0x6e, 0x64, 0x6f
	.byte	0x6d, 0x5f, 0x61, 0x63
	.byte	0x63, 0x65, 0x73, 0x73
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x72, 0x61
	.byte	0x6e, 0x64, 0x6f, 0x6d
	.byte	0x5f, 0x61, 0x63, 0x63
	.byte	0x65, 0x73, 0x73, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x131B) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::random_access_iterator_tag (0x131A)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 411
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x1a, 0x13, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x9b, 0x01, 0x00, 0x00
	# Pointer (0x131C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x131D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#   ThisType: std::_String_val<std::_Simple_types<char> >* (0x131C)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x1c, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x131E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#   ThisType: std::_String_val<std::_Simple_types<char> >* (0x131C)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x1c, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x131F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_String_val<std::_Simple_types<char> > (0x12F6)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xf6, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1320) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x1201)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x131F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1321) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::_String_val<std::_Simple_types<char> >::() (0x131E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::_String_val<std::_Simple_types<char> >::() (0x1320)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1e, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x20, 0x13, 0x00, 0x00
	# MemberFunction (0x1322) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x131F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1323) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x131F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1324) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1325) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x131F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const unsigned __int64) (0x12C7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xc7, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Enum (0x1326) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   UnderlyingType: unsigned (0x75)
	#   FieldListType: <field list> (0x12FC)
	#   Name: std::_String_val<std::_Simple_types<char> >::<unnamed-tag>
	#   LinkageName: .?AW4<unnamed-enum-_BUF_SIZE>@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x96, 0x00, 0x07, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xfc, 0x12, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x3a
	.byte	0x3a, 0x3c, 0x75, 0x6e
	.byte	0x6e, 0x61, 0x6d, 0x65
	.byte	0x64, 0x2d, 0x74, 0x61
	.byte	0x67, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x57, 0x34
	.byte	0x3c, 0x75, 0x6e, 0x6e
	.byte	0x61, 0x6d, 0x65, 0x64
	.byte	0x2d, 0x65, 0x6e, 0x75
	.byte	0x6d, 0x2d, 0x5f, 0x42
	.byte	0x55, 0x46, 0x5f, 0x53
	.byte	0x49, 0x5a, 0x45, 0x3e
	.byte	0x40, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1327) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> >::<unnamed-tag> (0x1326)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x12DD)
	#   LineNumber: 1789
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0xdd, 0x12, 0x00, 0x00
	.byte	0xfd, 0x06, 0x00, 0x00
	# Enum (0x1328) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   UnderlyingType: unsigned (0x75)
	#   FieldListType: <field list> (0x12FF)
	#   Name: std::_String_val<std::_Simple_types<char> >::<unnamed-tag>
	#   LinkageName: .?AW4<unnamed-enum-_ALLOC_MASK>@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x96, 0x00, 0x07, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xff, 0x12, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x3a
	.byte	0x3a, 0x3c, 0x75, 0x6e
	.byte	0x6e, 0x61, 0x6d, 0x65
	.byte	0x64, 0x2d, 0x74, 0x61
	.byte	0x67, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x57, 0x34
	.byte	0x3c, 0x75, 0x6e, 0x6e
	.byte	0x61, 0x6d, 0x65, 0x64
	.byte	0x2d, 0x65, 0x6e, 0x75
	.byte	0x6d, 0x2d, 0x5f, 0x41
	.byte	0x4c, 0x4c, 0x4f, 0x43
	.byte	0x5f, 0x4d, 0x41, 0x53
	.byte	0x4b, 0x3e, 0x40, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x40, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1329) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> >::<unnamed-tag> (0x1328)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x12DD)
	#   LineNumber: 1793
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x28, 0x13, 0x00, 0x00
	.byte	0xdd, 0x12, 0x00, 0x00
	.byte	0x01, 0x07, 0x00, 0x00
	# FieldList (0x132A) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Container_base12 (0x1172)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_val<std::_Simple_types<char> >::_Bxty (0x12FB)
	#     FieldOffset: 0x8
	#     Name: _Bx
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 (0x23)
	#     FieldOffset: 0x18
	#     Name: _Mysize
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 (0x23)
	#     FieldOffset: 0x20
	#     Name: _Myres
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::() (0x131D)
	#     Name: _String_val
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1321
	#     Name: _Myptr
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::_String_val<std::_Simple_types<char> >::() (0x1322)
	#     Name: _Large_string_engaged
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::(const unsigned __int64) (0x1323)
	#     Name: _Check_offset
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::(const unsigned __int64) (0x1323)
	#     Name: _Check_offset_exclusive
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_String_val<std::_Simple_types<char> >::() (0x1324)
	#     Name: _Xran
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::_String_val<std::_Simple_types<char> >::(const unsigned __int64, const unsigned __int64) (0x1325)
	#     Name: _Clamp_suffix_size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x1201)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x1298)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x129A)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::<unnamed-tag> (0x1326)
	#     Name: 
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::<unnamed-tag> (0x1328)
	#     Name: 
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::_Bxty (0x12FB)
	#     Name: _Bxty
	#   }
	# }
	.byte	0xaa, 0x01, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0xfb, 0x12, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x42
	.byte	0x78, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x18, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x73, 0x69, 0x7a
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x20, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x72, 0x65, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1d, 0x13, 0x00, 0x00
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x21, 0x13, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x70
	.byte	0x74, 0x72, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x22, 0x13, 0x00, 0x00
	.byte	0x5f, 0x4c, 0x61, 0x72
	.byte	0x67, 0x65, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x65, 0x6e
	.byte	0x67, 0x61, 0x67, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x23, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x68, 0x65
	.byte	0x63, 0x6b, 0x5f, 0x6f
	.byte	0x66, 0x66, 0x73, 0x65
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x23, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x68, 0x65
	.byte	0x63, 0x6b, 0x5f, 0x6f
	.byte	0x66, 0x66, 0x73, 0x65
	.byte	0x74, 0x5f, 0x65, 0x78
	.byte	0x63, 0x6c, 0x75, 0x73
	.byte	0x69, 0x76, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x24, 0x13, 0x00, 0x00
	.byte	0x5f, 0x58, 0x72, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x25, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6c, 0x61
	.byte	0x6d, 0x70, 0x5f, 0x73
	.byte	0x75, 0x66, 0x66, 0x69
	.byte	0x78, 0x5f, 0x73, 0x69
	.byte	0x7a, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9a, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x28, 0x13, 0x00, 0x00
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xfb, 0x12, 0x00, 0x00
	.byte	0x5f, 0x42, 0x78, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	# Class (0x132B) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 22
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x132A)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 40
	#   Name: std::_String_val<std::_Simple_types<char> >
	#   LinkageName: .?AV?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x72, 0x00, 0x04, 0x15
	.byte	0x16, 0x00, 0x10, 0x02
	.byte	0x2a, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x132C) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> > (0x132B)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x12DD)
	#   LineNumber: 1770
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x2b, 0x13, 0x00, 0x00
	.byte	0xdd, 0x12, 0x00, 0x00
	.byte	0xea, 0x06, 0x00, 0x00
	# ArgList (0x132D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x132E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const char* const, const unsigned __int64) (0x132D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x2d, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x132F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x11F4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1330) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x123C)
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x1331) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, const char* const, const unsigned __int64) (0x1330)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x30, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1332) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: char* const (0x123C)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x1333) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (char* const, const unsigned __int64, const char* const, const unsigned __int64) (0x1332)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x32, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1334) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x11F3)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const char& (0x129A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x9a, 0x12, 0x00, 0x00
	# MemberFunction (0x1335) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x1201)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const unsigned __int64, const char&) (0x1334)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x34, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1336) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x123C)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const char (0x11F2)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	# MemberFunction (0x1337) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, const unsigned __int64, const char) (0x1336)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x36, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1338) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: char& (0x1298)
	#     ArgType: const char& (0x129A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x9a, 0x12, 0x00, 0x00
	# MemberFunction (0x1339) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (char&, const char&) (0x1338)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x133A) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const unsigned __int64, const char) (0x1337)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::char_traits<char>::(char&, const char&) (0x1339)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x37, 0x13, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x39, 0x13, 0x00, 0x00
	# ArgList (0x133B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char& (0x129A)
	#     ArgType: const char& (0x129A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9a, 0x12, 0x00, 0x00
	.byte	0x9a, 0x12, 0x00, 0x00
	# MemberFunction (0x133C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char&, const char&) (0x133B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x3b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x133D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char (0x70)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int&) (0x10AB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x133E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char&) (0x1308)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x08, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x133F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int& (0x1062)
	#     ArgType: const int& (0x1062)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	# MemberFunction (0x1340) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int&, const int&) (0x133F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x3f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1341) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int&) (0x10AB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1342) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x12D9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1343) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::fpos<_Mbstatet>
	#   LinkageName: .?AV?$fpos@U_Mbstatet@@@std@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x66
	.byte	0x70, 0x6f, 0x73, 0x3c
	.byte	0x5f, 0x4d, 0x62, 0x73
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x74, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x66, 0x70, 0x6f
	.byte	0x73, 0x40, 0x55, 0x5f
	.byte	0x4d, 0x62, 0x73, 0x74
	.byte	0x61, 0x74, 0x65, 0x74
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x1344) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: _Mbstatet
	#   LinkageName: .?AU_Mbstatet@@
	# }
	.byte	0x2e, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x62, 0x73, 0x74, 0x61
	.byte	0x74, 0x65, 0x74, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x4d, 0x62, 0x73
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x74, 0x40, 0x40, 0x00
	# FieldList (0x1345) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::(const char* const, const char* const, const unsigned __int64) (0x132E)
	#     Name: compare
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: unsigned __int64 std::char_traits<char>::(const char* const) (0x132F)
	#     Name: length
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const char* const, const unsigned __int64) (0x1331)
	#     Name: copy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const unsigned __int64, const char* const, const unsigned __int64) (0x1333)
	#     Name: _Copy_s
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: const char* std::char_traits<char>::(const char* const, const unsigned __int64, const char&) (0x1335)
	#     Name: find
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const char* const, const unsigned __int64) (0x1331)
	#     Name: move
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x133A
	#     Name: assign
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: bool std::char_traits<char>::(const char&, const char&) (0x133C)
	#     Name: eq
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: bool std::char_traits<char>::(const char&, const char&) (0x133C)
	#     Name: lt
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char std::char_traits<char>::(const int&) (0x133D)
	#     Name: to_char_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::(const char&) (0x133E)
	#     Name: to_int_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: bool std::char_traits<char>::(const int&, const int&) (0x1340)
	#     Name: eq_int_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::(const int&) (0x1341)
	#     Name: not_eof
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::() (0x1342)
	#     Name: eof
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: char_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: int_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::fpos<_Mbstatet> (0x1343)
	#     Name: pos_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: off_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: _Mbstatet (0x1344)
	#     Name: state_type
	#   }
	# }
	.byte	0x4a, 0x01, 0x03, 0x12
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x2e, 0x13, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6d, 0x70
	.byte	0x61, 0x72, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x2f, 0x13, 0x00, 0x00
	.byte	0x6c, 0x65, 0x6e, 0x67
	.byte	0x74, 0x68, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x31, 0x13, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x33, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x73, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x35, 0x13, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x31, 0x13, 0x00, 0x00
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x3a, 0x13, 0x00, 0x00
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x3c, 0x13, 0x00, 0x00
	.byte	0x65, 0x71, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x3c, 0x13, 0x00, 0x00
	.byte	0x6c, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x3d, 0x13, 0x00, 0x00
	.byte	0x74, 0x6f, 0x5f, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x3e, 0x13, 0x00, 0x00
	.byte	0x74, 0x6f, 0x5f, 0x69
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x40, 0x13, 0x00, 0x00
	.byte	0x65, 0x71, 0x5f, 0x69
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x41, 0x13, 0x00, 0x00
	.byte	0x6e, 0x6f, 0x74, 0x5f
	.byte	0x65, 0x6f, 0x66, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x42, 0x13, 0x00, 0x00
	.byte	0x65, 0x6f, 0x66, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x43, 0x13, 0x00, 0x00
	.byte	0x70, 0x6f, 0x73, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x6f, 0x66, 0x66, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x44, 0x13, 0x00, 0x00
	.byte	0x73, 0x74, 0x61, 0x74
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Struct (0x1346) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 20
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1345)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::char_traits<char>
	#   LinkageName: .?AU?$char_traits@D@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x14, 0x00, 0x10, 0x02
	.byte	0x45, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x1347) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\iosfwd
	# }
	.byte	0x6e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x69, 0x6f, 0x73, 0x66
	.byte	0x77, 0x64, 0x00, 0xf1
	# UdtSourceLine (0x1348) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::char_traits<char> (0x1346)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\iosfwd (0x1347)
	#   LineNumber: 441
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x46, 0x13, 0x00, 0x00
	.byte	0x47, 0x13, 0x00, 0x00
	.byte	0xb9, 0x01, 0x00, 0x00
	# Struct (0x1349) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Default_allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x86, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x44
	.byte	0x65, 0x66, 0x61, 0x75
	.byte	0x6c, 0x74, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x40
	.byte	0x56, 0x3f, 0x24, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x134A) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Default_allocator_traits<std::allocator<char> > (0x1349)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x49, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x134B) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x134A)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x4a, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x134C) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator_traits<std::allocator<char> > (0x134B)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x113D)
	#   LineNumber: 902
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x4b, 0x13, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x86, 0x03, 0x00, 0x00
	# Pointer (0x134D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x12E2)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xe2, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x134E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char>& (0x12E6)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x12E2)
	#   ThisType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x134D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xe6, 0x12, 0x00, 0x00
	.byte	0xe2, 0x12, 0x00, 0x00
	.byte	0x4d, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x134F) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x12E2)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xe2, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1350) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x134F)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x4f, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1351) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::allocator<char>& (0x1222)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x12E2)
	#   ThisType: const std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x1350)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x22, 0x12, 0x00, 0x00
	.byte	0xe2, 0x12, 0x00, 0x00
	.byte	0x50, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1352) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<char>& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x134E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::allocator<char>& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x1351)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4e, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x51, 0x13, 0x00, 0x00
	# MemberFunction (0x1353) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_val<std::_Simple_types<char> >& (0x12B1)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x12E2)
	#   ThisType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x134D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb1, 0x12, 0x00, 0x00
	.byte	0xe2, 0x12, 0x00, 0x00
	.byte	0x4d, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1354) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_String_val<std::_Simple_types<char> >& (0x12F7)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x12E2)
	#   ThisType: const std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x1350)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf7, 0x12, 0x00, 0x00
	.byte	0xe2, 0x12, 0x00, 0x00
	.byte	0x50, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1355) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_val<std::_Simple_types<char> >& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x1353)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_String_val<std::_Simple_types<char> >& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x1354)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x53, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x54, 0x13, 0x00, 0x00
	# FieldList (0x1356) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Private (0x1)
	#     BaseType: std::allocator<char> (0x1220)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_String_val<std::_Simple_types<char> > (0x12B0)
	#     FieldOffset: 0x0
	#     Name: _Myval2
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1352
	#     Name: _Get_first
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1355
	#     Name: _Get_second
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x1220)
	#     Name: _Mybase
	#   }
	# }
	.byte	0x5a, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x01, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x76, 0x61, 0x6c
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x52, 0x13, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x55, 0x13, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x73, 0x65, 0x63
	.byte	0x6f, 0x6e, 0x64, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	# Class (0x1357) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 7
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1356)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 40
	#   Name: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
	#   LinkageName: .?AV?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@
	# }
	.byte	0xce, 0x00, 0x04, 0x15
	.byte	0x07, 0x00, 0x10, 0x02
	.byte	0x56, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6d, 0x70
	.byte	0x72, 0x65, 0x73, 0x73
	.byte	0x65, 0x64, 0x5f, 0x70
	.byte	0x61, 0x69, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x2c, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x43
	.byte	0x6f, 0x6d, 0x70, 0x72
	.byte	0x65, 0x73, 0x73, 0x65
	.byte	0x64, 0x5f, 0x70, 0x61
	.byte	0x69, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x32
	.byte	0x40, 0x24, 0x30, 0x30
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1358) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x1357)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 265
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x57, 0x13, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x09, 0x01, 0x00, 0x00
	# FieldList (0x1359) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x1201)
	#     Name: const_pointer
	#   }
	# }
	.byte	0x6a, 0x00, 0x03, 0x12
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	# Struct (0x135A) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 5
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1359)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Simple_types<char>
	#   LinkageName: .?AU?$_Simple_types@D@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x05, 0x00, 0x10, 0x02
	.byte	0x59, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x135B) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Simple_types<char> (0x135A)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x113D)
	#   LineNumber: 928
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x5a, 0x13, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0xa0, 0x03, 0x00, 0x00
	# Array (0x135C) {
	#   TypeLeafKind: LF_ARRAY (0x1503)
	#   ElementType: char (0x70)
	#   IndexType: unsigned __int64 (0x23)
	#   SizeOf: 16
	#   Name: 
	# }
	.byte	0x0e, 0x00, 0x03, 0x15
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x00, 0xf1
	# Pointer (0x135D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_val<std::_Simple_types<char> >::_Bxty (0x12FB)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xfb, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x135E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> >::_Bxty (0x12FB)
	#   ThisType: std::_String_val<std::_Simple_types<char> >::_Bxty* (0x135D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfb, 0x12, 0x00, 0x00
	.byte	0x5d, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x135F) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: 0x135C
	#     FieldOffset: 0x0
	#     Name: _Buf
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: char* (0x670)
	#     FieldOffset: 0x0
	#     Name: _Ptr
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: 0x135C
	#     FieldOffset: 0x0
	#     Name: _Alias
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::_Bxty::() (0x135E)
	#     Name: _Bxty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::_Bxty::() (0x135E)
	#     Name: ~_Bxty
	#   }
	# }
	.byte	0x56, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x5c, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x42
	.byte	0x75, 0x66, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x50
	.byte	0x74, 0x72, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x5c, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x41
	.byte	0x6c, 0x69, 0x61, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5e, 0x13, 0x00, 0x00
	.byte	0x5f, 0x42, 0x78, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5e, 0x13, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x42, 0x78
	.byte	0x74, 0x79, 0x00, 0xf1
	# Union (0x1360) {
	#   TypeLeafKind: LF_UNION (0x1506)
	#   MemberCount: 5
	#   Properties [ (0x608)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#     Sealed (0x400)
	#   ]
	#   FieldList: <field list> (0x135F)
	#   SizeOf: 16
	#   Name: std::_String_val<std::_Simple_types<char> >::_Bxty
	#   LinkageName: .?AT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x06, 0x15
	.byte	0x05, 0x00, 0x08, 0x06
	.byte	0x5f, 0x13, 0x00, 0x00
	.byte	0x10, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x3a, 0x3a, 0x5f
	.byte	0x42, 0x78, 0x74, 0x79
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x54, 0x5f, 0x42, 0x78
	.byte	0x74, 0x79, 0x40, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x40, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1361) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> >::_Bxty (0x1360)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x12DD)
	#   LineNumber: 1854
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x60, 0x13, 0x00, 0x00
	.byte	0xdd, 0x12, 0x00, 0x00
	.byte	0x3e, 0x07, 0x00, 0x00
	# Struct (0x1362) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::forward_iterator_tag
	#   LinkageName: .?AUforward_iterator_tag@std@@
	# }
	.byte	0x4e, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x66
	.byte	0x6f, 0x72, 0x77, 0x61
	.byte	0x72, 0x64, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x61, 0x67, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x1363) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::forward_iterator_tag (0x1362)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x62, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x1364) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1363)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::bidirectional_iterator_tag
	#   LinkageName: .?AUbidirectional_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x63, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x69, 0x64, 0x69, 0x72
	.byte	0x65, 0x63, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x61, 0x6c
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x62, 0x69
	.byte	0x64, 0x69, 0x72, 0x65
	.byte	0x63, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x61, 0x6c, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1365) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::bidirectional_iterator_tag (0x1364)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 406
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x64, 0x13, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x96, 0x01, 0x00, 0x00
	# FieldList (0x1366) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned long (0x22)
	#     FieldOffset: 0x0
	#     Name: _Wchar
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short (0x21)
	#     FieldOffset: 0x4
	#     Name: _Byte
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short (0x21)
	#     FieldOffset: 0x6
	#     Name: _State
	#   }
	# }
	.byte	0x3a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x22, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x57
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x21, 0x00, 0x00, 0x00
	.byte	0x04, 0x00, 0x5f, 0x42
	.byte	0x79, 0x74, 0x65, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x21, 0x00, 0x00, 0x00
	.byte	0x06, 0x00, 0x5f, 0x53
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x1367) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 3
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1366)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: _Mbstatet
	#   LinkageName: .?AU_Mbstatet@@
	# }
	.byte	0x2e, 0x00, 0x05, 0x15
	.byte	0x03, 0x00, 0x00, 0x02
	.byte	0x66, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x4d
	.byte	0x62, 0x73, 0x74, 0x61
	.byte	0x74, 0x65, 0x74, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x4d, 0x62, 0x73
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x74, 0x40, 0x40, 0x00
	# StringId (0x1368) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\corecrt.h
	# }
	.byte	0x52, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x57
	.byte	0x69, 0x6e, 0x64, 0x6f
	.byte	0x77, 0x73, 0x20, 0x4b
	.byte	0x69, 0x74, 0x73, 0x5c
	.byte	0x31, 0x30, 0x5c, 0x69
	.byte	0x6e, 0x63, 0x6c, 0x75
	.byte	0x64, 0x65, 0x5c, 0x31
	.byte	0x30, 0x2e, 0x30, 0x2e
	.byte	0x31, 0x37, 0x37, 0x36
	.byte	0x33, 0x2e, 0x30, 0x5c
	.byte	0x75, 0x63, 0x72, 0x74
	.byte	0x5c, 0x63, 0x6f, 0x72
	.byte	0x65, 0x63, 0x72, 0x74
	.byte	0x2e, 0x68, 0x00, 0xf1
	# UdtSourceLine (0x1369) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: _Mbstatet (0x1367)
	#   SourceFile: C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\corecrt.h (0x1368)
	#   LineNumber: 531
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x67, 0x13, 0x00, 0x00
	.byte	0x68, 0x13, 0x00, 0x00
	.byte	0x13, 0x02, 0x00, 0x00
	# ArgList (0x136A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x12E6)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xe6, 0x12, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x136B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x1349)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::allocator<char>&, const unsigned __int64) (0x136A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x49, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x6a, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x136C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x12E6)
	#     ArgType: const unsigned __int64 (0x108A)
	#     ArgType: const void* (0x1136)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe6, 0x12, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x36, 0x11, 0x00, 0x00
	# MemberFunction (0x136D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x1349)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<char>&, const unsigned __int64, const void*) (0x136C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x49, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x6c, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x136E) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::_Default_allocator_traits<std::allocator<char> >::(std::allocator<char>&, const unsigned __int64) (0x136B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::_Default_allocator_traits<std::allocator<char> >::(std::allocator<char>&, const unsigned __int64, const void*) (0x136D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x6b, 0x13, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x6d, 0x13, 0x00, 0x00
	# Modifier (0x136F) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: char* (0x670)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x1370) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x12E6)
	#     ArgType: const char* (0x136F)
	#     ArgType: const unsigned __int64 (0x108A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe6, 0x12, 0x00, 0x00
	.byte	0x6f, 0x13, 0x00, 0x00
	.byte	0x8a, 0x10, 0x00, 0x00
	# MemberFunction (0x1371) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x1349)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<char>&, const char*, const unsigned __int64) (0x1370)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x49, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x70, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1372) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x1349)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x1226)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x49, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x26, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1373) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char> (0x1220)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x1349)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x1226)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x49, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x26, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1374) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x136E
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Default_allocator_traits<std::allocator<char> >::(std::allocator<char>&, const char*, const unsigned __int64) (0x1371)
	#     Name: deallocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: unsigned __int64 std::_Default_allocator_traits<std::allocator<char> >::(const std::allocator<char>&) (0x1372)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::allocator<char> std::_Default_allocator_traits<std::allocator<char> >::(const std::allocator<char>&) (0x1373)
	#     Name: select_on_container_copy_construction
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x1220)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x1201)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void* (0x603)
	#     Name: void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const void* (0x1136)
	#     Name: const_void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x10A1)
	#     Name: propagate_on_container_copy_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x10A1)
	#     Name: propagate_on_container_swap
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x109E)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0xbe, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x6e, 0x13, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x71, 0x13, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x72, 0x13, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x73, 0x13, 0x00, 0x00
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x5f, 0x6f
	.byte	0x6e, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x06, 0x00, 0x00
	.byte	0x76, 0x6f, 0x69, 0x64
	.byte	0x5f, 0x70, 0x6f, 0x69
	.byte	0x6e, 0x74, 0x65, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x36, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x76, 0x6f
	.byte	0x69, 0x64, 0x5f, 0x70
	.byte	0x6f, 0x69, 0x6e, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x73
	.byte	0x77, 0x61, 0x70, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Struct (0x1375) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 17
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1374)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Default_allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x86, 0x00, 0x05, 0x15
	.byte	0x11, 0x00, 0x10, 0x02
	.byte	0x74, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x44
	.byte	0x65, 0x66, 0x61, 0x75
	.byte	0x6c, 0x74, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x40
	.byte	0x56, 0x3f, 0x24, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1376) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Default_allocator_traits<std::allocator<char> > (0x1375)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x113D)
	#   LineNumber: 835
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x75, 0x13, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x43, 0x03, 0x00, 0x00
	# Struct (0x1377) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::input_iterator_tag
	#   LinkageName: .?AUinput_iterator_tag@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x70, 0x75, 0x74
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x69, 0x6e
	.byte	0x70, 0x75, 0x74, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x1378) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::input_iterator_tag (0x1377)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x77, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x1379) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1378)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::forward_iterator_tag
	#   LinkageName: .?AUforward_iterator_tag@std@@
	# }
	.byte	0x4e, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x78, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x66
	.byte	0x6f, 0x72, 0x77, 0x61
	.byte	0x72, 0x64, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x61, 0x67, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x137A) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::forward_iterator_tag (0x1379)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 401
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x79, 0x13, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x91, 0x01, 0x00, 0x00
	# FieldList (0x137B) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	# }
	.byte	0x02, 0x00, 0x03, 0x12
	# Struct (0x137C) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x137B)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::input_iterator_tag
	#   LinkageName: .?AUinput_iterator_tag@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x00, 0x02
	.byte	0x7b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x70, 0x75, 0x74
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x69, 0x6e
	.byte	0x70, 0x75, 0x74, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x137D) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::input_iterator_tag (0x137C)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 393
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x7c, 0x13, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x89, 0x01, 0x00, 0x00
	# FuncId (0x137E) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl::details (0x11EA)
	#   FunctionType: void (gsl::fail_fast&&) (0x11EE)
	#   Name: throw_exception
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0xea, 0x11, 0x00, 0x00
	.byte	0xee, 0x11, 0x00, 0x00
	.byte	0x74, 0x68, 0x72, 0x6f
	.byte	0x77, 0x5f, 0x65, 0x78
	.byte	0x63, 0x65, 0x70, 0x74
	.byte	0x69, 0x6f, 0x6e, 0x00
	# MemberFuncId (0x137F) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x11EB)
	#   FunctionType: void gsl::fail_fast::(const char* const) (0x11F5)
	#   Name: fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0xf5, 0x11, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# MemberFunction (0x1380) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x11EB)
	#   ThisType: gsl::fail_fast* (0x11F1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0xf1, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1381) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x11EB)
	#   FunctionType: void gsl::fail_fast::() (0x1380)
	#   Name: ~fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x80, 0x13, 0x00, 0x00
	.byte	0x7e, 0x66, 0x61, 0x69
	.byte	0x6c, 0x5f, 0x66, 0x61
	.byte	0x73, 0x74, 0x00, 0xf1
	# MemberFuncId (0x1382) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<0> (0x11D6)
	#   FunctionType: __int64 gsl::details::extent_type<0>::() (0x11DD)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xd6, 0x11, 0x00, 0x00
	.byte	0xdd, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x1383) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: std
	# }
	.byte	0x0a, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x00
	# Pointer (0x1384) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::fail_fast (0x11EB)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1385) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::fail_fast& (0x1384)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x84, 0x13, 0x00, 0x00
	# Procedure (0x1386) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::fail_fast&& (0x11EC)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::fail_fast&) (0x1385)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0xec, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x85, 0x13, 0x00, 0x00
	# FuncId (0x1387) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: gsl::fail_fast&& (gsl::fail_fast&) (0x1386)
	#   Name: forward
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x86, 0x13, 0x00, 0x00
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x00
	# MemberFunction (0x1388) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x11EB)
	#   ThisType: gsl::fail_fast* (0x11F1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::fail_fast&&) (0x11ED)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0xf1, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xed, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1389) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x11EB)
	#   FunctionType: void gsl::fail_fast::(gsl::fail_fast&&) (0x1388)
	#   Name: fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x88, 0x13, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Modifier (0x138A) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::fail_fast (0x11EB)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x138B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::fail_fast (0x138A)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8a, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x138C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::fail_fast& (0x138B)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x8b, 0x13, 0x00, 0x00
	# MemberFunction (0x138D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x11EB)
	#   ThisType: gsl::fail_fast* (0x11F1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::fail_fast&) (0x138C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0xf1, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x8c, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x138E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x11EB)
	#   FunctionType: void gsl::fail_fast::(const gsl::fail_fast&) (0x138D)
	#   Name: fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x8d, 0x13, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Modifier (0x138F) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::logic_error (0x11F0)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1390) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::logic_error (0x138F)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8f, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1391) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::logic_error& (0x1390)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x90, 0x13, 0x00, 0x00
	# MemberFunction (0x1392) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x11F0)
	#   ThisType: std::logic_error* (0x11FB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::logic_error&) (0x1391)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0xfb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x91, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1393) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x11F0)
	#   FunctionType: void std::logic_error::(const std::logic_error&) (0x1392)
	#   Name: logic_error
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0x92, 0x13, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x1394) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x11FA)
	#   FunctionType: void std::exception::(const std::exception&) (0x1213)
	#   Name: exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x13, 0x12, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# Pointer (0x1395) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::logic_error (0x11F0)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x1396) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::logic_error&& (0x1395)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x95, 0x13, 0x00, 0x00
	# MemberFunction (0x1397) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x11F0)
	#   ThisType: std::logic_error* (0x11FB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::logic_error&&) (0x1396)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0xfb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x96, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1398) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x11F0)
	#   FunctionType: void std::logic_error::(std::logic_error&&) (0x1397)
	#   Name: logic_error
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0x97, 0x13, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x1399) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x11FA)
	#   FunctionType: const char* std::exception::() (0x1218)
	#   Name: what
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x18, 0x12, 0x00, 0x00
	.byte	0x77, 0x68, 0x61, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x139A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x11F0)
	#   ThisType: std::logic_error* (0x11FB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0xfb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x139B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x11F0)
	#   FunctionType: void std::logic_error::() (0x139A)
	#   Name: ~logic_error
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0x9a, 0x13, 0x00, 0x00
	.byte	0x7e, 0x6c, 0x6f, 0x67
	.byte	0x69, 0x63, 0x5f, 0x65
	.byte	0x72, 0x72, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x139C) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x11FA)
	#   FunctionType: void std::exception::() (0x120C)
	#   Name: ~exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x0c, 0x12, 0x00, 0x00
	.byte	0x7e, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x00, 0xf1
	# MemberFuncId (0x139D) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x11F0)
	#   FunctionType: void std::logic_error::(const char*) (0x1203)
	#   Name: logic_error
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0x03, 0x12, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x139E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x11FA)
	#   FunctionType: void std::exception::(const char* const) (0x120D)
	#   Name: exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x0d, 0x12, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x139F) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   FunctionType: int* gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x103B)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x3b, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x13A0) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x13A1) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int* (0x104B)
	#     ArgType: gsl::details::extent_type<0> (0x11D6)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0xd6, 0x11, 0x00, 0x00
	# MemberFunction (0x13A2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   ThisType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x13A0)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int*, gsl::details::extent_type<0>) (0x13A1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0xa0, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xa1, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x13A3) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   FunctionType: void gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(const int*, gsl::details::extent_type<0>) (0x13A2)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0xa2, 0x13, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x13A4) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   FunctionType: const int* gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x1076)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x76, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x13A5) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: gsl
	# }
	.byte	0x0a, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x67, 0x73, 0x6c, 0x00
	# ArgList (0x13A6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# Procedure (0x13A7) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (unsigned __int64) (0x13A6)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa6, 0x13, 0x00, 0x00
	# FuncId (0x13A8) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl (0x13A5)
	#   FunctionType: __int64 (unsigned __int64) (0x13A7)
	#   Name: narrow
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0xa5, 0x13, 0x00, 0x00
	.byte	0xa7, 0x13, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x00, 0xf1
	# MemberFuncId (0x13A9) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   FunctionType: unsigned __int64 std::vector<int,std::allocator<int> >::() (0x10D7)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x13AA) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   FunctionType: int* std::vector<int,std::allocator<int> >::() (0x10CA)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x13AB) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: void gsl::span<int,-1>::(int*, __int64) (0x1008)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x08, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x13AC) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: unsigned __int64 (0x23)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x13AD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: unsigned __int64& (0x13AC)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xac, 0x13, 0x00, 0x00
	# Procedure (0x13AE) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (unsigned __int64&) (0x13AD)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xad, 0x13, 0x00, 0x00
	# FuncId (0x13AF) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl (0x13A5)
	#   FunctionType: __int64 (unsigned __int64&) (0x13AE)
	#   Name: narrow_cast
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0xa5, 0x13, 0x00, 0x00
	.byte	0xae, 0x13, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x5f, 0x63
	.byte	0x61, 0x73, 0x74, 0x00
	# Struct (0x13B0) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::narrowing_error
	#   LinkageName: .?AUnarrowing_error@gsl@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x6e
	.byte	0x61, 0x72, 0x72, 0x6f
	.byte	0x77, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x6e
	.byte	0x61, 0x72, 0x72, 0x6f
	.byte	0x77, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x13B1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::narrowing_error (0x13B0)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xb0, 0x13, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x13B2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::narrowing_error&& (0x13B1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xb1, 0x13, 0x00, 0x00
	# Procedure (0x13B3) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::narrowing_error&&) (0x13B2)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xb2, 0x13, 0x00, 0x00
	# FieldList (0x13B4) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::exception (0x11FA)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x13B5) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x13B4)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x11EF)
	#   SizeOf: 24
	#   Name: gsl::narrowing_error
	#   LinkageName: .?AUnarrowing_error@gsl@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0xb4, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0xef, 0x11, 0x00, 0x00
	.byte	0x18, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x6e
	.byte	0x61, 0x72, 0x72, 0x6f
	.byte	0x77, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x6e
	.byte	0x61, 0x72, 0x72, 0x6f
	.byte	0x77, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x13B6) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\projects\gsl\include\gsl\gsl_util
	# }
	.byte	0x2e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x70
	.byte	0x72, 0x6f, 0x6a, 0x65
	.byte	0x63, 0x74, 0x73, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5f
	.byte	0x75, 0x74, 0x69, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x13B7) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::narrowing_error (0x13B5)
	#   SourceFile: C:\projects\gsl\include\gsl\gsl_util (0x13B6)
	#   LineNumber: 103
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xb5, 0x13, 0x00, 0x00
	.byte	0xb6, 0x13, 0x00, 0x00
	.byte	0x67, 0x00, 0x00, 0x00
	# FuncId (0x13B8) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl::details (0x11EA)
	#   FunctionType: void (gsl::narrowing_error&&) (0x13B3)
	#   Name: throw_exception
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0xea, 0x11, 0x00, 0x00
	.byte	0xb3, 0x13, 0x00, 0x00
	.byte	0x74, 0x68, 0x72, 0x6f
	.byte	0x77, 0x5f, 0x65, 0x78
	.byte	0x63, 0x65, 0x70, 0x74
	.byte	0x69, 0x6f, 0x6e, 0x00
	# Pointer (0x13B9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::narrowing_error (0x13B0)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xb0, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x13BA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::narrowing_error (0x13B0)
	#   ThisType: gsl::narrowing_error* (0x13B9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb0, 0x13, 0x00, 0x00
	.byte	0xb9, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x13BB) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::narrowing_error (0x13B0)
	#   FunctionType: void gsl::narrowing_error::() (0x13BA)
	#   Name: narrowing_error
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0xb0, 0x13, 0x00, 0x00
	.byte	0xba, 0x13, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x13BC) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::narrowing_error (0x13B0)
	#   FunctionType: void gsl::narrowing_error::() (0x13BA)
	#   Name: ~narrowing_error
	# }
	.byte	0x1e, 0x00, 0x02, 0x16
	.byte	0xb0, 0x13, 0x00, 0x00
	.byte	0xba, 0x13, 0x00, 0x00
	.byte	0x7e, 0x6e, 0x61, 0x72
	.byte	0x72, 0x6f, 0x77, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x65
	.byte	0x72, 0x72, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Procedure (0x13BD) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned __int64& (0x13AC)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (unsigned __int64&) (0x13AD)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0xac, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xad, 0x13, 0x00, 0x00
	# FuncId (0x13BE) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: unsigned __int64& (unsigned __int64&) (0x13BD)
	#   Name: forward
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0xbd, 0x13, 0x00, 0x00
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x00
	# Pointer (0x13BF) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::narrowing_error (0x13B0)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xb0, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x13C0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::narrowing_error& (0x13BF)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xbf, 0x13, 0x00, 0x00
	# Procedure (0x13C1) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::narrowing_error&& (0x13B1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::narrowing_error&) (0x13C0)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0xb1, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x13, 0x00, 0x00
	# FuncId (0x13C2) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: gsl::narrowing_error&& (gsl::narrowing_error&) (0x13C1)
	#   Name: forward
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0xc1, 0x13, 0x00, 0x00
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x00
	# MemberFunction (0x13C3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::narrowing_error (0x13B0)
	#   ThisType: gsl::narrowing_error* (0x13B9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::narrowing_error&&) (0x13B2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb0, 0x13, 0x00, 0x00
	.byte	0xb9, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xb2, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x13C4) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::narrowing_error (0x13B0)
	#   FunctionType: void gsl::narrowing_error::(gsl::narrowing_error&&) (0x13C3)
	#   Name: narrowing_error
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0xb0, 0x13, 0x00, 0x00
	.byte	0xc3, 0x13, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# Modifier (0x13C5) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::narrowing_error (0x13B0)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xb0, 0x13, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x13C6) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::narrowing_error (0x13C5)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc5, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x13C7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::narrowing_error& (0x13C6)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xc6, 0x13, 0x00, 0x00
	# MemberFunction (0x13C8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::narrowing_error (0x13B0)
	#   ThisType: gsl::narrowing_error* (0x13B9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::narrowing_error&) (0x13C7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb0, 0x13, 0x00, 0x00
	.byte	0xb9, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc7, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x13C9) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::narrowing_error (0x13B0)
	#   FunctionType: void gsl::narrowing_error::(const gsl::narrowing_error&) (0x13C8)
	#   Name: narrowing_error
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0xb0, 0x13, 0x00, 0x00
	.byte	0xc8, 0x13, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x13CA) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x11FA)
	#   FunctionType: void std::exception::() (0x120C)
	#   Name: exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x0c, 0x12, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x13CB) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: const int*& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1120)
	#   Name: _Mylast
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x20, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x6c
	.byte	0x61, 0x73, 0x74, 0x00
	# MemberFuncId (0x13CC) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: const int*& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1120)
	#   Name: _Myfirst
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x20, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x66
	.byte	0x69, 0x72, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x13CD) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: const std::_Vector_val<std::_Simple_types<int> >& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1118)
	#   Name: _Get_data
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x18, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x64, 0x61, 0x74
	.byte	0x61, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x13CE) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#   FunctionType: const std::_Vector_val<std::_Simple_types<int> >& std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::() (0x1164)
	#   Name: _Get_second
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x64, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x73, 0x65, 0x63
	.byte	0x6f, 0x6e, 0x64, 0x00
	# ArgList (0x13CF) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: int* (0x674)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	# Procedure (0x13D0) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int*) (0x13CF)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xcf, 0x13, 0x00, 0x00
	# FuncId (0x13D1) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: int* (int*) (0x13D0)
	#   Name: _Unfancy_maybe_null
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0xd0, 0x13, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x66
	.byte	0x61, 0x6e, 0x63, 0x79
	.byte	0x5f, 0x6d, 0x61, 0x79
	.byte	0x62, 0x65, 0x5f, 0x6e
	.byte	0x75, 0x6c, 0x6c, 0x00
	# MemberFuncId (0x13D2) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: int*& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x111E)
	#   Name: _Myfirst
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x1e, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x66
	.byte	0x69, 0x72, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x13D3) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: std::_Vector_val<std::_Simple_types<int> >& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1115)
	#   Name: _Get_data
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x15, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x64, 0x61, 0x74
	.byte	0x61, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x13D4) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#   FunctionType: std::_Vector_val<std::_Simple_types<int> >& std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::() (0x1163)
	#   Name: _Get_second
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x63, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x73, 0x65, 0x63
	.byte	0x6f, 0x6e, 0x64, 0x00
	# MemberFunction (0x13D5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   ThisType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x11E2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, __int64) (0x1007)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0xe2, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x07, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x13D6) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   FunctionType: void gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(int*, __int64) (0x13D5)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0xd5, 0x13, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x13D7) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   FunctionType: void gsl::details::extent_type<-1>::(__int64) (0x1040)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x40, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# MemberFuncId (0x13D8) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: bool gsl::span<int,-1>::(__int64, __int64) (0x1030)
	#   Name: CheckRange
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x30, 0x10, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	# Pointer (0x13D9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: __int64 (0x13)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x13DA) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: __int64& (0x13D9)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xd9, 0x13, 0x00, 0x00
	# Procedure (0x13DB) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned __int64 (0x23)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64&) (0x13DA)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xda, 0x13, 0x00, 0x00
	# FuncId (0x13DC) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl (0x13A5)
	#   FunctionType: unsigned __int64 (__int64&) (0x13DB)
	#   Name: narrow_cast
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0xa5, 0x13, 0x00, 0x00
	.byte	0xdb, 0x13, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x5f, 0x63
	.byte	0x61, 0x73, 0x74, 0x00
	# Procedure (0x13DD) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64& (0x13D9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64&) (0x13DA)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0xd9, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xda, 0x13, 0x00, 0x00
	# FuncId (0x13DE) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: __int64& (__int64&) (0x13DD)
	#   Name: forward
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0xdd, 0x13, 0x00, 0x00
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x00
	# MemberFuncId (0x13DF) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::(const std::allocator<int>&) (0x10FB)
	#   Name: _Vector_alloc
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xfb, 0x10, 0x00, 0x00
	.byte	0x5f, 0x56, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x00, 0xf2, 0xf1
	# ArgList (0x13E0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const int* (0x104B)
	#     ArgType: const int* (0x104B)
	#     ArgType: std::forward_iterator_tag (0x1362)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x62, 0x13, 0x00, 0x00
	# MemberFunction (0x13E1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const int*, const int*, std::forward_iterator_tag) (0x13E0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xe0, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x13E2) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   FunctionType: void std::vector<int,std::allocator<int> >::(const int*, const int*, std::forward_iterator_tag) (0x13E1)
	#   Name: _Range_construct_or_tidy
	# }
	.byte	0x26, 0x00, 0x02, 0x16
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xe1, 0x13, 0x00, 0x00
	.byte	0x5f, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x5f, 0x63
	.byte	0x6f, 0x6e, 0x73, 0x74
	.byte	0x72, 0x75, 0x63, 0x74
	.byte	0x5f, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x69, 0x64, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x13E3) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::initializer_list<int> (0x108F)
	#   FunctionType: const int* std::initializer_list<int>::() (0x1145)
	#   Name: end
	# }
	.byte	0x0e, 0x00, 0x02, 0x16
	.byte	0x8f, 0x10, 0x00, 0x00
	.byte	0x45, 0x11, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	# MemberFuncId (0x13E4) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::initializer_list<int> (0x108F)
	#   FunctionType: const int* std::initializer_list<int>::() (0x1145)
	#   Name: begin
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x8f, 0x10, 0x00, 0x00
	.byte	0x45, 0x11, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x13E5) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x10FA)
	#   Name: ~_Vector_alloc
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x56, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x00, 0xf1
	# Procedure (0x13E6) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: const std::allocator<int>& (0x1087)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<int>&) (0x1088)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x87, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x88, 0x10, 0x00, 0x00
	# FuncId (0x13E7) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: const std::allocator<int>& (const std::allocator<int>&) (0x13E6)
	#   Name: forward
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0xe6, 0x13, 0x00, 0x00
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x00
	# Struct (0x13E8) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_One_then_variadic_args_t
	#   LinkageName: .?AU_One_then_variadic_args_t@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x4f, 0x6e, 0x65, 0x5f
	.byte	0x74, 0x68, 0x65, 0x6e
	.byte	0x5f, 0x76, 0x61, 0x72
	.byte	0x69, 0x61, 0x64, 0x69
	.byte	0x63, 0x5f, 0x61, 0x72
	.byte	0x67, 0x73, 0x5f, 0x74
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x4f, 0x6e
	.byte	0x65, 0x5f, 0x74, 0x68
	.byte	0x65, 0x6e, 0x5f, 0x76
	.byte	0x61, 0x72, 0x69, 0x61
	.byte	0x64, 0x69, 0x63, 0x5f
	.byte	0x61, 0x72, 0x67, 0x73
	.byte	0x5f, 0x74, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x13E9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_One_then_variadic_args_t (0x13E8)
	#     ArgType: const std::allocator<int>& (0x1087)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xe8, 0x13, 0x00, 0x00
	.byte	0x87, 0x10, 0x00, 0x00
	# MemberFunction (0x13EA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#   ThisType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>* (0x115D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_One_then_variadic_args_t, const std::allocator<int>&) (0x13E9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x5d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xe9, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x13EB) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x137B)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_One_then_variadic_args_t
	#   LinkageName: .?AU_One_then_variadic_args_t@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x00, 0x02
	.byte	0x7b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x4f, 0x6e, 0x65, 0x5f
	.byte	0x74, 0x68, 0x65, 0x6e
	.byte	0x5f, 0x76, 0x61, 0x72
	.byte	0x69, 0x61, 0x64, 0x69
	.byte	0x63, 0x5f, 0x61, 0x72
	.byte	0x67, 0x73, 0x5f, 0x74
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x4f, 0x6e
	.byte	0x65, 0x5f, 0x74, 0x68
	.byte	0x65, 0x6e, 0x5f, 0x76
	.byte	0x61, 0x72, 0x69, 0x61
	.byte	0x64, 0x69, 0x63, 0x5f
	.byte	0x61, 0x72, 0x67, 0x73
	.byte	0x5f, 0x74, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x13EC) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_One_then_variadic_args_t (0x13EB)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 258
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xeb, 0x13, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x02, 0x01, 0x00, 0x00
	# MemberFuncId (0x13ED) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#   FunctionType: void std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::(std::_One_then_variadic_args_t, const std::allocator<int>&) (0x13EA)
	#   Name: _Compressed_pair
	# }
	.byte	0x1e, 0x00, 0x02, 0x16
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0xea, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6d
	.byte	0x70, 0x72, 0x65, 0x73
	.byte	0x73, 0x65, 0x64, 0x5f
	.byte	0x70, 0x61, 0x69, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x13EE) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x10FA)
	#   Name: _Alloc_proxy
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x13EF) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_val<std::_Simple_types<int> > (0x1113)
	#   FunctionType: void std::_Vector_val<std::_Simple_types<int> >::() (0x1182)
	#   Name: _Vector_val
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x13, 0x11, 0x00, 0x00
	.byte	0x82, 0x11, 0x00, 0x00
	.byte	0x5f, 0x56, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x00
	# MemberFuncId (0x13F0) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Container_base12 (0x1172)
	#   FunctionType: void std::_Container_base12::() (0x11B4)
	#   Name: _Container_base12
	# }
	.byte	0x1e, 0x00, 0x02, 0x16
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0xb4, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x31
	.byte	0x32, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x13F1) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: std::allocator<int>& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1110)
	#   Name: _Getal
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x61, 0x6c, 0x00, 0xf1
	# MemberFunction (0x13F2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1122)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x1191)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<int>&) (0x1088)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x88, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x13F3) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1122)
	#   FunctionType: void std::allocator<std::_Container_proxy>::(const std::allocator<int>&) (0x13F2)
	#   Name: allocator
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0xf2, 0x13, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	# ArgList (0x13F4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Container_proxy* (0x1106)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x06, 0x11, 0x00, 0x00
	# Procedure (0x13F5) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: std::_Container_proxy* (0x1106)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Container_proxy*) (0x13F4)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf4, 0x13, 0x00, 0x00
	# FuncId (0x13F6) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: std::_Container_proxy* (std::_Container_proxy*) (0x13F5)
	#   Name: _Unfancy
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0xf5, 0x13, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x66
	.byte	0x61, 0x6e, 0x63, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x13F7) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1122)
	#   FunctionType: std::_Container_proxy* std::allocator<std::_Container_proxy>::(const unsigned __int64) (0x1199)
	#   Name: allocate
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x99, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x13F8) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: std::_Container_proxy*& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1108)
	#   Name: _Myproxy
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x08, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x13F9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy (0x1105)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x05, 0x11, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x13FA) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<std::_Container_proxy>& (0x11C1)
	#     ArgType: std::_Container_proxy* const (0x1109)
	#     ArgType: std::_Container_proxy&& (0x13F9)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	.byte	0x09, 0x11, 0x00, 0x00
	.byte	0xf9, 0x13, 0x00, 0x00
	# MemberFunction (0x13FB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x11A0)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<std::_Container_proxy>&, std::_Container_proxy* const, std::_Container_proxy&&) (0x13FA)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xfa, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x13FC) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x11A0)
	#   FunctionType: void std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(std::allocator<std::_Container_proxy>&, std::_Container_proxy* const, std::_Container_proxy&&) (0x13FB)
	#   Name: construct
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0xfb, 0x13, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x72, 0x75, 0x63
	.byte	0x74, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x13FD) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Container_proxy (0x1105)
	#   FunctionType: void std::_Container_proxy::() (0x117D)
	#   Name: _Container_proxy
	# }
	.byte	0x1e, 0x00, 0x02, 0x16
	.byte	0x05, 0x11, 0x00, 0x00
	.byte	0x7d, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x13FE) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Vector_val<std::_Simple_types<int> >& (0x1114)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x14, 0x11, 0x00, 0x00
	# Procedure (0x13FF) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: std::_Vector_val<std::_Simple_types<int> >* (0x1181)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Vector_val<std::_Simple_types<int> >&) (0x13FE)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x81, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xfe, 0x13, 0x00, 0x00
	# FuncId (0x1400) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: std::_Vector_val<std::_Simple_types<int> >* (std::_Vector_val<std::_Simple_types<int> >&) (0x13FF)
	#   Name: addressof
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0xff, 0x13, 0x00, 0x00
	.byte	0x61, 0x64, 0x64, 0x72
	.byte	0x65, 0x73, 0x73, 0x6f
	.byte	0x66, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x1401) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#   FunctionType: std::allocator<int>& std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::() (0x115E)
	#   Name: _Get_first
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x5e, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	# Procedure (0x1402) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void* (0x603)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	# FuncId (0x1403) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: void* (const unsigned __int64) (0x1402)
	#   Name: _Allocate
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x02, 0x14, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x65, 0x00, 0xf2, 0xf1
	# Procedure (0x1404) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned __int64 (0x23)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	# FuncId (0x1405) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: unsigned __int64 (const unsigned __int64) (0x1404)
	#   Name: _Get_size_of_n
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x04, 0x14, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x73, 0x69, 0x7a
	.byte	0x65, 0x5f, 0x6f, 0x66
	.byte	0x5f, 0x6e, 0x00, 0xf1
	# FuncId (0x1406) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: void* (const unsigned __int64) (0x1402)
	#   Name: _Allocate_manually_vector_aligned
	# }
	.byte	0x2e, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x02, 0x14, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6d, 0x61
	.byte	0x6e, 0x75, 0x61, 0x6c
	.byte	0x6c, 0x79, 0x5f, 0x76
	.byte	0x65, 0x63, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x61, 0x6c
	.byte	0x69, 0x67, 0x6e, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	# Pointer (0x1407) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: void (0x3)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# Struct (0x1408) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Default_allocate_traits
	#   LinkageName: .?AU_Default_allocate_traits@std@@
	# }
	.byte	0x56, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x44, 0x65, 0x66
	.byte	0x61, 0x75, 0x6c, 0x74
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x65, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x1409) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void* (0x603)
	#   ClassType: std::_Default_allocate_traits (0x1408)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x10C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x06, 0x00, 0x00
	.byte	0x08, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x140A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void* (0x603)
	#   ClassType: std::_Default_allocate_traits (0x1408)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const unsigned __int64) (0x12C7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x06, 0x00, 0x00
	.byte	0x08, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xc7, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x140B) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void* std::_Default_allocate_traits::(const unsigned __int64) (0x1409)
	#     Name: _Allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void* std::_Default_allocate_traits::(const unsigned __int64, const unsigned __int64) (0x140A)
	#     Name: _Allocate_aligned
	#   }
	# }
	.byte	0x32, 0x00, 0x03, 0x12
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x09, 0x14, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x0a, 0x14, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x65, 0x5f, 0x61, 0x6c
	.byte	0x69, 0x67, 0x6e, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	# Struct (0x140C) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 2
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x140B)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Default_allocate_traits
	#   LinkageName: .?AU_Default_allocate_traits@std@@
	# }
	.byte	0x56, 0x00, 0x05, 0x15
	.byte	0x02, 0x00, 0x00, 0x02
	.byte	0x0b, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x44, 0x65, 0x66
	.byte	0x61, 0x75, 0x6c, 0x74
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x65, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x140D) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Default_allocate_traits (0x140C)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x113D)
	#   LineNumber: 48
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x0c, 0x14, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	# MemberFuncId (0x140E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Default_allocate_traits (0x1408)
	#   FunctionType: void* std::_Default_allocate_traits::(const unsigned __int64) (0x1409)
	#   Name: _Allocate
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x08, 0x14, 0x00, 0x00
	.byte	0x09, 0x14, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x65, 0x00, 0xf2, 0xf1
	# Procedure (0x140F) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: std::_Container_proxy&& (0x13F9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Container_proxy&) (0x1189)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0xf9, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x89, 0x11, 0x00, 0x00
	# FuncId (0x1410) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: std::_Container_proxy&& (std::_Container_proxy&) (0x140F)
	#   Name: forward
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x0f, 0x14, 0x00, 0x00
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x00
	# MemberFuncId (0x1411) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   FunctionType: bool std::vector<int,std::allocator<int> >::(const unsigned __int64) (0x10ED)
	#   Name: _Buy
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xed, 0x10, 0x00, 0x00
	.byte	0x5f, 0x42, 0x75, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# FuncId (0x1412) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: unsigned __int64 (const unsigned __int64) (0x1404)
	#   Name: _Convert_size
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x04, 0x14, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x76, 0x65, 0x72, 0x74
	.byte	0x5f, 0x73, 0x69, 0x7a
	.byte	0x65, 0x00, 0xf2, 0xf1
	# Procedure (0x1413) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int*, const int*) (0x104E)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x4e, 0x10, 0x00, 0x00
	# FuncId (0x1414) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: __int64 (const int*, const int*) (0x1413)
	#   Name: distance
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x13, 0x14, 0x00, 0x00
	.byte	0x64, 0x69, 0x73, 0x74
	.byte	0x61, 0x6e, 0x63, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1415) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const int* (0x104B)
	#     ArgType: const int* (0x104B)
	#     ArgType: int* (0x674)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	# MemberFunction (0x1416) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   ThisType: std::vector<int,std::allocator<int> >* (0x1083)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const int*, const int*, int*) (0x1415)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x15, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1417) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   FunctionType: int* std::vector<int,std::allocator<int> >::(const int*, const int*, int*) (0x1416)
	#   Name: _Ucopy
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x16, 0x14, 0x00, 0x00
	.byte	0x5f, 0x55, 0x63, 0x6f
	.byte	0x70, 0x79, 0x00, 0xf1
	# MemberFuncId (0x1418) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: int*& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x111E)
	#   Name: _Mylast
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x1e, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x6c
	.byte	0x61, 0x73, 0x74, 0x00
	# MemberFuncId (0x1419) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   FunctionType: void std::vector<int,std::allocator<int> >::() (0x1084)
	#   Name: _Tidy
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x84, 0x10, 0x00, 0x00
	.byte	0x5f, 0x54, 0x69, 0x64
	.byte	0x79, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x141A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: int*& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x111E)
	#   Name: _Myend
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x1e, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	# MemberFuncId (0x141B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   FunctionType: unsigned __int64 std::vector<int,std::allocator<int> >::() (0x10D7)
	#   Name: max_size
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x141C) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   FunctionType: void std::vector<int,std::allocator<int> >::() (0x10F1)
	#   Name: _Xlength
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0x5f, 0x58, 0x6c, 0x65
	.byte	0x6e, 0x67, 0x74, 0x68
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x141D) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::allocator<int> (0x1085)
	#   FunctionType: int* std::allocator<int>::(const unsigned __int64) (0x1134)
	#   Name: allocate
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x141E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const unsigned __int64 (0x108A)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x141F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64& (0x141E)
	#     ArgType: const unsigned __int64& (0x141E)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x1e, 0x14, 0x00, 0x00
	.byte	0x1e, 0x14, 0x00, 0x00
	# Procedure (0x1420) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: const unsigned __int64& (0x141E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64&, const unsigned __int64&) (0x141F)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x1e, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x1f, 0x14, 0x00, 0x00
	# FuncId (0x1421) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: const unsigned __int64& (const unsigned __int64&, const unsigned __int64&) (0x1420)
	#   Name: _Min_value
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x20, 0x14, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x69, 0x6e
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x75, 0x65, 0x00, 0xf1
	# MemberFuncId (0x1422) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Default_allocator_traits<std::allocator<int> > (0x1159)
	#   FunctionType: unsigned __int64 std::_Default_allocator_traits<std::allocator<int> >::(const std::allocator<int>&) (0x11AE)
	#   Name: max_size
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x59, 0x11, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1423) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: const std::allocator<int>& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1111)
	#   Name: _Getal
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x11, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x61, 0x6c, 0x00, 0xf1
	# Class (0x1424) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::numeric_limits<long long>
	#   LinkageName: .?AV?$numeric_limits@_J@std@@
	# }
	.byte	0x52, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x6e
	.byte	0x75, 0x6d, 0x65, 0x72
	.byte	0x69, 0x63, 0x5f, 0x6c
	.byte	0x69, 0x6d, 0x69, 0x74
	.byte	0x73, 0x3c, 0x6c, 0x6f
	.byte	0x6e, 0x67, 0x20, 0x6c
	.byte	0x6f, 0x6e, 0x67, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x6e
	.byte	0x75, 0x6d, 0x65, 0x72
	.byte	0x69, 0x63, 0x5f, 0x6c
	.byte	0x69, 0x6d, 0x69, 0x74
	.byte	0x73, 0x40, 0x5f, 0x4a
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Struct (0x1425) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Num_int_base
	#   LinkageName: .?AU_Num_int_base@std@@
	# }
	.byte	0x42, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x4e, 0x75, 0x6d, 0x5f
	.byte	0x69, 0x6e, 0x74, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x4e, 0x75
	.byte	0x6d, 0x5f, 0x69, 0x6e
	.byte	0x74, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x1426) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: std::numeric_limits<long long> (0x1424)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x24, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1427) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Num_int_base (0x1425)
	#     BaseOffset: 0x0
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: is_signed
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x104A)
	#     Name: digits
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x104A)
	#     Name: digits10
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: __int64 std::numeric_limits<long long>::() (0x1426)
	#     Name: min
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: __int64 std::numeric_limits<long long>::() (0x1426)
	#     Name: max
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: __int64 std::numeric_limits<long long>::() (0x1426)
	#     Name: lowest
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: __int64 std::numeric_limits<long long>::() (0x1426)
	#     Name: epsilon
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: __int64 std::numeric_limits<long long>::() (0x1426)
	#     Name: round_error
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: __int64 std::numeric_limits<long long>::() (0x1426)
	#     Name: denorm_min
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: __int64 std::numeric_limits<long long>::() (0x1426)
	#     Name: infinity
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: __int64 std::numeric_limits<long long>::() (0x1426)
	#     Name: quiet_NaN
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: __int64 std::numeric_limits<long long>::() (0x1426)
	#     Name: signaling_NaN
	#   }
	# }
	.byte	0xe6, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x25, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x73
	.byte	0x69, 0x67, 0x6e, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x64, 0x69, 0x67, 0x69
	.byte	0x74, 0x73, 0x00, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x64, 0x69, 0x67, 0x69
	.byte	0x74, 0x73, 0x31, 0x30
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x26, 0x14, 0x00, 0x00
	.byte	0x6d, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x26, 0x14, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x26, 0x14, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x77, 0x65
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x26, 0x14, 0x00, 0x00
	.byte	0x65, 0x70, 0x73, 0x69
	.byte	0x6c, 0x6f, 0x6e, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x26, 0x14, 0x00, 0x00
	.byte	0x72, 0x6f, 0x75, 0x6e
	.byte	0x64, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x26, 0x14, 0x00, 0x00
	.byte	0x64, 0x65, 0x6e, 0x6f
	.byte	0x72, 0x6d, 0x5f, 0x6d
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x26, 0x14, 0x00, 0x00
	.byte	0x69, 0x6e, 0x66, 0x69
	.byte	0x6e, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x26, 0x14, 0x00, 0x00
	.byte	0x71, 0x75, 0x69, 0x65
	.byte	0x74, 0x5f, 0x4e, 0x61
	.byte	0x4e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x26, 0x14, 0x00, 0x00
	.byte	0x73, 0x69, 0x67, 0x6e
	.byte	0x61, 0x6c, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x4e, 0x61
	.byte	0x4e, 0x00, 0xf2, 0xf1
	# Class (0x1428) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 13
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1427)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::numeric_limits<long long>
	#   LinkageName: .?AV?$numeric_limits@_J@std@@
	# }
	.byte	0x52, 0x00, 0x04, 0x15
	.byte	0x0d, 0x00, 0x00, 0x02
	.byte	0x27, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x6e
	.byte	0x75, 0x6d, 0x65, 0x72
	.byte	0x69, 0x63, 0x5f, 0x6c
	.byte	0x69, 0x6d, 0x69, 0x74
	.byte	0x73, 0x3c, 0x6c, 0x6f
	.byte	0x6e, 0x67, 0x20, 0x6c
	.byte	0x6f, 0x6e, 0x67, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x6e
	.byte	0x75, 0x6d, 0x65, 0x72
	.byte	0x69, 0x63, 0x5f, 0x6c
	.byte	0x69, 0x6d, 0x69, 0x74
	.byte	0x73, 0x40, 0x5f, 0x4a
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x1429) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\limits
	# }
	.byte	0x6e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x6c, 0x69, 0x6d, 0x69
	.byte	0x74, 0x73, 0x00, 0xf1
	# UdtSourceLine (0x142A) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::numeric_limits<long long> (0x1428)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\limits (0x1429)
	#   LineNumber: 883
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x28, 0x14, 0x00, 0x00
	.byte	0x29, 0x14, 0x00, 0x00
	.byte	0x73, 0x03, 0x00, 0x00
	# Struct (0x142B) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Num_base
	#   LinkageName: .?AU_Num_base@std@@
	# }
	.byte	0x3a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x4e, 0x75, 0x6d, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x4e, 0x75
	.byte	0x6d, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# FieldList (0x142C) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Num_base (0x142B)
	#     BaseOffset: 0x0
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: is_bounded
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: is_exact
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: is_integer
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: is_specialized
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x104A)
	#     Name: radix
	#   }
	# }
	.byte	0x72, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x2b, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x62
	.byte	0x6f, 0x75, 0x6e, 0x64
	.byte	0x65, 0x64, 0x00, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x65
	.byte	0x78, 0x61, 0x63, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x73
	.byte	0x70, 0x65, 0x63, 0x69
	.byte	0x61, 0x6c, 0x69, 0x7a
	.byte	0x65, 0x64, 0x00, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x72, 0x61, 0x64, 0x69
	.byte	0x78, 0x00, 0xf2, 0xf1
	# Struct (0x142D) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 6
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x142C)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Num_int_base
	#   LinkageName: .?AU_Num_int_base@std@@
	# }
	.byte	0x42, 0x00, 0x05, 0x15
	.byte	0x06, 0x00, 0x00, 0x02
	.byte	0x2c, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x4e, 0x75, 0x6d, 0x5f
	.byte	0x69, 0x6e, 0x74, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x4e, 0x75
	.byte	0x6d, 0x5f, 0x69, 0x6e
	.byte	0x74, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x142E) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Num_int_base (0x142D)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\limits (0x1429)
	#   LineNumber: 138
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x2d, 0x14, 0x00, 0x00
	.byte	0x29, 0x14, 0x00, 0x00
	.byte	0x8a, 0x00, 0x00, 0x00
	# FieldList (0x142F) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 18446744073709551615
	#     Name: denorm_indeterminate
	#   }
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 0
	#     Name: denorm_absent
	#   }
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 1
	#     Name: denorm_present
	#   }
	# }
	.byte	0x52, 0x00, 0x03, 0x12
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x0a, 0x80, 0xff, 0xff
	.byte	0xff, 0xff, 0xff, 0xff
	.byte	0xff, 0xff, 0x64, 0x65
	.byte	0x6e, 0x6f, 0x72, 0x6d
	.byte	0x5f, 0x69, 0x6e, 0x64
	.byte	0x65, 0x74, 0x65, 0x72
	.byte	0x6d, 0x69, 0x6e, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x00, 0x00, 0x64, 0x65
	.byte	0x6e, 0x6f, 0x72, 0x6d
	.byte	0x5f, 0x61, 0x62, 0x73
	.byte	0x65, 0x6e, 0x74, 0x00
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x01, 0x00, 0x64, 0x65
	.byte	0x6e, 0x6f, 0x72, 0x6d
	.byte	0x5f, 0x70, 0x72, 0x65
	.byte	0x73, 0x65, 0x6e, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Enum (0x1430) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 3
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   UnderlyingType: int (0x74)
	#   FieldListType: <field list> (0x142F)
	#   Name: std::float_denorm_style
	#   LinkageName: .?AW4float_denorm_style@std@@
	# }
	.byte	0x46, 0x00, 0x07, 0x15
	.byte	0x03, 0x00, 0x00, 0x02
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x2f, 0x14, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x66, 0x6c, 0x6f
	.byte	0x61, 0x74, 0x5f, 0x64
	.byte	0x65, 0x6e, 0x6f, 0x72
	.byte	0x6d, 0x5f, 0x73, 0x74
	.byte	0x79, 0x6c, 0x65, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x57
	.byte	0x34, 0x66, 0x6c, 0x6f
	.byte	0x61, 0x74, 0x5f, 0x64
	.byte	0x65, 0x6e, 0x6f, 0x72
	.byte	0x6d, 0x5f, 0x73, 0x74
	.byte	0x79, 0x6c, 0x65, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1431) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::float_denorm_style (0x1430)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\limits (0x1429)
	#   LineNumber: 22
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x30, 0x14, 0x00, 0x00
	.byte	0x29, 0x14, 0x00, 0x00
	.byte	0x16, 0x00, 0x00, 0x00
	# Modifier (0x1432) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::float_denorm_style (0x1430)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x30, 0x14, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# FieldList (0x1433) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 18446744073709551615
	#     Name: round_indeterminate
	#   }
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 0
	#     Name: round_toward_zero
	#   }
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 1
	#     Name: round_to_nearest
	#   }
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 2
	#     Name: round_toward_infinity
	#   }
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 3
	#     Name: round_toward_neg_infinity
	#   }
	# }
	.byte	0x92, 0x00, 0x03, 0x12
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x0a, 0x80, 0xff, 0xff
	.byte	0xff, 0xff, 0xff, 0xff
	.byte	0xff, 0xff, 0x72, 0x6f
	.byte	0x75, 0x6e, 0x64, 0x5f
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x74, 0x65, 0x72, 0x6d
	.byte	0x69, 0x6e, 0x61, 0x74
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x00, 0x00, 0x72, 0x6f
	.byte	0x75, 0x6e, 0x64, 0x5f
	.byte	0x74, 0x6f, 0x77, 0x61
	.byte	0x72, 0x64, 0x5f, 0x7a
	.byte	0x65, 0x72, 0x6f, 0x00
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x01, 0x00, 0x72, 0x6f
	.byte	0x75, 0x6e, 0x64, 0x5f
	.byte	0x74, 0x6f, 0x5f, 0x6e
	.byte	0x65, 0x61, 0x72, 0x65
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x02, 0x00, 0x72, 0x6f
	.byte	0x75, 0x6e, 0x64, 0x5f
	.byte	0x74, 0x6f, 0x77, 0x61
	.byte	0x72, 0x64, 0x5f, 0x69
	.byte	0x6e, 0x66, 0x69, 0x6e
	.byte	0x69, 0x74, 0x79, 0x00
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x03, 0x00, 0x72, 0x6f
	.byte	0x75, 0x6e, 0x64, 0x5f
	.byte	0x74, 0x6f, 0x77, 0x61
	.byte	0x72, 0x64, 0x5f, 0x6e
	.byte	0x65, 0x67, 0x5f, 0x69
	.byte	0x6e, 0x66, 0x69, 0x6e
	.byte	0x69, 0x74, 0x79, 0x00
	# Enum (0x1434) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 5
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   UnderlyingType: int (0x74)
	#   FieldListType: <field list> (0x1433)
	#   Name: std::float_round_style
	#   LinkageName: .?AW4float_round_style@std@@
	# }
	.byte	0x42, 0x00, 0x07, 0x15
	.byte	0x05, 0x00, 0x00, 0x02
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x33, 0x14, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x66, 0x6c, 0x6f
	.byte	0x61, 0x74, 0x5f, 0x72
	.byte	0x6f, 0x75, 0x6e, 0x64
	.byte	0x5f, 0x73, 0x74, 0x79
	.byte	0x6c, 0x65, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x57, 0x34
	.byte	0x66, 0x6c, 0x6f, 0x61
	.byte	0x74, 0x5f, 0x72, 0x6f
	.byte	0x75, 0x6e, 0x64, 0x5f
	.byte	0x73, 0x74, 0x79, 0x6c
	.byte	0x65, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1435) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::float_round_style (0x1434)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\limits (0x1429)
	#   LineNumber: 30
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x34, 0x14, 0x00, 0x00
	.byte	0x29, 0x14, 0x00, 0x00
	.byte	0x1e, 0x00, 0x00, 0x00
	# Modifier (0x1436) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::float_round_style (0x1434)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x34, 0x14, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# FieldList (0x1437) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::float_denorm_style (0x1432)
	#     Name: has_denorm
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: has_denorm_loss
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: has_infinity
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: has_quiet_NaN
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: has_signaling_NaN
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: is_bounded
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: is_exact
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: is_iec559
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: is_integer
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: is_modulo
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: is_signed
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: is_specialized
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: tinyness_before
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x114B)
	#     Name: traps
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::float_round_style (0x1436)
	#     Name: round_style
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x104A)
	#     Name: digits
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x104A)
	#     Name: digits10
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x104A)
	#     Name: max_digits10
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x104A)
	#     Name: max_exponent
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x104A)
	#     Name: max_exponent10
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x104A)
	#     Name: min_exponent
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x104A)
	#     Name: min_exponent10
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x104A)
	#     Name: radix
	#   }
	# }
	.byte	0xf2, 0x01, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x32, 0x14, 0x00, 0x00
	.byte	0x68, 0x61, 0x73, 0x5f
	.byte	0x64, 0x65, 0x6e, 0x6f
	.byte	0x72, 0x6d, 0x00, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x68, 0x61, 0x73, 0x5f
	.byte	0x64, 0x65, 0x6e, 0x6f
	.byte	0x72, 0x6d, 0x5f, 0x6c
	.byte	0x6f, 0x73, 0x73, 0x00
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x68, 0x61, 0x73, 0x5f
	.byte	0x69, 0x6e, 0x66, 0x69
	.byte	0x6e, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x68, 0x61, 0x73, 0x5f
	.byte	0x71, 0x75, 0x69, 0x65
	.byte	0x74, 0x5f, 0x4e, 0x61
	.byte	0x4e, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x68, 0x61, 0x73, 0x5f
	.byte	0x73, 0x69, 0x67, 0x6e
	.byte	0x61, 0x6c, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x4e, 0x61
	.byte	0x4e, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x62
	.byte	0x6f, 0x75, 0x6e, 0x64
	.byte	0x65, 0x64, 0x00, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x65
	.byte	0x78, 0x61, 0x63, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x69
	.byte	0x65, 0x63, 0x35, 0x35
	.byte	0x39, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x6d
	.byte	0x6f, 0x64, 0x75, 0x6c
	.byte	0x6f, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x73
	.byte	0x69, 0x67, 0x6e, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x73
	.byte	0x70, 0x65, 0x63, 0x69
	.byte	0x61, 0x6c, 0x69, 0x7a
	.byte	0x65, 0x64, 0x00, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x74, 0x69, 0x6e, 0x79
	.byte	0x6e, 0x65, 0x73, 0x73
	.byte	0x5f, 0x62, 0x65, 0x66
	.byte	0x6f, 0x72, 0x65, 0x00
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x74, 0x72, 0x61, 0x70
	.byte	0x73, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x36, 0x14, 0x00, 0x00
	.byte	0x72, 0x6f, 0x75, 0x6e
	.byte	0x64, 0x5f, 0x73, 0x74
	.byte	0x79, 0x6c, 0x65, 0x00
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x64, 0x69, 0x67, 0x69
	.byte	0x74, 0x73, 0x00, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x64, 0x69, 0x67, 0x69
	.byte	0x74, 0x73, 0x31, 0x30
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x64, 0x69, 0x67, 0x69
	.byte	0x74, 0x73, 0x31, 0x30
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x65, 0x78, 0x70, 0x6f
	.byte	0x6e, 0x65, 0x6e, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x65, 0x78, 0x70, 0x6f
	.byte	0x6e, 0x65, 0x6e, 0x74
	.byte	0x31, 0x30, 0x00, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x6d, 0x69, 0x6e, 0x5f
	.byte	0x65, 0x78, 0x70, 0x6f
	.byte	0x6e, 0x65, 0x6e, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x6d, 0x69, 0x6e, 0x5f
	.byte	0x65, 0x78, 0x70, 0x6f
	.byte	0x6e, 0x65, 0x6e, 0x74
	.byte	0x31, 0x30, 0x00, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x72, 0x61, 0x64, 0x69
	.byte	0x78, 0x00, 0xf2, 0xf1
	# Struct (0x1438) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 23
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1437)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Num_base
	#   LinkageName: .?AU_Num_base@std@@
	# }
	.byte	0x3a, 0x00, 0x05, 0x15
	.byte	0x17, 0x00, 0x00, 0x02
	.byte	0x37, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x4e, 0x75, 0x6d, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x4e, 0x75
	.byte	0x6d, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1439) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Num_base (0x1438)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\limits (0x1429)
	#   LineNumber: 40
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x38, 0x14, 0x00, 0x00
	.byte	0x29, 0x14, 0x00, 0x00
	.byte	0x28, 0x00, 0x00, 0x00
	# MemberFuncId (0x143A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::numeric_limits<long long> (0x1424)
	#   FunctionType: __int64 std::numeric_limits<long long>::() (0x1426)
	#   Name: max
	# }
	.byte	0x0e, 0x00, 0x02, 0x16
	.byte	0x24, 0x14, 0x00, 0x00
	.byte	0x26, 0x14, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x00
	# MemberFuncId (0x143B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> (0x10F8)
	#   FunctionType: const std::allocator<int>& std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::() (0x1161)
	#   Name: _Get_first
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x61, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	# ArgList (0x143C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const int* (0x104B)
	#     ArgType: const int* (0x104B)
	#     ArgType: std::random_access_iterator_tag (0x123D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x3d, 0x12, 0x00, 0x00
	# Procedure (0x143D) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const int*, const int*, std::random_access_iterator_tag) (0x143C)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x3c, 0x14, 0x00, 0x00
	# FuncId (0x143E) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: __int64 (const int*, const int*, std::random_access_iterator_tag) (0x143D)
	#   Name: _Distance1
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x3d, 0x14, 0x00, 0x00
	.byte	0x5f, 0x44, 0x69, 0x73
	.byte	0x74, 0x61, 0x6e, 0x63
	.byte	0x65, 0x31, 0x00, 0xf1
	# Pointer (0x143F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const int (0x104A)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# ArgList (0x1440) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const int* const (0x143F)
	#     ArgType: const int* const (0x143F)
	#     ArgType: int* (0x674)
	#     ArgType: std::allocator<int>& (0x10FC)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x3f, 0x14, 0x00, 0x00
	.byte	0x3f, 0x14, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	# Procedure (0x1441) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const int* const, const int* const, int*, std::allocator<int>&) (0x1440)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x40, 0x14, 0x00, 0x00
	# FuncId (0x1442) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: int* (const int* const, const int* const, int*, std::allocator<int>&) (0x1441)
	#   Name: _Uninitialized_copy
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x41, 0x14, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x69
	.byte	0x6e, 0x69, 0x74, 0x69
	.byte	0x61, 0x6c, 0x69, 0x7a
	.byte	0x65, 0x64, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x00
	# ArgList (0x1443) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const int* const (0x143F)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x3f, 0x14, 0x00, 0x00
	# Procedure (0x1444) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: const int* (0x104B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int* const) (0x1443)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x43, 0x14, 0x00, 0x00
	# FuncId (0x1445) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: const int* (const int* const) (0x1444)
	#   Name: _Get_unwrapped
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x44, 0x14, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x75, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x00, 0xf1
	# ArgList (0x1446) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* const (0x1131)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x31, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Procedure (0x1447) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int* const, __int64) (0x1446)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x46, 0x14, 0x00, 0x00
	# FuncId (0x1448) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: int* (int* const, __int64) (0x1447)
	#   Name: _Get_unwrapped_n
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x47, 0x14, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x75, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x5f, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x1449) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const int* const (0x143F)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x3f, 0x14, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x144A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int* const& (0x1449)
	#     ArgType: const int* const& (0x1449)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x49, 0x14, 0x00, 0x00
	.byte	0x49, 0x14, 0x00, 0x00
	# Procedure (0x144B) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int* const&, const int* const&) (0x144A)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x4a, 0x14, 0x00, 0x00
	# FuncId (0x144C) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: __int64 (const int* const&, const int* const&) (0x144B)
	#   Name: _Idl_distance
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x4b, 0x14, 0x00, 0x00
	.byte	0x5f, 0x49, 0x64, 0x6c
	.byte	0x5f, 0x64, 0x69, 0x73
	.byte	0x74, 0x61, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	# ArgList (0x144D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int*& (0x111D)
	#     ArgType: int* const (0x1131)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x1d, 0x11, 0x00, 0x00
	.byte	0x31, 0x11, 0x00, 0x00
	# Procedure (0x144E) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*&, int* const) (0x144D)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x4d, 0x14, 0x00, 0x00
	# FuncId (0x144F) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: void (int*&, int* const) (0x144E)
	#   Name: _Seek_wrapped
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x4e, 0x14, 0x00, 0x00
	.byte	0x5f, 0x53, 0x65, 0x65
	.byte	0x6b, 0x5f, 0x77, 0x72
	.byte	0x61, 0x70, 0x70, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	# Struct (0x1450) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Really_trivial_ptr_iterator_tag
	#   LinkageName: .?AU_Really_trivial_ptr_iterator_tag@std@@
	# }
	.byte	0x66, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x52, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x79, 0x5f, 0x74
	.byte	0x72, 0x69, 0x76, 0x69
	.byte	0x61, 0x6c, 0x5f, 0x70
	.byte	0x74, 0x72, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x61, 0x67, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x52, 0x65, 0x61
	.byte	0x6c, 0x6c, 0x79, 0x5f
	.byte	0x74, 0x72, 0x69, 0x76
	.byte	0x69, 0x61, 0x6c, 0x5f
	.byte	0x70, 0x74, 0x72, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# ArgList (0x1451) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 6
	#   Arguments [
	#     ArgType: const int* const (0x143F)
	#     ArgType: const int* const (0x143F)
	#     ArgType: int* const (0x1131)
	#     ArgType: std::allocator<int>& (0x10FC)
	#     ArgType: std::_Really_trivial_ptr_iterator_tag (0x1450)
	#     ArgType: std::integral_constant<bool,1> (0x109E)
	#   ]
	# }
	.byte	0x1e, 0x00, 0x01, 0x12
	.byte	0x06, 0x00, 0x00, 0x00
	.byte	0x3f, 0x14, 0x00, 0x00
	.byte	0x3f, 0x14, 0x00, 0x00
	.byte	0x31, 0x11, 0x00, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	.byte	0x50, 0x14, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	# Procedure (0x1452) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 6
	#   ArgListType: (const int* const, const int* const, int* const, std::allocator<int>&, std::_Really_trivial_ptr_iterator_tag, std::integral_constant<bool,1>) (0x1451)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x06, 0x00
	.byte	0x51, 0x14, 0x00, 0x00
	# Struct (0x1453) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Trivially_copyable_ptr_iterator_tag
	#   LinkageName: .?AU_Trivially_copyable_ptr_iterator_tag@std@@
	# }
	.byte	0x6e, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x54, 0x72, 0x69, 0x76
	.byte	0x69, 0x61, 0x6c, 0x6c
	.byte	0x79, 0x5f, 0x63, 0x6f
	.byte	0x70, 0x79, 0x61, 0x62
	.byte	0x6c, 0x65, 0x5f, 0x70
	.byte	0x74, 0x72, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x61, 0x67, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x54, 0x72, 0x69
	.byte	0x76, 0x69, 0x61, 0x6c
	.byte	0x6c, 0x79, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x61
	.byte	0x62, 0x6c, 0x65, 0x5f
	.byte	0x70, 0x74, 0x72, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x1454) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Trivially_copyable_ptr_iterator_tag (0x1453)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x53, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x1455) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1454)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Really_trivial_ptr_iterator_tag
	#   LinkageName: .?AU_Really_trivial_ptr_iterator_tag@std@@
	# }
	.byte	0x66, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x54, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x52, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x79, 0x5f, 0x74
	.byte	0x72, 0x69, 0x76, 0x69
	.byte	0x61, 0x6c, 0x5f, 0x70
	.byte	0x74, 0x72, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x61, 0x67, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x52, 0x65, 0x61
	.byte	0x6c, 0x6c, 0x79, 0x5f
	.byte	0x74, 0x72, 0x69, 0x76
	.byte	0x69, 0x61, 0x6c, 0x5f
	.byte	0x70, 0x74, 0x72, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1456) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Really_trivial_ptr_iterator_tag (0x1455)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 426
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x55, 0x14, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0xaa, 0x01, 0x00, 0x00
	# Struct (0x1457) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_General_ptr_iterator_tag
	#   LinkageName: .?AU_General_ptr_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x47, 0x65, 0x6e, 0x65
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x70, 0x74, 0x72, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x47, 0x65
	.byte	0x6e, 0x65, 0x72, 0x61
	.byte	0x6c, 0x5f, 0x70, 0x74
	.byte	0x72, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x74
	.byte	0x61, 0x67, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# FieldList (0x1458) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_General_ptr_iterator_tag (0x1457)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x57, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x1459) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1458)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Trivially_copyable_ptr_iterator_tag
	#   LinkageName: .?AU_Trivially_copyable_ptr_iterator_tag@std@@
	# }
	.byte	0x6e, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x58, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x54, 0x72, 0x69, 0x76
	.byte	0x69, 0x61, 0x6c, 0x6c
	.byte	0x79, 0x5f, 0x63, 0x6f
	.byte	0x70, 0x79, 0x61, 0x62
	.byte	0x6c, 0x65, 0x5f, 0x70
	.byte	0x74, 0x72, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x61, 0x67, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x54, 0x72, 0x69
	.byte	0x76, 0x69, 0x61, 0x6c
	.byte	0x6c, 0x79, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x61
	.byte	0x62, 0x6c, 0x65, 0x5f
	.byte	0x70, 0x74, 0x72, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x145A) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Trivially_copyable_ptr_iterator_tag (0x1459)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 421
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x59, 0x14, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0xa5, 0x01, 0x00, 0x00
	# Struct (0x145B) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x137B)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_General_ptr_iterator_tag
	#   LinkageName: .?AU_General_ptr_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x00, 0x02
	.byte	0x7b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x47, 0x65, 0x6e, 0x65
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x70, 0x74, 0x72, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x47, 0x65
	.byte	0x6e, 0x65, 0x72, 0x61
	.byte	0x6c, 0x5f, 0x70, 0x74
	.byte	0x72, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x74
	.byte	0x61, 0x67, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x145C) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_General_ptr_iterator_tag (0x145B)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x1168)
	#   LineNumber: 417
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x5b, 0x14, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0xa1, 0x01, 0x00, 0x00
	# FuncId (0x145D) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: int* (const int* const, const int* const, int* const, std::allocator<int>&, std::_Really_trivial_ptr_iterator_tag, std::integral_constant<bool,1>) (0x1452)
	#   Name: _Uninitialized_copy_al_unchecked
	# }
	.byte	0x2e, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x52, 0x14, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x69
	.byte	0x6e, 0x69, 0x74, 0x69
	.byte	0x61, 0x6c, 0x69, 0x7a
	.byte	0x65, 0x64, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x5f
	.byte	0x61, 0x6c, 0x5f, 0x75
	.byte	0x6e, 0x63, 0x68, 0x65
	.byte	0x63, 0x6b, 0x65, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x145E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: int* const (0x1131)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x31, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x145F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int* const& (0x1449)
	#     ArgType: int* const& (0x145E)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x49, 0x14, 0x00, 0x00
	.byte	0x5e, 0x14, 0x00, 0x00
	# Procedure (0x1460) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: std::_Really_trivial_ptr_iterator_tag (0x1450)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int* const&, int* const&) (0x145F)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x50, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x5f, 0x14, 0x00, 0x00
	# FuncId (0x1461) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: std::_Really_trivial_ptr_iterator_tag (const int* const&, int* const&) (0x1460)
	#   Name: _Ptr_copy_cat
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x60, 0x14, 0x00, 0x00
	.byte	0x5f, 0x50, 0x74, 0x72
	.byte	0x5f, 0x63, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x63, 0x61
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Procedure (0x1462) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const int*, const int*, int*) (0x1415)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x15, 0x14, 0x00, 0x00
	# FuncId (0x1463) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: int* (const int*, const int*, int*) (0x1462)
	#   Name: _Copy_memmove
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x62, 0x14, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x6d, 0x65
	.byte	0x6d, 0x6d, 0x6f, 0x76
	.byte	0x65, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x1464) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x10FA)
	#   Name: _Orphan_all
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x00
	# MemberFuncId (0x1465) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   FunctionType: void std::vector<int,std::allocator<int> >::(int*, int*) (0x10EB)
	#   Name: _Destroy
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	.byte	0x5f, 0x44, 0x65, 0x73
	.byte	0x74, 0x72, 0x6f, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1466) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::allocator<int> (0x1085)
	#   FunctionType: void std::allocator<int>::(int* const, const unsigned __int64) (0x1133)
	#   Name: deallocate
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x33, 0x11, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	# MemberFuncId (0x1467) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::vector<int,std::allocator<int> > (0x1081)
	#   FunctionType: unsigned __int64 std::vector<int,std::allocator<int> >::() (0x10D7)
	#   Name: capacity
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x63, 0x61, 0x70, 0x61
	.byte	0x63, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1468) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Container_base12 (0x1172)
	#   FunctionType: void std::_Container_base12::() (0x11B4)
	#   Name: _Orphan_all
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0xb4, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x00
	# Class (0x1469) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Lockit
	#   LinkageName: .?AV_Lockit@std@@
	# }
	.byte	0x36, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x4c, 0x6f, 0x63, 0x6b
	.byte	0x69, 0x74, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x5f
	.byte	0x4c, 0x6f, 0x63, 0x6b
	.byte	0x69, 0x74, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x146A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Lockit (0x1469)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x69, 0x14, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x146B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Lockit (0x1469)
	#   ThisType: std::_Lockit* (0x146A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x14, 0x00, 0x00
	.byte	0x6a, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x146C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x146D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Lockit (0x1469)
	#   ThisType: std::_Lockit* (0x146A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int) (0x146C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x14, 0x00, 0x00
	.byte	0x6a, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x6c, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x146E) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Lockit (0x1469)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x69, 0x14, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x146F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Lockit (0x146E)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x6e, 0x14, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1470) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Lockit& (0x146F)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x6f, 0x14, 0x00, 0x00
	# MemberFunction (0x1471) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Lockit (0x1469)
	#   ThisType: std::_Lockit* (0x146A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Lockit&) (0x1470)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x14, 0x00, 0x00
	.byte	0x6a, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x70, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1472) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Lockit::() (0x146B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Lockit::(int) (0x146D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Lockit::(const std::_Lockit&) (0x1471)
	#   ]
	# }
	.byte	0x1a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6b, 0x14, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6d, 0x14, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x71, 0x14, 0x00, 0x00
	# MemberFunction (0x1473) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Lockit (0x1469)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int) (0x146C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x6c, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1474) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Lockit* (0x146A)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x6a, 0x14, 0x00, 0x00
	# MemberFunction (0x1475) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Lockit (0x1469)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Lockit*) (0x1474)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x74, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1476) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_Lockit* (0x146A)
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x6a, 0x14, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x1477) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Lockit (0x1469)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_Lockit*, int) (0x1476)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x76, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1478) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Lockit::(int) (0x1473)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Lockit::(std::_Lockit*) (0x1475)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Lockit::(std::_Lockit*, int) (0x1477)
	#   ]
	# }
	.byte	0x1a, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x73, 0x14, 0x00, 0x00
	.byte	0x09, 0x00, 0x00, 0x00
	.byte	0x75, 0x14, 0x00, 0x00
	.byte	0x09, 0x00, 0x00, 0x00
	.byte	0x77, 0x14, 0x00, 0x00
	# MethodOverloadList (0x1479) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Lockit::(int) (0x1473)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Lockit::(std::_Lockit*) (0x1475)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x73, 0x14, 0x00, 0x00
	.byte	0x09, 0x00, 0x00, 0x00
	.byte	0x75, 0x14, 0x00, 0x00
	# Pointer (0x147A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Lockit (0x1469)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x69, 0x14, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x147B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Lockit& (0x147A)
	#   ClassType: std::_Lockit (0x1469)
	#   ThisType: std::_Lockit* (0x146A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Lockit&) (0x1470)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7a, 0x14, 0x00, 0x00
	.byte	0x69, 0x14, 0x00, 0x00
	.byte	0x6a, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x70, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x147C) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: int (0x74)
	#     FieldOffset: 0x0
	#     Name: _Locktype
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x3
	#     MethodListIndex: 0x1472
	#     Name: _Lockit
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Lockit::() (0x146B)
	#     Name: ~_Lockit
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x3
	#     MethodListIndex: 0x1478
	#     Name: _Lockit_ctor
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1479
	#     Name: _Lockit_dtor
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Lockit& std::_Lockit::(const std::_Lockit&) (0x147B)
	#     Name: operator=
	#   }
	# }
	.byte	0x7e, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4c
	.byte	0x6f, 0x63, 0x6b, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x0f, 0x15, 0x03, 0x00
	.byte	0x72, 0x14, 0x00, 0x00
	.byte	0x5f, 0x4c, 0x6f, 0x63
	.byte	0x6b, 0x69, 0x74, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6b, 0x14, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x4c, 0x6f
	.byte	0x63, 0x6b, 0x69, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x03, 0x00
	.byte	0x78, 0x14, 0x00, 0x00
	.byte	0x5f, 0x4c, 0x6f, 0x63
	.byte	0x6b, 0x69, 0x74, 0x5f
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x79, 0x14, 0x00, 0x00
	.byte	0x5f, 0x4c, 0x6f, 0x63
	.byte	0x6b, 0x69, 0x74, 0x5f
	.byte	0x64, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x7b, 0x14, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	# Class (0x147D) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 11
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x147C)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 4
	#   Name: std::_Lockit
	#   LinkageName: .?AV_Lockit@std@@
	# }
	.byte	0x36, 0x00, 0x04, 0x15
	.byte	0x0b, 0x00, 0x00, 0x02
	.byte	0x7c, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x04, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x4c, 0x6f, 0x63, 0x6b
	.byte	0x69, 0x74, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x5f
	.byte	0x4c, 0x6f, 0x63, 0x6b
	.byte	0x69, 0x74, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x147E) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals.h
	# }
	.byte	0x6e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x79, 0x76, 0x61, 0x6c
	.byte	0x73, 0x2e, 0x68, 0x00
	# UdtSourceLine (0x147F) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Lockit (0x147D)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals.h (0x147E)
	#   LineNumber: 339
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x7d, 0x14, 0x00, 0x00
	.byte	0x7e, 0x14, 0x00, 0x00
	.byte	0x53, 0x01, 0x00, 0x00
	# ArgList (0x1480) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#     ArgType: std::allocator<int>& (0x10FC)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	# Procedure (0x1481) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (int*, int*, std::allocator<int>&) (0x1480)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x80, 0x14, 0x00, 0x00
	# FuncId (0x1482) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: void (int*, int*, std::allocator<int>&) (0x1481)
	#   Name: _Destroy_range
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x81, 0x14, 0x00, 0x00
	.byte	0x5f, 0x44, 0x65, 0x73
	.byte	0x74, 0x72, 0x6f, 0x79
	.byte	0x5f, 0x72, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	# ArgList (0x1483) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#     ArgType: std::allocator<int>& (0x10FC)
	#     ArgType: std::integral_constant<bool,1> (0x109E)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	# Procedure (0x1484) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (int*, int*, std::allocator<int>&, std::integral_constant<bool,1>) (0x1483)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x83, 0x14, 0x00, 0x00
	# FuncId (0x1485) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: void (int*, int*, std::allocator<int>&, std::integral_constant<bool,1>) (0x1484)
	#   Name: _Destroy_range1
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x84, 0x14, 0x00, 0x00
	.byte	0x5f, 0x44, 0x65, 0x73
	.byte	0x74, 0x72, 0x6f, 0x79
	.byte	0x5f, 0x72, 0x61, 0x6e
	.byte	0x67, 0x65, 0x31, 0x00
	# ArgList (0x1486) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: void* (0x603)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x03, 0x06, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# Procedure (0x1487) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (void*, unsigned __int64) (0x1486)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x86, 0x14, 0x00, 0x00
	# FuncId (0x1488) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: void (void*, unsigned __int64) (0x1487)
	#   Name: _Deallocate
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x87, 0x14, 0x00, 0x00
	.byte	0x5f, 0x44, 0x65, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x65, 0x00
	# Pointer (0x1489) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: void* (0x603)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x03, 0x06, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x148A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: void*& (0x1489)
	#     ArgType: unsigned __int64& (0x13AC)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x89, 0x14, 0x00, 0x00
	.byte	0xac, 0x13, 0x00, 0x00
	# Procedure (0x148B) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (void*&, unsigned __int64&) (0x148A)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x8a, 0x14, 0x00, 0x00
	# FuncId (0x148C) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: void (void*&, unsigned __int64&) (0x148B)
	#   Name: _Adjust_manually_vector_aligned
	# }
	.byte	0x2a, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x8b, 0x14, 0x00, 0x00
	.byte	0x5f, 0x41, 0x64, 0x6a
	.byte	0x75, 0x73, 0x74, 0x5f
	.byte	0x6d, 0x61, 0x6e, 0x75
	.byte	0x61, 0x6c, 0x6c, 0x79
	.byte	0x5f, 0x76, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x61, 0x6c, 0x69, 0x67
	.byte	0x6e, 0x65, 0x64, 0x00
	# Pointer (0x148D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const unsigned __int64 (0x108A)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8a, 0x10, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# MemberFuncId (0x148E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: const int*& std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x1120)
	#   Name: _Myend
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x20, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	# MemberFuncId (0x148F) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > > (0x1082)
	#   FunctionType: void std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::() (0x10FA)
	#   Name: _Free_proxy
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	.byte	0x5f, 0x46, 0x72, 0x65
	.byte	0x65, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	# ArgList (0x1490) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::allocator<std::_Container_proxy>& (0x11C1)
	#     ArgType: std::_Container_proxy* const (0x1109)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	.byte	0x09, 0x11, 0x00, 0x00
	# MemberFunction (0x1491) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x11A0)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::allocator<std::_Container_proxy>&, std::_Container_proxy* const) (0x1490)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x90, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1492) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x11A0)
	#   FunctionType: void std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(std::allocator<std::_Container_proxy>&, std::_Container_proxy* const) (0x1491)
	#   Name: destroy
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0x91, 0x14, 0x00, 0x00
	.byte	0x64, 0x65, 0x73, 0x74
	.byte	0x72, 0x6f, 0x79, 0x00
	# Procedure (0x1493) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::allocator<std::_Container_proxy>&, std::_Container_proxy* const) (0x1490)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x90, 0x14, 0x00, 0x00
	# FuncId (0x1494) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1383)
	#   FunctionType: void (std::allocator<std::_Container_proxy>&, std::_Container_proxy* const) (0x1493)
	#   Name: _Deallocate_plain
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x93, 0x14, 0x00, 0x00
	.byte	0x5f, 0x44, 0x65, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x65, 0x5f
	.byte	0x70, 0x6c, 0x61, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x1495) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x11A0)
	#   FunctionType: void std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(std::allocator<std::_Container_proxy>&, const std::_Container_proxy*, const unsigned __int64) (0x11C9)
	#   Name: deallocate
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0xc9, 0x11, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	# Modifier (0x1496) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: void (0x3)
	#   Modifiers [ (0x3)
	#     Const (0x1)
	#     Volatile (0x2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x00, 0xf2, 0xf1
	# Pointer (0x1497) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const volatile void (0x1496)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x96, 0x14, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Modifier (0x1498) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: char (0x70)
	#   Modifiers [ (0x3)
	#     Const (0x1)
	#     Volatile (0x2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x03, 0x00, 0xf2, 0xf1
	# Pointer (0x1499) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const volatile char (0x1498)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x98, 0x14, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Modifier (0x149A) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: char (0x70)
	#   Modifiers [ (0x2)
	#     Volatile (0x2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x02, 0x00, 0xf2, 0xf1
	# Pointer (0x149B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: volatile char (0x149A)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9a, 0x14, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00

	.globl	"??_7fail_fast@gsl@@6B@"
.set "??_7fail_fast@gsl@@6B@", .L__unnamed_1+8
	.globl	"??_7logic_error@std@@6B@"
.set "??_7logic_error@std@@6B@", .L__unnamed_2+8
	.globl	"??_7exception@std@@6B@"
.set "??_7exception@std@@6B@", .L__unnamed_3+8
	.globl	"??_7narrowing_error@gsl@@6B@"
.set "??_7narrowing_error@gsl@@6B@", .L__unnamed_4+8
