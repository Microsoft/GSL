	.text
	.def	 @feat.00;
	.scl	3;
	.type	0;
	.endef
	.globl	@feat.00
.set @feat.00, 1
	.intel_syntax noprefix
	.def	 "?foo@@YA_NXZ";
	.scl	2;
	.type	32;
	.endef
	.globl	"?foo@@YA_NXZ"          # -- Begin function ?foo@@YA_NXZ
	.p2align	4, 0x90
"?foo@@YA_NXZ":                         # @"?foo@@YA_NXZ"
Lfunc_begin0:
	.cv_func_id 0
	.cv_file	1 "E:\\DD\\gsl-dadonenf\\tests\\span_compile_only.cpp" "CEABC981FD71A5C2BE596AB3B742E767" 1
	.cv_loc	0 1 42 0 is_stmt 0      # ..\tests\span_compile_only.cpp:42:0
	.cv_fpo_proc	"?foo@@YA_NXZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	sub	esp, 60
	.cv_fpo_stackalloc	60
	.cv_fpo_endprologue
	mov	eax, dword ptr [___security_cookie]
	xor	eax, ebp
	mov	dword ptr [ebp - 4], eax
Ltmp0:
	.cv_loc	0 1 44 0                # ..\tests\span_compile_only.cpp:44:0
	mov	byte ptr [ebp - 29], 1
	.cv_loc	0 1 45 0                # ..\tests\span_compile_only.cpp:45:0
	lea	ecx, [ebp - 12]
Ltmp1:
	#DEBUG_VALUE: s <- [$ecx+0]
	call	"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
Ltmp2:
	.cv_loc	0 1 46 0                # ..\tests\span_compile_only.cpp:46:0
	test	byte ptr [ebp - 29], 1
	mov	dl, 1
	mov	dword ptr [ebp - 36], eax # 4-byte Spill
	mov	byte ptr [ebp - 37], dl # 1-byte Spill
	jne	LBB0_4
# %bb.1:
	lea	ecx, [ebp - 12]
	call	"?size@?$span@H$0?0@gsl@@QBEHXZ"
	xor	ecx, ecx
	mov	dl, cl
	cmp	eax, 0
	mov	byte ptr [ebp - 38], dl # 1-byte Spill
	jne	LBB0_3
# %bb.2:
	lea	ecx, [ebp - 12]
	call	"?data@?$span@H$0?0@gsl@@QBEPAHXZ"
	cmp	eax, 0
	sete	dl
	mov	byte ptr [ebp - 38], dl # 1-byte Spill
LBB0_3:
	mov	al, byte ptr [ebp - 38] # 1-byte Reload
	mov	byte ptr [ebp - 37], al # 1-byte Spill
LBB0_4:
	mov	al, byte ptr [ebp - 37] # 1-byte Reload
	and	al, 1
	mov	byte ptr [ebp - 29], al
	.cv_loc	0 1 48 0                # ..\tests\span_compile_only.cpp:48:0
	lea	ecx, [ebp - 20]
Ltmp3:
	#DEBUG_VALUE: cs <- [$ecx+0]
	call	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ"
Ltmp4:
	.cv_loc	0 1 49 0                # ..\tests\span_compile_only.cpp:49:0
	test	byte ptr [ebp - 29], 1
	mov	dl, 1
	mov	dword ptr [ebp - 44], eax # 4-byte Spill
	mov	byte ptr [ebp - 45], dl # 1-byte Spill
	jne	LBB0_8
# %bb.5:
	lea	ecx, [ebp - 20]
	call	"?size@?$span@$$CBH$0?0@gsl@@QBEHXZ"
	xor	ecx, ecx
	mov	dl, cl
	cmp	eax, 0
	mov	byte ptr [ebp - 46], dl # 1-byte Spill
	jne	LBB0_7
# %bb.6:
	lea	ecx, [ebp - 20]
	call	"?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ"
	cmp	eax, 0
	sete	dl
	mov	byte ptr [ebp - 46], dl # 1-byte Spill
LBB0_7:
	mov	al, byte ptr [ebp - 46] # 1-byte Reload
	mov	byte ptr [ebp - 45], al # 1-byte Spill
LBB0_8:
	mov	al, byte ptr [ebp - 45] # 1-byte Reload
	and	al, 1
	mov	byte ptr [ebp - 29], al
	.cv_loc	0 1 51 0                # ..\tests\span_compile_only.cpp:51:0
	lea	ecx, [ebp - 28]
Ltmp5:
	#DEBUG_VALUE: s2 <- [$ecx+0]
	call	"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
Ltmp6:
	.cv_loc	0 1 52 0                # ..\tests\span_compile_only.cpp:52:0
	test	byte ptr [ebp - 29], 1
	mov	dl, 1
	mov	dword ptr [ebp - 52], eax # 4-byte Spill
	mov	byte ptr [ebp - 53], dl # 1-byte Spill
	jne	LBB0_12
# %bb.9:
	lea	ecx, [ebp - 28]
	call	"?size@?$span@H$0?0@gsl@@QBEHXZ"
	xor	ecx, ecx
	mov	dl, cl
	cmp	eax, 0
	mov	byte ptr [ebp - 54], dl # 1-byte Spill
	jne	LBB0_11
# %bb.10:
	lea	ecx, [ebp - 28]
	call	"?data@?$span@H$0?0@gsl@@QBEPAHXZ"
	cmp	eax, 0
	sete	dl
	mov	byte ptr [ebp - 54], dl # 1-byte Spill
LBB0_11:
	mov	al, byte ptr [ebp - 54] # 1-byte Reload
	mov	byte ptr [ebp - 53], al # 1-byte Spill
LBB0_12:
	mov	al, byte ptr [ebp - 53] # 1-byte Reload
	and	al, 1
	mov	byte ptr [ebp - 29], al
	.cv_loc	0 1 54 0                # ..\tests\span_compile_only.cpp:54:0
	mov	al, byte ptr [ebp - 29]
	and	al, 1
	movzx	eax, al
	mov	ecx, dword ptr [ebp - 4]
	xor	ecx, ebp
	mov	dword ptr [ebp - 60], eax # 4-byte Spill
	call	@__security_check_cookie@4
	mov	eax, dword ptr [ebp - 60] # 4-byte Reload
	add	esp, 60
	pop	ebp
	ret
Ltmp7:
	.cv_fpo_endproc
Lfunc_end0:
                                        # -- End function
	.def	 "??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
	.globl	"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ" # -- Begin function ??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ
	.p2align	4, 0x90
"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ":  # @"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
Lfunc_begin1:
	.cv_func_id 1
	.cv_file	2 "E:\\DD\\gsl-dadonenf\\include\\gsl\\span" "3BAA3FB91BA159E545E305706709D4CE" 1
	.cv_loc	1 2 384 0               # ..\include\gsl/span:384:0
	.cv_fpo_proc	"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	ebx
	.cv_fpo_pushreg	ebx
	push	edi
	.cv_fpo_pushreg	edi
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 44
	.cv_fpo_stackalloc	44
	.cv_fpo_endprologue
	mov	eax, esp
	mov	dword ptr [ebp - 28], eax
	mov	dword ptr [ebp - 16], -1
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 32], ecx
	mov	eax, dword ptr [ebp - 32]
	lea	ecx, [ebp - 36]
Ltmp10:
	mov	dword ptr [ebp - 40], eax # 4-byte Spill
	call	"??0?$extent_type@$0A@@details@gsl@@QAE@XZ"
	mov	dword ptr [ebp - 16], 0
	mov	bl, byte ptr [ebp - 36]
	mov	ecx, esp
	mov	byte ptr [ecx + 4], bl
	mov	dword ptr [ecx], 0
	mov	ecx, dword ptr [ebp - 40] # 4-byte Reload
	mov	dword ptr [ebp - 44], eax # 4-byte Spill
	call	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z"
	sub	esp, 8
	mov	dword ptr [ebp - 48], eax # 4-byte Spill
	jmp	LBB1_1
LBB1_1:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp - 40] # 4-byte Reload
	add	esp, 44
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ@4HA":
LBB1_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	dword ptr [__imp____std_terminate]
Ltmp11:
	.cv_fpo_endproc
Lfunc_end1:
	.section	.xdata,"dr",associative,"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
	.p2align	2
"L__ehtable$??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ") # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	0                       # IPMapEntries
	.long	0                       # IPToStateXData
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
                                        # -- End function
	.def	 "?size@?$span@H$0?0@gsl@@QBEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$span@H$0?0@gsl@@QBEHXZ"
	.globl	"?size@?$span@H$0?0@gsl@@QBEHXZ" # -- Begin function ?size@?$span@H$0?0@gsl@@QBEHXZ
	.p2align	4, 0x90
"?size@?$span@H$0?0@gsl@@QBEHXZ":       # @"?size@?$span@H$0?0@gsl@@QBEHXZ"
Lfunc_begin2:
	.cv_func_id 2
	.cv_loc	2 2 498 0               # ..\include\gsl/span:498:0
	.cv_fpo_proc	"?size@?$span@H$0?0@gsl@@QBEHXZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	eax
	.cv_fpo_stackalloc	4
	.cv_fpo_endprologue
	mov	dword ptr [ebp - 4], ecx
	mov	ecx, dword ptr [ebp - 4]
Ltmp12:
	call	"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ"
	add	esp, 4
	pop	ebp
	ret
Ltmp13:
	.cv_fpo_endproc
Lfunc_end2:
                                        # -- End function
	.def	 "?data@?$span@H$0?0@gsl@@QBEPAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$span@H$0?0@gsl@@QBEPAHXZ"
	.globl	"?data@?$span@H$0?0@gsl@@QBEPAHXZ" # -- Begin function ?data@?$span@H$0?0@gsl@@QBEPAHXZ
	.p2align	4, 0x90
"?data@?$span@H$0?0@gsl@@QBEPAHXZ":     # @"?data@?$span@H$0?0@gsl@@QBEPAHXZ"
Lfunc_begin3:
	.cv_func_id 3
	.cv_loc	3 2 515 0               # ..\include\gsl/span:515:0
	.cv_fpo_proc	"?data@?$span@H$0?0@gsl@@QBEPAHXZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	eax
	.cv_fpo_stackalloc	4
	.cv_fpo_endprologue
	mov	dword ptr [ebp - 4], ecx
	mov	ecx, dword ptr [ebp - 4]
Ltmp14:
	call	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ"
	add	esp, 4
	pop	ebp
	ret
Ltmp15:
	.cv_fpo_endproc
Lfunc_end3:
                                        # -- End function
	.def	 "??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ"
	.globl	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ" # -- Begin function ??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ
	.p2align	4, 0x90
"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ": # @"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ"
Lfunc_begin4:
	.cv_func_id 4
	.cv_loc	4 2 384 0               # ..\include\gsl/span:384:0
	.cv_fpo_proc	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	ebx
	.cv_fpo_pushreg	ebx
	push	edi
	.cv_fpo_pushreg	edi
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 44
	.cv_fpo_stackalloc	44
	.cv_fpo_endprologue
	mov	eax, esp
	mov	dword ptr [ebp - 28], eax
	mov	dword ptr [ebp - 16], -1
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ"
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 32], ecx
	mov	eax, dword ptr [ebp - 32]
	lea	ecx, [ebp - 36]
Ltmp18:
	mov	dword ptr [ebp - 40], eax # 4-byte Spill
	call	"??0?$extent_type@$0A@@details@gsl@@QAE@XZ"
	mov	dword ptr [ebp - 16], 0
	mov	bl, byte ptr [ebp - 36]
	mov	ecx, esp
	mov	byte ptr [ecx + 4], bl
	mov	dword ptr [ecx], 0
	mov	ecx, dword ptr [ebp - 40] # 4-byte Reload
	mov	dword ptr [ebp - 44], eax # 4-byte Spill
	call	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z"
	sub	esp, 8
	mov	dword ptr [ebp - 48], eax # 4-byte Spill
	jmp	LBB4_1
LBB4_1:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp - 40] # 4-byte Reload
	add	esp, 44
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$2@?0???$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ@4HA":
LBB4_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	dword ptr [__imp____std_terminate]
Ltmp19:
	.cv_fpo_endproc
Lfunc_end4:
	.section	.xdata,"dr",associative,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ"
	.p2align	2
"L__ehtable$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ") # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	0                       # IPMapEntries
	.long	0                       # IPToStateXData
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ"
                                        # -- End function
	.def	 "?size@?$span@$$CBH$0?0@gsl@@QBEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$span@$$CBH$0?0@gsl@@QBEHXZ"
	.globl	"?size@?$span@$$CBH$0?0@gsl@@QBEHXZ" # -- Begin function ?size@?$span@$$CBH$0?0@gsl@@QBEHXZ
	.p2align	4, 0x90
"?size@?$span@$$CBH$0?0@gsl@@QBEHXZ":   # @"?size@?$span@$$CBH$0?0@gsl@@QBEHXZ"
Lfunc_begin5:
	.cv_func_id 5
	.cv_loc	5 2 498 0               # ..\include\gsl/span:498:0
	.cv_fpo_proc	"?size@?$span@$$CBH$0?0@gsl@@QBEHXZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	eax
	.cv_fpo_stackalloc	4
	.cv_fpo_endprologue
	mov	dword ptr [ebp - 4], ecx
	mov	ecx, dword ptr [ebp - 4]
Ltmp20:
	call	"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ"
	add	esp, 4
	pop	ebp
	ret
Ltmp21:
	.cv_fpo_endproc
Lfunc_end5:
                                        # -- End function
	.def	 "?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ"
	.globl	"?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ" # -- Begin function ?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ
	.p2align	4, 0x90
"?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ": # @"?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ"
Lfunc_begin6:
	.cv_func_id 6
	.cv_loc	6 2 515 0               # ..\include\gsl/span:515:0
	.cv_fpo_proc	"?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	eax
	.cv_fpo_stackalloc	4
	.cv_fpo_endprologue
	mov	dword ptr [ebp - 4], ecx
	mov	ecx, dword ptr [ebp - 4]
Ltmp22:
	call	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ"
	add	esp, 4
	pop	ebp
	ret
Ltmp23:
	.cv_fpo_endproc
Lfunc_end6:
                                        # -- End function
	.def	 "??0?$extent_type@$0A@@details@gsl@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$extent_type@$0A@@details@gsl@@QAE@XZ"
	.globl	"??0?$extent_type@$0A@@details@gsl@@QAE@XZ" # -- Begin function ??0?$extent_type@$0A@@details@gsl@@QAE@XZ
	.p2align	4, 0x90
"??0?$extent_type@$0A@@details@gsl@@QAE@XZ": # @"??0?$extent_type@$0A@@details@gsl@@QAE@XZ"
Lfunc_begin7:
	.cv_func_id 7
	.cv_loc	7 2 311 0               # ..\include\gsl/span:311:0
	.cv_fpo_proc	"??0?$extent_type@$0A@@details@gsl@@QAE@XZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	eax
	.cv_fpo_stackalloc	4
	.cv_fpo_endprologue
	mov	dword ptr [ebp - 4], ecx
	mov	eax, dword ptr [ebp - 4]
Ltmp24:
	add	esp, 4
	pop	ebp
	ret
Ltmp25:
	.cv_fpo_endproc
Lfunc_end7:
                                        # -- End function
	.def	 "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z"
	.globl	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z" # -- Begin function ??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z
	.p2align	4, 0x90
"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z": # @"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z"
Lfunc_begin8:
	.cv_func_id 8
	.cv_loc	8 2 597 0               # ..\include\gsl/span:597:0
	.cv_fpo_proc	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z" 8
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	ebx
	.cv_fpo_pushreg	ebx
	push	edi
	.cv_fpo_pushreg	edi
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 96
	.cv_fpo_stackalloc	96
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	mov	edx, esp
	mov	dword ptr [ebp - 28], edx
	mov	dword ptr [ebp - 16], -1
	lea	edx, [ebp - 24]
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z"
	mov	esi, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], esi
	mov	dword ptr fs:[0], edx
	mov	dword ptr [ebp - 36], ecx
	mov	ecx, dword ptr [ebp - 36]
	mov	dword ptr [ebp - 32], ecx
Ltmp30:
	mov	edx, ecx
	mov	dword ptr [ebp - 76], ecx # 4-byte Spill
	mov	ecx, edx
	lea	edx, [ebp - 40]
	mov	bl, byte ptr [edx]
	mov	byte ptr [esp], bl
	mov	dword ptr [ebp - 80], eax # 4-byte Spill
	call	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z"
	sub	esp, 4
	mov	ecx, dword ptr [ebp + 8]
	mov	edx, dword ptr [ebp - 76] # 4-byte Reload
	mov	dword ptr [edx + 4], ecx
Ltmp31:
	.cv_loc	8 2 598 0               # ..\include\gsl/span:598:0
	mov	ecx, edx
	mov	dword ptr [ebp - 84], eax # 4-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ"
	cmp	eax, 0
	setge	bl
	mov	byte ptr [ebp - 53], 0
	test	bl, 1
	jne	LBB8_1
	jmp	LBB8_2
LBB8_1:
	test	byte ptr [ebp - 53], 1
	jne	LBB8_4
	jmp	LBB8_5
LBB8_2:
	mov	eax, esp
	mov	dword ptr [eax], offset "??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	lea	eax, [ebp - 52]
	mov	ecx, eax
	mov	dword ptr [ebp - 88], eax # 4-byte Spill
	call	"??0fail_fast@gsl@@QAE@QBD@Z"
	sub	esp, 4
	mov	byte ptr [ebp - 53], 1
	mov	dword ptr [ebp - 16], 0
	mov	ecx, esp
	mov	edx, dword ptr [ebp - 88] # 4-byte Reload
	mov	dword ptr [ecx], edx
	mov	dword ptr [ebp - 92], eax # 4-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z"
	sub	esp, 4
	jmp	LBB8_3
LBB8_3:
LBB8_4:
	lea	ecx, [ebp - 52]
	call	"??1fail_fast@gsl@@UAE@XZ"
LBB8_5:
	.cv_loc	8 2 599 0               # ..\include\gsl/span:599:0
	mov	eax, dword ptr [ebp + 8]
	mov	byte ptr [ebp - 69], 0
	cmp	eax, 0
	mov	cl, 1
	mov	byte ptr [ebp - 93], cl # 1-byte Spill
	jne	LBB8_7
# %bb.6:
	mov	eax, dword ptr [ebp - 76] # 4-byte Reload
	mov	ecx, eax
	call	"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ"
	cmp	eax, 0
	sete	dl
	mov	byte ptr [ebp - 93], dl # 1-byte Spill
LBB8_7:
	mov	al, byte ptr [ebp - 93] # 1-byte Reload
	test	al, 1
	jne	LBB8_8
	jmp	LBB8_9
LBB8_8:
	test	byte ptr [ebp - 69], 1
	jne	LBB8_14
	jmp	LBB8_15
LBB8_9:
	mov	eax, esp
	mov	dword ptr [eax], offset "??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	lea	eax, [ebp - 68]
	mov	ecx, eax
	mov	dword ptr [ebp - 100], eax # 4-byte Spill
	call	"??0fail_fast@gsl@@QAE@QBD@Z"
	sub	esp, 4
	mov	byte ptr [ebp - 69], 1
	mov	dword ptr [ebp - 16], 1
	mov	ecx, esp
	mov	edx, dword ptr [ebp - 100] # 4-byte Reload
	mov	dword ptr [ecx], edx
	mov	dword ptr [ebp - 104], eax # 4-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z"
	sub	esp, 4
	jmp	LBB8_10
LBB8_10:
LBB8_14:
	lea	ecx, [ebp - 68]
	call	"??1fail_fast@gsl@@UAE@XZ"
Ltmp32:
LBB8_15:
	.cv_loc	8 2 600 0               # ..\include\gsl/span:600:0
	mov	eax, dword ptr [ebp - 32]
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 96
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	8
	.def	 "?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z@4HA":
LBB8_11:
	push	ebp
	push	eax
	add	ebp, 12
Ltmp33:
	.cv_loc	8 2 598 0               # ..\include\gsl/span:598:0
	test	byte ptr [ebp - 53], 1
	jne	LBB8_12
	jmp	LBB8_13
LBB8_12:
	lea	ecx, [ebp - 52]
	call	"??1fail_fast@gsl@@UAE@XZ"
LBB8_13:
	add	esp, 4
	pop	ebp
	ret                             # CLEANUPRET
	.def	 "?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z@4HA":
LBB8_16:
	push	ebp
	push	eax
	add	ebp, 12
	.cv_loc	8 2 599 0               # ..\include\gsl/span:599:0
	test	byte ptr [ebp - 69], 1
	jne	LBB8_17
	jmp	LBB8_18
LBB8_17:
	lea	ecx, [ebp - 68]
	call	"??1fail_fast@gsl@@UAE@XZ"
LBB8_18:
	add	esp, 4
	pop	ebp
	ret                             # CLEANUPRET
Ltmp34:
	.cv_fpo_endproc
Lfunc_end8:
	.section	.xdata,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
"L__ehtable$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z") # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	0                       # IPMapEntries
	.long	0                       # IPToStateXData
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z@4HA" # Action
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z@4HA" # Action
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z"
                                        # -- End function
	.def	 "??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z"
	.globl	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z" # -- Begin function ??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z
	.p2align	4, 0x90
"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z": # @"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z"
Lfunc_begin9:
	.cv_func_id 9
	.cv_loc	9 2 334 0               # ..\include\gsl/span:334:0
	.cv_fpo_proc	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	sub	esp, 8
	.cv_fpo_stackalloc	8
	.cv_fpo_endprologue
	lea	eax, [ebp + 8]
	mov	dword ptr [ebp - 4], ecx
	mov	ecx, dword ptr [ebp - 4]
Ltmp35:
	mov	dword ptr [ebp - 8], ecx # 4-byte Spill
	mov	ecx, eax
	call	"?size@?$extent_type@$0A@@details@gsl@@QBEHXZ"
	mov	ecx, dword ptr [ebp - 8] # 4-byte Reload
	mov	dword ptr [ecx], eax
	mov	eax, ecx
	add	esp, 8
	pop	ebp
	ret	4
Ltmp36:
	.cv_fpo_endproc
Lfunc_end9:
                                        # -- End function
	.def	 "?size@?$extent_type@$0?0@details@gsl@@QBEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ"
	.globl	"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ" # -- Begin function ?size@?$extent_type@$0?0@details@gsl@@QBEHXZ
	.p2align	4, 0x90
"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ": # @"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ"
Lfunc_begin10:
	.cv_func_id 10
	.cv_loc	10 2 338 0              # ..\include\gsl/span:338:0
	.cv_fpo_proc	"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	eax
	.cv_fpo_stackalloc	4
	.cv_fpo_endprologue
	mov	dword ptr [ebp - 4], ecx
	mov	ecx, dword ptr [ebp - 4]
Ltmp37:
	mov	eax, dword ptr [ecx]
	add	esp, 4
	pop	ebp
	ret
Ltmp38:
	.cv_fpo_endproc
Lfunc_end10:
                                        # -- End function
	.def	 "??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z"
	.globl	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z" # -- Begin function ??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z
	.p2align	4, 0x90
"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z": # @"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z"
Lfunc_begin11:
	.cv_func_id 11
	.cv_file	3 "E:\\DD\\gsl-dadonenf\\include\\gsl\\gsl_assert" "DC2D278DC08DD14FC7E736FCD7722B8E" 1
	.cv_loc	11 3 143 0              # ..\include\gsl/gsl_assert:143:0
	.cv_fpo_proc	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	sub	esp, 28
	.cv_fpo_stackalloc	28
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
Ltmp39:
	.cv_loc	11 3 144 0              # ..\include\gsl/gsl_assert:144:0
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [esp], ecx
	mov	dword ptr [ebp - 16], eax # 4-byte Spill
	call	"??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z"
	lea	ecx, [ebp - 12]
	mov	dword ptr [esp], eax
	call	"??0fail_fast@gsl@@QAE@$$QAU01@@Z"
	sub	esp, 4
	lea	ecx, [ebp - 12]
	mov	dword ptr [esp], ecx
	lea	ecx, ["__TI3?AUfail_fast@gsl@@"]
	mov	dword ptr [esp + 4], ecx
	mov	dword ptr [ebp - 20], eax # 4-byte Spill
	call	dword ptr [__imp___CxxThrowException@8]
Ltmp40:
	.cv_fpo_endproc
Lfunc_end11:
                                        # -- End function
	.def	 "??0fail_fast@gsl@@QAE@QBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QAE@QBD@Z"
	.globl	"??0fail_fast@gsl@@QAE@QBD@Z" # -- Begin function ??0fail_fast@gsl@@QAE@QBD@Z
	.p2align	4, 0x90
"??0fail_fast@gsl@@QAE@QBD@Z":          # @"??0fail_fast@gsl@@QAE@QBD@Z"
Lfunc_begin12:
	.cv_func_id 12
	.cv_loc	12 3 99 0               # ..\include\gsl/gsl_assert:99:0
	.cv_fpo_proc	"??0fail_fast@gsl@@QAE@QBD@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 20
	.cv_fpo_stackalloc	20
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 8], ecx
	mov	ecx, dword ptr [ebp - 8]
Ltmp41:
	mov	edx, ecx
	mov	esi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 12], ecx # 4-byte Spill
	mov	ecx, edx
	mov	dword ptr [esp], esi
	mov	dword ptr [ebp - 16], eax # 4-byte Spill
	call	"??0logic_error@std@@QAE@PBD@Z"
	sub	esp, 4
	lea	ecx, ["??_7fail_fast@gsl@@6B@"]
	mov	edx, dword ptr [ebp - 12] # 4-byte Reload
	mov	dword ptr [edx], ecx
	mov	dword ptr [ebp - 20], eax # 4-byte Spill
	mov	eax, edx
	add	esp, 20
	pop	esi
	pop	ebp
	ret	4
Ltmp42:
	.cv_fpo_endproc
Lfunc_end12:
                                        # -- End function
	.def	 "??1fail_fast@gsl@@UAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1fail_fast@gsl@@UAE@XZ"
	.globl	"??1fail_fast@gsl@@UAE@XZ" # -- Begin function ??1fail_fast@gsl@@UAE@XZ
	.p2align	4, 0x90
"??1fail_fast@gsl@@UAE@XZ":             # @"??1fail_fast@gsl@@UAE@XZ"
Lfunc_begin13:
	.cv_func_id 13
	.cv_loc	13 3 97 0               # ..\include\gsl/gsl_assert:97:0
	.cv_fpo_proc	"??1fail_fast@gsl@@UAE@XZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	eax
	.cv_fpo_stackalloc	4
	.cv_fpo_endprologue
	mov	dword ptr [ebp - 4], ecx
	mov	ecx, dword ptr [ebp - 4]
Ltmp43:
	.cv_loc	13 3 97 0               # ..\include\gsl/gsl_assert:97:0
	call	"??1logic_error@std@@UAE@XZ"
Ltmp44:
	.cv_loc	13 3 97 0               # ..\include\gsl/gsl_assert:97:0
	add	esp, 4
	pop	ebp
	ret
Ltmp45:
	.cv_fpo_endproc
Lfunc_end13:
                                        # -- End function
	.def	 "?size@?$extent_type@$0A@@details@gsl@@QBEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$extent_type@$0A@@details@gsl@@QBEHXZ"
	.globl	"?size@?$extent_type@$0A@@details@gsl@@QBEHXZ" # -- Begin function ?size@?$extent_type@$0A@@details@gsl@@QBEHXZ
	.p2align	4, 0x90
"?size@?$extent_type@$0A@@details@gsl@@QBEHXZ": # @"?size@?$extent_type@$0A@@details@gsl@@QBEHXZ"
Lfunc_begin14:
	.cv_func_id 14
	.cv_loc	14 2 323 0              # ..\include\gsl/span:323:0
	.cv_fpo_proc	"?size@?$extent_type@$0A@@details@gsl@@QBEHXZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	eax
	.cv_fpo_stackalloc	4
	.cv_fpo_endprologue
	xor	eax, eax
	mov	dword ptr [ebp - 4], ecx
Ltmp46:
	add	esp, 4
	pop	ebp
	ret
Ltmp47:
	.cv_fpo_endproc
Lfunc_end14:
                                        # -- End function
	.def	 "??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z"
	.globl	"??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z" # -- Begin function ??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z
	.p2align	4, 0x90
"??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z": # @"??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z"
Lfunc_begin15:
	.cv_func_id 15
	.cv_file	4 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.20.27323\\include\\type_traits" "AC2AB08103956E116AB4922A4D72E52D" 1
	.cv_loc	15 4 1296 0             # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\type_traits:1296:0
	.cv_fpo_proc	"??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	eax
	.cv_fpo_stackalloc	4
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
Ltmp48:
	.cv_loc	15 4 1297 0             # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\type_traits:1297:0
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 4], eax # 4-byte Spill
	mov	eax, ecx
	add	esp, 4
	pop	ebp
	ret
Ltmp49:
	.cv_fpo_endproc
Lfunc_end15:
                                        # -- End function
	.def	 "??0fail_fast@gsl@@QAE@$$QAU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QAE@$$QAU01@@Z"
	.globl	"??0fail_fast@gsl@@QAE@$$QAU01@@Z" # -- Begin function ??0fail_fast@gsl@@QAE@$$QAU01@@Z
	.p2align	4, 0x90
"??0fail_fast@gsl@@QAE@$$QAU01@@Z":     # @"??0fail_fast@gsl@@QAE@$$QAU01@@Z"
Lfunc_begin16:
	.cv_func_id 16
	.cv_loc	16 3 97 0               # ..\include\gsl/gsl_assert:97:0
	.cv_fpo_proc	"??0fail_fast@gsl@@QAE@$$QAU01@@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 20
	.cv_fpo_stackalloc	20
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 8], ecx
	mov	ecx, dword ptr [ebp - 8]
Ltmp50:
	mov	edx, ecx
	mov	esi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 12], ecx # 4-byte Spill
	mov	ecx, edx
	mov	dword ptr [esp], esi
	mov	dword ptr [ebp - 16], eax # 4-byte Spill
	call	"??0logic_error@std@@QAE@$$QAV01@@Z"
	sub	esp, 4
	lea	ecx, ["??_7fail_fast@gsl@@6B@"]
	mov	edx, dword ptr [ebp - 12] # 4-byte Reload
	mov	dword ptr [edx], ecx
	mov	dword ptr [ebp - 20], eax # 4-byte Spill
	mov	eax, edx
	add	esp, 20
	pop	esi
	pop	ebp
	ret	4
Ltmp51:
	.cv_fpo_endproc
Lfunc_end16:
                                        # -- End function
	.def	 "??0fail_fast@gsl@@QAE@ABU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QAE@ABU01@@Z"
	.globl	"??0fail_fast@gsl@@QAE@ABU01@@Z" # -- Begin function ??0fail_fast@gsl@@QAE@ABU01@@Z
	.p2align	4, 0x90
"??0fail_fast@gsl@@QAE@ABU01@@Z":       # @"??0fail_fast@gsl@@QAE@ABU01@@Z"
Lfunc_begin17:
	.cv_func_id 17
	.cv_loc	17 3 97 0               # ..\include\gsl/gsl_assert:97:0
	.cv_fpo_proc	"??0fail_fast@gsl@@QAE@ABU01@@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 20
	.cv_fpo_stackalloc	20
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 8], ecx
	mov	ecx, dword ptr [ebp - 8]
Ltmp52:
	mov	edx, ecx
	mov	esi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 12], ecx # 4-byte Spill
	mov	ecx, edx
	mov	dword ptr [esp], esi
	mov	dword ptr [ebp - 16], eax # 4-byte Spill
	call	"??0logic_error@std@@QAE@ABV01@@Z"
	sub	esp, 4
	lea	ecx, ["??_7fail_fast@gsl@@6B@"]
	mov	edx, dword ptr [ebp - 12] # 4-byte Reload
	mov	dword ptr [edx], ecx
	mov	dword ptr [ebp - 20], eax # 4-byte Spill
	mov	eax, edx
	add	esp, 20
	pop	esi
	pop	ebp
	ret	4
Ltmp53:
	.cv_fpo_endproc
Lfunc_end17:
                                        # -- End function
	.def	 "??0logic_error@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QAE@ABV01@@Z"
	.globl	"??0logic_error@std@@QAE@ABV01@@Z" # -- Begin function ??0logic_error@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0logic_error@std@@QAE@ABV01@@Z":     # @"??0logic_error@std@@QAE@ABV01@@Z"
Lfunc_begin18:
	.cv_func_id 18
	.cv_file	5 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.20.27323\\include\\stdexcept" "EC5D98FB0D0440BEF66BFB2B3DEE37DE" 1
	.cv_loc	18 5 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\stdexcept:17:0
	.cv_fpo_proc	"??0logic_error@std@@QAE@ABV01@@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 20
	.cv_fpo_stackalloc	20
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 8], ecx
	mov	ecx, dword ptr [ebp - 8]
Ltmp54:
	mov	edx, ecx
	mov	esi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 12], ecx # 4-byte Spill
	mov	ecx, edx
	mov	dword ptr [esp], esi
	mov	dword ptr [ebp - 16], eax # 4-byte Spill
	call	"??0exception@std@@QAE@ABV01@@Z"
	sub	esp, 4
	lea	ecx, ["??_7logic_error@std@@6B@"]
	mov	edx, dword ptr [ebp - 12] # 4-byte Reload
	mov	dword ptr [edx], ecx
	mov	dword ptr [ebp - 20], eax # 4-byte Spill
	mov	eax, edx
	add	esp, 20
	pop	esi
	pop	ebp
	ret	4
Ltmp55:
	.cv_fpo_endproc
Lfunc_end18:
                                        # -- End function
	.def	 "??0exception@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QAE@ABV01@@Z"
	.globl	"??0exception@std@@QAE@ABV01@@Z" # -- Begin function ??0exception@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0exception@std@@QAE@ABV01@@Z":       # @"??0exception@std@@QAE@ABV01@@Z"
Lfunc_begin19:
	.cv_func_id 19
	.cv_file	6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.20.27323\\include\\vcruntime_exception.h" "6C163BAA92D5C81892AD5480D109CCEE" 1
	.cv_loc	19 6 68 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:68:0
	.cv_fpo_proc	"??0exception@std@@QAE@ABV01@@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 28
	.cv_fpo_stackalloc	28
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	xor	edx, edx
	lea	esi, ["??_7exception@std@@6B@"]
	mov	dword ptr [ebp - 8], ecx
	mov	ecx, dword ptr [ebp - 8]
Ltmp56:
	mov	dword ptr [ecx], esi
	mov	esi, ecx
	add	esi, 4
	mov	dword ptr [esp], esi
	mov	dword ptr [esp + 4], 0
	mov	dword ptr [esp + 8], 8
	mov	dword ptr [ebp - 12], eax # 4-byte Spill
	mov	dword ptr [ebp - 16], ecx # 4-byte Spill
	mov	dword ptr [ebp - 20], edx # 4-byte Spill
	call	_memset
Ltmp57:
	.cv_loc	19 6 69 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:69:0
	mov	eax, dword ptr [ebp - 16] # 4-byte Reload
	add	eax, 4
	mov	ecx, dword ptr [ebp + 8]
	add	ecx, 4
	mov	dword ptr [esp], ecx
	mov	dword ptr [esp + 4], eax
	call	___std_exception_copy
Ltmp58:
	.cv_loc	19 6 70 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:70:0
	mov	eax, dword ptr [ebp - 16] # 4-byte Reload
	add	esp, 28
	pop	esi
	pop	ebp
	ret	4
Ltmp59:
	.cv_fpo_endproc
Lfunc_end19:
                                        # -- End function
	.def	 "??0logic_error@std@@QAE@$$QAV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QAE@$$QAV01@@Z"
	.globl	"??0logic_error@std@@QAE@$$QAV01@@Z" # -- Begin function ??0logic_error@std@@QAE@$$QAV01@@Z
	.p2align	4, 0x90
"??0logic_error@std@@QAE@$$QAV01@@Z":   # @"??0logic_error@std@@QAE@$$QAV01@@Z"
Lfunc_begin20:
	.cv_func_id 20
	.cv_loc	20 5 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\stdexcept:17:0
	.cv_fpo_proc	"??0logic_error@std@@QAE@$$QAV01@@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 20
	.cv_fpo_stackalloc	20
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 8], ecx
	mov	ecx, dword ptr [ebp - 8]
Ltmp60:
	mov	edx, ecx
	mov	esi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 12], ecx # 4-byte Spill
	mov	ecx, edx
	mov	dword ptr [esp], esi
	mov	dword ptr [ebp - 16], eax # 4-byte Spill
	call	"??0exception@std@@QAE@ABV01@@Z"
	sub	esp, 4
	lea	ecx, ["??_7logic_error@std@@6B@"]
	mov	edx, dword ptr [ebp - 12] # 4-byte Reload
	mov	dword ptr [edx], ecx
	mov	dword ptr [ebp - 20], eax # 4-byte Spill
	mov	eax, edx
	add	esp, 20
	pop	esi
	pop	ebp
	ret	4
Ltmp61:
	.cv_fpo_endproc
Lfunc_end20:
                                        # -- End function
	.def	 "??_Gfail_fast@gsl@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gfail_fast@gsl@@UAEPAXI@Z"
	.globl	"??_Gfail_fast@gsl@@UAEPAXI@Z" # -- Begin function ??_Gfail_fast@gsl@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gfail_fast@gsl@@UAEPAXI@Z":         # @"??_Gfail_fast@gsl@@UAEPAXI@Z"
Lfunc_begin21:
	.cv_func_id 21
	.cv_loc	21 3 97 0               # ..\include\gsl/gsl_assert:97:0
	.cv_fpo_proc	"??_Gfail_fast@gsl@@UAEPAXI@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	sub	esp, 24
	.cv_fpo_stackalloc	24
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 8], ecx
	mov	ecx, dword ptr [ebp - 8]
	mov	edx, ecx
	mov	dword ptr [ebp - 4], edx
	mov	edx, dword ptr [ebp + 8]
Ltmp62:
	mov	dword ptr [ebp - 12], ecx # 4-byte Spill
	mov	dword ptr [ebp - 16], eax # 4-byte Spill
	mov	dword ptr [ebp - 20], edx # 4-byte Spill
	call	"??1fail_fast@gsl@@UAE@XZ"
	mov	eax, dword ptr [ebp - 20] # 4-byte Reload
	cmp	eax, 0
	je	LBB21_2
# %bb.1:
	mov	eax, dword ptr [ebp - 12] # 4-byte Reload
	mov	dword ptr [esp], eax
	call	"??3@YAXPAX@Z"
LBB21_2:
	mov	eax, dword ptr [ebp - 4]
	add	esp, 24
	pop	ebp
	ret	4
Ltmp63:
	.cv_fpo_endproc
Lfunc_end21:
                                        # -- End function
	.def	 "?what@exception@std@@UBEPBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?what@exception@std@@UBEPBDXZ"
	.globl	"?what@exception@std@@UBEPBDXZ" # -- Begin function ?what@exception@std@@UBEPBDXZ
	.p2align	4, 0x90
"?what@exception@std@@UBEPBDXZ":        # @"?what@exception@std@@UBEPBDXZ"
Lfunc_begin22:
	.cv_func_id 22
	.cv_loc	22 6 90 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:90:0
	.cv_fpo_proc	"?what@exception@std@@UBEPBDXZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	sub	esp, 12
	.cv_fpo_stackalloc	12
	.cv_fpo_endprologue
	mov	dword ptr [ebp - 4], ecx
	mov	ecx, dword ptr [ebp - 4]
Ltmp64:
	.cv_loc	22 6 91 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:91:0
	cmp	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 8], ecx # 4-byte Spill
	je	LBB22_2
# %bb.1:
	mov	eax, dword ptr [ebp - 8] # 4-byte Reload
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 12], ecx # 4-byte Spill
	jmp	LBB22_3
LBB22_2:
	lea	eax, ["??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"]
	mov	dword ptr [ebp - 12], eax # 4-byte Spill
	jmp	LBB22_3
LBB22_3:
	mov	eax, dword ptr [ebp - 12] # 4-byte Reload
	add	esp, 12
	pop	ebp
	ret
Ltmp65:
	.cv_fpo_endproc
Lfunc_end22:
                                        # -- End function
	.def	 "??_Glogic_error@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Glogic_error@std@@UAEPAXI@Z"
	.globl	"??_Glogic_error@std@@UAEPAXI@Z" # -- Begin function ??_Glogic_error@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Glogic_error@std@@UAEPAXI@Z":       # @"??_Glogic_error@std@@UAEPAXI@Z"
Lfunc_begin23:
	.cv_func_id 23
	.cv_loc	23 5 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\stdexcept:17:0
	.cv_fpo_proc	"??_Glogic_error@std@@UAEPAXI@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	sub	esp, 24
	.cv_fpo_stackalloc	24
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 8], ecx
	mov	ecx, dword ptr [ebp - 8]
	mov	edx, ecx
	mov	dword ptr [ebp - 4], edx
	mov	edx, dword ptr [ebp + 8]
Ltmp66:
	mov	dword ptr [ebp - 12], ecx # 4-byte Spill
	mov	dword ptr [ebp - 16], eax # 4-byte Spill
	mov	dword ptr [ebp - 20], edx # 4-byte Spill
	call	"??1logic_error@std@@UAE@XZ"
	mov	eax, dword ptr [ebp - 20] # 4-byte Reload
	cmp	eax, 0
	je	LBB23_2
# %bb.1:
	mov	eax, dword ptr [ebp - 12] # 4-byte Reload
	mov	dword ptr [esp], eax
	call	"??3@YAXPAX@Z"
LBB23_2:
	mov	eax, dword ptr [ebp - 4]
	add	esp, 24
	pop	ebp
	ret	4
Ltmp67:
	.cv_fpo_endproc
Lfunc_end23:
                                        # -- End function
	.def	 "??1logic_error@std@@UAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1logic_error@std@@UAE@XZ"
	.globl	"??1logic_error@std@@UAE@XZ" # -- Begin function ??1logic_error@std@@UAE@XZ
	.p2align	4, 0x90
"??1logic_error@std@@UAE@XZ":           # @"??1logic_error@std@@UAE@XZ"
Lfunc_begin24:
	.cv_func_id 24
	.cv_loc	24 5 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\stdexcept:17:0
	.cv_fpo_proc	"??1logic_error@std@@UAE@XZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	eax
	.cv_fpo_stackalloc	4
	.cv_fpo_endprologue
	mov	dword ptr [ebp - 4], ecx
	mov	ecx, dword ptr [ebp - 4]
Ltmp68:
	.cv_loc	24 5 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\stdexcept:17:0
	call	"??1exception@std@@UAE@XZ"
Ltmp69:
	.cv_loc	24 5 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\stdexcept:17:0
	add	esp, 4
	pop	ebp
	ret
Ltmp70:
	.cv_fpo_endproc
Lfunc_end24:
                                        # -- End function
	.def	 "??1exception@std@@UAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1exception@std@@UAE@XZ"
	.globl	"??1exception@std@@UAE@XZ" # -- Begin function ??1exception@std@@UAE@XZ
	.p2align	4, 0x90
"??1exception@std@@UAE@XZ":             # @"??1exception@std@@UAE@XZ"
Lfunc_begin25:
	.cv_func_id 25
	.cv_loc	25 6 85 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:85:0
	.cv_fpo_proc	"??1exception@std@@UAE@XZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	sub	esp, 8
	.cv_fpo_stackalloc	8
	.cv_fpo_endprologue
	lea	eax, ["??_7exception@std@@6B@"]
	mov	dword ptr [ebp - 4], ecx
	mov	ecx, dword ptr [ebp - 4]
Ltmp71:
	mov	dword ptr [ecx], eax
Ltmp72:
	.cv_loc	25 6 86 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:86:0
	add	ecx, 4
	mov	dword ptr [esp], ecx
	call	___std_exception_destroy
Ltmp73:
	.cv_loc	25 6 87 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:87:0
	add	esp, 8
	pop	ebp
	ret
Ltmp74:
	.cv_fpo_endproc
Lfunc_end25:
                                        # -- End function
	.def	 "??_Gexception@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gexception@std@@UAEPAXI@Z"
	.globl	"??_Gexception@std@@UAEPAXI@Z" # -- Begin function ??_Gexception@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gexception@std@@UAEPAXI@Z":         # @"??_Gexception@std@@UAEPAXI@Z"
Lfunc_begin26:
	.cv_func_id 26
	.cv_loc	26 6 85 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:85:0
	.cv_fpo_proc	"??_Gexception@std@@UAEPAXI@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	sub	esp, 24
	.cv_fpo_stackalloc	24
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 8], ecx
	mov	ecx, dword ptr [ebp - 8]
	mov	edx, ecx
	mov	dword ptr [ebp - 4], edx
	mov	edx, dword ptr [ebp + 8]
Ltmp75:
	mov	dword ptr [ebp - 12], ecx # 4-byte Spill
	mov	dword ptr [ebp - 16], eax # 4-byte Spill
	mov	dword ptr [ebp - 20], edx # 4-byte Spill
	call	"??1exception@std@@UAE@XZ"
	mov	eax, dword ptr [ebp - 20] # 4-byte Reload
	cmp	eax, 0
	je	LBB26_2
# %bb.1:
	mov	eax, dword ptr [ebp - 12] # 4-byte Reload
	mov	dword ptr [esp], eax
	call	"??3@YAXPAX@Z"
LBB26_2:
	.cv_loc	26 6 87 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:87:0
	mov	eax, dword ptr [ebp - 4]
	add	esp, 24
	pop	ebp
	ret	4
Ltmp76:
	.cv_fpo_endproc
Lfunc_end26:
                                        # -- End function
	.def	 "??0logic_error@std@@QAE@PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QAE@PBD@Z"
	.globl	"??0logic_error@std@@QAE@PBD@Z" # -- Begin function ??0logic_error@std@@QAE@PBD@Z
	.p2align	4, 0x90
"??0logic_error@std@@QAE@PBD@Z":        # @"??0logic_error@std@@QAE@PBD@Z"
Lfunc_begin27:
	.cv_func_id 27
	.cv_loc	27 5 24 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\stdexcept:24:0
	.cv_fpo_proc	"??0logic_error@std@@QAE@PBD@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 20
	.cv_fpo_stackalloc	20
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 8], ecx
	mov	ecx, dword ptr [ebp - 8]
Ltmp77:
	mov	edx, ecx
	mov	esi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 12], ecx # 4-byte Spill
	mov	ecx, edx
	mov	dword ptr [esp], esi
	mov	dword ptr [ebp - 16], eax # 4-byte Spill
	call	"??0exception@std@@QAE@QBD@Z"
	sub	esp, 4
	lea	ecx, ["??_7logic_error@std@@6B@"]
	mov	edx, dword ptr [ebp - 12] # 4-byte Reload
	mov	dword ptr [edx], ecx
	.cv_loc	27 5 25 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\stdexcept:25:0
	mov	dword ptr [ebp - 20], eax # 4-byte Spill
	mov	eax, edx
	add	esp, 20
	pop	esi
	pop	ebp
	ret	4
Ltmp78:
	.cv_fpo_endproc
Lfunc_end27:
                                        # -- End function
	.def	 "??0exception@std@@QAE@QBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QAE@QBD@Z"
	.globl	"??0exception@std@@QAE@QBD@Z" # -- Begin function ??0exception@std@@QAE@QBD@Z
	.p2align	4, 0x90
"??0exception@std@@QAE@QBD@Z":          # @"??0exception@std@@QAE@QBD@Z"
Lfunc_begin28:
	.cv_func_id 28
	.cv_loc	28 6 55 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:55:0
	.cv_fpo_proc	"??0exception@std@@QAE@QBD@Z" 4
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	edi
	.cv_fpo_pushreg	edi
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 40
	.cv_fpo_stackalloc	40
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	xor	edx, edx
	lea	esi, ["??_7exception@std@@6B@"]
	mov	edi, dword ptr [___security_cookie]
	xor	edi, ebp
	mov	dword ptr [ebp - 12], edi
	mov	dword ptr [ebp - 24], ecx
	mov	ecx, dword ptr [ebp - 24]
Ltmp79:
	mov	dword ptr [ecx], esi
	mov	esi, ecx
	add	esi, 4
	mov	dword ptr [esp], esi
	mov	dword ptr [esp + 4], 0
	mov	dword ptr [esp + 8], 8
	mov	dword ptr [ebp - 28], eax # 4-byte Spill
	mov	dword ptr [ebp - 32], ecx # 4-byte Spill
	mov	dword ptr [ebp - 36], edx # 4-byte Spill
	call	_memset
Ltmp80:
	.cv_loc	28 6 56 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:56:0
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 20], eax
	mov	byte ptr [ebp - 16], 1
	.cv_loc	28 6 57 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:57:0
	mov	eax, dword ptr [ebp - 32] # 4-byte Reload
	add	eax, 4
	lea	ecx, [ebp - 20]
Ltmp81:
	#DEBUG_VALUE: _InitData <- [$ecx+0]
	mov	dword ptr [esp], ecx
	mov	dword ptr [esp + 4], eax
	call	___std_exception_copy
Ltmp82:
	mov	eax, dword ptr [ebp - 12]
	xor	eax, ebp
	mov	ecx, eax
	call	@__security_check_cookie@4
Ltmp83:
	.cv_loc	28 6 58 0               # C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h:58:0
	mov	eax, dword ptr [ebp - 32] # 4-byte Reload
	add	esp, 40
	pop	esi
	pop	edi
	pop	ebp
	ret	4
Ltmp84:
	.cv_fpo_endproc
Lfunc_end28:
                                        # -- End function
	.def	 "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ"
	.globl	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ" # -- Begin function ?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ
	.p2align	4, 0x90
"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ": # @"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ"
Lfunc_begin29:
	.cv_func_id 29
	.cv_loc	29 2 602 0              # ..\include\gsl/span:602:0
	.cv_fpo_proc	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	eax
	.cv_fpo_stackalloc	4
	.cv_fpo_endprologue
	mov	dword ptr [ebp - 4], ecx
	mov	ecx, dword ptr [ebp - 4]
Ltmp85:
	mov	eax, dword ptr [ecx + 4]
	add	esp, 4
	pop	ebp
	ret
Ltmp86:
	.cv_fpo_endproc
Lfunc_end29:
                                        # -- End function
	.def	 "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z"
	.globl	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z" # -- Begin function ??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z
	.p2align	4, 0x90
"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z": # @"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z"
Lfunc_begin30:
	.cv_func_id 30
	.cv_loc	30 2 597 0              # ..\include\gsl/span:597:0
	.cv_fpo_proc	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z" 8
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	ebx
	.cv_fpo_pushreg	ebx
	push	edi
	.cv_fpo_pushreg	edi
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 96
	.cv_fpo_stackalloc	96
	.cv_fpo_endprologue
	mov	eax, dword ptr [ebp + 8]
	mov	edx, esp
	mov	dword ptr [ebp - 28], edx
	mov	dword ptr [ebp - 16], -1
	lea	edx, [ebp - 24]
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z"
	mov	esi, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], esi
	mov	dword ptr fs:[0], edx
	mov	dword ptr [ebp - 36], ecx
	mov	ecx, dword ptr [ebp - 36]
	mov	dword ptr [ebp - 32], ecx
Ltmp91:
	mov	edx, ecx
	mov	dword ptr [ebp - 76], ecx # 4-byte Spill
	mov	ecx, edx
	lea	edx, [ebp - 40]
	mov	bl, byte ptr [edx]
	mov	byte ptr [esp], bl
	mov	dword ptr [ebp - 80], eax # 4-byte Spill
	call	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z"
	sub	esp, 4
	mov	ecx, dword ptr [ebp + 8]
	mov	edx, dword ptr [ebp - 76] # 4-byte Reload
	mov	dword ptr [edx + 4], ecx
Ltmp92:
	.cv_loc	30 2 598 0              # ..\include\gsl/span:598:0
	mov	ecx, edx
	mov	dword ptr [ebp - 84], eax # 4-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ"
	cmp	eax, 0
	setge	bl
	mov	byte ptr [ebp - 53], 0
	test	bl, 1
	jne	LBB30_1
	jmp	LBB30_2
LBB30_1:
	test	byte ptr [ebp - 53], 1
	jne	LBB30_4
	jmp	LBB30_5
LBB30_2:
	mov	eax, esp
	mov	dword ptr [eax], offset "??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	lea	eax, [ebp - 52]
	mov	ecx, eax
	mov	dword ptr [ebp - 88], eax # 4-byte Spill
	call	"??0fail_fast@gsl@@QAE@QBD@Z"
	sub	esp, 4
	mov	byte ptr [ebp - 53], 1
	mov	dword ptr [ebp - 16], 0
	mov	ecx, esp
	mov	edx, dword ptr [ebp - 88] # 4-byte Reload
	mov	dword ptr [ecx], edx
	mov	dword ptr [ebp - 92], eax # 4-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z"
	sub	esp, 4
	jmp	LBB30_3
LBB30_3:
LBB30_4:
	lea	ecx, [ebp - 52]
	call	"??1fail_fast@gsl@@UAE@XZ"
LBB30_5:
	.cv_loc	30 2 599 0              # ..\include\gsl/span:599:0
	mov	eax, dword ptr [ebp + 8]
	mov	byte ptr [ebp - 69], 0
	cmp	eax, 0
	mov	cl, 1
	mov	byte ptr [ebp - 93], cl # 1-byte Spill
	jne	LBB30_7
# %bb.6:
	mov	eax, dword ptr [ebp - 76] # 4-byte Reload
	mov	ecx, eax
	call	"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ"
	cmp	eax, 0
	sete	dl
	mov	byte ptr [ebp - 93], dl # 1-byte Spill
LBB30_7:
	mov	al, byte ptr [ebp - 93] # 1-byte Reload
	test	al, 1
	jne	LBB30_8
	jmp	LBB30_9
LBB30_8:
	test	byte ptr [ebp - 69], 1
	jne	LBB30_14
	jmp	LBB30_15
LBB30_9:
	mov	eax, esp
	mov	dword ptr [eax], offset "??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	lea	eax, [ebp - 68]
	mov	ecx, eax
	mov	dword ptr [ebp - 100], eax # 4-byte Spill
	call	"??0fail_fast@gsl@@QAE@QBD@Z"
	sub	esp, 4
	mov	byte ptr [ebp - 69], 1
	mov	dword ptr [ebp - 16], 1
	mov	ecx, esp
	mov	edx, dword ptr [ebp - 100] # 4-byte Reload
	mov	dword ptr [ecx], edx
	mov	dword ptr [ebp - 104], eax # 4-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z"
	sub	esp, 4
	jmp	LBB30_10
LBB30_10:
LBB30_14:
	lea	ecx, [ebp - 68]
	call	"??1fail_fast@gsl@@UAE@XZ"
Ltmp93:
LBB30_15:
	.cv_loc	30 2 600 0              # ..\include\gsl/span:600:0
	mov	eax, dword ptr [ebp - 32]
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 96
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	8
	.def	 "?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z@4HA":
LBB30_11:
	push	ebp
	push	eax
	add	ebp, 12
Ltmp94:
	.cv_loc	30 2 598 0              # ..\include\gsl/span:598:0
	test	byte ptr [ebp - 53], 1
	jne	LBB30_12
	jmp	LBB30_13
LBB30_12:
	lea	ecx, [ebp - 52]
	call	"??1fail_fast@gsl@@UAE@XZ"
LBB30_13:
	add	esp, 4
	pop	ebp
	ret                             # CLEANUPRET
	.def	 "?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z@4HA":
LBB30_16:
	push	ebp
	push	eax
	add	ebp, 12
	.cv_loc	30 2 599 0              # ..\include\gsl/span:599:0
	test	byte ptr [ebp - 69], 1
	jne	LBB30_17
	jmp	LBB30_18
LBB30_17:
	lea	ecx, [ebp - 68]
	call	"??1fail_fast@gsl@@UAE@XZ"
LBB30_18:
	add	esp, 4
	pop	ebp
	ret                             # CLEANUPRET
Ltmp95:
	.cv_fpo_endproc
Lfunc_end30:
	.section	.xdata,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
"L__ehtable$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z") # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	0                       # IPMapEntries
	.long	0                       # IPToStateXData
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z@4HA" # Action
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z@4HA" # Action
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z"
                                        # -- End function
	.def	 "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ"
	.globl	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ" # -- Begin function ?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ
	.p2align	4, 0x90
"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ": # @"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ"
Lfunc_begin31:
	.cv_func_id 31
	.cv_loc	31 2 602 0              # ..\include\gsl/span:602:0
	.cv_fpo_proc	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ" 0
# %bb.0:
	push	ebp
	.cv_fpo_pushreg	ebp
	mov	ebp, esp
	.cv_fpo_setframe	ebp
	push	eax
	.cv_fpo_stackalloc	4
	.cv_fpo_endprologue
	mov	dword ptr [ebp - 4], ecx
	mov	ecx, dword ptr [ebp - 4]
Ltmp96:
	mov	eax, dword ptr [ecx + 4]
	add	esp, 4
	pop	ebp
	ret
Ltmp97:
	.cv_fpo_endproc
Lfunc_end31:
                                        # -- End function
	.def	 "___ehhandler$??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
	.p2align	4, 0x90         # -- Begin function __ehhandler$??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ
"___ehhandler$??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ": # @"__ehhandler$??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
Lfunc_begin32:
	.cv_fpo_proc	"___ehhandler$??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ" 16
# %bb.0:
	push	edi
	.cv_fpo_pushreg	edi
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 16
	.cv_fpo_stackalloc	16
	.cv_fpo_endprologue
	mov	eax, dword ptr [esp + 40]
	mov	ecx, dword ptr [esp + 36]
	mov	edx, dword ptr [esp + 32]
	mov	esi, dword ptr [esp + 28]
	mov	edi, offset "L__ehtable$??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
	mov	dword ptr [esp + 12], eax # 4-byte Spill
	mov	eax, edi
	mov	dword ptr [esp + 8], esi # 4-byte Spill
	mov	dword ptr [esp + 4], ecx # 4-byte Spill
	mov	dword ptr [esp], edx    # 4-byte Spill
	add	esp, 16
	pop	esi
	pop	edi
	jmp	___CxxFrameHandler3     # TAILCALL
	.cv_fpo_endproc
Lfunc_end32:
                                        # -- End function
	.def	 "___ehhandler$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ"
	.p2align	4, 0x90         # -- Begin function __ehhandler$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ
"___ehhandler$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ": # @"__ehhandler$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ"
Lfunc_begin33:
	.cv_fpo_proc	"___ehhandler$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ" 16
# %bb.0:
	push	edi
	.cv_fpo_pushreg	edi
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 16
	.cv_fpo_stackalloc	16
	.cv_fpo_endprologue
	mov	eax, dword ptr [esp + 40]
	mov	ecx, dword ptr [esp + 36]
	mov	edx, dword ptr [esp + 32]
	mov	esi, dword ptr [esp + 28]
	mov	edi, offset "L__ehtable$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ"
	mov	dword ptr [esp + 12], eax # 4-byte Spill
	mov	eax, edi
	mov	dword ptr [esp + 8], esi # 4-byte Spill
	mov	dword ptr [esp + 4], ecx # 4-byte Spill
	mov	dword ptr [esp], edx    # 4-byte Spill
	add	esp, 16
	pop	esi
	pop	edi
	jmp	___CxxFrameHandler3     # TAILCALL
	.cv_fpo_endproc
Lfunc_end33:
                                        # -- End function
	.def	 "___ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z"
	.p2align	4, 0x90         # -- Begin function __ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z
"___ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z": # @"__ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z"
Lfunc_begin34:
	.cv_fpo_proc	"___ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z" 16
# %bb.0:
	push	edi
	.cv_fpo_pushreg	edi
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 16
	.cv_fpo_stackalloc	16
	.cv_fpo_endprologue
	mov	eax, dword ptr [esp + 40]
	mov	ecx, dword ptr [esp + 36]
	mov	edx, dword ptr [esp + 32]
	mov	esi, dword ptr [esp + 28]
	mov	edi, offset "L__ehtable$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z"
	mov	dword ptr [esp + 12], eax # 4-byte Spill
	mov	eax, edi
	mov	dword ptr [esp + 8], esi # 4-byte Spill
	mov	dword ptr [esp + 4], ecx # 4-byte Spill
	mov	dword ptr [esp], edx    # 4-byte Spill
	add	esp, 16
	pop	esi
	pop	edi
	jmp	___CxxFrameHandler3     # TAILCALL
	.cv_fpo_endproc
Lfunc_end34:
                                        # -- End function
	.def	 "___ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z"
	.p2align	4, 0x90         # -- Begin function __ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z
"___ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z": # @"__ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z"
Lfunc_begin35:
	.cv_fpo_proc	"___ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z" 16
# %bb.0:
	push	edi
	.cv_fpo_pushreg	edi
	push	esi
	.cv_fpo_pushreg	esi
	sub	esp, 16
	.cv_fpo_stackalloc	16
	.cv_fpo_endprologue
	mov	eax, dword ptr [esp + 40]
	mov	ecx, dword ptr [esp + 36]
	mov	edx, dword ptr [esp + 32]
	mov	esi, dword ptr [esp + 28]
	mov	edi, offset "L__ehtable$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z"
	mov	dword ptr [esp + 12], eax # 4-byte Spill
	mov	eax, edi
	mov	dword ptr [esp + 8], esi # 4-byte Spill
	mov	dword ptr [esp + 4], ecx # 4-byte Spill
	mov	dword ptr [esp], edx    # 4-byte Spill
	add	esp, 16
	pop	esi
	pop	edi
	jmp	___CxxFrameHandler3     # TAILCALL
	.cv_fpo_endproc
Lfunc_end35:
                                        # -- End function
	.section	.rdata,"dr",discard,"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 598"

	.section	.rdata,"dr",discard,"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 599"

	.section	.data,"dw",discard,"??_R0?AUfail_fast@gsl@@@8"
	.globl	"??_R0?AUfail_fast@gsl@@@8" # @"??_R0?AUfail_fast@gsl@@@8"
	.p2align	4
"??_R0?AUfail_fast@gsl@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AUfail_fast@gsl@@"

	.section	.xdata,"dr",discard,"__CT??_R0?AUfail_fast@gsl@@@812"
	.globl	"__CT??_R0?AUfail_fast@gsl@@@812" # @"_CT??_R0?AUfail_fast@gsl@@@812"
	.p2align	4
"__CT??_R0?AUfail_fast@gsl@@@812":
	.long	0                       # 0x0
	.long	"??_R0?AUfail_fast@gsl@@@8"
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	12                      # 0xc
	.long	"??0fail_fast@gsl@@QAE@ABU01@@Z"

	.section	.data,"dw",discard,"??_R0?AVlogic_error@std@@@8"
	.globl	"??_R0?AVlogic_error@std@@@8" # @"??_R0?AVlogic_error@std@@@8"
	.p2align	4
"??_R0?AVlogic_error@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVlogic_error@std@@"
	.zero	2

	.section	.xdata,"dr",discard,"__CT??_R0?AVlogic_error@std@@@812"
	.globl	"__CT??_R0?AVlogic_error@std@@@812" # @"_CT??_R0?AVlogic_error@std@@@812"
	.p2align	4
"__CT??_R0?AVlogic_error@std@@@812":
	.long	0                       # 0x0
	.long	"??_R0?AVlogic_error@std@@@8"
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	12                      # 0xc
	.long	"??0logic_error@std@@QAE@ABV01@@Z"

	.section	.data,"dw",discard,"??_R0?AVexception@std@@@8"
	.globl	"??_R0?AVexception@std@@@8" # @"??_R0?AVexception@std@@@8"
	.p2align	4
"??_R0?AVexception@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVexception@std@@"

	.section	.xdata,"dr",discard,"__CT??_R0?AVexception@std@@@812"
	.globl	"__CT??_R0?AVexception@std@@@812" # @"_CT??_R0?AVexception@std@@@812"
	.p2align	4
"__CT??_R0?AVexception@std@@@812":
	.long	0                       # 0x0
	.long	"??_R0?AVexception@std@@@8"
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	12                      # 0xc
	.long	"??0exception@std@@QAE@ABV01@@Z"

	.section	.xdata,"dr",discard,"__CTA3?AUfail_fast@gsl@@"
	.globl	"__CTA3?AUfail_fast@gsl@@" # @"_CTA3?AUfail_fast@gsl@@"
	.p2align	2
"__CTA3?AUfail_fast@gsl@@":
	.long	3                       # 0x3
	.long	"__CT??_R0?AUfail_fast@gsl@@@812"
	.long	"__CT??_R0?AVlogic_error@std@@@812"
	.long	"__CT??_R0?AVexception@std@@@812"

	.section	.xdata,"dr",discard,"__TI3?AUfail_fast@gsl@@"
	.globl	"__TI3?AUfail_fast@gsl@@" # @"_TI3?AUfail_fast@gsl@@"
	.p2align	2
"__TI3?AUfail_fast@gsl@@":
	.long	0                       # 0x0
	.long	"??1fail_fast@gsl@@UAE@XZ"
	.long	0
	.long	"__CTA3?AUfail_fast@gsl@@"

	.section	.rdata,"dr",largest,"??_7fail_fast@gsl@@6B@"
	.p2align	2               # @0
L___unnamed_1:
	.long	"??_R4fail_fast@gsl@@6B@"
	.long	"??_Gfail_fast@gsl@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4fail_fast@gsl@@6B@"
	.globl	"??_R4fail_fast@gsl@@6B@" # @"??_R4fail_fast@gsl@@6B@"
	.p2align	4
"??_R4fail_fast@gsl@@6B@":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUfail_fast@gsl@@@8"
	.long	"??_R3fail_fast@gsl@@8"

	.section	.rdata,"dr",discard,"??_R3fail_fast@gsl@@8"
	.globl	"??_R3fail_fast@gsl@@8" # @"??_R3fail_fast@gsl@@8"
	.p2align	2
"??_R3fail_fast@gsl@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	"??_R2fail_fast@gsl@@8"

	.section	.rdata,"dr",discard,"??_R2fail_fast@gsl@@8"
	.globl	"??_R2fail_fast@gsl@@8" # @"??_R2fail_fast@gsl@@8"
	.p2align	2
"??_R2fail_fast@gsl@@8":
	.long	"??_R1A@?0A@EA@fail_fast@gsl@@8"
	.long	"??_R1A@?0A@EA@logic_error@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@fail_fast@gsl@@8"
	.globl	"??_R1A@?0A@EA@fail_fast@gsl@@8" # @"??_R1A@?0A@EA@fail_fast@gsl@@8"
	.p2align	4
"??_R1A@?0A@EA@fail_fast@gsl@@8":
	.long	"??_R0?AUfail_fast@gsl@@@8"
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3fail_fast@gsl@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@logic_error@std@@8"
	.globl	"??_R1A@?0A@EA@logic_error@std@@8" # @"??_R1A@?0A@EA@logic_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@logic_error@std@@8":
	.long	"??_R0?AVlogic_error@std@@@8"
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3logic_error@std@@8"

	.section	.rdata,"dr",discard,"??_R3logic_error@std@@8"
	.globl	"??_R3logic_error@std@@8" # @"??_R3logic_error@std@@8"
	.p2align	2
"??_R3logic_error@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2logic_error@std@@8"

	.section	.rdata,"dr",discard,"??_R2logic_error@std@@8"
	.globl	"??_R2logic_error@std@@8" # @"??_R2logic_error@std@@8"
	.p2align	2
"??_R2logic_error@std@@8":
	.long	"??_R1A@?0A@EA@logic_error@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@exception@std@@8"
	.globl	"??_R1A@?0A@EA@exception@std@@8" # @"??_R1A@?0A@EA@exception@std@@8"
	.p2align	4
"??_R1A@?0A@EA@exception@std@@8":
	.long	"??_R0?AVexception@std@@@8"
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3exception@std@@8"

	.section	.rdata,"dr",discard,"??_R3exception@std@@8"
	.globl	"??_R3exception@std@@8" # @"??_R3exception@std@@8"
	.p2align	2
"??_R3exception@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	"??_R2exception@std@@8"

	.section	.rdata,"dr",discard,"??_R2exception@std@@8"
	.globl	"??_R2exception@std@@8" # @"??_R2exception@std@@8"
	.p2align	2
"??_R2exception@std@@8":
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",largest,"??_7logic_error@std@@6B@"
	.p2align	2               # @1
L___unnamed_2:
	.long	"??_R4logic_error@std@@6B@"
	.long	"??_Glogic_error@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4logic_error@std@@6B@"
	.globl	"??_R4logic_error@std@@6B@" # @"??_R4logic_error@std@@6B@"
	.p2align	4
"??_R4logic_error@std@@6B@":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVlogic_error@std@@@8"
	.long	"??_R3logic_error@std@@8"

	.section	.rdata,"dr",largest,"??_7exception@std@@6B@"
	.p2align	2               # @2
L___unnamed_3:
	.long	"??_R4exception@std@@6B@"
	.long	"??_Gexception@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4exception@std@@6B@"
	.globl	"??_R4exception@std@@6B@" # @"??_R4exception@std@@6B@"
	.p2align	4
"??_R4exception@std@@6B@":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVexception@std@@@8"
	.long	"??_R3exception@std@@8"

	.section	.rdata,"dr",discard,"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
	.globl	"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@" # @"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@":
	.asciz	"Unknown exception"

	.section	.drectve,"yn"
	.ascii	" /DEFAULTLIB:msvcrtd.lib"
	.ascii	" /DEFAULTLIB:oldnames.lib"
	.ascii	" /FAILIFMISMATCH:\"_MSC_VER=1900\""
	.ascii	" /FAILIFMISMATCH:\"_ITERATOR_DEBUG_LEVEL=2\""
	.ascii	" /FAILIFMISMATCH:\"RuntimeLibrary=MDd_DynamicDebug\""
	.ascii	" /DEFAULTLIB:msvcprtd.lib"
	.ascii	" /FAILIFMISMATCH:\"_CRT_STDIO_ISO_WIDE_SPECIFIERS=0\""
	.section	.debug$S,"dr"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241
	.long	Ltmp99-Ltmp98           # Subsection size
Ltmp98:
	.short	Ltmp101-Ltmp100         # Record length
Ltmp100:
	.short	4412                    # Record kind: S_COMPILE3
	.long	1                       # Flags and language
	.short	7                       # CPUType
	.short	7                       # Frontend version
	.short	0
	.short	0
	.short	0
	.short	7000                    # Backend version
	.short	0
	.short	0
	.short	0
	.asciz	"clang version 7.0.0 (tags/RELEASE_700/final)" # Null-terminated compiler version string
Ltmp101:
Ltmp99:
	.p2align	2
	.cv_fpo_data	"?foo@@YA_NXZ"
	.long	241                     # Symbol subsection for foo
	.long	Ltmp103-Ltmp102         # Subsection size
Ltmp102:
	.short	Ltmp105-Ltmp104         # Record length
Ltmp104:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end0-"?foo@@YA_NXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4098                    # Function type index
	.secrel32	"?foo@@YA_NXZ"  # Function section relative address
	.secidx	"?foo@@YA_NXZ"          # Function section index
	.byte	0                       # Flags
	.asciz	"foo"                   # Function name
Ltmp105:
	.short	Ltmp107-Ltmp106         # Record length
Ltmp106:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	Ltmp7-Ltmp0             # Code size
	.secrel32	Ltmp0           # Function section relative address
	.secidx	Lfunc_begin0            # Function section index
	.byte	0                       # Lexical block name
Ltmp107:
	.short	Ltmp109-Ltmp108         # Record length
Ltmp108:
	.short	4414                    # Record kind: S_LOCAL
	.long	48                      # TypeIndex
	.short	0                       # Flags
	.asciz	"ret"
Ltmp109:
	.cv_def_range	 Ltmp0 Ltmp7, "E\021\026\000\000\000\343\377\377\377"
	.short	Ltmp111-Ltmp110         # Record length
Ltmp110:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
Ltmp111:
	.cv_def_range	 Ltmp0 Ltmp7, "E\021\026\000\000\000\364\377\377\377"
	.short	Ltmp113-Ltmp112         # Record length
Ltmp112:
	.short	4414                    # Record kind: S_LOCAL
	.long	4209                    # TypeIndex
	.short	0                       # Flags
	.asciz	"cs"
Ltmp113:
	.cv_def_range	 Ltmp0 Ltmp7, "E\021\026\000\000\000\354\377\377\377"
	.short	Ltmp115-Ltmp114         # Record length
Ltmp114:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s2"
Ltmp115:
	.cv_def_range	 Ltmp0 Ltmp7, "E\021\026\000\000\000\344\377\377\377"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp103:
	.p2align	2
	.cv_linetable	0, "?foo@@YA_NXZ", Lfunc_end0
	.section	.debug$S,"dr",associative,"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
	.long	241                     # Symbol subsection for gsl::span<int,-1>::span<0,void>
	.long	Ltmp117-Ltmp116         # Subsection size
Ltmp116:
	.short	Ltmp119-Ltmp118         # Record length
Ltmp118:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end1-"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4217                    # Function type index
	.secrel32	"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ" # Function section relative address
	.secidx	"??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::span<0,void>" # Function name
Ltmp119:
	.short	Ltmp121-Ltmp120         # Record length
Ltmp120:
	.short	4414                    # Record kind: S_LOCAL
	.long	4102                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp121:
	.cv_def_range	 Ltmp10 Ltmp11, "E\021\026\000\000\000\340\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp117:
	.p2align	2
	.cv_linetable	1, "??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ", Lfunc_end1
	.section	.debug$S,"dr",associative,"?size@?$span@H$0?0@gsl@@QBEHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"?size@?$span@H$0?0@gsl@@QBEHXZ"
	.long	241                     # Symbol subsection for gsl::span<int,-1>::size
	.long	Ltmp123-Ltmp122         # Subsection size
Ltmp122:
	.short	Ltmp125-Ltmp124         # Record length
Ltmp124:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end2-"?size@?$span@H$0?0@gsl@@QBEHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4218                    # Function type index
	.secrel32	"?size@?$span@H$0?0@gsl@@QBEHXZ" # Function section relative address
	.secidx	"?size@?$span@H$0?0@gsl@@QBEHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::size" # Function name
Ltmp125:
	.short	Ltmp127-Ltmp126         # Record length
Ltmp126:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp127:
	.cv_def_range	 Ltmp12 Ltmp13, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp123:
	.p2align	2
	.cv_linetable	2, "?size@?$span@H$0?0@gsl@@QBEHXZ", Lfunc_end2
	.section	.debug$S,"dr",associative,"?data@?$span@H$0?0@gsl@@QBEPAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"?data@?$span@H$0?0@gsl@@QBEPAHXZ"
	.long	241                     # Symbol subsection for gsl::span<int,-1>::data
	.long	Ltmp129-Ltmp128         # Subsection size
Ltmp128:
	.short	Ltmp131-Ltmp130         # Record length
Ltmp130:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end3-"?data@?$span@H$0?0@gsl@@QBEPAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4219                    # Function type index
	.secrel32	"?data@?$span@H$0?0@gsl@@QBEPAHXZ" # Function section relative address
	.secidx	"?data@?$span@H$0?0@gsl@@QBEPAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::data" # Function name
Ltmp131:
	.short	Ltmp133-Ltmp132         # Record length
Ltmp132:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp133:
	.cv_def_range	 Ltmp14 Ltmp15, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp129:
	.p2align	2
	.cv_linetable	3, "?data@?$span@H$0?0@gsl@@QBEPAHXZ", Lfunc_end3
	.section	.debug$S,"dr",associative,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ"
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::span<0,void>
	.long	Ltmp135-Ltmp134         # Subsection size
Ltmp134:
	.short	Ltmp137-Ltmp136         # Record length
Ltmp136:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end4-"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4220                    # Function type index
	.secrel32	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ" # Function section relative address
	.secidx	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::span<0,void>" # Function name
Ltmp137:
	.short	Ltmp139-Ltmp138         # Record length
Ltmp138:
	.short	4414                    # Record kind: S_LOCAL
	.long	4169                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp139:
	.cv_def_range	 Ltmp18 Ltmp19, "E\021\026\000\000\000\340\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp135:
	.p2align	2
	.cv_linetable	4, "??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ", Lfunc_end4
	.section	.debug$S,"dr",associative,"?size@?$span@$$CBH$0?0@gsl@@QBEHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"?size@?$span@$$CBH$0?0@gsl@@QBEHXZ"
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::size
	.long	Ltmp141-Ltmp140         # Subsection size
Ltmp140:
	.short	Ltmp143-Ltmp142         # Record length
Ltmp142:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end5-"?size@?$span@$$CBH$0?0@gsl@@QBEHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4221                    # Function type index
	.secrel32	"?size@?$span@$$CBH$0?0@gsl@@QBEHXZ" # Function section relative address
	.secidx	"?size@?$span@$$CBH$0?0@gsl@@QBEHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::size" # Function name
Ltmp143:
	.short	Ltmp145-Ltmp144         # Record length
Ltmp144:
	.short	4414                    # Record kind: S_LOCAL
	.long	4188                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp145:
	.cv_def_range	 Ltmp20 Ltmp21, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp141:
	.p2align	2
	.cv_linetable	5, "?size@?$span@$$CBH$0?0@gsl@@QBEHXZ", Lfunc_end5
	.section	.debug$S,"dr",associative,"?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ"
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::data
	.long	Ltmp147-Ltmp146         # Subsection size
Ltmp146:
	.short	Ltmp149-Ltmp148         # Record length
Ltmp148:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end6-"?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4222                    # Function type index
	.secrel32	"?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ" # Function section relative address
	.secidx	"?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::data" # Function name
Ltmp149:
	.short	Ltmp151-Ltmp150         # Record length
Ltmp150:
	.short	4414                    # Record kind: S_LOCAL
	.long	4188                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp151:
	.cv_def_range	 Ltmp22 Ltmp23, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp147:
	.p2align	2
	.cv_linetable	6, "?data@?$span@$$CBH$0?0@gsl@@QBEPBHXZ", Lfunc_end6
	.section	.debug$S,"dr",associative,"??0?$extent_type@$0A@@details@gsl@@QAE@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??0?$extent_type@$0A@@details@gsl@@QAE@XZ"
	.long	241                     # Symbol subsection for gsl::details::extent_type<0>::extent_type
	.long	Ltmp153-Ltmp152         # Subsection size
Ltmp152:
	.short	Ltmp155-Ltmp154         # Record length
Ltmp154:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end7-"??0?$extent_type@$0A@@details@gsl@@QAE@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4234                    # Function type index
	.secrel32	"??0?$extent_type@$0A@@details@gsl@@QAE@XZ" # Function section relative address
	.secidx	"??0?$extent_type@$0A@@details@gsl@@QAE@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<0>::extent_type" # Function name
Ltmp155:
	.short	Ltmp157-Ltmp156         # Record length
Ltmp156:
	.short	4414                    # Record kind: S_LOCAL
	.long	4224                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp157:
	.cv_def_range	 Ltmp24 Ltmp25, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp153:
	.p2align	2
	.cv_linetable	7, "??0?$extent_type@$0A@@details@gsl@@QAE@XZ", Lfunc_end7
	.section	.debug$S,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z"
	.long	241                     # Symbol subsection for gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >
	.long	Ltmp159-Ltmp158         # Subsection size
Ltmp158:
	.short	Ltmp161-Ltmp160         # Record length
Ltmp160:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end8-"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4238                    # Function type index
	.secrel32	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z" # Function section relative address
	.secidx	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >" # Function name
Ltmp161:
	.short	Ltmp163-Ltmp162         # Record length
Ltmp162:
	.short	4414                    # Record kind: S_LOCAL
	.long	4235                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp163:
	.cv_def_range	 Ltmp30 Ltmp34, "E\021\026\000\000\000\334\377\377\377"
	.short	Ltmp165-Ltmp164         # Record length
Ltmp164:
	.short	4414                    # Record kind: S_LOCAL
	.long	1140                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
Ltmp165:
	.cv_def_range	 Ltmp30 Ltmp34, "E\021\026\000\000\000\b\000\000\000"
	.short	Ltmp167-Ltmp166         # Record length
Ltmp166:
	.short	4414                    # Record kind: S_LOCAL
	.long	4232                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
Ltmp167:
	.cv_def_range	 Ltmp30 Ltmp34, "E\021\026\000\000\000\f\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp159:
	.p2align	2
	.cv_linetable	8, "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z", Lfunc_end8
	.section	.debug$S,"dr",associative,"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z"
	.long	241                     # Symbol subsection for gsl::details::extent_type<-1>::extent_type<0>
	.long	Ltmp169-Ltmp168         # Subsection size
Ltmp168:
	.short	Ltmp171-Ltmp170         # Record length
Ltmp170:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end9-"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4241                    # Function type index
	.secrel32	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z" # Function section relative address
	.secidx	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<-1>::extent_type<0>" # Function name
Ltmp171:
	.short	Ltmp173-Ltmp172         # Record length
Ltmp172:
	.short	4414                    # Record kind: S_LOCAL
	.long	4159                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp173:
	.cv_def_range	 Ltmp35 Ltmp36, "E\021\026\000\000\000\374\377\377\377"
	.short	Ltmp175-Ltmp174         # Record length
Ltmp174:
	.short	4414                    # Record kind: S_LOCAL
	.long	4232                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
Ltmp175:
	.cv_def_range	 Ltmp35 Ltmp36, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp169:
	.p2align	2
	.cv_linetable	9, "??$?0$0A@@?$extent_type@$0?0@details@gsl@@QAE@V?$extent_type@$0A@@12@@Z", Lfunc_end9
	.section	.debug$S,"dr",associative,"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ"
	.long	241                     # Symbol subsection for gsl::details::extent_type<-1>::size
	.long	Ltmp177-Ltmp176         # Subsection size
Ltmp176:
	.short	Ltmp179-Ltmp178         # Record length
Ltmp178:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end10-"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4242                    # Function type index
	.secrel32	"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ" # Function section relative address
	.secidx	"?size@?$extent_type@$0?0@details@gsl@@QBEHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<-1>::size" # Function name
Ltmp179:
	.short	Ltmp181-Ltmp180         # Record length
Ltmp180:
	.short	4414                    # Record kind: S_LOCAL
	.long	4162                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp181:
	.cv_def_range	 Ltmp37 Ltmp38, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp177:
	.p2align	2
	.cv_linetable	10, "?size@?$extent_type@$0?0@details@gsl@@QBEHXZ", Lfunc_end10
	.section	.debug$S,"dr",associative,"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z"
	.long	241                     # Symbol subsection for gsl::details::throw_exception<gsl::fail_fast>
	.long	Ltmp183-Ltmp182         # Subsection size
Ltmp182:
	.short	Ltmp185-Ltmp184         # Record length
Ltmp184:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end11-"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4676                    # Function type index
	.secrel32	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z" # Function section relative address
	.secidx	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::throw_exception<gsl::fail_fast>" # Function name
Ltmp185:
	.short	Ltmp187-Ltmp186         # Record length
Ltmp186:
	.short	4414                    # Record kind: S_LOCAL
	.long	4245                    # TypeIndex
	.short	1                       # Flags
	.asciz	"exception"
Ltmp187:
	.cv_def_range	 Ltmp39 Ltmp40, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp183:
	.p2align	2
	.cv_linetable	11, "??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QAUfail_fast@1@@Z", Lfunc_end11
	.section	.debug$S,"dr",associative,"??0fail_fast@gsl@@QAE@QBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??0fail_fast@gsl@@QAE@QBD@Z"
	.long	241                     # Symbol subsection for gsl::fail_fast::fail_fast
	.long	Ltmp189-Ltmp188         # Subsection size
Ltmp188:
	.short	Ltmp191-Ltmp190         # Record length
Ltmp190:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end12-"??0fail_fast@gsl@@QAE@QBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4677                    # Function type index
	.secrel32	"??0fail_fast@gsl@@QAE@QBD@Z" # Function section relative address
	.secidx	"??0fail_fast@gsl@@QAE@QBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::fail_fast" # Function name
Ltmp191:
	.short	Ltmp193-Ltmp192         # Record length
Ltmp192:
	.short	4414                    # Record kind: S_LOCAL
	.long	4250                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp193:
	.cv_def_range	 Ltmp41 Ltmp42, "E\021\026\000\000\000\370\377\377\377"
	.short	Ltmp195-Ltmp194         # Record length
Ltmp194:
	.short	4414                    # Record kind: S_LOCAL
	.long	4252                    # TypeIndex
	.short	1                       # Flags
	.asciz	"message"
Ltmp195:
	.cv_def_range	 Ltmp41 Ltmp42, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp189:
	.p2align	2
	.cv_linetable	12, "??0fail_fast@gsl@@QAE@QBD@Z", Lfunc_end12
	.section	.debug$S,"dr",associative,"??1fail_fast@gsl@@UAE@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??1fail_fast@gsl@@UAE@XZ"
	.long	241                     # Symbol subsection for gsl::fail_fast::~fail_fast
	.long	Ltmp197-Ltmp196         # Subsection size
Ltmp196:
	.short	Ltmp199-Ltmp198         # Record length
Ltmp198:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end13-"??1fail_fast@gsl@@UAE@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4679                    # Function type index
	.secrel32	"??1fail_fast@gsl@@UAE@XZ" # Function section relative address
	.secidx	"??1fail_fast@gsl@@UAE@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::~fail_fast" # Function name
Ltmp199:
	.short	Ltmp201-Ltmp200         # Record length
Ltmp200:
	.short	4414                    # Record kind: S_LOCAL
	.long	4250                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp201:
	.cv_def_range	 Ltmp43 Ltmp45, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp197:
	.p2align	2
	.cv_linetable	13, "??1fail_fast@gsl@@UAE@XZ", Lfunc_end13
	.section	.debug$S,"dr",associative,"?size@?$extent_type@$0A@@details@gsl@@QBEHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"?size@?$extent_type@$0A@@details@gsl@@QBEHXZ"
	.long	241                     # Symbol subsection for gsl::details::extent_type<0>::size
	.long	Ltmp203-Ltmp202         # Subsection size
Ltmp202:
	.short	Ltmp205-Ltmp204         # Record length
Ltmp204:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end14-"?size@?$extent_type@$0A@@details@gsl@@QBEHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4680                    # Function type index
	.secrel32	"?size@?$extent_type@$0A@@details@gsl@@QBEHXZ" # Function section relative address
	.secidx	"?size@?$extent_type@$0A@@details@gsl@@QBEHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<0>::size" # Function name
Ltmp205:
	.short	Ltmp207-Ltmp206         # Record length
Ltmp206:
	.short	4414                    # Record kind: S_LOCAL
	.long	4229                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp207:
	.cv_def_range	 Ltmp46 Ltmp47, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp203:
	.p2align	2
	.cv_linetable	14, "?size@?$extent_type@$0A@@details@gsl@@QBEHXZ", Lfunc_end14
	.section	.debug$S,"dr",associative,"??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z"
	.long	241                     # Symbol subsection for std::forward<gsl::fail_fast>
	.long	Ltmp209-Ltmp208         # Subsection size
Ltmp208:
	.short	Ltmp211-Ltmp210         # Record length
Ltmp210:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end15-"??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4685                    # Function type index
	.secrel32	"??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z" # Function section relative address
	.secidx	"??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::forward<gsl::fail_fast>" # Function name
Ltmp211:
	.short	Ltmp213-Ltmp212         # Record length
Ltmp212:
	.short	4414                    # Record kind: S_LOCAL
	.long	4682                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Arg"
Ltmp213:
	.cv_def_range	 Ltmp48 Ltmp49, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp209:
	.p2align	2
	.cv_linetable	15, "??$forward@Ufail_fast@gsl@@@std@@YA$$QAUfail_fast@gsl@@AAU12@@Z", Lfunc_end15
	.section	.debug$S,"dr",associative,"??0fail_fast@gsl@@QAE@$$QAU01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??0fail_fast@gsl@@QAE@$$QAU01@@Z"
	.long	241                     # Symbol subsection for gsl::fail_fast::fail_fast
	.long	Ltmp215-Ltmp214         # Subsection size
Ltmp214:
	.short	Ltmp217-Ltmp216         # Record length
Ltmp216:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end16-"??0fail_fast@gsl@@QAE@$$QAU01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4687                    # Function type index
	.secrel32	"??0fail_fast@gsl@@QAE@$$QAU01@@Z" # Function section relative address
	.secidx	"??0fail_fast@gsl@@QAE@$$QAU01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::fail_fast" # Function name
Ltmp217:
	.short	Ltmp219-Ltmp218         # Record length
Ltmp218:
	.short	4414                    # Record kind: S_LOCAL
	.long	4250                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp219:
	.cv_def_range	 Ltmp50 Ltmp51, "E\021\026\000\000\000\370\377\377\377"
	.short	Ltmp221-Ltmp220         # Record length
Ltmp220:
	.short	4414                    # Record kind: S_LOCAL
	.long	4245                    # TypeIndex
	.short	1                       # Flags
	.byte	0
Ltmp221:
	.cv_def_range	 Ltmp50 Ltmp51, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp215:
	.p2align	2
	.cv_linetable	16, "??0fail_fast@gsl@@QAE@$$QAU01@@Z", Lfunc_end16
	.section	.debug$S,"dr",associative,"??0fail_fast@gsl@@QAE@ABU01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??0fail_fast@gsl@@QAE@ABU01@@Z"
	.long	241                     # Symbol subsection for gsl::fail_fast::fail_fast
	.long	Ltmp223-Ltmp222         # Subsection size
Ltmp222:
	.short	Ltmp225-Ltmp224         # Record length
Ltmp224:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end17-"??0fail_fast@gsl@@QAE@ABU01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4692                    # Function type index
	.secrel32	"??0fail_fast@gsl@@QAE@ABU01@@Z" # Function section relative address
	.secidx	"??0fail_fast@gsl@@QAE@ABU01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::fail_fast" # Function name
Ltmp225:
	.short	Ltmp227-Ltmp226         # Record length
Ltmp226:
	.short	4414                    # Record kind: S_LOCAL
	.long	4250                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp227:
	.cv_def_range	 Ltmp52 Ltmp53, "E\021\026\000\000\000\370\377\377\377"
	.short	Ltmp229-Ltmp228         # Record length
Ltmp228:
	.short	4414                    # Record kind: S_LOCAL
	.long	4689                    # TypeIndex
	.short	1                       # Flags
	.byte	0
Ltmp229:
	.cv_def_range	 Ltmp52 Ltmp53, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp223:
	.p2align	2
	.cv_linetable	17, "??0fail_fast@gsl@@QAE@ABU01@@Z", Lfunc_end17
	.section	.debug$S,"dr",associative,"??0logic_error@std@@QAE@ABV01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??0logic_error@std@@QAE@ABV01@@Z"
	.long	241                     # Symbol subsection for std::logic_error::logic_error
	.long	Ltmp231-Ltmp230         # Subsection size
Ltmp230:
	.short	Ltmp233-Ltmp232         # Record length
Ltmp232:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end18-"??0logic_error@std@@QAE@ABV01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4697                    # Function type index
	.secrel32	"??0logic_error@std@@QAE@ABV01@@Z" # Function section relative address
	.secidx	"??0logic_error@std@@QAE@ABV01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::logic_error" # Function name
Ltmp233:
	.short	Ltmp235-Ltmp234         # Record length
Ltmp234:
	.short	4414                    # Record kind: S_LOCAL
	.long	4260                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp235:
	.cv_def_range	 Ltmp54 Ltmp55, "E\021\026\000\000\000\370\377\377\377"
	.short	Ltmp237-Ltmp236         # Record length
Ltmp236:
	.short	4414                    # Record kind: S_LOCAL
	.long	4694                    # TypeIndex
	.short	1                       # Flags
	.byte	0
Ltmp237:
	.cv_def_range	 Ltmp54 Ltmp55, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp231:
	.p2align	2
	.cv_linetable	18, "??0logic_error@std@@QAE@ABV01@@Z", Lfunc_end18
	.section	.debug$S,"dr",associative,"??0exception@std@@QAE@ABV01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??0exception@std@@QAE@ABV01@@Z"
	.long	241                     # Symbol subsection for std::exception::exception
	.long	Ltmp239-Ltmp238         # Subsection size
Ltmp238:
	.short	Ltmp241-Ltmp240         # Record length
Ltmp240:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end19-"??0exception@std@@QAE@ABV01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4698                    # Function type index
	.secrel32	"??0exception@std@@QAE@ABV01@@Z" # Function section relative address
	.secidx	"??0exception@std@@QAE@ABV01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::exception" # Function name
Ltmp241:
	.short	Ltmp243-Ltmp242         # Record length
Ltmp242:
	.short	4414                    # Record kind: S_LOCAL
	.long	4276                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp243:
	.cv_def_range	 Ltmp56 Ltmp59, "E\021\026\000\000\000\370\377\377\377"
	.short	Ltmp245-Ltmp244         # Record length
Ltmp244:
	.short	4414                    # Record kind: S_LOCAL
	.long	4282                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Other"
Ltmp245:
	.cv_def_range	 Ltmp56 Ltmp59, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp239:
	.p2align	2
	.cv_linetable	19, "??0exception@std@@QAE@ABV01@@Z", Lfunc_end19
	.section	.debug$S,"dr",associative,"??0logic_error@std@@QAE@$$QAV01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??0logic_error@std@@QAE@$$QAV01@@Z"
	.long	241                     # Symbol subsection for std::logic_error::logic_error
	.long	Ltmp247-Ltmp246         # Subsection size
Ltmp246:
	.short	Ltmp249-Ltmp248         # Record length
Ltmp248:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end20-"??0logic_error@std@@QAE@$$QAV01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4702                    # Function type index
	.secrel32	"??0logic_error@std@@QAE@$$QAV01@@Z" # Function section relative address
	.secidx	"??0logic_error@std@@QAE@$$QAV01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::logic_error" # Function name
Ltmp249:
	.short	Ltmp251-Ltmp250         # Record length
Ltmp250:
	.short	4414                    # Record kind: S_LOCAL
	.long	4260                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp251:
	.cv_def_range	 Ltmp60 Ltmp61, "E\021\026\000\000\000\370\377\377\377"
	.short	Ltmp253-Ltmp252         # Record length
Ltmp252:
	.short	4414                    # Record kind: S_LOCAL
	.long	4699                    # TypeIndex
	.short	1                       # Flags
	.byte	0
Ltmp253:
	.cv_def_range	 Ltmp60 Ltmp61, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp247:
	.p2align	2
	.cv_linetable	20, "??0logic_error@std@@QAE@$$QAV01@@Z", Lfunc_end20
	.section	.debug$S,"dr",associative,"??_Gfail_fast@gsl@@UAEPAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??_Gfail_fast@gsl@@UAEPAXI@Z"
	.long	241                     # Symbol subsection for gsl::fail_fast::~fail_fast
	.long	Ltmp255-Ltmp254         # Subsection size
Ltmp254:
	.short	Ltmp257-Ltmp256         # Record length
Ltmp256:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end21-"??_Gfail_fast@gsl@@UAEPAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4679                    # Function type index
	.secrel32	"??_Gfail_fast@gsl@@UAEPAXI@Z" # Function section relative address
	.secidx	"??_Gfail_fast@gsl@@UAEPAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::~fail_fast" # Function name
Ltmp257:
	.short	Ltmp259-Ltmp258         # Record length
Ltmp258:
	.short	4414                    # Record kind: S_LOCAL
	.long	4250                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp259:
	.cv_def_range	 Ltmp62 Ltmp63, "E\021\026\000\000\000\370\377\377\377"
	.short	Ltmp261-Ltmp260         # Record length
Ltmp260:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
Ltmp261:
	.cv_def_range	 Ltmp62 Ltmp63, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp255:
	.p2align	2
	.cv_linetable	21, "??_Gfail_fast@gsl@@UAEPAXI@Z", Lfunc_end21
	.section	.debug$S,"dr",associative,"?what@exception@std@@UBEPBDXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"?what@exception@std@@UBEPBDXZ"
	.long	241                     # Symbol subsection for std::exception::what
	.long	Ltmp263-Ltmp262         # Subsection size
Ltmp262:
	.short	Ltmp265-Ltmp264         # Record length
Ltmp264:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end22-"?what@exception@std@@UBEPBDXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4703                    # Function type index
	.secrel32	"?what@exception@std@@UBEPBDXZ" # Function section relative address
	.secidx	"?what@exception@std@@UBEPBDXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::what"  # Function name
Ltmp265:
	.short	Ltmp267-Ltmp266         # Record length
Ltmp266:
	.short	4414                    # Record kind: S_LOCAL
	.long	4288                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp267:
	.cv_def_range	 Ltmp64 Ltmp65, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp263:
	.p2align	2
	.cv_linetable	22, "?what@exception@std@@UBEPBDXZ", Lfunc_end22
	.section	.debug$S,"dr",associative,"??_Glogic_error@std@@UAEPAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??_Glogic_error@std@@UAEPAXI@Z"
	.long	241                     # Symbol subsection for std::logic_error::~logic_error
	.long	Ltmp269-Ltmp268         # Subsection size
Ltmp268:
	.short	Ltmp271-Ltmp270         # Record length
Ltmp270:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end23-"??_Glogic_error@std@@UAEPAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4705                    # Function type index
	.secrel32	"??_Glogic_error@std@@UAEPAXI@Z" # Function section relative address
	.secidx	"??_Glogic_error@std@@UAEPAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::~logic_error" # Function name
Ltmp271:
	.short	Ltmp273-Ltmp272         # Record length
Ltmp272:
	.short	4414                    # Record kind: S_LOCAL
	.long	4260                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp273:
	.cv_def_range	 Ltmp66 Ltmp67, "E\021\026\000\000\000\370\377\377\377"
	.short	Ltmp275-Ltmp274         # Record length
Ltmp274:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
Ltmp275:
	.cv_def_range	 Ltmp66 Ltmp67, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp269:
	.p2align	2
	.cv_linetable	23, "??_Glogic_error@std@@UAEPAXI@Z", Lfunc_end23
	.section	.debug$S,"dr",associative,"??1logic_error@std@@UAE@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??1logic_error@std@@UAE@XZ"
	.long	241                     # Symbol subsection for std::logic_error::~logic_error
	.long	Ltmp277-Ltmp276         # Subsection size
Ltmp276:
	.short	Ltmp279-Ltmp278         # Record length
Ltmp278:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end24-"??1logic_error@std@@UAE@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4705                    # Function type index
	.secrel32	"??1logic_error@std@@UAE@XZ" # Function section relative address
	.secidx	"??1logic_error@std@@UAE@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::~logic_error" # Function name
Ltmp279:
	.short	Ltmp281-Ltmp280         # Record length
Ltmp280:
	.short	4414                    # Record kind: S_LOCAL
	.long	4260                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp281:
	.cv_def_range	 Ltmp68 Ltmp70, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp277:
	.p2align	2
	.cv_linetable	24, "??1logic_error@std@@UAE@XZ", Lfunc_end24
	.section	.debug$S,"dr",associative,"??1exception@std@@UAE@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??1exception@std@@UAE@XZ"
	.long	241                     # Symbol subsection for std::exception::~exception
	.long	Ltmp283-Ltmp282         # Subsection size
Ltmp282:
	.short	Ltmp285-Ltmp284         # Record length
Ltmp284:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end25-"??1exception@std@@UAE@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4706                    # Function type index
	.secrel32	"??1exception@std@@UAE@XZ" # Function section relative address
	.secidx	"??1exception@std@@UAE@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::~exception" # Function name
Ltmp285:
	.short	Ltmp287-Ltmp286         # Record length
Ltmp286:
	.short	4414                    # Record kind: S_LOCAL
	.long	4276                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp287:
	.cv_def_range	 Ltmp71 Ltmp74, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp283:
	.p2align	2
	.cv_linetable	25, "??1exception@std@@UAE@XZ", Lfunc_end25
	.section	.debug$S,"dr",associative,"??_Gexception@std@@UAEPAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??_Gexception@std@@UAEPAXI@Z"
	.long	241                     # Symbol subsection for std::exception::~exception
	.long	Ltmp289-Ltmp288         # Subsection size
Ltmp288:
	.short	Ltmp291-Ltmp290         # Record length
Ltmp290:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end26-"??_Gexception@std@@UAEPAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4706                    # Function type index
	.secrel32	"??_Gexception@std@@UAEPAXI@Z" # Function section relative address
	.secidx	"??_Gexception@std@@UAEPAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::~exception" # Function name
Ltmp291:
	.short	Ltmp293-Ltmp292         # Record length
Ltmp292:
	.short	4414                    # Record kind: S_LOCAL
	.long	4276                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp293:
	.cv_def_range	 Ltmp75 Ltmp76, "E\021\026\000\000\000\370\377\377\377"
	.short	Ltmp295-Ltmp294         # Record length
Ltmp294:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
Ltmp295:
	.cv_def_range	 Ltmp75 Ltmp76, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp289:
	.p2align	2
	.cv_linetable	26, "??_Gexception@std@@UAEPAXI@Z", Lfunc_end26
	.section	.debug$S,"dr",associative,"??0logic_error@std@@QAE@PBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??0logic_error@std@@QAE@PBD@Z"
	.long	241                     # Symbol subsection for std::logic_error::logic_error
	.long	Ltmp297-Ltmp296         # Subsection size
Ltmp296:
	.short	Ltmp299-Ltmp298         # Record length
Ltmp298:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end27-"??0logic_error@std@@QAE@PBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4707                    # Function type index
	.secrel32	"??0logic_error@std@@QAE@PBD@Z" # Function section relative address
	.secidx	"??0logic_error@std@@QAE@PBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::logic_error" # Function name
Ltmp299:
	.short	Ltmp301-Ltmp300         # Record length
Ltmp300:
	.short	4414                    # Record kind: S_LOCAL
	.long	4260                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp301:
	.cv_def_range	 Ltmp77 Ltmp78, "E\021\026\000\000\000\370\377\377\377"
	.short	Ltmp303-Ltmp302         # Record length
Ltmp302:
	.short	4414                    # Record kind: S_LOCAL
	.long	4266                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Message"
Ltmp303:
	.cv_def_range	 Ltmp77 Ltmp78, "E\021\026\000\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp297:
	.p2align	2
	.cv_linetable	27, "??0logic_error@std@@QAE@PBD@Z", Lfunc_end27
	.section	.debug$S,"dr",associative,"??0exception@std@@QAE@QBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??0exception@std@@QAE@QBD@Z"
	.long	241                     # Symbol subsection for std::exception::exception
	.long	Ltmp305-Ltmp304         # Subsection size
Ltmp304:
	.short	Ltmp307-Ltmp306         # Record length
Ltmp306:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end28-"??0exception@std@@QAE@QBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4708                    # Function type index
	.secrel32	"??0exception@std@@QAE@QBD@Z" # Function section relative address
	.secidx	"??0exception@std@@QAE@QBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::exception" # Function name
Ltmp307:
	.short	Ltmp309-Ltmp308         # Record length
Ltmp308:
	.short	4414                    # Record kind: S_LOCAL
	.long	4276                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp309:
	.cv_def_range	 Ltmp79 Ltmp84, "E\021\026\000\000\000\350\377\377\377"
	.short	Ltmp311-Ltmp310         # Record length
Ltmp310:
	.short	4414                    # Record kind: S_LOCAL
	.long	4252                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Message"
Ltmp311:
	.cv_def_range	 Ltmp79 Ltmp84, "E\021\026\000\000\000\b\000\000\000"
	.short	Ltmp313-Ltmp312         # Record length
Ltmp312:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	Ltmp83-Ltmp80           # Code size
	.secrel32	Ltmp80          # Function section relative address
	.secidx	Lfunc_begin28           # Function section index
	.byte	0                       # Lexical block name
Ltmp313:
	.short	Ltmp315-Ltmp314         # Record length
Ltmp314:
	.short	4414                    # Record kind: S_LOCAL
	.long	4516                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_InitData"
Ltmp315:
	.cv_def_range	 Ltmp80 Ltmp83, "E\021\026\000\000\000\354\377\377\377"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp305:
	.p2align	2
	.cv_linetable	28, "??0exception@std@@QAE@QBD@Z", Lfunc_end28
	.section	.debug$S,"dr",associative,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ"
	.long	241                     # Symbol subsection for gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data
	.long	Ltmp317-Ltmp316         # Subsection size
Ltmp316:
	.short	Ltmp319-Ltmp318         # Record length
Ltmp318:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end29-"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4709                    # Function type index
	.secrel32	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ" # Function section relative address
	.secidx	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data" # Function name
Ltmp319:
	.short	Ltmp321-Ltmp320         # Record length
Ltmp320:
	.short	4414                    # Record kind: S_LOCAL
	.long	4154                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp321:
	.cv_def_range	 Ltmp85 Ltmp86, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp317:
	.p2align	2
	.cv_linetable	29, "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QBEPAHXZ", Lfunc_end29
	.section	.debug$S,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z"
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >
	.long	Ltmp323-Ltmp322         # Subsection size
Ltmp322:
	.short	Ltmp325-Ltmp324         # Record length
Ltmp324:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end30-"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4713                    # Function type index
	.secrel32	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z" # Function section relative address
	.secidx	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >" # Function name
Ltmp325:
	.short	Ltmp327-Ltmp326         # Record length
Ltmp326:
	.short	4414                    # Record kind: S_LOCAL
	.long	4710                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp327:
	.cv_def_range	 Ltmp91 Ltmp95, "E\021\026\000\000\000\334\377\377\377"
	.short	Ltmp329-Ltmp328         # Record length
Ltmp328:
	.short	4414                    # Record kind: S_LOCAL
	.long	4170                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
Ltmp329:
	.cv_def_range	 Ltmp91 Ltmp95, "E\021\026\000\000\000\b\000\000\000"
	.short	Ltmp331-Ltmp330         # Record length
Ltmp330:
	.short	4414                    # Record kind: S_LOCAL
	.long	4232                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
Ltmp331:
	.cv_def_range	 Ltmp91 Ltmp95, "E\021\026\000\000\000\f\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp323:
	.p2align	2
	.cv_linetable	30, "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z", Lfunc_end30
	.section	.debug$S,"dr",associative,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.cv_fpo_data	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ"
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data
	.long	Ltmp333-Ltmp332         # Subsection size
Ltmp332:
	.short	Ltmp335-Ltmp334         # Record length
Ltmp334:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	Lfunc_end31-"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4714                    # Function type index
	.secrel32	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ" # Function section relative address
	.secidx	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data" # Function name
Ltmp335:
	.short	Ltmp337-Ltmp336         # Record length
Ltmp336:
	.short	4414                    # Record kind: S_LOCAL
	.long	4212                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
Ltmp337:
	.cv_def_range	 Ltmp96 Ltmp97, "E\021\026\000\000\000\374\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
Ltmp333:
	.p2align	2
	.cv_linetable	31, "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QBEPBHXZ", Lfunc_end31
	.section	.debug$S,"dr"
	.long	241
	.long	Ltmp339-Ltmp338         # Subsection size
Ltmp338:
	.short	Ltmp341-Ltmp340         # Record length
Ltmp340:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"ptrdiff_t"
Ltmp341:
	.short	Ltmp343-Ltmp342         # Record length
Ltmp342:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"index_type"
Ltmp343:
	.short	Ltmp345-Ltmp344         # Record length
Ltmp344:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"std::remove_cv_t<int>"
Ltmp345:
	.short	Ltmp347-Ltmp346         # Record length
Ltmp346:
	.short	4360                    # Record kind: S_UDT
	.long	4149                    # Type
	.asciz	"gsl::span<int,-1>"
Ltmp347:
	.short	Ltmp349-Ltmp348         # Record length
Ltmp348:
	.short	4360                    # Record kind: S_UDT
	.long	4157                    # Type
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >"
Ltmp349:
	.short	Ltmp351-Ltmp350         # Record length
Ltmp350:
	.short	4360                    # Record kind: S_UDT
	.long	4165                    # Type
	.asciz	"gsl::details::extent_type<-1>"
Ltmp351:
	.short	Ltmp353-Ltmp352         # Record length
Ltmp352:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"std::remove_cv_t<const int>"
Ltmp353:
	.short	Ltmp355-Ltmp354         # Record length
Ltmp354:
	.short	4360                    # Record kind: S_UDT
	.long	4209                    # Type
	.asciz	"gsl::span<const int,-1>"
Ltmp355:
	.short	Ltmp357-Ltmp356         # Record length
Ltmp356:
	.short	4360                    # Record kind: S_UDT
	.long	4215                    # Type
	.asciz	"gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >"
Ltmp357:
	.short	Ltmp359-Ltmp358         # Record length
Ltmp358:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"index_type"
Ltmp359:
	.short	Ltmp361-Ltmp360         # Record length
Ltmp360:
	.short	4360                    # Record kind: S_UDT
	.long	4232                    # Type
	.asciz	"gsl::details::extent_type<0>"
Ltmp361:
	.short	Ltmp363-Ltmp362         # Record length
Ltmp362:
	.short	4360                    # Record kind: S_UDT
	.long	4256                    # Type
	.asciz	"gsl::fail_fast"
Ltmp363:
	.short	Ltmp365-Ltmp364         # Record length
Ltmp364:
	.short	4360                    # Record kind: S_UDT
	.long	4261                    # Type
	.asciz	"std::string"
Ltmp365:
	.short	Ltmp367-Ltmp366         # Record length
Ltmp366:
	.short	4360                    # Record kind: S_UDT
	.long	4271                    # Type
	.asciz	"std::logic_error"
Ltmp367:
	.short	Ltmp369-Ltmp368         # Record length
Ltmp368:
	.short	4360                    # Record kind: S_UDT
	.long	4291                    # Type
	.asciz	"std::exception"
Ltmp369:
	.short	Ltmp371-Ltmp370         # Record length
Ltmp370:
	.short	4360                    # Record kind: S_UDT
	.long	117                     # Type
	.asciz	"size_t"
Ltmp371:
	.short	Ltmp373-Ltmp372         # Record length
Ltmp372:
	.short	4360                    # Record kind: S_UDT
	.long	4341                    # Type
	.asciz	"std::bool_constant<true>"
Ltmp373:
	.short	Ltmp375-Ltmp374         # Record length
Ltmp374:
	.short	4360                    # Record kind: S_UDT
	.long	4341                    # Type
	.asciz	"std::true_type"
Ltmp375:
	.short	Ltmp377-Ltmp376         # Record length
Ltmp376:
	.short	4360                    # Record kind: S_UDT
	.long	4341                    # Type
	.asciz	"std::_Propagate_allocators"
Ltmp377:
	.short	Ltmp379-Ltmp378         # Record length
Ltmp378:
	.short	4360                    # Record kind: S_UDT
	.long	4344                    # Type
	.asciz	"std::bool_constant<false>"
Ltmp379:
	.short	Ltmp381-Ltmp380         # Record length
Ltmp380:
	.short	4360                    # Record kind: S_UDT
	.long	4344                    # Type
	.asciz	"std::false_type"
Ltmp381:
	.short	Ltmp383-Ltmp382         # Record length
Ltmp382:
	.short	4360                    # Record kind: S_UDT
	.long	4344                    # Type
	.asciz	"std::_No_propagate_allocators"
Ltmp383:
	.short	Ltmp385-Ltmp384         # Record length
Ltmp384:
	.short	4360                    # Record kind: S_UDT
	.long	4298                    # Type
	.asciz	"std::_Rebind_alloc_t<std::allocator<char>,char>"
Ltmp385:
	.short	Ltmp387-Ltmp386         # Record length
Ltmp386:
	.short	4360                    # Record kind: S_UDT
	.long	4341                    # Type
	.asciz	"std::bool_constant<_Is_specialization_v<std::char_traits<char>,char_traits> && is_trivial_v<std::basic_string<char,std::char_traits<char>,std::allocator<char> >::pointer> >"
Ltmp387:
	.short	Ltmp389-Ltmp388         # Record length
Ltmp388:
	.short	4360                    # Record kind: S_UDT
	.long	4512                    # Type
	.asciz	"std::basic_string<char,std::char_traits<char>,std::allocator<char> >"
Ltmp389:
	.short	Ltmp391-Ltmp390         # Record length
Ltmp390:
	.short	4360                    # Record kind: S_UDT
	.long	4516                    # Type
	.asciz	"__std_exception_data"
Ltmp391:
	.short	Ltmp393-Ltmp392         # Record length
Ltmp392:
	.short	4360                    # Record kind: S_UDT
	.long	4528                    # Type
	.asciz	"std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>"
Ltmp393:
	.short	Ltmp395-Ltmp394         # Record length
Ltmp394:
	.short	4360                    # Record kind: S_UDT
	.long	4551                    # Type
	.asciz	"std::allocator<char>"
Ltmp395:
	.short	Ltmp397-Ltmp396         # Record length
Ltmp396:
	.short	4360                    # Record kind: S_UDT
	.long	4558                    # Type
	.asciz	"std::integral_constant<bool,1>"
Ltmp397:
	.short	Ltmp399-Ltmp398         # Record length
Ltmp398:
	.short	4360                    # Record kind: S_UDT
	.long	4565                    # Type
	.asciz	"std::integral_constant<bool,0>"
Ltmp399:
	.short	Ltmp401-Ltmp400         # Record length
Ltmp400:
	.short	4360                    # Record kind: S_UDT
	.long	4567                    # Type
	.asciz	"std::_Container_base"
Ltmp401:
	.short	Ltmp403-Ltmp402         # Record length
Ltmp402:
	.short	4360                    # Record kind: S_UDT
	.long	4580                    # Type
	.asciz	"std::_String_val<std::_Simple_types<char> >"
Ltmp403:
	.short	Ltmp405-Ltmp404         # Record length
Ltmp404:
	.short	4360                    # Record kind: S_UDT
	.long	4598                    # Type
	.asciz	"std::_Iterator_base12"
Ltmp405:
	.short	Ltmp407-Ltmp406         # Record length
Ltmp406:
	.short	4360                    # Record kind: S_UDT
	.long	4606                    # Type
	.asciz	"std::_Container_proxy"
Ltmp407:
	.short	Ltmp409-Ltmp408         # Record length
Ltmp408:
	.short	4360                    # Record kind: S_UDT
	.long	4608                    # Type
	.asciz	"std::conditional_t<_Is_default_allocator<allocator<char> >::value,_Default_allocator_traits<std::allocator<char> >,_Normal_allocator_traits<std::allocator<char> > >"
Ltmp409:
	.short	Ltmp411-Ltmp410         # Record length
Ltmp410:
	.short	4360                    # Record kind: S_UDT
	.long	4610                    # Type
	.asciz	"std::allocator_traits<std::allocator<char> >"
Ltmp411:
	.short	Ltmp413-Ltmp412         # Record length
Ltmp412:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::streamoff"
Ltmp413:
	.short	Ltmp415-Ltmp414         # Record length
Ltmp414:
	.short	4360                    # Record kind: S_UDT
	.long	4636                    # Type
	.asciz	"_Mbstatet"
Ltmp415:
	.short	Ltmp417-Ltmp416         # Record length
Ltmp416:
	.short	4360                    # Record kind: S_UDT
	.long	4638                    # Type
	.asciz	"std::char_traits<char>"
Ltmp417:
	.short	Ltmp419-Ltmp418         # Record length
Ltmp418:
	.short	4360                    # Record kind: S_UDT
	.long	4651                    # Type
	.asciz	"std::_Container_base12"
Ltmp419:
	.short	Ltmp421-Ltmp420         # Record length
Ltmp420:
	.short	4360                    # Record kind: S_UDT
	.long	4657                    # Type
	.asciz	"std::_String_val<std::_Simple_types<char> >::_Bxty"
Ltmp421:
	.short	Ltmp423-Ltmp422         # Record length
Ltmp422:
	.short	4360                    # Record kind: S_UDT
	.long	117                     # Type
	.asciz	"size_type"
Ltmp423:
	.short	Ltmp425-Ltmp424         # Record length
Ltmp424:
	.short	4360                    # Record kind: S_UDT
	.long	4670                    # Type
	.asciz	"std::_Default_allocator_traits<std::allocator<char> >"
Ltmp425:
	.short	Ltmp427-Ltmp426         # Record length
Ltmp426:
	.short	4360                    # Record kind: S_UDT
	.long	4673                    # Type
	.asciz	"_Mbstatet"
Ltmp427:
	.short	Ltmp429-Ltmp428         # Record length
Ltmp428:
	.short	4360                    # Record kind: S_UDT
	.long	4244                    # Type
	.asciz	"std::remove_reference_t<gsl::fail_fast>"
Ltmp429:
Ltmp339:
	.p2align	2
	.cv_filechecksums               # File index to string table offset subsection
	.cv_stringtable                 # String table
	.section	.debug$T,"dr"
	.p2align	2
	.long	4                       # Debug section magic
	# ArgList (0x1000) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 0
	#   Arguments [
	#   ]
	# }
	.byte	0x06, 0x00, 0x01, 0x12
	.byte	0x00, 0x00, 0x00, 0x00
	# Procedure (0x1001) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: bool (0x30)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	# FuncId (0x1002) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: bool () (0x1001)
	#   Name: foo
	# }
	.byte	0x0e, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x10, 0x00, 0x00
	.byte	0x66, 0x6f, 0x6f, 0x00
	# Class (0x1003) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>
	#   LinkageName: .?AV?$span@H$0?0@gsl@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# Modifier (0x1004) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: int (0x74)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Class (0x1005) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x74, 0x6f
	.byte	0x72, 0x61, 0x67, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x64, 0x79, 0x6e, 0x61
	.byte	0x6d, 0x69, 0x63, 0x5f
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x40
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Pointer (0x1006) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1> (0x1003)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# ArgList (0x1007) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x474)
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x04, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x1008) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, int) (0x1007)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x07, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1009) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x474)
	#     ArgType: int* (0x474)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x04, 0x00, 0x00
	.byte	0x74, 0x04, 0x00, 0x00
	# MemberFunction (0x100A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, int*) (0x1009)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x09, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x100B) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::array<int,0>
	#   LinkageName: .?AV?$array@H$0A@@std@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x72, 0x72, 0x61, 0x79
	.byte	0x3c, 0x69, 0x6e, 0x74
	.byte	0x2c, 0x30, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x61, 0x72
	.byte	0x72, 0x61, 0x79, 0x40
	.byte	0x48, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# Pointer (0x100C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::array<int,0> (0x100B)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x0b, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x100D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::array<int,0>& (0x100C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x0c, 0x10, 0x00, 0x00
	# MemberFunction (0x100E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::array<int,0>&) (0x100D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x0d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x100F) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::array<int,0> (0x100B)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x0b, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1010) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::array<int,0> (0x100F)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x0f, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x1011) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::array<int,0>& (0x1010)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x10, 0x10, 0x00, 0x00
	# MemberFunction (0x1012) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::array<int,0>&) (0x1011)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x11, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1013) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<int,-1> (0x1003)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1014) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,-1> (0x1013)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x13, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x1015) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::span<int,-1>& (0x1014)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x14, 0x10, 0x00, 0x00
	# MemberFunction (0x1016) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<int,-1>&) (0x1015)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x15, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1017) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@H$0?0@gsl@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x4b, 0x6e, 0x6f
	.byte	0x77, 0x6e, 0x4e, 0x6f
	.byte	0x74, 0x4e, 0x75, 0x6c
	.byte	0x6c, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x4b, 0x6e
	.byte	0x6f, 0x77, 0x6e, 0x4e
	.byte	0x6f, 0x74, 0x4e, 0x75
	.byte	0x6c, 0x6c, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# ArgList (0x1018) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<int,-1>::KnownNotNull (0x1017)
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x17, 0x10, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x1019) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<int,-1>::KnownNotNull, int) (0x1018)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x18, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x101A) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(int*, int) (0x1008)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(int*, int*) (0x100A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(std::array<int,0>&) (0x100E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(const std::array<int,0>&) (0x1012)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(const gsl::span<int,-1>&) (0x1016)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void gsl::span<int,-1>::(gsl::span<int,-1>::KnownNotNull, int) (0x1019)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x08, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0a, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0e, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x12, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x16, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x19, 0x10, 0x00, 0x00
	# MemberFunction (0x101B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x101C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1> (0x1003)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x101D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1>& (0x101C)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<int,-1>&) (0x1015)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x1c, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x15, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x101E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,-1> (0x1013)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x13, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# ArgList (0x101F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x1020) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1003)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1021) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int (0x74)
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x1022) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1003)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int, int) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1023) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1024) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1025) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: int (0x74)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x1026) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int& (0x1025)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1027) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x474)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x04, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1028) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<int,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x82, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x41, 0x40, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x1029) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x102A) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<int,-1>,1>
	#   LinkageName: .?AV?$span_iterator@V?$span@H$0?0@gsl@@$00@details@gsl@@
	# }
	.byte	0x7e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x31, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x30, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# MemberFunction (0x102B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,1> (0x102A)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2a, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x102C) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x30, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x72, 0x65, 0x76
	.byte	0x65, 0x72, 0x73, 0x65
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x41, 0x40, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x102D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > (0x102C)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2c, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x102E) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@H$0?0@gsl@@$00@details@gsl@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x31, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x72, 0x65, 0x76
	.byte	0x65, 0x72, 0x73, 0x65
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x30, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x102F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > (0x102E)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2e, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1030) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int, int) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1031) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>::subspan_selector<-1>
	#   LinkageName: .?AV?$subspan_selector@$0?0@?$span@H$0?0@gsl@@
	# }
	.byte	0x6e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x73, 0x65, 0x6c
	.byte	0x65, 0x63, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x40, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1032) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: int (0x74)
	#     ArgType: int (0x74)
	#     ArgType: gsl::span<int,-1>::subspan_selector<-1> (0x1031)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x31, 0x10, 0x00, 0x00
	# MemberFunction (0x1033) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1003)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (int, int, gsl::span<int,-1>::subspan_selector<-1>) (0x1032)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x32, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1034) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x1004)
	#     Name: extent
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#     FieldOffset: 0x0
	#     Name: storage_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x101A
	#     Name: span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::() (0x101B)
	#     Name: ~span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1>& gsl::span<int,-1>::(const gsl::span<int,-1>&) (0x101D)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(int) (0x1020)
	#     Name: first
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(int) (0x1020)
	#     Name: last
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(int, int) (0x1022)
	#     Name: subspan
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int gsl::span<int,-1>::() (0x1023)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int gsl::span<int,-1>::() (0x1023)
	#     Name: size_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool gsl::span<int,-1>::() (0x1024)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,-1>::(int) (0x1026)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,-1>::(int) (0x1026)
	#     Name: at
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,-1>::(int) (0x1026)
	#     Name: operator()
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::() (0x1027)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::span<int,-1>::() (0x1029)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::span<int,-1>::() (0x1029)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,1> gsl::span<int,-1>::() (0x102B)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,1> gsl::span<int,-1>::() (0x102B)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > gsl::span<int,-1>::() (0x102D)
	#     Name: rbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > gsl::span<int,-1>::() (0x102D)
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > gsl::span<int,-1>::() (0x102F)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > gsl::span<int,-1>::() (0x102F)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::() (0x1027)
	#     Name: _Unchecked_begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::() (0x1027)
	#     Name: _Unchecked_end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: bool gsl::span<int,-1>::(int, int) (0x1030)
	#     Name: CheckRange
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(int, int, gsl::span<int,-1>::subspan_selector<-1>) (0x1033)
	#     Name: make_subspan
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: element_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: index_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x474)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int& (0x1025)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,1> (0x102A)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > (0x102C)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > (0x102E)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::span<int,-1>::KnownNotNull (0x1017)
	#     Name: KnownNotNull
	#   }
	# }
	.byte	0xd6, 0x02, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1b, 0x10, 0x00, 0x00
	.byte	0x7e, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1d, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x10, 0x00, 0x00
	.byte	0x66, 0x69, 0x72, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x10, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x22, 0x10, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x23, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x23, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x24, 0x10, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x29, 0x10, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x29, 0x10, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2b, 0x10, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2b, 0x10, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2d, 0x10, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2d, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2f, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2f, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0x30, 0x10, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x33, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x04, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x2a, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x2c, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x2e, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x17, 0x10, 0x00, 0x00
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1035) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 43
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1034)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: gsl::span<int,-1>
	#   LinkageName: .?AV?$span@H$0?0@gsl@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x2b, 0x00, 0x10, 0x02
	.byte	0x34, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x1036) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: E:\DD\gsl-dadonenf\include\gsl\span
	# }
	.byte	0x2a, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x45, 0x3a, 0x5c, 0x44
	.byte	0x44, 0x5c, 0x67, 0x73
	.byte	0x6c, 0x2d, 0x64, 0x61
	.byte	0x64, 0x6f, 0x6e, 0x65
	.byte	0x6e, 0x66, 0x5c, 0x69
	.byte	0x6e, 0x63, 0x6c, 0x75
	.byte	0x64, 0x65, 0x5c, 0x67
	.byte	0x73, 0x6c, 0x5c, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	# UdtSourceLine (0x1037) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,-1> (0x1035)
	#   SourceFile: E:\DD\gsl-dadonenf\include\gsl\span (0x1036)
	#   LineNumber: 355
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x35, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x63, 0x01, 0x00, 0x00
	# Class (0x1038) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::extent_type<-1>
	#   LinkageName: .?AV?$extent_type@$0?0@details@gsl@@
	# }
	.byte	0x5a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x1039) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x103A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1039)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x39, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x103B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x474)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   ThisType: const gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x103A)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x04, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x3a, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x103C) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: gsl::details::extent_type<-1> (0x1038)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: int* (0x474)
	#     FieldOffset: 0x4
	#     Name: data_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x103B)
	#     Name: data
	#   }
	# }
	.byte	0x2e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x74, 0x04, 0x00, 0x00
	.byte	0x04, 0x00, 0x64, 0x61
	.byte	0x74, 0x61, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x3b, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x103D) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 3
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x103C)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x03, 0x00, 0x08, 0x02
	.byte	0x3c, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x74, 0x6f
	.byte	0x72, 0x61, 0x67, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x64, 0x79, 0x6e, 0x61
	.byte	0x6d, 0x69, 0x63, 0x5f
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x40
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x103E) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x103D)
	#   SourceFile: E:\DD\gsl-dadonenf\include\gsl\span (0x1036)
	#   LineNumber: 583
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x3d, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x02, 0x00, 0x00
	# Pointer (0x103F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::extent_type<-1> (0x1038)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x1040) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: gsl::details::extent_type<-1>* (0x103F)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x3f, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1041) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::extent_type<-1> (0x1038)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1042) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::extent_type<-1> (0x1041)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x41, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x1043) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: const gsl::details::extent_type<-1>* (0x1042)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x42, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1044) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: int (0x74)
	#     FieldOffset: 0x0
	#     Name: size_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<-1>::(int) (0x1040)
	#     Name: extent_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int gsl::details::extent_type<-1>::() (0x1043)
	#     Name: size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: index_type
	#   }
	# }
	.byte	0x4a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x69
	.byte	0x7a, 0x65, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x40, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x43, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Class (0x1045) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1044)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 4
	#   Name: gsl::details::extent_type<-1>
	#   LinkageName: .?AV?$extent_type@$0?0@details@gsl@@
	# }
	.byte	0x5a, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0x44, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x04, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1046) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::extent_type<-1> (0x1045)
	#   SourceFile: E:\DD\gsl-dadonenf\include\gsl\span (0x1036)
	#   LineNumber: 327
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x45, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x01, 0x00, 0x00
	# Class (0x1047) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const int,-1>
	#   LinkageName: .?AV?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1048) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x73
	.byte	0x74, 0x6f, 0x72, 0x61
	.byte	0x67, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x64, 0x79
	.byte	0x6e, 0x61, 0x6d, 0x69
	.byte	0x63, 0x5f, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x24, 0x24, 0x43, 0x42
	.byte	0x48, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# Pointer (0x1049) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const int,-1> (0x1047)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# Pointer (0x104A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const int (0x1004)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# ArgList (0x104B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int* (0x104A)
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x104C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int*, int) (0x104B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x104D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int* (0x104A)
	#     ArgType: const int* (0x104A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	# MemberFunction (0x104E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int*, const int*) (0x104D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x4d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x104F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::array<int,0>&) (0x100D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x0d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1050) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::array<int,0>&) (0x1011)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x11, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1051) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<const int,-1> (0x1047)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1052) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<const int,-1> (0x1051)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x51, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x1053) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::span<const int,-1>& (0x1052)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x52, 0x10, 0x00, 0x00
	# MemberFunction (0x1054) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<const int,-1>&) (0x1053)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x53, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1055) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const int,-1>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0x62, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x4b
	.byte	0x6e, 0x6f, 0x77, 0x6e
	.byte	0x4e, 0x6f, 0x74, 0x4e
	.byte	0x75, 0x6c, 0x6c, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x24, 0x24, 0x43, 0x42
	.byte	0x48, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# ArgList (0x1056) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<const int,-1>::KnownNotNull (0x1055)
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x55, 0x10, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x1057) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<const int,-1>::KnownNotNull, int) (0x1056)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x56, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1058) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(const int*, int) (0x104C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(const int*, const int*) (0x104E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(std::array<int,0>&) (0x104F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(const std::array<int,0>&) (0x1050)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(const gsl::span<const int,-1>&) (0x1054)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void gsl::span<const int,-1>::(gsl::span<const int,-1>::KnownNotNull, int) (0x1057)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4c, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4e, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4f, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x50, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x54, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x57, 0x10, 0x00, 0x00
	# MemberFunction (0x1059) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x105A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const int,-1> (0x1047)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x105B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const int,-1>& (0x105A)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<const int,-1>&) (0x1053)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x5a, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x53, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x105C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<const int,-1> (0x1051)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x51, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x105D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const int,-1> (0x1047)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105C)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x105E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const int,-1> (0x1047)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105C)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int, int) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x105F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105C)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1060) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105C)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1061) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const int (0x1004)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x1062) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int& (0x1061)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105C)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x61, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1063) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int* (0x104A)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105C)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1064) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<const int,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@$$CBH$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x41, 0x40
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x1065) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const int,-1>,0> (0x1064)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105C)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x64, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1066) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<const int,-1>,1>
	#   LinkageName: .?AV?$span_iterator@V?$span@$$CBH$0?0@gsl@@$00@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x1067) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const int,-1>,1> (0x1066)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105C)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x66, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1068) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@$$CBH$0?0@gsl@@$0A@@details@gsl@@@std@@
	# }
	.byte	0xbe, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x20
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x30, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x41, 0x40
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x1069) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> > (0x1068)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105C)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x68, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x106A) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@$$CBH$0?0@gsl@@$00@details@gsl@@@std@@
	# }
	.byte	0xba, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x20
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x31, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# MemberFunction (0x106B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> > (0x106A)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105C)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x6a, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x106C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int, int) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x106D) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const int,-1>::subspan_selector<-1>
	#   LinkageName: .?AV?$subspan_selector@$0?0@?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0x76, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x73
	.byte	0x75, 0x62, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x73
	.byte	0x65, 0x6c, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x73, 0x65
	.byte	0x6c, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x40, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x24
	.byte	0x24, 0x43, 0x42, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# ArgList (0x106E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: int (0x74)
	#     ArgType: int (0x74)
	#     ArgType: gsl::span<const int,-1>::subspan_selector<-1> (0x106D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x6d, 0x10, 0x00, 0x00
	# MemberFunction (0x106F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const int,-1> (0x1047)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105C)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (int, int, gsl::span<const int,-1>::subspan_selector<-1>) (0x106E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1070) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int (0x1004)
	#     Name: extent
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#     FieldOffset: 0x0
	#     Name: storage_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x1058
	#     Name: span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::() (0x1059)
	#     Name: ~span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const int,-1>& gsl::span<const int,-1>::(const gsl::span<const int,-1>&) (0x105B)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const int,-1> gsl::span<const int,-1>::(int) (0x105D)
	#     Name: first
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const int,-1> gsl::span<const int,-1>::(int) (0x105D)
	#     Name: last
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const int,-1> gsl::span<const int,-1>::(int, int) (0x105E)
	#     Name: subspan
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int gsl::span<const int,-1>::() (0x105F)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int gsl::span<const int,-1>::() (0x105F)
	#     Name: size_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool gsl::span<const int,-1>::() (0x1060)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int& gsl::span<const int,-1>::(int) (0x1062)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int& gsl::span<const int,-1>::(int) (0x1062)
	#     Name: at
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int& gsl::span<const int,-1>::(int) (0x1062)
	#     Name: operator()
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* gsl::span<const int,-1>::() (0x1063)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,0> gsl::span<const int,-1>::() (0x1065)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,0> gsl::span<const int,-1>::() (0x1065)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,1> gsl::span<const int,-1>::() (0x1067)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,1> gsl::span<const int,-1>::() (0x1067)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> > gsl::span<const int,-1>::() (0x1069)
	#     Name: rbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> > gsl::span<const int,-1>::() (0x1069)
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> > gsl::span<const int,-1>::() (0x106B)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> > gsl::span<const int,-1>::() (0x106B)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* gsl::span<const int,-1>::() (0x1063)
	#     Name: _Unchecked_begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* gsl::span<const int,-1>::() (0x1063)
	#     Name: _Unchecked_end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: bool gsl::span<const int,-1>::(int, int) (0x106C)
	#     Name: CheckRange
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<const int,-1> gsl::span<const int,-1>::(int, int, gsl::span<const int,-1>::subspan_selector<-1>) (0x106F)
	#     Name: make_subspan
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int (0x1004)
	#     Name: element_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: index_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int* (0x104A)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int& (0x1061)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,0> (0x1064)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,1> (0x1066)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> > (0x1068)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> > (0x106A)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::span<const int,-1>::KnownNotNull (0x1055)
	#     Name: KnownNotNull
	#   }
	# }
	.byte	0xd6, 0x02, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x58, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x59, 0x10, 0x00, 0x00
	.byte	0x7e, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5b, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x66, 0x69, 0x72, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5e, 0x10, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5f, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5f, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x60, 0x10, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x65, 0x10, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x65, 0x10, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x67, 0x10, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x67, 0x10, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x69, 0x10, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x69, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6b, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6b, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0x6c, 0x10, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x6f, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x61, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x64, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x66, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x68, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x6a, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x55, 0x10, 0x00, 0x00
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1071) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 43
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1070)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: gsl::span<const int,-1>
	#   LinkageName: .?AV?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x2b, 0x00, 0x10, 0x02
	.byte	0x70, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1072) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<const int,-1> (0x1071)
	#   SourceFile: E:\DD\gsl-dadonenf\include\gsl\span (0x1036)
	#   LineNumber: 355
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x71, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x63, 0x01, 0x00, 0x00
	# Modifier (0x1073) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1074) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1073)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x73, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x1075) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int* (0x104A)
	#   ClassType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   ThisType: const gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x1074)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x74, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1076) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: gsl::details::extent_type<-1> (0x1038)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: const int* (0x104A)
	#     FieldOffset: 0x4
	#     Name: data_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x1075)
	#     Name: data
	#   }
	# }
	.byte	0x2e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x04, 0x00, 0x64, 0x61
	.byte	0x74, 0x61, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x75, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1077) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 3
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x1076)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x03, 0x00, 0x08, 0x02
	.byte	0x76, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x73
	.byte	0x74, 0x6f, 0x72, 0x61
	.byte	0x67, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x64, 0x79
	.byte	0x6e, 0x61, 0x6d, 0x69
	.byte	0x63, 0x5f, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x24, 0x24, 0x43, 0x42
	.byte	0x48, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1078) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1077)
	#   SourceFile: E:\DD\gsl-dadonenf\include\gsl\span (0x1036)
	#   LineNumber: 583
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x77, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x02, 0x00, 0x00
	# MemberFuncId (0x1079) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: void gsl::span<int,-1>::() (0x101B)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1b, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: int gsl::span<int,-1>::() (0x1023)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x23, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: int* gsl::span<int,-1>::() (0x1027)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107C) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   FunctionType: void gsl::span<const int,-1>::() (0x1059)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x59, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107D) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   FunctionType: int gsl::span<const int,-1>::() (0x105F)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5f, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   FunctionType: const int* gsl::span<const int,-1>::() (0x1063)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x107F) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::extent_type<0>
	#   LinkageName: .?AV?$extent_type@$0A@@details@gsl@@
	# }
	.byte	0x56, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x65, 0x78, 0x74
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# Pointer (0x1080) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::extent_type<0> (0x107F)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x7f, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x1081) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<0> (0x107F)
	#   ThisType: gsl::details::extent_type<0>* (0x1080)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7f, 0x10, 0x00, 0x00
	.byte	0x80, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1082) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<0> (0x107F)
	#   ThisType: gsl::details::extent_type<0>* (0x1080)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7f, 0x10, 0x00, 0x00
	.byte	0x80, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1083) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<0>::() (0x1081)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<0>::(int) (0x1082)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	# Modifier (0x1084) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::extent_type<0> (0x107F)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x7f, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1085) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::extent_type<0> (0x1084)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x84, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x1086) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: gsl::details::extent_type<0> (0x107F)
	#   ThisType: const gsl::details::extent_type<0>* (0x1085)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x7f, 0x10, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1087) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1083
	#     Name: extent_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int gsl::details::extent_type<0>::() (0x1086)
	#     Name: size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: index_type
	#   }
	# }
	.byte	0x3a, 0x00, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x86, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Class (0x1088) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1087)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: gsl::details::extent_type<0>
	#   LinkageName: .?AV?$extent_type@$0A@@details@gsl@@
	# }
	.byte	0x56, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0x87, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x65, 0x78, 0x74
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1089) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::extent_type<0> (0x1088)
	#   SourceFile: E:\DD\gsl-dadonenf\include\gsl\span (0x1036)
	#   LineNumber: 304
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x88, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x30, 0x01, 0x00, 0x00
	# MemberFuncId (0x108A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<0> (0x107F)
	#   FunctionType: void gsl::details::extent_type<0>::() (0x1081)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x7f, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# Pointer (0x108B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# ArgList (0x108C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x474)
	#     ArgType: gsl::details::extent_type<0> (0x107F)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x04, 0x00, 0x00
	.byte	0x7f, 0x10, 0x00, 0x00
	# MemberFunction (0x108D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   ThisType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x108B)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, gsl::details::extent_type<0>) (0x108C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x8b, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x8c, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x108E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   FunctionType: void gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(int*, gsl::details::extent_type<0>) (0x108D)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x8d, 0x10, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x108F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::details::extent_type<0> (0x107F)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x7f, 0x10, 0x00, 0x00
	# MemberFunction (0x1090) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: gsl::details::extent_type<-1>* (0x103F)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::details::extent_type<0>) (0x108F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x3f, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x8f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1091) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   FunctionType: void gsl::details::extent_type<-1>::(gsl::details::extent_type<0>) (0x1090)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# MemberFuncId (0x1092) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   FunctionType: int gsl::details::extent_type<-1>::() (0x1043)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x43, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x1093) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: gsl::details
	# }
	.byte	0x16, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x1094) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::fail_fast
	#   LinkageName: .?AUfail_fast@gsl@@
	# }
	.byte	0x3a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x66
	.byte	0x61, 0x69, 0x6c, 0x5f
	.byte	0x66, 0x61, 0x73, 0x74
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x66, 0x61, 0x69
	.byte	0x6c, 0x5f, 0x66, 0x61
	.byte	0x73, 0x74, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x1095) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::fail_fast (0x1094)
	#   PointerAttributes: 0x808A
	#   PtrType: Near32 (0xA)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x8a, 0x80, 0x00, 0x00
	# ArgList (0x1096) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::fail_fast&& (0x1095)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x95, 0x10, 0x00, 0x00
	# Procedure (0x1097) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::fail_fast&&) (0x1096)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x96, 0x10, 0x00, 0x00
	# VFTableShape (0x1098) {
	#   TypeLeafKind: LF_VTSHAPE (0xA)
	#   VFEntryCount: 2
	# }
	.byte	0x06, 0x00, 0x0a, 0x00
	.byte	0x02, 0x00, 0x55, 0xf1
	# Class (0x1099) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::logic_error
	#   LinkageName: .?AVlogic_error@std@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x109A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::fail_fast (0x1094)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# Modifier (0x109B) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: char (0x70)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x109C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char (0x109B)
	#   PointerAttributes: 0x840A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x10, 0x00, 0x00
	.byte	0x0a, 0x84, 0x00, 0x00
	# ArgList (0x109D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char* const (0x109C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# MemberFunction (0x109E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x1094)
	#   ThisType: gsl::fail_fast* (0x109A)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x109F) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::logic_error (0x1099)
	#     BaseOffset: 0x0
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::fail_fast::(const char* const) (0x109E)
	#     Name: fail_fast
	#   }
	# }
	.byte	0x22, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Struct (0x10A0) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 2
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x109F)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x1098)
	#   SizeOf: 12
	#   Name: gsl::fail_fast
	#   LinkageName: .?AUfail_fast@gsl@@
	# }
	.byte	0x3a, 0x00, 0x05, 0x15
	.byte	0x02, 0x00, 0x00, 0x02
	.byte	0x9f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x98, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x66
	.byte	0x61, 0x69, 0x6c, 0x5f
	.byte	0x66, 0x61, 0x73, 0x74
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x66, 0x61, 0x69
	.byte	0x6c, 0x5f, 0x66, 0x61
	.byte	0x73, 0x74, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x10A1) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: E:\DD\gsl-dadonenf\include\gsl\gsl_assert
	# }
	.byte	0x32, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x45, 0x3a, 0x5c, 0x44
	.byte	0x44, 0x5c, 0x67, 0x73
	.byte	0x6c, 0x2d, 0x64, 0x61
	.byte	0x64, 0x6f, 0x6e, 0x65
	.byte	0x6e, 0x66, 0x5c, 0x69
	.byte	0x6e, 0x63, 0x6c, 0x75
	.byte	0x64, 0x65, 0x5c, 0x67
	.byte	0x73, 0x6c, 0x5c, 0x67
	.byte	0x73, 0x6c, 0x5f, 0x61
	.byte	0x73, 0x73, 0x65, 0x72
	.byte	0x74, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x10A2) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::fail_fast (0x10A0)
	#   SourceFile: E:\DD\gsl-dadonenf\include\gsl\gsl_assert (0x10A1)
	#   LineNumber: 97
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xa0, 0x10, 0x00, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	.byte	0x61, 0x00, 0x00, 0x00
	# Class (0x10A3) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::exception
	#   LinkageName: .?AVexception@std@@
	# }
	.byte	0x3a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x63, 0x65, 0x70
	.byte	0x74, 0x69, 0x6f, 0x6e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x10A4) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::logic_error (0x1099)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# Class (0x10A5) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::basic_string<char,std::char_traits<char>,std::allocator<char> >
	#   LinkageName: .?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@
	# }
	.byte	0x9e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x61, 0x73, 0x69, 0x63
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x40, 0x44, 0x55
	.byte	0x3f, 0x24, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x44, 0x40
	.byte	0x32, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x10A6) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x10A7) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x10A8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	# MemberFunction (0x10A9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x1099)
	#   ThisType: std::logic_error* (0x10A4)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10A8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10AA) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char (0x109B)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# ArgList (0x10AB) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char* (0x10AA)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xaa, 0x10, 0x00, 0x00
	# MemberFunction (0x10AC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x1099)
	#   ThisType: std::logic_error* (0x10A4)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char*) (0x10AB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10AD) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::logic_error::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10A9)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::logic_error::(const char*) (0x10AC)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa9, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xac, 0x10, 0x00, 0x00
	# FieldList (0x10AE) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::exception (0x10A3)
	#     BaseOffset: 0x0
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10AD
	#     Name: logic_error
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::exception (0x10A3)
	#     Name: _Mybase
	#   }
	# }
	.byte	0x32, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xad, 0x10, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	# Class (0x10AF) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x10AE)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x1098)
	#   SizeOf: 12
	#   Name: std::logic_error
	#   LinkageName: .?AVlogic_error@std@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0xae, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x98, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x10B0) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\stdexcept
	# }
	.byte	0x6e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x39, 0x5c
	.byte	0x50, 0x72, 0x65, 0x76
	.byte	0x69, 0x65, 0x77, 0x5c
	.byte	0x56, 0x43, 0x5c, 0x54
	.byte	0x6f, 0x6f, 0x6c, 0x73
	.byte	0x5c, 0x4d, 0x53, 0x56
	.byte	0x43, 0x5c, 0x31, 0x34
	.byte	0x2e, 0x32, 0x30, 0x2e
	.byte	0x32, 0x37, 0x33, 0x32
	.byte	0x33, 0x5c, 0x69, 0x6e
	.byte	0x63, 0x6c, 0x75, 0x64
	.byte	0x65, 0x5c, 0x73, 0x74
	.byte	0x64, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x00
	# UdtSourceLine (0x10B1) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::logic_error (0x10AF)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\stdexcept (0x10B0)
	#   LineNumber: 17
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xaf, 0x10, 0x00, 0x00
	.byte	0xb0, 0x10, 0x00, 0x00
	.byte	0x11, 0x00, 0x00, 0x00
	# Pointer (0x10B2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: <vftable 2 methods> (0x1098)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x98, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# Struct (0x10B3) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: __std_exception_data
	#   LinkageName: .?AU__std_exception_data@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x5f
	.byte	0x73, 0x74, 0x64, 0x5f
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x5f, 0x64, 0x61
	.byte	0x74, 0x61, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x5f
	.byte	0x5f, 0x73, 0x74, 0x64
	.byte	0x5f, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x5f, 0x64
	.byte	0x61, 0x74, 0x61, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Pointer (0x10B4) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::exception (0x10A3)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x10B5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x10A3)
	#   ThisType: std::exception* (0x10B4)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0xb4, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10B6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x10A3)
	#   ThisType: std::exception* (0x10B4)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0xb4, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10B7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x109C)
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x10B8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x10A3)
	#   ThisType: std::exception* (0x10B4)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, int) (0x10B7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0xb4, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xb7, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x10B9) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::exception (0x10A3)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x10BA) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::exception (0x10B9)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xb9, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x10BB) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::exception& (0x10BA)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xba, 0x10, 0x00, 0x00
	# MemberFunction (0x10BC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x10A3)
	#   ThisType: std::exception* (0x10B4)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::exception&) (0x10BB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0xb4, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xbb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10BD) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::() (0x10B5)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::(const char* const) (0x10B6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::(const char* const, int) (0x10B8)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::(const std::exception&) (0x10BC)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb6, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb8, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbc, 0x10, 0x00, 0x00
	# Pointer (0x10BE) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::exception (0x10A3)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x10BF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::exception& (0x10BE)
	#   ClassType: std::exception (0x10A3)
	#   ThisType: std::exception* (0x10B4)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::exception&) (0x10BB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xbe, 0x10, 0x00, 0x00
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0xb4, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xbb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10C0) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::exception (0x10B9)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xb9, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x10C1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x10AA)
	#   ClassType: std::exception (0x10A3)
	#   ThisType: const std::exception* (0x10C0)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x10C2) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   VFPtr {
	#     TypeLeafKind: LF_VFUNCTAB (0x1409)
	#     Type: <vftable 2 methods>* (0x10B2)
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: __std_exception_data (0x10B3)
	#     FieldOffset: 0x4
	#     Name: _Data
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x10BD
	#     Name: exception
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::exception& std::exception::(const std::exception&) (0x10BF)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: IntroducingVirtual (0x4)
	#     Type: void std::exception::() (0x10B5)
	#     VFTableOffset: 0x0
	#     Name: ~exception
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: IntroducingVirtual (0x4)
	#     Type: const char* std::exception::() (0x10C1)
	#     VFTableOffset: 0x4
	#     Name: what
	#   }
	# }
	.byte	0x6e, 0x00, 0x03, 0x12
	.byte	0x09, 0x14, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0xb3, 0x10, 0x00, 0x00
	.byte	0x04, 0x00, 0x5f, 0x44
	.byte	0x61, 0x74, 0x61, 0x00
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xbd, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xbf, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x13, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x7e, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x13, 0x00
	.byte	0xc1, 0x10, 0x00, 0x00
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x77, 0x68, 0x61, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x10C3) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 9
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x10C2)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x1098)
	#   SizeOf: 12
	#   Name: std::exception
	#   LinkageName: .?AVexception@std@@
	# }
	.byte	0x3a, 0x00, 0x04, 0x15
	.byte	0x09, 0x00, 0x00, 0x02
	.byte	0xc2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x98, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x63, 0x65, 0x70
	.byte	0x74, 0x69, 0x6f, 0x6e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x10C4) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h
	# }
	.byte	0x7a, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x39, 0x5c
	.byte	0x50, 0x72, 0x65, 0x76
	.byte	0x69, 0x65, 0x77, 0x5c
	.byte	0x56, 0x43, 0x5c, 0x54
	.byte	0x6f, 0x6f, 0x6c, 0x73
	.byte	0x5c, 0x4d, 0x53, 0x56
	.byte	0x43, 0x5c, 0x31, 0x34
	.byte	0x2e, 0x32, 0x30, 0x2e
	.byte	0x32, 0x37, 0x33, 0x32
	.byte	0x33, 0x5c, 0x69, 0x6e
	.byte	0x63, 0x6c, 0x75, 0x64
	.byte	0x65, 0x5c, 0x76, 0x63
	.byte	0x72, 0x75, 0x6e, 0x74
	.byte	0x69, 0x6d, 0x65, 0x5f
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x2e, 0x68, 0x00
	# UdtSourceLine (0x10C5) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::exception (0x10C3)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h (0x10C4)
	#   LineNumber: 44
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xc3, 0x10, 0x00, 0x00
	.byte	0xc4, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x00, 0x00
	# Modifier (0x10C6) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: unsigned (0x75)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Class (0x10C7) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
	#   LinkageName: .?AV?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@
	# }
	.byte	0xce, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6d, 0x70
	.byte	0x72, 0x65, 0x73, 0x73
	.byte	0x65, 0x64, 0x5f, 0x70
	.byte	0x61, 0x69, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x2c, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x43
	.byte	0x6f, 0x6d, 0x70, 0x72
	.byte	0x65, 0x73, 0x73, 0x65
	.byte	0x64, 0x5f, 0x70, 0x61
	.byte	0x69, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x32
	.byte	0x40, 0x24, 0x30, 0x30
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x10C8) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x10C9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10A8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10CA) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator<char>
	#   LinkageName: .?AV?$allocator@D@std@@
	# }
	.byte	0x42, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Modifier (0x10CB) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::allocator<char> (0x10CA)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x10CC) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<char> (0x10CB)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x10CD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#     ArgType: const std::allocator<char>& (0x10CC)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0xcc, 0x10, 0x00, 0x00
	# MemberFunction (0x10CE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::allocator<char>&) (0x10CD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10CF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10D0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::allocator<char>& (0x10CC)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xcc, 0x10, 0x00, 0x00
	# MemberFunction (0x10D1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x10D0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10D2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const std::allocator<char>& (0x10CC)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xcc, 0x10, 0x00, 0x00
	# MemberFunction (0x10D3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, const std::allocator<char>&) (0x10D2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10D4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const std::allocator<char>& (0x10CC)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xcc, 0x10, 0x00, 0x00
	# MemberFunction (0x10D5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, const unsigned, const std::allocator<char>&) (0x10D4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x04, 0x00
	.byte	0xd4, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10D6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x109C)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x10D7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const unsigned) (0x10D6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xd6, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10D8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x109C)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const std::allocator<char>& (0x10CC)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xcc, 0x10, 0x00, 0x00
	# MemberFunction (0x10D9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const unsigned, const std::allocator<char>&) (0x10D8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0xd8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10DA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10DB) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x109C)
	#     ArgType: const std::allocator<char>& (0x10CC)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xcc, 0x10, 0x00, 0x00
	# MemberFunction (0x10DC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const std::allocator<char>&) (0x10DB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xdb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10DD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char (0x109B)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	# MemberFunction (0x10DE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned, const char) (0x10DD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xdd, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10DF) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char (0x109B)
	#     ArgType: const std::allocator<char>& (0x10CC)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	.byte	0xcc, 0x10, 0x00, 0x00
	# MemberFunction (0x10E0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned, const char, const std::allocator<char>&) (0x10DF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0xdf, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10E1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   PointerAttributes: 0x808A
	#   PtrType: Near32 (0xA)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x8a, 0x80, 0x00, 0x00
	# ArgList (0x10E2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x10E1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xe1, 0x10, 0x00, 0x00
	# MemberFunction (0x10E3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x10E2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xe2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10E4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x10E1)
	#     ArgType: const std::allocator<char>& (0x10CC)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xe1, 0x10, 0x00, 0x00
	.byte	0xcc, 0x10, 0x00, 0x00
	# MemberFunction (0x10E5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, const std::allocator<char>&) (0x10E4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xe4, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10E6) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::initializer_list<char>
	#   LinkageName: .?AV?$initializer_list@D@std@@
	# }
	.byte	0x52, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x69, 0x74, 0x69
	.byte	0x61, 0x6c, 0x69, 0x7a
	.byte	0x65, 0x72, 0x5f, 0x6c
	.byte	0x69, 0x73, 0x74, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x69, 0x6e, 0x69, 0x74
	.byte	0x69, 0x61, 0x6c, 0x69
	.byte	0x7a, 0x65, 0x72, 0x5f
	.byte	0x6c, 0x69, 0x73, 0x74
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x10E7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::initializer_list<char> (0x10E6)
	#     ArgType: const std::allocator<char>& (0x10CC)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xe6, 0x10, 0x00, 0x00
	.byte	0xcc, 0x10, 0x00, 0x00
	# MemberFunction (0x10E8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::initializer_list<char>, const std::allocator<char>&) (0x10E7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xe7, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10E9) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10C9)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::allocator<char>&) (0x10CE)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10CF)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::allocator<char>&) (0x10D1)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, const std::allocator<char>&) (0x10D3)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, const unsigned, const std::allocator<char>&) (0x10D5)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned) (0x10D7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned, const std::allocator<char>&) (0x10D9)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x10DA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const std::allocator<char>&) (0x10DC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const char) (0x10DE)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const char, const std::allocator<char>&) (0x10E0)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x10E3)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, const std::allocator<char>&) (0x10E5)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>, const std::allocator<char>&) (0x10E8)
	#   ]
	# }
	.byte	0x7a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xce, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd3, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd5, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd9, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xda, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xdc, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xde, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe0, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe3, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe5, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe8, 0x10, 0x00, 0x00
	# Pointer (0x10EA) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: char (0x70)
	#   PointerAttributes: 0x840A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x0a, 0x84, 0x00, 0x00
	# Struct (0x10EB) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::random_access_iterator_tag
	#   LinkageName: .?AUrandom_access_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x61, 0x6e, 0x64, 0x6f
	.byte	0x6d, 0x5f, 0x61, 0x63
	.byte	0x63, 0x65, 0x73, 0x73
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x72, 0x61
	.byte	0x6e, 0x64, 0x6f, 0x6d
	.byte	0x5f, 0x61, 0x63, 0x63
	.byte	0x65, 0x73, 0x73, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# ArgList (0x10EC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x10EA)
	#     ArgType: char* const (0x10EA)
	#     ArgType: std::random_access_iterator_tag (0x10EB)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	# MemberFunction (0x10ED) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, char* const, std::random_access_iterator_tag) (0x10EC)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0xec, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10EE) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x109C)
	#     ArgType: const char* const (0x109C)
	#     ArgType: std::random_access_iterator_tag (0x10EB)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	# MemberFunction (0x10EF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const char* const, std::random_access_iterator_tag) (0x10EE)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0xee, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10F0) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char* const, char* const, std::random_access_iterator_tag) (0x10ED)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const char* const, std::random_access_iterator_tag) (0x10EF)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xed, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xef, 0x10, 0x00, 0x00
	# Pointer (0x10F1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# Struct (0x10F2) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Equal_allocators
	#   LinkageName: .?AU_Equal_allocators@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x45, 0x71, 0x75, 0x61
	.byte	0x6c, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x73
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x45, 0x71
	.byte	0x75, 0x61, 0x6c, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x73, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x10F3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#     ArgType: std::_Equal_allocators (0x10F2)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	# MemberFunction (0x10F4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::_Equal_allocators) (0x10F3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xf3, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x10F5) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::integral_constant<bool,1>
	#   LinkageName: .?AU?$integral_constant@_N$00@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x30, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x10F6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#     ArgType: std::integral_constant<bool,1> (0x10F5)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	# MemberFunction (0x10F7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,1>) (0x10F6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xf6, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x10F8) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::integral_constant<bool,0>
	#   LinkageName: .?AU?$integral_constant@_N$0A@@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x41, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# ArgList (0x10F9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#     ArgType: std::integral_constant<bool,0> (0x10F8)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	# MemberFunction (0x10FA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,0>) (0x10F9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10FB) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::_Equal_allocators) (0x10F4)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,1>) (0x10F7)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,0>) (0x10FA)
	#   ]
	# }
	.byte	0x1a, 0x00, 0x06, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xf4, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xf7, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	# MemberFunction (0x10FC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x10E2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xe2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10FD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::initializer_list<char> (0x10E6)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xe6, 0x10, 0x00, 0x00
	# MemberFunction (0x10FE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::initializer_list<char>) (0x10FD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xfd, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10FF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10A8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1100) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1101) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char (0x109B)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	# MemberFunction (0x1102) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char) (0x1101)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x01, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1103) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x10FC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x10FE)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10FF)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1100)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char) (0x1102)
	#   ]
	# }
	.byte	0x2a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfe, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x02, 0x11, 0x00, 0x00
	# ArgList (0x1104) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: unsigned (0x75)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	# MemberFunction (0x1105) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, unsigned) (0x1104)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x04, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1106) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const unsigned) (0x10D6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xd6, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1107) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned, const char) (0x10DD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xdd, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1108) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x10FC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x10FE)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10FF)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, unsigned) (0x1105)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned) (0x1106)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1100)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const char) (0x1107)
	#   ]
	# }
	.byte	0x3a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfe, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x05, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x07, 0x11, 0x00, 0x00
	# MethodOverloadList (0x1109) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,1>) (0x10F7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,0>) (0x10FA)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf7, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	# ArgList (0x110A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: char (0x70)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	# MemberFunction (0x110B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (char) (0x110A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x0a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x110C) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x10FE)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10FF)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1100)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char) (0x110B)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfe, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0b, 0x11, 0x00, 0x00
	# MethodOverloadList (0x110D) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x10FE)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10FF)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, unsigned) (0x1105)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned) (0x1106)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1100)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const char) (0x1107)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfe, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x05, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x07, 0x11, 0x00, 0x00
	# Class (0x110E) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_iterator<std::_String_val<std::_Simple_types<char> > >
	#   LinkageName: .?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@
	# }
	.byte	0xa6, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x110F) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
	#   LinkageName: .?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x63
	.byte	0x6f, 0x6e, 0x73, 0x74
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x1110) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110F)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x0f, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Modifier (0x1111) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::initializer_list<char> (0x10E6)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xe6, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x1112) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const std::initializer_list<char> (0x1111)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x11, 0x11, 0x00, 0x00
	# MemberFunction (0x1113) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110E)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x1112)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0e, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x12, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1114) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	# MemberFunction (0x1115) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1114)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x14, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1116) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: unsigned (0x75)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	# MemberFunction (0x1117) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, unsigned) (0x1116)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x04, 0x00
	.byte	0x16, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1118) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char* const (0x109C)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x1119) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned, const char* const, const unsigned) (0x1118)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x18, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x111A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char* const (0x109C)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# MemberFunction (0x111B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned, const char* const) (0x111A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x1a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x111C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char (0x109B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	# MemberFunction (0x111D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned, const unsigned, const char) (0x111C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x1c, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x111E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const char (0x109B)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	# MemberFunction (0x111F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110E)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char) (0x111E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0e, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x1e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1120) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char (0x109B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	# MemberFunction (0x1121) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110E)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned, const char) (0x1120)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0e, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x20, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1122) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x1113)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1115)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, unsigned) (0x1117)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const char* const, const unsigned) (0x1119)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const char* const) (0x111B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const unsigned, const char) (0x111D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char) (0x111F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned, const char) (0x1121)
	#   ]
	# }
	.byte	0x42, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x15, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x17, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x19, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1b, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1d, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1f, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x21, 0x11, 0x00, 0x00
	# ArgList (0x1123) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const std::initializer_list<char> (0x1111)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x11, 0x11, 0x00, 0x00
	# MemberFunction (0x1124) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x1123)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x23, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1125) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	# MemberFunction (0x1126) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned, const unsigned, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1125)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x25, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1127) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 5
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: unsigned (0x75)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: unsigned (0x75)
	#   ]
	# }
	.byte	0x1a, 0x00, 0x01, 0x12
	.byte	0x05, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	# MemberFunction (0x1128) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 5
	#   ArgListType: (const unsigned, unsigned, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, unsigned) (0x1127)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x05, 0x00
	.byte	0x27, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1129) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: unsigned (0x75)
	#     ArgType: const char* const (0x109C)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x112A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned, unsigned, const char* const, const unsigned) (0x1129)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x04, 0x00
	.byte	0x29, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x112B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char* const (0x109C)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# MemberFunction (0x112C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned, const unsigned, const char* const) (0x112B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x2b, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x112D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: unsigned (0x75)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char (0x109B)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	# MemberFunction (0x112E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned, unsigned, const unsigned, const char) (0x112D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x04, 0x00
	.byte	0x2d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x112F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	# MemberFunction (0x1130) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x112F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x2f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1131) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const char* const (0x109C)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x1132) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const, const unsigned) (0x1131)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x04, 0x00
	.byte	0x31, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1133) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const char* const (0x109C)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# MemberFunction (0x1134) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const) (0x1133)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x33, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1135) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char (0x109B)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	# MemberFunction (0x1136) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned, const char) (0x1135)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x04, 0x00
	.byte	0x35, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1137) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x1124)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const unsigned, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1126)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, unsigned, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, unsigned) (0x1128)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, unsigned, const char* const, const unsigned) (0x112A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const unsigned, const char* const) (0x112C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, unsigned, const unsigned, const char) (0x112E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1130)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const, const unsigned) (0x1132)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const) (0x1134)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned, const char) (0x1136)
	#   ]
	# }
	.byte	0x52, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x24, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x26, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x28, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2a, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2c, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2e, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x30, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x36, 0x11, 0x00, 0x00
	# ArgList (0x1138) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#     ArgType: std::integral_constant<bool,0> (0x10F8)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	# MemberFunction (0x1139) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,0>) (0x1138)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x38, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x113A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#     ArgType: std::integral_constant<bool,1> (0x10F5)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	# MemberFunction (0x113B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,1>) (0x113A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x3a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x113C) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,0>) (0x1139)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,1>) (0x113B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x39, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x3b, 0x11, 0x00, 0x00
	# ArgList (0x113D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x113E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned) (0x113D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x113F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: unsigned (0x75)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	# MemberFunction (0x1140) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned, unsigned) (0x113F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1141) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	# MemberFunction (0x1142) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110E)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x1141)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0e, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x41, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1143) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1110)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	# MemberFunction (0x1144) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110E)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x1143)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0e, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x43, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1145) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned) (0x113E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, unsigned) (0x1140)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x1142)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x1144)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3e, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x40, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x42, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	# MemberFunction (0x1146) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110E)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0e, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1147) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x1148) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110F)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0f, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1149) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1146)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1148)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x46, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x48, 0x11, 0x00, 0x00
	# MemberFunction (0x114A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x470)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x114B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x10AA)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x114C) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x114A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x114B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4a, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	# Class (0x114D) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >
	#   LinkageName: .?AV?$reverse_iterator@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@
	# }
	.byte	0xd6, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x114E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > > (0x114D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4d, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x114F) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > >
	#   LinkageName: .?AV?$reverse_iterator@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@
	# }
	.byte	0xe2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x1150) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > (0x114F)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4f, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1151) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x114E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1150)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4e, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x50, 0x11, 0x00, 0x00
	# Pointer (0x1152) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: char (0x70)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x1153) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char& (0x1152)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned) (0x113D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x52, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1154) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char (0x109B)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x1155) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char& (0x1154)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned) (0x113D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x54, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1156) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned) (0x1153)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned) (0x1155)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x53, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x55, 0x11, 0x00, 0x00
	# MemberFunction (0x1157) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char) (0x1101)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x01, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1158) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char& (0x1152)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x52, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1159) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char& (0x1154)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x54, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x115A) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1158)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1159)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x58, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x59, 0x11, 0x00, 0x00
	# MemberFunction (0x115B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x115C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned) (0x113D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x115D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x115E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x10EA)
	#     ArgType: unsigned (0x75)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x115F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, unsigned, const unsigned) (0x115E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x5e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1160) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: char* const (0x10EA)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: unsigned (0x75)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x1161) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (char* const, const unsigned, unsigned, const unsigned) (0x1160)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x04, 0x00
	.byte	0x60, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1162) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_val<std::_Simple_types<char> >
	#   LinkageName: .?AV?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x72, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x1163) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_val<std::_Simple_types<char> > (0x1162)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x1164) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_String_val<std::_Simple_types<char> >& (0x1163)
	#     ArgType: std::_String_val<std::_Simple_types<char> >& (0x1163)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x63, 0x11, 0x00, 0x00
	.byte	0x63, 0x11, 0x00, 0x00
	# MemberFunction (0x1165) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_String_val<std::_Simple_types<char> >&, std::_String_val<std::_Simple_types<char> >&) (0x1164)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x64, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1166) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xf1, 0x10, 0x00, 0x00
	# MemberFunction (0x1167) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1166)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x66, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1168) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x1169) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned) (0x1168)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x116A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x109C)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x116B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const unsigned, const unsigned) (0x116A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x6a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x116C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const unsigned) (0x10D6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xd6, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x116D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char (0x109B)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x116E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char, const unsigned) (0x116D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x6d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x116F) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned) (0x1169)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned, const unsigned) (0x116B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned) (0x116C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char, const unsigned) (0x116E)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6b, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6c, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6e, 0x11, 0x00, 0x00
	# ArgList (0x1170) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#     ArgType: unsigned (0x75)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	# MemberFunction (0x1171) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, unsigned) (0x1170)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x70, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1172) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, unsigned) (0x1171)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned, const unsigned) (0x116B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned) (0x116C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char, const unsigned) (0x116E)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x71, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6b, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6c, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6e, 0x11, 0x00, 0x00
	# ArgList (0x1173) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x109C)
	#     ArgType: unsigned (0x75)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	# MemberFunction (0x1174) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, unsigned) (0x1173)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x73, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1175) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned) (0x1169)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned, const unsigned) (0x116B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, unsigned) (0x1174)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char, const unsigned) (0x116E)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6b, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x74, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6e, 0x11, 0x00, 0x00
	# ArgList (0x1176) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x1177) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned, const unsigned) (0x1176)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x76, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1178) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10A8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1179) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x117A) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1178)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1179)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x78, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x79, 0x11, 0x00, 0x00
	# MemberFunction (0x117B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10A8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x117C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: unsigned (0x75)
	#     ArgType: unsigned (0x75)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	# MemberFunction (0x117D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (unsigned, unsigned, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x117C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x7c, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x117E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 5
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A7)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x1a, 0x00, 0x01, 0x12
	.byte	0x05, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x117F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 5
	#   ArgListType: (const unsigned, const unsigned, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, const unsigned) (0x117E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x05, 0x00
	.byte	0x7e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1180) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1181) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned, const unsigned, const char* const) (0x112B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x03, 0x00
	.byte	0x2b, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1182) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char* const (0x109C)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x1183) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned, const unsigned, const char* const, const unsigned) (0x1182)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x04, 0x00
	.byte	0x82, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1184) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x117B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(unsigned, unsigned, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x117D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const unsigned, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned, const unsigned) (0x117F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1180)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const unsigned, const char* const) (0x1181)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const unsigned, const char* const, const unsigned) (0x1183)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7b, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7d, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7f, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x80, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x83, 0x11, 0x00, 0x00
	# MemberFunction (0x1185) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char> (0x10CA)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1186) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned) (0x113D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1187) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1188) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<char> (0x10CA)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x1189) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char>& (0x1188)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x118A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::allocator<char>& (0x10CC)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xcc, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x118B) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: std::allocator<char>& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1189)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: const std::allocator<char>& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x118A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x89, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x8a, 0x11, 0x00, 0x00
	# MemberFunction (0x118C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_val<std::_Simple_types<char> >& (0x1163)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x63, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x118D) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_String_val<std::_Simple_types<char> > (0x1162)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x118E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_String_val<std::_Simple_types<char> > (0x118D)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8d, 0x11, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x118F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_String_val<std::_Simple_types<char> >& (0x118E)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x8e, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1190) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_String_val<std::_Simple_types<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x118C)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: const std::_String_val<std::_Simple_types<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x118F)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x8c, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x8f, 0x11, 0x00, 0x00
	# Struct (0x1191) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Iterator_base12
	#   LinkageName: .?AU_Iterator_base12@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x49, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x62, 0x61, 0x73
	.byte	0x65, 0x31, 0x32, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x49, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x1192) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Iterator_base12 (0x1191)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# Pointer (0x1193) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Iterator_base12* (0x1192)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x1194) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1193)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1195) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Container_proxy
	#   LinkageName: .?AU_Container_proxy@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x1196) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy (0x1195)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# Pointer (0x1197) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy* (0x1196)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x1198) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy*& (0x1197)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C8)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x97, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1199) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy (0x1195)
	#   PointerAttributes: 0x840A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x0a, 0x84, 0x00, 0x00
	# Pointer (0x119A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy* const (0x1199)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x99, 0x11, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x119B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* const& (0x119A)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A5)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1147)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9a, 0x11, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x119C) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_Container_proxy*& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1198)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_Container_proxy* const& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x119B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x98, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	# Struct (0x119D) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x119E) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::char_traits<char>
	#   LinkageName: .?AU?$char_traits@D@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x119F) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Private (0x1)
	#     Type: const unsigned (0x10C6)
	#     Name: _BUF_SIZE
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Private (0x1)
	#     Type: const unsigned (0x10C6)
	#     Name: _ALLOC_MASK
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Private (0x1)
	#     Type: const unsigned (0x10C6)
	#     Name: _Memcpy_move_offset
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Private (0x1)
	#     Type: const unsigned (0x10C6)
	#     Name: _Memcpy_move_size
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const unsigned (0x10C6)
	#     Name: npos
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x10C7)
	#     FieldOffset: 0x0
	#     Name: _Mypair
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0xF
	#     MethodListIndex: 0x10E9
	#     Name: basic_string
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10F0
	#     Name: _Construct
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x3
	#     MethodListIndex: 0x10FB
	#     Name: _Move_assign
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x5
	#     MethodListIndex: 0x1103
	#     Name: operator=
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x7
	#     MethodListIndex: 0x1108
	#     Name: assign
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1109
	#     Name: _Take_contents
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10C9)
	#     Name: _Construct_lv_contents
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x110C
	#     Name: operator+=
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x110D
	#     Name: append
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x8
	#     MethodListIndex: 0x1122
	#     Name: insert
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0xA
	#     MethodListIndex: 0x1137
	#     Name: replace
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10CF)
	#     Name: ~basic_string
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x113C
	#     Name: _Copy_assign
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x1145
	#     Name: erase
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10CF)
	#     Name: clear
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1149
	#     Name: begin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1149
	#     Name: end
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x114C
	#     Name: _Unchecked_begin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x114C
	#     Name: _Unchecked_end
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1151
	#     Name: rbegin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1151
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1148)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1148)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1150)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1150)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10CF)
	#     Name: shrink_to_fit
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1156
	#     Name: at
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1156
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char) (0x1157)
	#     Name: push_back
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10CF)
	#     Name: pop_back
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x115A
	#     Name: front
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x115A
	#     Name: back
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x114B)
	#     Name: c_str
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x114B)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x115B)
	#     Name: length
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x115B)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x115B)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const char) (0x10DE)
	#     Name: resize
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x115B)
	#     Name: capacity
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned) (0x115C)
	#     Name: reserve
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x115D)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char* const, unsigned, const unsigned) (0x115F)
	#     Name: copy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char* const, const unsigned, unsigned, const unsigned) (0x1161)
	#     Name: _Copy_s
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1109
	#     Name: _Swap_data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::_String_val<std::_Simple_types<char> >&, std::_String_val<std::_Simple_types<char> >&) (0x1165)
	#     Name: _Swap_bx_large_with_small
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1167)
	#     Name: swap
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x116F
	#     Name: find
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x116F
	#     Name: rfind
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x116F
	#     Name: find_first_of
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x1172
	#     Name: find_last_of
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x1175
	#     Name: find_first_not_of
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x116F
	#     Name: find_last_not_of
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned, const unsigned) (0x1177)
	#     Name: substr
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x117A
	#     Name: _Equal
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x1184
	#     Name: compare
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<char> std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1185)
	#     Name: get_allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: unsigned std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned) (0x1186)
	#     Name: _Calculate_growth
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10CF)
	#     Name: _Become_small
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned) (0x115C)
	#     Name: _Eos
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10CF)
	#     Name: _Tidy_init
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10CF)
	#     Name: _Tidy_deallocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1187)
	#     Name: _Xlen
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10CF)
	#     Name: _Orphan_all
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1167)
	#     Name: _Swap_proxy_and_iterators
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x118B
	#     Name: _Getal
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1190
	#     Name: _Get_data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_Iterator_base12** std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1194)
	#     Name: _Getpfirst
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x119C
	#     Name: _Myproxy
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x10CA)
	#     Name: _Alty
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<char> > (0x119D)
	#     Name: _Alty_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> > (0x1162)
	#     Name: _Scary_val
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::char_traits<char> (0x119E)
	#     Name: traits_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x10CA)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned (0x75)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x470)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x10AA)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x1152)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x1154)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110E)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110F)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > > (0x114D)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > (0x114F)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x10F5)
	#     Name: _Use_memcpy_move
	#   }
	# }
	.byte	0x42, 0x07, 0x03, 0x12
	.byte	0x0e, 0x15, 0x01, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x5f, 0x42, 0x55, 0x46
	.byte	0x5f, 0x53, 0x49, 0x5a
	.byte	0x45, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x01, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x5f, 0x41, 0x4c, 0x4c
	.byte	0x4f, 0x43, 0x5f, 0x4d
	.byte	0x41, 0x53, 0x4b, 0x00
	.byte	0x0e, 0x15, 0x01, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x65, 0x6d
	.byte	0x63, 0x70, 0x79, 0x5f
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x5f, 0x6f, 0x66, 0x66
	.byte	0x73, 0x65, 0x74, 0x00
	.byte	0x0e, 0x15, 0x01, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x65, 0x6d
	.byte	0x63, 0x70, 0x79, 0x5f
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x5f, 0x73, 0x69, 0x7a
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x6e, 0x70, 0x6f, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x61, 0x69
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x0f, 0x00
	.byte	0xe9, 0x10, 0x00, 0x00
	.byte	0x62, 0x61, 0x73, 0x69
	.byte	0x63, 0x5f, 0x73, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xf0, 0x10, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x03, 0x00
	.byte	0xfb, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x6f, 0x76
	.byte	0x65, 0x5f, 0x61, 0x73
	.byte	0x73, 0x69, 0x67, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x05, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x07, 0x00
	.byte	0x08, 0x11, 0x00, 0x00
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x09, 0x11, 0x00, 0x00
	.byte	0x5f, 0x54, 0x61, 0x6b
	.byte	0x65, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x65, 0x6e
	.byte	0x74, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x5f, 0x6c
	.byte	0x76, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x65, 0x6e
	.byte	0x74, 0x73, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x0c, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x3d, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x61, 0x70, 0x70, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x08, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x69, 0x6e, 0x73, 0x65
	.byte	0x72, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x0a, 0x00
	.byte	0x37, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x70, 0x6c
	.byte	0x61, 0x63, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	.byte	0x7e, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x3c, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x61, 0x73
	.byte	0x73, 0x69, 0x67, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x45, 0x11, 0x00, 0x00
	.byte	0x65, 0x72, 0x61, 0x73
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	.byte	0x63, 0x6c, 0x65, 0x61
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x49, 0x11, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x49, 0x11, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x51, 0x11, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x51, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x48, 0x11, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x48, 0x11, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x50, 0x11, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x50, 0x11, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	.byte	0x73, 0x68, 0x72, 0x69
	.byte	0x6e, 0x6b, 0x5f, 0x74
	.byte	0x6f, 0x5f, 0x66, 0x69
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x56, 0x11, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x56, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x57, 0x11, 0x00, 0x00
	.byte	0x70, 0x75, 0x73, 0x68
	.byte	0x5f, 0x62, 0x61, 0x63
	.byte	0x6b, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	.byte	0x70, 0x6f, 0x70, 0x5f
	.byte	0x62, 0x61, 0x63, 0x6b
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x66, 0x72, 0x6f, 0x6e
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x62, 0x61, 0x63, 0x6b
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x63, 0x5f, 0x73, 0x74
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5b, 0x11, 0x00, 0x00
	.byte	0x6c, 0x65, 0x6e, 0x67
	.byte	0x74, 0x68, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5b, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5b, 0x11, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xde, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x73, 0x69
	.byte	0x7a, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5b, 0x11, 0x00, 0x00
	.byte	0x63, 0x61, 0x70, 0x61
	.byte	0x63, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5c, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x73, 0x65
	.byte	0x72, 0x76, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5d, 0x11, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x61, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x09, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x64, 0x61
	.byte	0x74, 0x61, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x65, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x62, 0x78
	.byte	0x5f, 0x6c, 0x61, 0x72
	.byte	0x67, 0x65, 0x5f, 0x77
	.byte	0x69, 0x74, 0x68, 0x5f
	.byte	0x73, 0x6d, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x67, 0x11, 0x00, 0x00
	.byte	0x73, 0x77, 0x61, 0x70
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x6f, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x6f, 0x11, 0x00, 0x00
	.byte	0x72, 0x66, 0x69, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x6f, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x5f, 0x6f
	.byte	0x66, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x6c, 0x61, 0x73
	.byte	0x74, 0x5f, 0x6f, 0x66
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x75, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x5f, 0x6e
	.byte	0x6f, 0x74, 0x5f, 0x6f
	.byte	0x66, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x6f, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x6c, 0x61, 0x73
	.byte	0x74, 0x5f, 0x6e, 0x6f
	.byte	0x74, 0x5f, 0x6f, 0x66
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x77, 0x11, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x74, 0x72, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x7a, 0x11, 0x00, 0x00
	.byte	0x5f, 0x45, 0x71, 0x75
	.byte	0x61, 0x6c, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x84, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6d, 0x70
	.byte	0x61, 0x72, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x67, 0x65, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x86, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x61, 0x6c
	.byte	0x63, 0x75, 0x6c, 0x61
	.byte	0x74, 0x65, 0x5f, 0x67
	.byte	0x72, 0x6f, 0x77, 0x74
	.byte	0x68, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	.byte	0x5f, 0x42, 0x65, 0x63
	.byte	0x6f, 0x6d, 0x65, 0x5f
	.byte	0x73, 0x6d, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x5c, 0x11, 0x00, 0x00
	.byte	0x5f, 0x45, 0x6f, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	.byte	0x5f, 0x54, 0x69, 0x64
	.byte	0x79, 0x5f, 0x69, 0x6e
	.byte	0x69, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	.byte	0x5f, 0x54, 0x69, 0x64
	.byte	0x79, 0x5f, 0x64, 0x65
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0x87, 0x11, 0x00, 0x00
	.byte	0x5f, 0x58, 0x6c, 0x65
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x00
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x67, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x5f
	.byte	0x61, 0x6e, 0x64, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x73, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x8b, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x61, 0x6c, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x90, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x64, 0x61, 0x74
	.byte	0x61, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9d, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x63, 0x61
	.byte	0x72, 0x79, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x52, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x54, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x0e, 0x11, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x0f, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4d, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4f, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x73, 0x65
	.byte	0x5f, 0x6d, 0x65, 0x6d
	.byte	0x63, 0x70, 0x79, 0x5f
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x11A0) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 185
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x119F)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 28
	#   Name: std::basic_string<char,std::char_traits<char>,std::allocator<char> >
	#   LinkageName: .?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@
	# }
	.byte	0x9e, 0x00, 0x04, 0x15
	.byte	0xb9, 0x00, 0x10, 0x02
	.byte	0x9f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1c, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x61, 0x73, 0x69, 0x63
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x40, 0x44, 0x55
	.byte	0x3f, 0x24, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x44, 0x40
	.byte	0x32, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x11A1) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xstring
	# }
	.byte	0x6e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x39, 0x5c
	.byte	0x50, 0x72, 0x65, 0x76
	.byte	0x69, 0x65, 0x77, 0x5c
	.byte	0x56, 0x43, 0x5c, 0x54
	.byte	0x6f, 0x6f, 0x6c, 0x73
	.byte	0x5c, 0x4d, 0x53, 0x56
	.byte	0x43, 0x5c, 0x31, 0x34
	.byte	0x2e, 0x32, 0x30, 0x2e
	.byte	0x32, 0x37, 0x33, 0x32
	.byte	0x33, 0x5c, 0x69, 0x6e
	.byte	0x63, 0x6c, 0x75, 0x64
	.byte	0x65, 0x5c, 0x78, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x11A2) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x11A0)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xstring (0x11A1)
	#   LineNumber: 2077
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0xa1, 0x11, 0x00, 0x00
	.byte	0x1d, 0x08, 0x00, 0x00
	# FieldList (0x11A3) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* (0x10AA)
	#     FieldOffset: 0x0
	#     Name: _What
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool (0x30)
	#     FieldOffset: 0x4
	#     Name: _DoFree
	#   }
	# }
	.byte	0x26, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x57
	.byte	0x68, 0x61, 0x74, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x04, 0x00, 0x5f, 0x44
	.byte	0x6f, 0x46, 0x72, 0x65
	.byte	0x65, 0x00, 0xf2, 0xf1
	# Struct (0x11A4) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 2
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11A3)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: __std_exception_data
	#   LinkageName: .?AU__std_exception_data@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x02, 0x00, 0x00, 0x02
	.byte	0xa3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x5f
	.byte	0x73, 0x74, 0x64, 0x5f
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x5f, 0x64, 0x61
	.byte	0x74, 0x61, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x5f
	.byte	0x5f, 0x73, 0x74, 0x64
	.byte	0x5f, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x5f, 0x64
	.byte	0x61, 0x74, 0x61, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x11A5) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: __std_exception_data (0x11A4)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\vcruntime_exception.h (0x10C4)
	#   LineNumber: 21
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0xc4, 0x10, 0x00, 0x00
	.byte	0x15, 0x00, 0x00, 0x00
	# Pointer (0x11A6) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x10C7)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x11A7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char>& (0x1188)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x10C7)
	#   ThisType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x11A6)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0xa6, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x11A8) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x10C7)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11A9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x11A8)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa8, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x11AA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::allocator<char>& (0x10CC)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x10C7)
	#   ThisType: const std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x11A9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xcc, 0x10, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0xa9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11AB) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<char>& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x11A7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::allocator<char>& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x11AA)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xaa, 0x11, 0x00, 0x00
	# MemberFunction (0x11AC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_val<std::_Simple_types<char> >& (0x1163)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x10C7)
	#   ThisType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x11A6)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x63, 0x11, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0xa6, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11AD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_String_val<std::_Simple_types<char> >& (0x118E)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x10C7)
	#   ThisType: const std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x11A9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x8e, 0x11, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0xa9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11AE) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_val<std::_Simple_types<char> >& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x11AC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_String_val<std::_Simple_types<char> >& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x11AD)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xad, 0x11, 0x00, 0x00
	# FieldList (0x11AF) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Private (0x1)
	#     BaseType: std::allocator<char> (0x10CA)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_String_val<std::_Simple_types<char> > (0x1162)
	#     FieldOffset: 0x0
	#     Name: _Myval2
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11AB
	#     Name: _Get_first
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11AE
	#     Name: _Get_second
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x10CA)
	#     Name: _Mybase
	#   }
	# }
	.byte	0x5a, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x01, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x76, 0x61, 0x6c
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xab, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x73, 0x65, 0x63
	.byte	0x6f, 0x6e, 0x64, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	# Class (0x11B0) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 7
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11AF)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 28
	#   Name: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
	#   LinkageName: .?AV?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@
	# }
	.byte	0xce, 0x00, 0x04, 0x15
	.byte	0x07, 0x00, 0x10, 0x02
	.byte	0xaf, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1c, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6d, 0x70
	.byte	0x72, 0x65, 0x73, 0x73
	.byte	0x65, 0x64, 0x5f, 0x70
	.byte	0x61, 0x69, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x2c, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x43
	.byte	0x6f, 0x6d, 0x70, 0x72
	.byte	0x65, 0x73, 0x73, 0x65
	.byte	0x64, 0x5f, 0x70, 0x61
	.byte	0x69, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x32
	.byte	0x40, 0x24, 0x30, 0x30
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x11B1) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xmemory0
	# }
	.byte	0x6e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x39, 0x5c
	.byte	0x50, 0x72, 0x65, 0x76
	.byte	0x69, 0x65, 0x77, 0x5c
	.byte	0x56, 0x43, 0x5c, 0x54
	.byte	0x6f, 0x6f, 0x6c, 0x73
	.byte	0x5c, 0x4d, 0x53, 0x56
	.byte	0x43, 0x5c, 0x31, 0x34
	.byte	0x2e, 0x32, 0x30, 0x2e
	.byte	0x32, 0x37, 0x33, 0x32
	.byte	0x33, 0x5c, 0x69, 0x6e
	.byte	0x63, 0x6c, 0x75, 0x64
	.byte	0x65, 0x5c, 0x78, 0x6d
	.byte	0x65, 0x6d, 0x6f, 0x72
	.byte	0x79, 0x30, 0x00, 0xf1
	# UdtSourceLine (0x11B2) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x11B0)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xmemory0 (0x11B1)
	#   LineNumber: 1518
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xb0, 0x11, 0x00, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0xee, 0x05, 0x00, 0x00
	# Pointer (0x11B3) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<char> (0x10CB)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# ArgList (0x11B4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: char& (0x1152)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x52, 0x11, 0x00, 0x00
	# MemberFunction (0x11B5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x470)
	#   ClassType: std::allocator<char> (0x10CA)
	#   ThisType: const std::allocator<char>* (0x11B3)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (char&) (0x11B4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0xb3, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xb4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11B6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char& (0x1154)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x54, 0x11, 0x00, 0x00
	# MemberFunction (0x11B7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x10AA)
	#   ClassType: std::allocator<char> (0x10CA)
	#   ThisType: const std::allocator<char>* (0x11B3)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char&) (0x11B6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0xb3, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xb6, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11B8) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::allocator<char>::(char&) (0x11B5)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::allocator<char>::(const char&) (0x11B7)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb5, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb7, 0x11, 0x00, 0x00
	# Pointer (0x11B9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<char> (0x10CA)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x11BA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<char> (0x10CA)
	#   ThisType: std::allocator<char>* (0x11B9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0xb9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11BB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<char> (0x10CA)
	#   ThisType: std::allocator<char>* (0x11B9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x10D0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0xb9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11BC) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<char>::() (0x11BA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<char>::(const std::allocator<char>&) (0x11BB)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xba, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbb, 0x11, 0x00, 0x00
	# ArgList (0x11BD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: char* const (0x10EA)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x11BE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<char> (0x10CA)
	#   ThisType: std::allocator<char>* (0x11B9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (char* const, const unsigned) (0x11BD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0xb9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xbd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11BF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x470)
	#   ClassType: std::allocator<char> (0x10CA)
	#   ThisType: std::allocator<char>* (0x11B9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned) (0x113D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0xb9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x11C0) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: void (0x3)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11C1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const void (0x11C0)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc0, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# ArgList (0x11C2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const void* (0x11C1)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	# MemberFunction (0x11C3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x470)
	#   ClassType: std::allocator<char> (0x10CA)
	#   ThisType: std::allocator<char>* (0x11B9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned, const void*) (0x11C2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0xb9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0xc2, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11C4) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::allocator<char>::(const unsigned) (0x11BF)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::allocator<char>::(const unsigned, const void*) (0x11C3)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbf, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc3, 0x11, 0x00, 0x00
	# MemberFunction (0x11C5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::allocator<char> (0x10CA)
	#   ThisType: const std::allocator<char>* (0x11B3)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0xb3, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11C6) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11B8
	#     Name: address
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11BC
	#     Name: allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<char>::(char* const, const unsigned) (0x11BE)
	#     Name: deallocate
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11C4
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::allocator<char>::() (0x11C5)
	#     Name: max_size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void (0x3)
	#     Name: _Not_user_specialized
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x470)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x10AA)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x1152)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x1154)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned (0x75)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x10F5)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x10F5)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0x5e, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xb8, 0x11, 0x00, 0x00
	.byte	0x61, 0x64, 0x64, 0x72
	.byte	0x65, 0x73, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xbc, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xbe, 0x11, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xc4, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xc5, 0x11, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5f, 0x4e, 0x6f, 0x74
	.byte	0x5f, 0x75, 0x73, 0x65
	.byte	0x72, 0x5f, 0x73, 0x70
	.byte	0x65, 0x63, 0x69, 0x61
	.byte	0x6c, 0x69, 0x7a, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x52, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x54, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Class (0x11C7) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 18
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11C6)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator<char>
	#   LinkageName: .?AV?$allocator@D@std@@
	# }
	.byte	0x42, 0x00, 0x04, 0x15
	.byte	0x12, 0x00, 0x10, 0x02
	.byte	0xc6, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x11C8) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator<char> (0x11C7)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xmemory0 (0x11B1)
	#   LineNumber: 879
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xc7, 0x11, 0x00, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0x6f, 0x03, 0x00, 0x00
	# Modifier (0x11C9) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: bool (0x30)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Modifier (0x11CA) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::integral_constant<bool,1> (0x10F5)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11CB) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::integral_constant<bool,1> (0x11CA)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xca, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x11CC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::integral_constant<bool,1> (0x10F5)
	#   ThisType: const std::integral_constant<bool,1>* (0x11CB)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0xcb, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11CD) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x11C9)
	#     Name: value
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,1>::() (0x11CC)
	#     Name: operator bool
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,1>::() (0x11CC)
	#     Name: operator()
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: bool (0x30)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x10F5)
	#     Name: type
	#   }
	# }
	.byte	0x62, 0x00, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0xc9, 0x11, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcc, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x20, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcc, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x11CE) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 5
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11CD)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::integral_constant<bool,1>
	#   LinkageName: .?AU?$integral_constant@_N$00@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x05, 0x00, 0x10, 0x02
	.byte	0xcd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x30, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x11CF) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xtr1common
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x39, 0x5c
	.byte	0x50, 0x72, 0x65, 0x76
	.byte	0x69, 0x65, 0x77, 0x5c
	.byte	0x56, 0x43, 0x5c, 0x54
	.byte	0x6f, 0x6f, 0x6c, 0x73
	.byte	0x5c, 0x4d, 0x53, 0x56
	.byte	0x43, 0x5c, 0x31, 0x34
	.byte	0x2e, 0x32, 0x30, 0x2e
	.byte	0x32, 0x37, 0x33, 0x32
	.byte	0x33, 0x5c, 0x69, 0x6e
	.byte	0x63, 0x6c, 0x75, 0x64
	.byte	0x65, 0x5c, 0x78, 0x74
	.byte	0x72, 0x31, 0x63, 0x6f
	.byte	0x6d, 0x6d, 0x6f, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x11D0) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::integral_constant<bool,1> (0x11CE)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xtr1common (0x11CF)
	#   LineNumber: 19
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xce, 0x11, 0x00, 0x00
	.byte	0xcf, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Modifier (0x11D1) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::integral_constant<bool,0> (0x10F8)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11D2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::integral_constant<bool,0> (0x11D1)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xd1, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x11D3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::integral_constant<bool,0> (0x10F8)
	#   ThisType: const std::integral_constant<bool,0>* (0x11D2)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0xd2, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11D4) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x11C9)
	#     Name: value
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,0>::() (0x11D3)
	#     Name: operator bool
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,0>::() (0x11D3)
	#     Name: operator()
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: bool (0x30)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x10F8)
	#     Name: type
	#   }
	# }
	.byte	0x62, 0x00, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0xc9, 0x11, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x20, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x11D5) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 5
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11D4)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::integral_constant<bool,0>
	#   LinkageName: .?AU?$integral_constant@_N$0A@@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x05, 0x00, 0x10, 0x02
	.byte	0xd4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x41, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x11D6) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::integral_constant<bool,0> (0x11D5)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xtr1common (0x11CF)
	#   LineNumber: 19
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xd5, 0x11, 0x00, 0x00
	.byte	0xcf, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Struct (0x11D7) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Container_base12
	#   LinkageName: .?AU_Container_base12@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x31, 0x32, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Union (0x11D8) {
	#   TypeLeafKind: LF_UNION (0x1506)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   SizeOf: 0
	#   Name: std::_String_val<std::_Simple_types<char> >::_Bxty
	#   LinkageName: .?AT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x06, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x3a, 0x3a, 0x5f
	.byte	0x42, 0x78, 0x74, 0x79
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x54, 0x5f, 0x42, 0x78
	.byte	0x74, 0x79, 0x40, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x40, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# Pointer (0x11D9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_val<std::_Simple_types<char> > (0x1162)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x11DA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x1162)
	#   ThisType: std::_String_val<std::_Simple_types<char> >* (0x11D9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0xd9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11DB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x470)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x1162)
	#   ThisType: std::_String_val<std::_Simple_types<char> >* (0x11D9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0xd9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x11DC) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_String_val<std::_Simple_types<char> > (0x118D)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8d, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x11DD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x10AA)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x1162)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x11DC)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0xdc, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11DE) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::_String_val<std::_Simple_types<char> >::() (0x11DB)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::_String_val<std::_Simple_types<char> >::() (0x11DD)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xdb, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xdd, 0x11, 0x00, 0x00
	# MemberFunction (0x11DF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x1162)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x11DC)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0xdc, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11E0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x1162)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x11DC)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned) (0x113D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0xdc, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11E1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x1162)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11E2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x1162)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x11DC)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned, const unsigned) (0x1176)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0xdc, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x76, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11E3) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Container_base12 (0x11D7)
	#     BaseOffset: 0x0
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const unsigned (0x10C6)
	#     Name: _BUF_SIZE
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const unsigned (0x10C6)
	#     Name: _ALLOC_MASK
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_val<std::_Simple_types<char> >::_Bxty (0x11D8)
	#     FieldOffset: 0x4
	#     Name: _Bx
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned (0x75)
	#     FieldOffset: 0x14
	#     Name: _Mysize
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned (0x75)
	#     FieldOffset: 0x18
	#     Name: _Myres
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::() (0x11DA)
	#     Name: _String_val
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11DE
	#     Name: _Myptr
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::_String_val<std::_Simple_types<char> >::() (0x11DF)
	#     Name: _Large_string_engaged
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::(const unsigned) (0x11E0)
	#     Name: _Check_offset
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::(const unsigned) (0x11E0)
	#     Name: _Check_offset_exclusive
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_String_val<std::_Simple_types<char> >::() (0x11E1)
	#     Name: _Xran
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned std::_String_val<std::_Simple_types<char> >::(const unsigned, const unsigned) (0x11E2)
	#     Name: _Clamp_suffix_size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned (0x75)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x470)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x10AA)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x1152)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x1154)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::_Bxty (0x11D8)
	#     Name: _Bxty
	#   }
	# }
	.byte	0xba, 0x01, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x5f, 0x42, 0x55, 0x46
	.byte	0x5f, 0x53, 0x49, 0x5a
	.byte	0x45, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x5f, 0x41, 0x4c, 0x4c
	.byte	0x4f, 0x43, 0x5f, 0x4d
	.byte	0x41, 0x53, 0x4b, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0xd8, 0x11, 0x00, 0x00
	.byte	0x04, 0x00, 0x5f, 0x42
	.byte	0x78, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x14, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x73, 0x69, 0x7a
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x18, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x72, 0x65, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xda, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xde, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x70
	.byte	0x74, 0x72, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdf, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4c, 0x61, 0x72
	.byte	0x67, 0x65, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x65, 0x6e
	.byte	0x67, 0x61, 0x67, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe0, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x68, 0x65
	.byte	0x63, 0x6b, 0x5f, 0x6f
	.byte	0x66, 0x66, 0x73, 0x65
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe0, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x68, 0x65
	.byte	0x63, 0x6b, 0x5f, 0x6f
	.byte	0x66, 0x66, 0x73, 0x65
	.byte	0x74, 0x5f, 0x65, 0x78
	.byte	0x63, 0x6c, 0x75, 0x73
	.byte	0x69, 0x76, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xe1, 0x11, 0x00, 0x00
	.byte	0x5f, 0x58, 0x72, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe2, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6c, 0x61
	.byte	0x6d, 0x70, 0x5f, 0x73
	.byte	0x75, 0x66, 0x66, 0x69
	.byte	0x78, 0x5f, 0x73, 0x69
	.byte	0x7a, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x52, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x54, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xd8, 0x11, 0x00, 0x00
	.byte	0x5f, 0x42, 0x78, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	# Class (0x11E4) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 22
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11E3)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 28
	#   Name: std::_String_val<std::_Simple_types<char> >
	#   LinkageName: .?AV?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x72, 0x00, 0x04, 0x15
	.byte	0x16, 0x00, 0x10, 0x02
	.byte	0xe3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1c, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x11E5) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> > (0x11E4)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xstring (0x11A1)
	#   LineNumber: 1992
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xe4, 0x11, 0x00, 0x00
	.byte	0xa1, 0x11, 0x00, 0x00
	.byte	0xc8, 0x07, 0x00, 0x00
	# MemberFunction (0x11E6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Iterator_base12 (0x1191)
	#   ThisType: std::_Iterator_base12* (0x1192)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x11E7) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Iterator_base12 (0x1191)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11E8) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Iterator_base12 (0x11E7)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xe7, 0x11, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x11E9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Iterator_base12& (0x11E8)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xe8, 0x11, 0x00, 0x00
	# MemberFunction (0x11EA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Iterator_base12 (0x1191)
	#   ThisType: std::_Iterator_base12* (0x1192)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Iterator_base12&) (0x11E9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xe9, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11EB) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x11E6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::(const std::_Iterator_base12&) (0x11EA)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe6, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xea, 0x11, 0x00, 0x00
	# Pointer (0x11EC) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Iterator_base12 (0x1191)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x11ED) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12& (0x11EC)
	#   ClassType: std::_Iterator_base12 (0x1191)
	#   ThisType: std::_Iterator_base12* (0x1192)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Iterator_base12&) (0x11E9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xec, 0x11, 0x00, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xe9, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x11EE) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Container_base12 (0x11D7)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11EF) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_base12 (0x11EE)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xee, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# ArgList (0x11F0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Container_base12* (0x11EF)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xef, 0x11, 0x00, 0x00
	# MemberFunction (0x11F1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Iterator_base12 (0x1191)
	#   ThisType: std::_Iterator_base12* (0x1192)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_base12*) (0x11F0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x11F2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Iterator_base12 (0x11E7)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xe7, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x11F3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_Container_base12* (0x11EF)
	#   ClassType: std::_Iterator_base12 (0x1191)
	#   ThisType: const std::_Iterator_base12* (0x11F2)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xef, 0x11, 0x00, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11F4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1193)
	#   ClassType: std::_Iterator_base12 (0x1191)
	#   ThisType: std::_Iterator_base12* (0x1192)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11F5) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x11C9)
	#     Name: _Unwrap_when_unverified
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* (0x1196)
	#     FieldOffset: 0x0
	#     Name: _Myproxy
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12* (0x1192)
	#     FieldOffset: 0x4
	#     Name: _Mynextiter
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11EB
	#     Name: _Iterator_base12
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12& std::_Iterator_base12::(const std::_Iterator_base12&) (0x11ED)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x11E6)
	#     Name: ~_Iterator_base12
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::(const std::_Container_base12*) (0x11F1)
	#     Name: _Adopt
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x11E6)
	#     Name: _Clrcont
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Container_base12* std::_Iterator_base12::() (0x11F3)
	#     Name: _Getcont
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12** std::_Iterator_base12::() (0x11F4)
	#     Name: _Getpnext
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x11E6)
	#     Name: _Orphan_me
	#   }
	# }
	.byte	0xfa, 0x00, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0xc9, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x5f
	.byte	0x77, 0x68, 0x65, 0x6e
	.byte	0x5f, 0x75, 0x6e, 0x76
	.byte	0x65, 0x72, 0x69, 0x66
	.byte	0x69, 0x65, 0x64, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0x04, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x6e, 0x65, 0x78
	.byte	0x74, 0x69, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x5f, 0x49, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xed, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe6, 0x11, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x49, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x31
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf1, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x64, 0x6f
	.byte	0x70, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe6, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6c, 0x72
	.byte	0x63, 0x6f, 0x6e, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x63, 0x6f, 0x6e, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf4, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x6e, 0x65, 0x78
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe6, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x6d, 0x65, 0x00, 0xf1
	# Struct (0x11F6) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 12
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11F5)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: std::_Iterator_base12
	#   LinkageName: .?AU_Iterator_base12@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x0c, 0x00, 0x00, 0x02
	.byte	0xf5, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x49, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x62, 0x61, 0x73
	.byte	0x65, 0x31, 0x32, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x49, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x11F7) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Iterator_base12 (0x11F6)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xmemory0 (0x11B1)
	#   LineNumber: 1307
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xf6, 0x11, 0x00, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0x1b, 0x05, 0x00, 0x00
	# MemberFunction (0x11F8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_proxy (0x1195)
	#   ThisType: std::_Container_proxy* (0x1196)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x11F9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_base12 (0x11D7)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# ArgList (0x11FA) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Container_base12* (0x11F9)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xf9, 0x11, 0x00, 0x00
	# MemberFunction (0x11FB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_proxy (0x1195)
	#   ThisType: std::_Container_proxy* (0x1196)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Container_base12*) (0x11FA)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11FC) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_proxy::() (0x11F8)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_proxy::(std::_Container_base12*) (0x11FB)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf8, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfb, 0x11, 0x00, 0x00
	# FieldList (0x11FD) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Container_base12* (0x11EF)
	#     FieldOffset: 0x0
	#     Name: _Mycont
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12* (0x1192)
	#     FieldOffset: 0x4
	#     Name: _Myfirstiter
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11FC
	#     Name: _Container_proxy
	#   }
	# }
	.byte	0x4a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0xef, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0x04, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x69, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x11FE) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 4
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11FD)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: std::_Container_proxy
	#   LinkageName: .?AU_Container_proxy@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x04, 0x00, 0x00, 0x02
	.byte	0xfd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x11FF) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Container_proxy (0x11FE)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xmemory0 (0x11B1)
	#   LineNumber: 1259
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xfe, 0x11, 0x00, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0xeb, 0x04, 0x00, 0x00
	# Struct (0x1200) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Default_allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x86, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x44
	.byte	0x65, 0x66, 0x61, 0x75
	.byte	0x6c, 0x74, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x40
	.byte	0x56, 0x3f, 0x24, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x1201) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Default_allocator_traits<std::allocator<char> > (0x1200)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x00, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x1202) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1201)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1203) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator_traits<std::allocator<char> > (0x1202)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xmemory0 (0x11B1)
	#   LineNumber: 837
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x02, 0x12, 0x00, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0x45, 0x03, 0x00, 0x00
	# ArgList (0x1204) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x109C)
	#     ArgType: const char* const (0x109C)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x1205) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const char* const, const unsigned) (0x1204)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x04, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1206) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1207) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x10EA)
	#     ArgType: const char* const (0x109C)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x1208) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x470)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, const char* const, const unsigned) (0x1207)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x07, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1209) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: char* const (0x10EA)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char* const (0x109C)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x120A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x470)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (char* const, const unsigned, const char* const, const unsigned) (0x1209)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x09, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x120B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x109C)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char& (0x1154)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x54, 0x11, 0x00, 0x00
	# MemberFunction (0x120C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x10AA)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const unsigned, const char&) (0x120B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x0b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x120D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x10EA)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const char (0x109B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	# MemberFunction (0x120E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x470)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, const unsigned, const char) (0x120D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x0d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x120F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: char& (0x1152)
	#     ArgType: const char& (0x1154)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x52, 0x11, 0x00, 0x00
	.byte	0x54, 0x11, 0x00, 0x00
	# MemberFunction (0x1210) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (char&, const char&) (0x120F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x0f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1211) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const unsigned, const char) (0x120E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::char_traits<char>::(char&, const char&) (0x1210)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x0e, 0x12, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x10, 0x12, 0x00, 0x00
	# ArgList (0x1212) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char& (0x1154)
	#     ArgType: const char& (0x1154)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x54, 0x11, 0x00, 0x00
	.byte	0x54, 0x11, 0x00, 0x00
	# MemberFunction (0x1213) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char&, const char&) (0x1212)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x12, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1214) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const int& (0x1061)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x61, 0x10, 0x00, 0x00
	# MemberFunction (0x1215) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char (0x70)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int&) (0x1214)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1216) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char&) (0x11B6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xb6, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1217) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int& (0x1061)
	#     ArgType: const int& (0x1061)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x61, 0x10, 0x00, 0x00
	.byte	0x61, 0x10, 0x00, 0x00
	# MemberFunction (0x1218) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int&, const int&) (0x1217)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x17, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1219) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int&) (0x1214)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x121A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x119E)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x121B) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::fpos<_Mbstatet>
	#   LinkageName: .?AV?$fpos@U_Mbstatet@@@std@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x66
	.byte	0x70, 0x6f, 0x73, 0x3c
	.byte	0x5f, 0x4d, 0x62, 0x73
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x74, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x66, 0x70, 0x6f
	.byte	0x73, 0x40, 0x55, 0x5f
	.byte	0x4d, 0x62, 0x73, 0x74
	.byte	0x61, 0x74, 0x65, 0x74
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x121C) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: _Mbstatet
	#   LinkageName: .?AU_Mbstatet@@
	# }
	.byte	0x2e, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x62, 0x73, 0x74, 0x61
	.byte	0x74, 0x65, 0x74, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x4d, 0x62, 0x73
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x74, 0x40, 0x40, 0x00
	# FieldList (0x121D) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::(const char* const, const char* const, const unsigned) (0x1205)
	#     Name: compare
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: unsigned std::char_traits<char>::(const char* const) (0x1206)
	#     Name: length
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const char* const, const unsigned) (0x1208)
	#     Name: copy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const unsigned, const char* const, const unsigned) (0x120A)
	#     Name: _Copy_s
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: const char* std::char_traits<char>::(const char* const, const unsigned, const char&) (0x120C)
	#     Name: find
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const char* const, const unsigned) (0x1208)
	#     Name: move
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1211
	#     Name: assign
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: bool std::char_traits<char>::(const char&, const char&) (0x1213)
	#     Name: eq
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: bool std::char_traits<char>::(const char&, const char&) (0x1213)
	#     Name: lt
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char std::char_traits<char>::(const int&) (0x1215)
	#     Name: to_char_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::(const char&) (0x1216)
	#     Name: to_int_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: bool std::char_traits<char>::(const int&, const int&) (0x1218)
	#     Name: eq_int_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::(const int&) (0x1219)
	#     Name: not_eof
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::() (0x121A)
	#     Name: eof
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: char_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: int_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::fpos<_Mbstatet> (0x121B)
	#     Name: pos_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: off_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: _Mbstatet (0x121C)
	#     Name: state_type
	#   }
	# }
	.byte	0x4a, 0x01, 0x03, 0x12
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x05, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6d, 0x70
	.byte	0x61, 0x72, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x06, 0x12, 0x00, 0x00
	.byte	0x6c, 0x65, 0x6e, 0x67
	.byte	0x74, 0x68, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x08, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x0a, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x73, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x0c, 0x12, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x08, 0x12, 0x00, 0x00
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x11, 0x12, 0x00, 0x00
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x13, 0x12, 0x00, 0x00
	.byte	0x65, 0x71, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x13, 0x12, 0x00, 0x00
	.byte	0x6c, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x15, 0x12, 0x00, 0x00
	.byte	0x74, 0x6f, 0x5f, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x16, 0x12, 0x00, 0x00
	.byte	0x74, 0x6f, 0x5f, 0x69
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x18, 0x12, 0x00, 0x00
	.byte	0x65, 0x71, 0x5f, 0x69
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x19, 0x12, 0x00, 0x00
	.byte	0x6e, 0x6f, 0x74, 0x5f
	.byte	0x65, 0x6f, 0x66, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x1a, 0x12, 0x00, 0x00
	.byte	0x65, 0x6f, 0x66, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x1b, 0x12, 0x00, 0x00
	.byte	0x70, 0x6f, 0x73, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x6f, 0x66, 0x66, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x1c, 0x12, 0x00, 0x00
	.byte	0x73, 0x74, 0x61, 0x74
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Struct (0x121E) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 20
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x121D)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::char_traits<char>
	#   LinkageName: .?AU?$char_traits@D@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x14, 0x00, 0x10, 0x02
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x121F) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::char_traits<char> (0x121E)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xstring (0x11A1)
	#   LineNumber: 281
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0xa1, 0x11, 0x00, 0x00
	.byte	0x19, 0x01, 0x00, 0x00
	# MemberFunction (0x1220) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_base12 (0x11D7)
	#   ThisType: std::_Container_base12* (0x11F9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0xf9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1221) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_base12 (0x11EE)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xee, 0x11, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x1222) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Container_base12& (0x1221)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x21, 0x12, 0x00, 0x00
	# MemberFunction (0x1223) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_base12 (0x11D7)
	#   ThisType: std::_Container_base12* (0x11F9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_base12&) (0x1222)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0xf9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x22, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1224) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::() (0x1220)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::(const std::_Container_base12&) (0x1223)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x23, 0x12, 0x00, 0x00
	# Pointer (0x1225) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_base12 (0x11D7)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# MemberFunction (0x1226) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_base12& (0x1225)
	#   ClassType: std::_Container_base12 (0x11D7)
	#   ThisType: std::_Container_base12* (0x11F9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_base12&) (0x1222)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x25, 0x12, 0x00, 0x00
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0xf9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x22, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1227) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1193)
	#   ClassType: std::_Container_base12 (0x11D7)
	#   ThisType: const std::_Container_base12* (0x11EF)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0xef, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1228) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Container_base12& (0x1225)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x25, 0x12, 0x00, 0x00
	# MemberFunction (0x1229) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_base12 (0x11D7)
	#   ThisType: std::_Container_base12* (0x11F9)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Container_base12&) (0x1228)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0xf9, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x28, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x122A) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* (0x1196)
	#     FieldOffset: 0x0
	#     Name: _Myproxy
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1224
	#     Name: _Container_base12
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_base12& std::_Container_base12::(const std::_Container_base12&) (0x1226)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12** std::_Container_base12::() (0x1227)
	#     Name: _Getpfirst
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::() (0x1220)
	#     Name: _Orphan_all
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::(std::_Container_base12&) (0x1229)
	#     Name: _Swap_proxy_and_iterators
	#   }
	# }
	.byte	0x92, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x31
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x12, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x12, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x5f
	.byte	0x61, 0x6e, 0x64, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x73, 0x00, 0xf2, 0xf1
	# Struct (0x122B) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 7
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x122A)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 4
	#   Name: std::_Container_base12
	#   LinkageName: .?AU_Container_base12@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x07, 0x00, 0x00, 0x02
	.byte	0x2a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x04, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x31, 0x32, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x122C) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Container_base12 (0x122B)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xmemory0 (0x11B1)
	#   LineNumber: 1267
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x2b, 0x12, 0x00, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0xf3, 0x04, 0x00, 0x00
	# Array (0x122D) {
	#   TypeLeafKind: LF_ARRAY (0x1503)
	#   ElementType: char (0x70)
	#   IndexType: unsigned long (0x22)
	#   SizeOf: 16
	#   Name: 
	# }
	.byte	0x0e, 0x00, 0x03, 0x15
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x22, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x00, 0xf1
	# Pointer (0x122E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_val<std::_Simple_types<char> >::_Bxty (0x11D8)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xd8, 0x11, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# MemberFunction (0x122F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> >::_Bxty (0x11D8)
	#   ThisType: std::_String_val<std::_Simple_types<char> >::_Bxty* (0x122E)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd8, 0x11, 0x00, 0x00
	.byte	0x2e, 0x12, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1230) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: 0x122D
	#     FieldOffset: 0x0
	#     Name: _Buf
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: char* (0x470)
	#     FieldOffset: 0x0
	#     Name: _Ptr
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: 0x122D
	#     FieldOffset: 0x0
	#     Name: _Alias
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::_Bxty::() (0x122F)
	#     Name: _Bxty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::_Bxty::() (0x122F)
	#     Name: ~_Bxty
	#   }
	# }
	.byte	0x56, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x2d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x42
	.byte	0x75, 0x66, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x50
	.byte	0x74, 0x72, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x2d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x41
	.byte	0x6c, 0x69, 0x61, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2f, 0x12, 0x00, 0x00
	.byte	0x5f, 0x42, 0x78, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2f, 0x12, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x42, 0x78
	.byte	0x74, 0x79, 0x00, 0xf1
	# Union (0x1231) {
	#   TypeLeafKind: LF_UNION (0x1506)
	#   MemberCount: 5
	#   Properties [ (0x608)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#     Sealed (0x400)
	#   ]
	#   FieldList: <field list> (0x1230)
	#   SizeOf: 16
	#   Name: std::_String_val<std::_Simple_types<char> >::_Bxty
	#   LinkageName: .?AT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x06, 0x15
	.byte	0x05, 0x00, 0x08, 0x06
	.byte	0x30, 0x12, 0x00, 0x00
	.byte	0x10, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x3a, 0x3a, 0x5f
	.byte	0x42, 0x78, 0x74, 0x79
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x54, 0x5f, 0x42, 0x78
	.byte	0x74, 0x79, 0x40, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x40, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1232) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> >::_Bxty (0x1231)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xstring (0x11A1)
	#   LineNumber: 2056
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0xa1, 0x11, 0x00, 0x00
	.byte	0x08, 0x08, 0x00, 0x00
	# ArgList (0x1233) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x1188)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x1234) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x470)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x1200)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::allocator<char>&, const unsigned) (0x1233)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0x00, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1235) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x1188)
	#     ArgType: const unsigned (0x10C6)
	#     ArgType: const void* (0x11C1)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	# MemberFunction (0x1236) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x470)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x1200)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<char>&, const unsigned, const void*) (0x1235)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0x00, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1237) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::_Default_allocator_traits<std::allocator<char> >::(std::allocator<char>&, const unsigned) (0x1234)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::_Default_allocator_traits<std::allocator<char> >::(std::allocator<char>&, const unsigned, const void*) (0x1236)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x34, 0x12, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x36, 0x12, 0x00, 0x00
	# Modifier (0x1238) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: char* (0x470)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x1239) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x1188)
	#     ArgType: const char* (0x1238)
	#     ArgType: const unsigned (0x10C6)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x38, 0x12, 0x00, 0x00
	.byte	0xc6, 0x10, 0x00, 0x00
	# MemberFunction (0x123A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x1200)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<char>&, const char*, const unsigned) (0x1239)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x39, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x123B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned (0x75)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x1200)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x10D0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x00, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x123C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char> (0x10CA)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x1200)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x10D0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x00, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x123D) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1237
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Default_allocator_traits<std::allocator<char> >::(std::allocator<char>&, const char*, const unsigned) (0x123A)
	#     Name: deallocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: unsigned std::_Default_allocator_traits<std::allocator<char> >::(const std::allocator<char>&) (0x123B)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::allocator<char> std::_Default_allocator_traits<std::allocator<char> >::(const std::allocator<char>&) (0x123C)
	#     Name: select_on_container_copy_construction
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x10CA)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x470)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x10AA)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void* (0x403)
	#     Name: void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const void* (0x11C1)
	#     Name: const_void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned (0x75)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x10F8)
	#     Name: propagate_on_container_copy_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x10F5)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x10F8)
	#     Name: propagate_on_container_swap
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x10F5)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0xbe, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x37, 0x12, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x3a, 0x12, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x3b, 0x12, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x5f, 0x6f
	.byte	0x6e, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x04, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x04, 0x00, 0x00
	.byte	0x76, 0x6f, 0x69, 0x64
	.byte	0x5f, 0x70, 0x6f, 0x69
	.byte	0x6e, 0x74, 0x65, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x76, 0x6f
	.byte	0x69, 0x64, 0x5f, 0x70
	.byte	0x6f, 0x69, 0x6e, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x73
	.byte	0x77, 0x61, 0x70, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Struct (0x123E) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 17
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x123D)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Default_allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x86, 0x00, 0x05, 0x15
	.byte	0x11, 0x00, 0x10, 0x02
	.byte	0x3d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x44
	.byte	0x65, 0x66, 0x61, 0x75
	.byte	0x6c, 0x74, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x40
	.byte	0x56, 0x3f, 0x24, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x123F) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Default_allocator_traits<std::allocator<char> > (0x123E)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\VC\Tools\MSVC\14.20.27323\include\xmemory0 (0x11B1)
	#   LineNumber: 779
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x3e, 0x12, 0x00, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0x0b, 0x03, 0x00, 0x00
	# FieldList (0x1240) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned long (0x22)
	#     FieldOffset: 0x0
	#     Name: _Wchar
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short (0x21)
	#     FieldOffset: 0x4
	#     Name: _Byte
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short (0x21)
	#     FieldOffset: 0x6
	#     Name: _State
	#   }
	# }
	.byte	0x3a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x22, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x57
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x21, 0x00, 0x00, 0x00
	.byte	0x04, 0x00, 0x5f, 0x42
	.byte	0x79, 0x74, 0x65, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x21, 0x00, 0x00, 0x00
	.byte	0x06, 0x00, 0x5f, 0x53
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x1241) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 3
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1240)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: _Mbstatet
	#   LinkageName: .?AU_Mbstatet@@
	# }
	.byte	0x2e, 0x00, 0x05, 0x15
	.byte	0x03, 0x00, 0x00, 0x02
	.byte	0x40, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x4d
	.byte	0x62, 0x73, 0x74, 0x61
	.byte	0x74, 0x65, 0x74, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x4d, 0x62, 0x73
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x74, 0x40, 0x40, 0x00
	# StringId (0x1242) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\corecrt.h
	# }
	.byte	0x52, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x57
	.byte	0x69, 0x6e, 0x64, 0x6f
	.byte	0x77, 0x73, 0x20, 0x4b
	.byte	0x69, 0x74, 0x73, 0x5c
	.byte	0x31, 0x30, 0x5c, 0x69
	.byte	0x6e, 0x63, 0x6c, 0x75
	.byte	0x64, 0x65, 0x5c, 0x31
	.byte	0x30, 0x2e, 0x30, 0x2e
	.byte	0x31, 0x37, 0x37, 0x36
	.byte	0x33, 0x2e, 0x30, 0x5c
	.byte	0x75, 0x63, 0x72, 0x74
	.byte	0x5c, 0x63, 0x6f, 0x72
	.byte	0x65, 0x63, 0x72, 0x74
	.byte	0x2e, 0x68, 0x00, 0xf1
	# UdtSourceLine (0x1243) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: _Mbstatet (0x1241)
	#   SourceFile: C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\corecrt.h (0x1242)
	#   LineNumber: 531
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x41, 0x12, 0x00, 0x00
	.byte	0x42, 0x12, 0x00, 0x00
	.byte	0x13, 0x02, 0x00, 0x00
	# FuncId (0x1244) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl::details (0x1093)
	#   FunctionType: void (gsl::fail_fast&&) (0x1097)
	#   Name: throw_exception
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x93, 0x10, 0x00, 0x00
	.byte	0x97, 0x10, 0x00, 0x00
	.byte	0x74, 0x68, 0x72, 0x6f
	.byte	0x77, 0x5f, 0x65, 0x78
	.byte	0x63, 0x65, 0x70, 0x74
	.byte	0x69, 0x6f, 0x6e, 0x00
	# MemberFuncId (0x1245) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x1094)
	#   FunctionType: void gsl::fail_fast::(const char* const) (0x109E)
	#   Name: fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# MemberFunction (0x1246) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x1094)
	#   ThisType: gsl::fail_fast* (0x109A)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1247) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x1094)
	#   FunctionType: void gsl::fail_fast::() (0x1246)
	#   Name: ~fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x46, 0x12, 0x00, 0x00
	.byte	0x7e, 0x66, 0x61, 0x69
	.byte	0x6c, 0x5f, 0x66, 0x61
	.byte	0x73, 0x74, 0x00, 0xf1
	# MemberFuncId (0x1248) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<0> (0x107F)
	#   FunctionType: int gsl::details::extent_type<0>::() (0x1086)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x7f, 0x10, 0x00, 0x00
	.byte	0x86, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x1249) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: std
	# }
	.byte	0x0a, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x00
	# Pointer (0x124A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::fail_fast (0x1094)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x124B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::fail_fast& (0x124A)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x4a, 0x12, 0x00, 0x00
	# Procedure (0x124C) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::fail_fast&& (0x1095)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::fail_fast&) (0x124B)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x4b, 0x12, 0x00, 0x00
	# FuncId (0x124D) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1249)
	#   FunctionType: gsl::fail_fast&& (gsl::fail_fast&) (0x124C)
	#   Name: forward
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x49, 0x12, 0x00, 0x00
	.byte	0x4c, 0x12, 0x00, 0x00
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x00
	# MemberFunction (0x124E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x1094)
	#   ThisType: gsl::fail_fast* (0x109A)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::fail_fast&&) (0x1096)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x96, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x124F) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x1094)
	#   FunctionType: void gsl::fail_fast::(gsl::fail_fast&&) (0x124E)
	#   Name: fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x4e, 0x12, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Modifier (0x1250) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::fail_fast (0x1094)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1251) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::fail_fast (0x1250)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x50, 0x12, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x1252) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::fail_fast& (0x1251)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x51, 0x12, 0x00, 0x00
	# MemberFunction (0x1253) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x1094)
	#   ThisType: gsl::fail_fast* (0x109A)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::fail_fast&) (0x1252)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x52, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1254) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x1094)
	#   FunctionType: void gsl::fail_fast::(const gsl::fail_fast&) (0x1253)
	#   Name: fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Modifier (0x1255) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::logic_error (0x1099)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1256) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::logic_error (0x1255)
	#   PointerAttributes: 0x802A
	#   PtrType: Near32 (0xA)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x2a, 0x80, 0x00, 0x00
	# ArgList (0x1257) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::logic_error& (0x1256)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x56, 0x12, 0x00, 0x00
	# MemberFunction (0x1258) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x1099)
	#   ThisType: std::logic_error* (0x10A4)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::logic_error&) (0x1257)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1259) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x1099)
	#   FunctionType: void std::logic_error::(const std::logic_error&) (0x1258)
	#   Name: logic_error
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x58, 0x12, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x125A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x10A3)
	#   FunctionType: void std::exception::(const std::exception&) (0x10BC)
	#   Name: exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0xbc, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# Pointer (0x125B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::logic_error (0x1099)
	#   PointerAttributes: 0x808A
	#   PtrType: Near32 (0xA)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x8a, 0x80, 0x00, 0x00
	# ArgList (0x125C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::logic_error&& (0x125B)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x5b, 0x12, 0x00, 0x00
	# MemberFunction (0x125D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x1099)
	#   ThisType: std::logic_error* (0x10A4)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::logic_error&&) (0x125C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x01, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x125E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x1099)
	#   FunctionType: void std::logic_error::(std::logic_error&&) (0x125D)
	#   Name: logic_error
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x5d, 0x12, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x125F) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x10A3)
	#   FunctionType: const char* std::exception::() (0x10C1)
	#   Name: what
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0xc1, 0x10, 0x00, 0x00
	.byte	0x77, 0x68, 0x61, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x1260) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x1099)
	#   ThisType: std::logic_error* (0x10A4)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1261) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x1099)
	#   FunctionType: void std::logic_error::() (0x1260)
	#   Name: ~logic_error
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x60, 0x12, 0x00, 0x00
	.byte	0x7e, 0x6c, 0x6f, 0x67
	.byte	0x69, 0x63, 0x5f, 0x65
	.byte	0x72, 0x72, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1262) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x10A3)
	#   FunctionType: void std::exception::() (0x10B5)
	#   Name: ~exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x7e, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x00, 0xf1
	# MemberFuncId (0x1263) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x1099)
	#   FunctionType: void std::logic_error::(const char*) (0x10AC)
	#   Name: logic_error
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0xac, 0x10, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x1264) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x10A3)
	#   FunctionType: void std::exception::(const char* const) (0x10B6)
	#   Name: exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0xb6, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x1265) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   FunctionType: int* gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x103B)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x3b, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x1266) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   PointerAttributes: 0x800A
	#   PtrType: Near32 (0xA)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 4
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x0a, 0x80, 0x00, 0x00
	# ArgList (0x1267) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int* (0x104A)
	#     ArgType: gsl::details::extent_type<0> (0x107F)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x7f, 0x10, 0x00, 0x00
	# MemberFunction (0x1268) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   ThisType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x1266)
	#   CallingConvention: ThisCall (0xB)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int*, gsl::details::extent_type<0>) (0x1267)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x66, 0x12, 0x00, 0x00
	.byte	0x0b, 0x00, 0x02, 0x00
	.byte	0x67, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1269) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   FunctionType: void gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(const int*, gsl::details::extent_type<0>) (0x1268)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x68, 0x12, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x126A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   FunctionType: const int* gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x1075)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x75, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.safeseh	"___ehhandler$??$?0$0A@X@?$span@H$0?0@gsl@@QAE@XZ"
	.safeseh	"___ehhandler$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QAE@XZ"
	.safeseh	"___ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QAE@PAHV?$extent_type@$0A@@details@2@@Z"
	.safeseh	"___ehhandler$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QAE@PBHV?$extent_type@$0A@@details@2@@Z"

	.globl	"??_7fail_fast@gsl@@6B@"
.set "??_7fail_fast@gsl@@6B@", L___unnamed_1+4
	.globl	"??_7logic_error@std@@6B@"
.set "??_7logic_error@std@@6B@", L___unnamed_2+4
	.globl	"??_7exception@std@@6B@"
.set "??_7exception@std@@6B@", L___unnamed_3+4
