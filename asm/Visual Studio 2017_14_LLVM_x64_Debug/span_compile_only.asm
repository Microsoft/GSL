	.text
	.intel_syntax noprefix
	.def	 "?test_span_unoptimizable_rangecheck@@YAXV?$span@H$0?0@gsl@@H@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?test_span_unoptimizable_rangecheck@@YAXV?$span@H$0?0@gsl@@H@Z" # -- Begin function ?test_span_unoptimizable_rangecheck@@YAXV?$span@H$0?0@gsl@@H@Z
	.p2align	4, 0x90
"?test_span_unoptimizable_rangecheck@@YAXV?$span@H$0?0@gsl@@H@Z": # @"?test_span_unoptimizable_rangecheck@@YAXV?$span@H$0?0@gsl@@H@Z"
.Lfunc_begin0:
	.cv_func_id 0
	.cv_file	1 "C:\\projects\\gsl\\tests\\span_compile_only.cpp" "4EBBAB2DAA6A3AA59A2E9ADA8BB26538" 1
	.cv_loc	0 1 41 0 is_stmt 0      # ..\tests\span_compile_only.cpp:41:0
.seh_proc "?test_span_unoptimizable_rangecheck@@YAXV?$span@H$0?0@gsl@@H@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	dword ptr [rsp + 52], edx
	#DEBUG_VALUE: test_span_unoptimizable_rangecheck:s <- [$rcx+0]
.Ltmp0:
	.cv_loc	0 1 42 0                # ..\tests\span_compile_only.cpp:42:0
	mov	qword ptr [rsp + 40], 0
	mov	qword ptr [rsp + 32], rcx # 8-byte Spill
.Ltmp1:
	#DEBUG_VALUE: test_span_unoptimizable_rangecheck:s <- [DW_OP_plus_uconst 32, DW_OP_deref] [$rsp+0]
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: test_span_unoptimizable_rangecheck:s <- [DW_OP_plus_uconst 32, DW_OP_deref] [$rsp+0]
	mov	rax, qword ptr [rsp + 40]
	movsxd	rcx, dword ptr [rsp + 52]
	cmp	rax, rcx
	jge	.LBB0_4
.Ltmp2:
# %bb.2:                                #   in Loop: Header=BB0_1 Depth=1
	#DEBUG_VALUE: test_span_unoptimizable_rangecheck:s <- [DW_OP_plus_uconst 32, DW_OP_deref] [$rsp+0]
	.cv_loc	0 1 44 0                # ..\tests\span_compile_only.cpp:44:0
	mov	rdx, qword ptr [rsp + 40]
	mov	rcx, qword ptr [rsp + 32] # 8-byte Reload
	call	"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	mov	r8d, dword ptr [rax]
	add	r8d, 1
	mov	dword ptr [rax], r8d
.Ltmp3:
# %bb.3:                                #   in Loop: Header=BB0_1 Depth=1
	#DEBUG_VALUE: test_span_unoptimizable_rangecheck:s <- [DW_OP_plus_uconst 32, DW_OP_deref] [$rsp+0]
	.cv_loc	0 1 42 0                # ..\tests\span_compile_only.cpp:42:0
	mov	rax, qword ptr [rsp + 40]
	add	rax, 1
	mov	qword ptr [rsp + 40], rax
	jmp	.LBB0_1
.Ltmp4:
.LBB0_4:
	#DEBUG_VALUE: test_span_unoptimizable_rangecheck:s <- [DW_OP_plus_uconst 32, DW_OP_deref] [$rsp+0]
	.cv_loc	0 1 46 0                # ..\tests\span_compile_only.cpp:46:0
	add	rsp, 56
.Ltmp5:
	ret
.Ltmp6:
.Lfunc_end0:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	.globl	"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z" # -- Begin function ??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z
	.p2align	4, 0x90
"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z":    # @"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
.Lfunc_begin1:
	.cv_func_id 1
	.cv_file	2 "C:\\projects\\gsl\\include\\gsl\\span" "3BAA3FB91BA159E545E305706709D4CE" 1
	.cv_loc	1 2 508 0               # ..\include\gsl/span:508:0
.seh_proc "??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe 5, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rdx
	mov	qword ptr [rbp - 24], rcx
	mov	rcx, qword ptr [rbp - 24]
.Ltmp9:
	.cv_loc	1 2 509 0               # ..\include\gsl/span:509:0
	mov	rdx, rcx
	mov	qword ptr [rbp - 64], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 16]
	mov	rdx, rax
	call	"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z"
	mov	byte ptr [rbp - 49], 0
	test	al, 1
	jne	.LBB1_1
	jmp	.LBB1_2
.LBB1_1:
	test	byte ptr [rbp - 49], 1
	jne	.LBB1_4
	jmp	.LBB1_5
.LBB1_2:
	lea	rdx, [rip + "??_C@_0DG@BJDFKDLA@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 48]
	mov	rcx, rax
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 49], 1
.Ltmp7:
	mov	rcx, qword ptr [rbp - 72] # 8-byte Reload
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp8:
	jmp	.LBB1_3
.LBB1_3:
	ud2
.LBB1_4:
	lea	rcx, [rbp - 48]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB1_5:
	.cv_loc	1 2 510 0               # ..\include\gsl/span:510:0
	mov	rcx, qword ptr [rbp - 64] # 8-byte Reload
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	mov	rcx, qword ptr [rbp - 16]
	shl	rcx, 2
	add	rax, rcx
	add	rsp, 112
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z")@IMGREL
	.section	.text,"xr",discard,"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???A?$span@H$0?0@gsl@@QEBAAEAH_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???A?$span@H$0?0@gsl@@QEBAAEAH_J@Z@4HA":
.seh_proc "?dtor$6@?0???A?$span@H$0?0@gsl@@QEBAAEAH_J@Z@4HA"
.LBB1_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	.cv_loc	1 2 509 0               # ..\include\gsl/span:509:0
	test	byte ptr [rbp - 49], 1
	jne	.LBB1_7
	jmp	.LBB1_8
.LBB1_7:
	lea	rcx, [rbp - 48]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB1_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp10:
.Lfunc_end1:
	.seh_handlerdata
	.section	.text,"xr",discard,"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	.p2align	2
"$cppxdata$??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???A?$span@H$0?0@gsl@@QEBAAEAH_J@Z@4HA"@IMGREL # Action
"$ip2state$??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z":
	.long	.Lfunc_begin1@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp7@IMGREL+1         # IP
	.long	0                       # ToState
	.long	.Ltmp8@IMGREL+1         # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
                                        # -- End function
	.def	 "?test_span_for@@YAXV?$span@H$0?0@gsl@@@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?test_span_for@@YAXV?$span@H$0?0@gsl@@@Z" # -- Begin function ?test_span_for@@YAXV?$span@H$0?0@gsl@@@Z
	.p2align	4, 0x90
"?test_span_for@@YAXV?$span@H$0?0@gsl@@@Z": # @"?test_span_for@@YAXV?$span@H$0?0@gsl@@@Z"
.Lfunc_begin2:
	.cv_func_id 2
	.cv_loc	2 1 51 0                # ..\tests\span_compile_only.cpp:51:0
.seh_proc "?test_span_for@@YAXV?$span@H$0?0@gsl@@@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	#DEBUG_VALUE: test_span_for:s <- [$rcx+0]
.Ltmp11:
	.cv_loc	2 1 52 0                # ..\tests\span_compile_only.cpp:52:0
	mov	qword ptr [rsp + 48], 0
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
.Ltmp12:
	#DEBUG_VALUE: test_span_for:s <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
.LBB2_1:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: test_span_for:s <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
	mov	rax, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rsp + 32] # 8-byte Reload
	cmp	rcx, rax
	jge	.LBB2_4
.Ltmp13:
# %bb.2:                                #   in Loop: Header=BB2_1 Depth=1
	#DEBUG_VALUE: test_span_for:s <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
	.cv_loc	2 1 54 0                # ..\tests\span_compile_only.cpp:54:0
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	call	"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	mov	r8d, dword ptr [rax]
	add	r8d, 1
	mov	dword ptr [rax], r8d
.Ltmp14:
# %bb.3:                                #   in Loop: Header=BB2_1 Depth=1
	#DEBUG_VALUE: test_span_for:s <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
	.cv_loc	2 1 52 0                # ..\tests\span_compile_only.cpp:52:0
	mov	rax, qword ptr [rsp + 48]
	add	rax, 1
	mov	qword ptr [rsp + 48], rax
	jmp	.LBB2_1
.Ltmp15:
.LBB2_4:
	#DEBUG_VALUE: test_span_for:s <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
	.cv_loc	2 1 56 0                # ..\tests\span_compile_only.cpp:56:0
	add	rsp, 56
.Ltmp16:
	ret
.Ltmp17:
.Lfunc_end2:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$span@H$0?0@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	.globl	"?size@?$span@H$0?0@gsl@@QEBA_JXZ" # -- Begin function ?size@?$span@H$0?0@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$span@H$0?0@gsl@@QEBA_JXZ":     # @"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
.Lfunc_begin3:
	.cv_func_id 3
	.cv_loc	3 2 498 0               # ..\include\gsl/span:498:0
.seh_proc "?size@?$span@H$0?0@gsl@@QEBA_JXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp18:
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	nop
	add	rsp, 40
	ret
.Ltmp19:
.Lfunc_end3:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?test_span_iter@@YAXV?$span@H$0?0@gsl@@@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?test_span_iter@@YAXV?$span@H$0?0@gsl@@@Z" # -- Begin function ?test_span_iter@@YAXV?$span@H$0?0@gsl@@@Z
	.p2align	4, 0x90
"?test_span_iter@@YAXV?$span@H$0?0@gsl@@@Z": # @"?test_span_iter@@YAXV?$span@H$0?0@gsl@@@Z"
.Lfunc_begin4:
	.cv_func_id 4
	.cv_loc	4 1 60 0                # ..\tests\span_compile_only.cpp:60:0
.seh_proc "?test_span_iter@@YAXV?$span@H$0?0@gsl@@@Z"
# %bb.0:
	sub	rsp, 104
	.seh_stackalloc 104
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 96], rax
	#DEBUG_VALUE: test_span_iter:s <- [$rcx+0]
.Ltmp20:
	.cv_loc	4 1 61 0                # ..\tests\span_compile_only.cpp:61:0
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
.Ltmp21:
	#DEBUG_VALUE: test_span_iter:s <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
	lea	rdx, [rsp + 80]
.Ltmp22:
	#DEBUG_VALUE: it <- [$rdx+0]
	call	"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
.Ltmp23:
.LBB4_1:                                # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: test_span_iter:s <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	lea	rdx, [rsp + 64]
	call	"?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
	mov	rcx, qword ptr [rsp + 80]
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 88]
	mov	qword ptr [rsp + 56], rcx
	lea	rcx, [rsp + 48]
	lea	rdx, [rsp + 64]
	call	"??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
	test	al, 1
	jne	.LBB4_2
	jmp	.LBB4_4
.Ltmp24:
.LBB4_2:                                #   in Loop: Header=BB4_1 Depth=1
	#DEBUG_VALUE: test_span_iter:s <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
	.cv_loc	4 1 63 0                # ..\tests\span_compile_only.cpp:63:0
	lea	rcx, [rsp + 80]
	call	"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ"
	mov	edx, dword ptr [rax]
	add	edx, 1
	mov	dword ptr [rax], edx
.Ltmp25:
# %bb.3:                                #   in Loop: Header=BB4_1 Depth=1
	#DEBUG_VALUE: test_span_iter:s <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
	.cv_loc	4 1 61 0                # ..\tests\span_compile_only.cpp:61:0
	lea	rcx, [rsp + 80]
	call	"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ"
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	jmp	.LBB4_1
.Ltmp26:
.LBB4_4:
	#DEBUG_VALUE: test_span_iter:s <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
	.cv_loc	4 1 65 0                # ..\tests\span_compile_only.cpp:65:0
	mov	rax, qword ptr [rsp + 96]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	nop
	add	rsp, 104
.Ltmp27:
	ret
.Ltmp28:
.Lfunc_end4:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
	.globl	"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ" # -- Begin function ?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ
	.p2align	4, 0x90
"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ": # @"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
.Lfunc_begin5:
	.cv_func_id 5
	.cv_loc	5 2 518 0               # ..\include\gsl/span:518:0
.seh_proc "?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, rdx
	xor	r8d, r8d
                                        # kill: def $r8 killed $r8d
	mov	qword ptr [rsp + 64], rcx
	mov	rcx, qword ptr [rsp + 64]
.Ltmp29:
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z"
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 72
	ret
.Ltmp30:
.Lfunc_end5:
	.seh_handlerdata
	.section	.text,"xr",discard,"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
	.globl	"??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z" # -- Begin function ??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z
	.p2align	4, 0x90
"??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z": # @"??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
.Lfunc_begin6:
	.cv_func_id 6
	.cv_loc	6 2 235 0               # ..\include\gsl/span:235:0
.seh_proc "??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 80], rax
	#DEBUG_VALUE: operator!=:rhs <- [$rdx+0]
	#DEBUG_VALUE: operator!=:lhs <- [$rcx+0]
.Ltmp31:
	.cv_loc	6 2 236 0               # ..\include\gsl/span:236:0
	mov	rax, qword ptr [rdx]
	mov	qword ptr [rsp + 64], rax
	mov	rax, qword ptr [rdx + 8]
	mov	qword ptr [rsp + 72], rax
	mov	rax, qword ptr [rcx]
	mov	qword ptr [rsp + 48], rax
	mov	rax, qword ptr [rcx + 8]
	mov	qword ptr [rsp + 56], rax
	lea	rcx, [rsp + 48]
.Ltmp32:
	lea	rdx, [rsp + 64]
.Ltmp33:
	call	"??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
	xor	al, -1
	and	al, 1
	movzx	eax, al
	mov	rcx, qword ptr [rsp + 80]
	xor	rcx, rsp
	mov	dword ptr [rsp + 44], eax # 4-byte Spill
	call	__security_check_cookie
	mov	eax, dword ptr [rsp + 44] # 4-byte Reload
	add	rsp, 88
	ret
.Ltmp34:
.Lfunc_end6:
	.seh_handlerdata
	.section	.text,"xr",discard,"??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
	.globl	"?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ" # -- Begin function ?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ
	.p2align	4, 0x90
"?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ": # @"?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
.Lfunc_begin7:
	.cv_func_id 7
	.cv_loc	7 2 519 0               # ..\include\gsl/span:519:0
.seh_proc "?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, rdx
	mov	qword ptr [rsp + 64], rcx
	mov	rcx, qword ptr [rsp + 64]
.Ltmp35:
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	mov	qword ptr [rsp + 40], rdx # 8-byte Spill
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	r8, rax
	call	"??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z"
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 72
	ret
.Ltmp36:
.Lfunc_end7:
	.seh_handlerdata
	.section	.text,"xr",discard,"?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ"
	.globl	"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ" # -- Begin function ??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ
	.p2align	4, 0x90
"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ": # @"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ"
.Lfunc_begin8:
	.cv_func_id 8
	.cv_loc	8 2 156 0               # ..\include\gsl/span:156:0
.seh_proc "??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe 5, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx
	mov	rcx, qword ptr [rbp - 16]
.Ltmp39:
	.cv_loc	8 2 157 0               # ..\include\gsl/span:157:0
	mov	rax, qword ptr [rcx + 8]
	mov	rdx, qword ptr [rcx]
	mov	qword ptr [rbp - 56], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 64] # 8-byte Reload
	cmp	rcx, rax
	setne	r8b
	mov	byte ptr [rbp - 41], 0
	test	r8b, 1
	jne	.LBB8_1
	jmp	.LBB8_2
.LBB8_1:
	test	byte ptr [rbp - 41], 1
	jne	.LBB8_4
	jmp	.LBB8_5
.LBB8_2:
	lea	rdx, [rip + "??_C@_0DG@OBPNLIC@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 40]
	mov	rcx, rax
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 41], 1
.Ltmp37:
	mov	rcx, qword ptr [rbp - 72] # 8-byte Reload
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp38:
	jmp	.LBB8_3
.LBB8_3:
	ud2
.LBB8_4:
	lea	rcx, [rbp - 40]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB8_5:
	.cv_loc	8 2 158 0               # ..\include\gsl/span:158:0
	mov	rax, qword ptr [rbp - 56] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	mov	rcx, qword ptr [rbp - 56] # 8-byte Reload
	mov	rdx, qword ptr [rcx + 8]
	shl	rdx, 2
	add	rax, rdx
	add	rsp, 112
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ")@IMGREL
	.section	.text,"xr",discard,"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ"
	.seh_endproc
	.def	 "?dtor$6@?0???D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ@4HA":
.seh_proc "?dtor$6@?0???D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ@4HA"
.LBB8_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	.cv_loc	8 2 157 0               # ..\include\gsl/span:157:0
	test	byte ptr [rbp - 41], 1
	jne	.LBB8_7
	jmp	.LBB8_8
.LBB8_7:
	lea	rcx, [rbp - 40]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB8_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp40:
.Lfunc_end8:
	.seh_handlerdata
	.section	.text,"xr",discard,"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ"
	.p2align	2
"$cppxdata$??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ@4HA"@IMGREL # Action
"$ip2state$??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ":
	.long	.Lfunc_begin8@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp37@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp38@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ"
                                        # -- End function
	.def	 "??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ"
	.globl	"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ" # -- Begin function ??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ
	.p2align	4, 0x90
"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ": # @"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ"
.Lfunc_begin9:
	.cv_func_id 9
	.cv_loc	9 2 168 0               # ..\include\gsl/span:168:0
.seh_proc "??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 128
	.seh_stackalloc 128
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	xor	eax, eax
	mov	dl, al
	xor	eax, eax
	mov	r8d, eax
	mov	qword ptr [rbp - 16], rcx
	mov	rcx, qword ptr [rbp - 16]
.Ltmp43:
	.cv_loc	9 2 169 0               # ..\include\gsl/span:169:0
	mov	r9, qword ptr [rcx + 8]
	mov	byte ptr [rbp - 41], 0
	cmp	r8, r9
	mov	qword ptr [rbp - 56], rcx # 8-byte Spill
	mov	byte ptr [rbp - 57], dl # 1-byte Spill
	jg	.LBB9_2
# %bb.1:
	mov	rax, qword ptr [rbp - 56] # 8-byte Reload
	mov	rcx, qword ptr [rax + 8]
	mov	rdx, qword ptr [rax]
	mov	qword ptr [rbp - 72], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 72] # 8-byte Reload
	cmp	rcx, rax
	setne	r8b
	mov	byte ptr [rbp - 57], r8b # 1-byte Spill
.LBB9_2:
	mov	al, byte ptr [rbp - 57] # 1-byte Reload
	test	al, 1
	jne	.LBB9_3
	jmp	.LBB9_4
.LBB9_3:
	test	byte ptr [rbp - 41], 1
	jne	.LBB9_6
	jmp	.LBB9_7
.LBB9_4:
	lea	rdx, [rip + "??_C@_0DG@JCNKEIFF@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 40]
	mov	rcx, rax
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 41], 1
.Ltmp41:
	mov	rcx, qword ptr [rbp - 80] # 8-byte Reload
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp42:
	jmp	.LBB9_5
.LBB9_5:
	ud2
.LBB9_6:
	lea	rcx, [rbp - 40]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB9_7:
	.cv_loc	9 2 170 0               # ..\include\gsl/span:170:0
	mov	rax, qword ptr [rbp - 56] # 8-byte Reload
	mov	rcx, qword ptr [rax + 8]
	add	rcx, 1
	mov	qword ptr [rax + 8], rcx
	.cv_loc	9 2 171 0               # ..\include\gsl/span:171:0
	add	rsp, 128
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ")@IMGREL
	.section	.text,"xr",discard,"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ"
	.seh_endproc
	.def	 "?dtor$8@?0???E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ@4HA":
.seh_proc "?dtor$8@?0???E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ@4HA"
.LBB9_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	9 2 169 0               # ..\include\gsl/span:169:0
	test	byte ptr [rbp - 41], 1
	jne	.LBB9_9
	jmp	.LBB9_10
.LBB9_9:
	lea	rcx, [rbp - 40]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB9_10:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp44:
.Lfunc_end9:
	.seh_handlerdata
	.section	.text,"xr",discard,"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ"
	.p2align	2
"$cppxdata$??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ")@IMGREL # IPToStateXData
	.long	120                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ@4HA"@IMGREL # Action
"$ip2state$??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ":
	.long	.Lfunc_begin9@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp41@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp42@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ"
                                        # -- End function
	.def	 "?test_span_rangeiter@@YAXV?$span@H$0?0@gsl@@@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?test_span_rangeiter@@YAXV?$span@H$0?0@gsl@@@Z" # -- Begin function ?test_span_rangeiter@@YAXV?$span@H$0?0@gsl@@@Z
	.p2align	4, 0x90
"?test_span_rangeiter@@YAXV?$span@H$0?0@gsl@@@Z": # @"?test_span_rangeiter@@YAXV?$span@H$0?0@gsl@@@Z"
.Lfunc_begin10:
	.cv_func_id 10
	.cv_loc	10 1 69 0               # ..\tests\span_compile_only.cpp:69:0
.seh_proc "?test_span_rangeiter@@YAXV?$span@H$0?0@gsl@@@Z"
# %bb.0:
	sub	rsp, 136
	.seh_stackalloc 136
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 128], rax
	#DEBUG_VALUE: test_span_rangeiter:s <- [$rcx+0]
.Ltmp45:
	.cv_loc	10 1 70 0               # ..\tests\span_compile_only.cpp:70:0
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp46:
	lea	rdx, [rsp + 112]
.Ltmp47:
	#DEBUG_VALUE: __begin1 <- [$rdx+0]
	call	"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
.Ltmp48:
	mov	rcx, qword ptr [rsp + 56]
	lea	rdx, [rsp + 96]
.Ltmp49:
	#DEBUG_VALUE: __end1 <- [$rdx+0]
	call	"?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
.Ltmp50:
.LBB10_1:                               # =>This Inner Loop Header: Depth=1
	mov	rax, qword ptr [rsp + 96]
	mov	qword ptr [rsp + 80], rax
	mov	rax, qword ptr [rsp + 104]
	mov	qword ptr [rsp + 88], rax
	mov	rax, qword ptr [rsp + 112]
	mov	qword ptr [rsp + 64], rax
	mov	rax, qword ptr [rsp + 120]
	mov	qword ptr [rsp + 72], rax
	lea	rcx, [rsp + 64]
	lea	rdx, [rsp + 80]
	call	"??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
	test	al, 1
	jne	.LBB10_2
	jmp	.LBB10_4
.LBB10_2:                               #   in Loop: Header=BB10_1 Depth=1
.Ltmp51:
	.cv_loc	10 1 70 0               # ..\tests\span_compile_only.cpp:70:0
	lea	rcx, [rsp + 112]
	call	"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ"
	mov	qword ptr [rsp + 48], rax
.Ltmp52:
	.cv_loc	10 1 72 0               # ..\tests\span_compile_only.cpp:72:0
	mov	rax, qword ptr [rsp + 48]
	mov	edx, dword ptr [rax]
	add	edx, 1
	mov	dword ptr [rax], edx
.Ltmp53:
# %bb.3:                                #   in Loop: Header=BB10_1 Depth=1
	.cv_loc	10 1 70 0               # ..\tests\span_compile_only.cpp:70:0
	lea	rcx, [rsp + 112]
	call	"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ"
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	jmp	.LBB10_1
.Ltmp54:
.LBB10_4:
	.cv_loc	10 1 74 0               # ..\tests\span_compile_only.cpp:74:0
	mov	rax, qword ptr [rsp + 128]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	nop
	add	rsp, 136
	ret
.Ltmp55:
.Lfunc_end10:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "?static_size_array_span@@YAXAEAUIDE_DRIVE_STATE@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?static_size_array_span@@YAXAEAUIDE_DRIVE_STATE@@@Z" # -- Begin function ?static_size_array_span@@YAXAEAUIDE_DRIVE_STATE@@@Z
	.p2align	4, 0x90
"?static_size_array_span@@YAXAEAUIDE_DRIVE_STATE@@@Z": # @"?static_size_array_span@@YAXAEAUIDE_DRIVE_STATE@@@Z"
.Lfunc_begin11:
	.cv_func_id 11
	.cv_loc	11 1 96 0               # ..\tests\span_compile_only.cpp:96:0
.seh_proc "?static_size_array_span@@YAXAEAUIDE_DRIVE_STATE@@@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 80], rax
	mov	qword ptr [rsp + 56], rcx
.Ltmp56:
	.cv_loc	11 1 97 0               # ..\tests\span_compile_only.cpp:97:0
	mov	rdx, qword ptr [rsp + 56]
	lea	rcx, [rsp + 64]
.Ltmp57:
	#DEBUG_VALUE: static_size_array_span:sp <- [$rcx+0]
	call	"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z"
.Ltmp58:
	.cv_loc	11 1 99 0               # ..\tests\span_compile_only.cpp:99:0
	mov	dword ptr [rsp + 52], 0
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
.LBB11_1:                               # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsp + 52], 6
	jge	.LBB11_4
# %bb.2:                                #   in Loop: Header=BB11_1 Depth=1
.Ltmp59:
	.cv_loc	11 1 101 0              # ..\tests\span_compile_only.cpp:101:0
	movsxd	rdx, dword ptr [rsp + 52]
	lea	rcx, [rsp + 64]
	call	"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z"
	mov	byte ptr [rax], 1
.Ltmp60:
# %bb.3:                                #   in Loop: Header=BB11_1 Depth=1
	.cv_loc	11 1 99 0               # ..\tests\span_compile_only.cpp:99:0
	mov	eax, dword ptr [rsp + 52]
	add	eax, 1
	mov	dword ptr [rsp + 52], eax
	jmp	.LBB11_1
.Ltmp61:
.LBB11_4:
	.cv_loc	11 1 103 0              # ..\tests\span_compile_only.cpp:103:0
	mov	rax, qword ptr [rsp + 80]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	nop
	add	rsp, 88
	ret
.Ltmp62:
.Lfunc_end11:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z"
	.globl	"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z" # -- Begin function ??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z
	.p2align	4, 0x90
"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z": # @"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z"
.Lfunc_begin12:
	.cv_func_id 12
	.cv_loc	12 2 395 0              # ..\include\gsl/span:395:0
.seh_proc "??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 96
	.seh_stackalloc 96
	lea	rbp, [rsp + 96]
	.seh_setframe 5, 96
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rdx
	mov	qword ptr [rbp - 24], rcx
	mov	rcx, qword ptr [rbp - 24]
	lea	rdx, [rbp - 32]
.Ltmp65:
	mov	qword ptr [rbp - 48], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"??0?$extent_type@$05@details@gsl@@QEAA@XZ"
	mov	rcx, qword ptr [rbp - 16]
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??$addressof@E@std@@YAPEAEAEAE@Z"
	mov	qword ptr [rbp - 40], rax
	mov	rdx, qword ptr [rbp - 40]
	mov	r8b, byte ptr [rbp - 32]
.Ltmp63:
	mov	rcx, qword ptr [rbp - 48] # 8-byte Reload
	call	"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
.Ltmp64:
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	jmp	.LBB12_1
.LBB12_1:
	mov	rax, qword ptr [rbp - 48] # 8-byte Reload
	add	rsp, 96
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z@4HA":
.seh_proc "?dtor$2@?0???$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z@4HA"
.LBB12_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp66:
.Lfunc_end12:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z"
	.p2align	2
"$cppxdata$??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z")@IMGREL # IPToStateXData
	.long	88                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z@4HA"@IMGREL # Action
"$ip2state$??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z":
	.long	.Lfunc_begin12@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp63@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp64@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z"
                                        # -- End function
	.def	 "??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z"
	.globl	"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z" # -- Begin function ??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z
	.p2align	4, 0x90
"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z":    # @"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z"
.Lfunc_begin13:
	.cv_func_id 13
	.cv_loc	13 2 508 0              # ..\include\gsl/span:508:0
.seh_proc "??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe 5, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rdx
	mov	qword ptr [rbp - 24], rcx
	mov	rcx, qword ptr [rbp - 24]
.Ltmp69:
	.cv_loc	13 2 509 0              # ..\include\gsl/span:509:0
	mov	rdx, rcx
	mov	qword ptr [rbp - 64], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 16]
	mov	rdx, rax
	call	"?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z"
	mov	byte ptr [rbp - 49], 0
	test	al, 1
	jne	.LBB13_1
	jmp	.LBB13_2
.LBB13_1:
	test	byte ptr [rbp - 49], 1
	jne	.LBB13_4
	jmp	.LBB13_5
.LBB13_2:
	lea	rdx, [rip + "??_C@_0DG@BJDFKDLA@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 48]
	mov	rcx, rax
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 49], 1
.Ltmp67:
	mov	rcx, qword ptr [rbp - 72] # 8-byte Reload
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp68:
	jmp	.LBB13_3
.LBB13_3:
	ud2
.LBB13_4:
	lea	rcx, [rbp - 48]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB13_5:
	.cv_loc	13 2 510 0              # ..\include\gsl/span:510:0
	mov	rcx, qword ptr [rbp - 64] # 8-byte Reload
	call	"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ"
	add	rax, qword ptr [rbp - 16]
	add	rsp, 112
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z")@IMGREL
	.section	.text,"xr",discard,"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???A?$span@E$0?0@gsl@@QEBAAEAE_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???A?$span@E$0?0@gsl@@QEBAAEAE_J@Z@4HA":
.seh_proc "?dtor$6@?0???A?$span@E$0?0@gsl@@QEBAAEAE_J@Z@4HA"
.LBB13_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	.cv_loc	13 2 509 0              # ..\include\gsl/span:509:0
	test	byte ptr [rbp - 49], 1
	jne	.LBB13_7
	jmp	.LBB13_8
.LBB13_7:
	lea	rcx, [rbp - 48]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB13_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp70:
.Lfunc_end13:
	.seh_handlerdata
	.section	.text,"xr",discard,"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z"
	.p2align	2
"$cppxdata$??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???A?$span@E$0?0@gsl@@QEBAAEAE_J@Z@4HA"@IMGREL # Action
"$ip2state$??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z":
	.long	.Lfunc_begin13@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp67@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp68@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z"
                                        # -- End function
	.def	 "?test_convert_span_Joe@@YAEAEAUIDE_DRIVE_STATE@@@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?test_convert_span_Joe@@YAEAEAUIDE_DRIVE_STATE@@@Z" # -- Begin function ?test_convert_span_Joe@@YAEAEAUIDE_DRIVE_STATE@@@Z
	.p2align	4, 0x90
"?test_convert_span_Joe@@YAEAEAUIDE_DRIVE_STATE@@@Z": # @"?test_convert_span_Joe@@YAEAEAUIDE_DRIVE_STATE@@@Z"
.Lfunc_begin14:
	.cv_func_id 14
	.cv_loc	14 1 145 0              # ..\tests\span_compile_only.cpp:145:0
.seh_proc "?test_convert_span_Joe@@YAEAEAUIDE_DRIVE_STATE@@@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 80], rax
	mov	qword ptr [rsp + 40], rcx
.Ltmp71:
	.cv_loc	14 1 146 0              # ..\tests\span_compile_only.cpp:146:0
	mov	rax, qword ptr [rsp + 40]
	mov	rcx, qword ptr [rax + 8]
	mov	qword ptr [rsp + 48], rcx
	mov	rax, qword ptr [rax + 16]
	mov	qword ptr [rsp + 56], rax
	lea	rcx, [rsp + 64]
.Ltmp72:
	#DEBUG_VALUE: test_convert_span_Joe:curBuffer <- [$rcx+0]
	lea	rdx, [rsp + 48]
	call	"??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z"
.Ltmp73:
	xor	r8d, r8d
	mov	edx, r8d
	.cv_loc	14 1 148 0              # ..\tests\span_compile_only.cpp:148:0
	lea	rcx, [rsp + 64]
	call	"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z"
	mov	al, byte ptr [rax]
	mov	rcx, qword ptr [rsp + 80]
	xor	rcx, rsp
	mov	byte ptr [rsp + 39], al # 1-byte Spill
	call	__security_check_cookie
	mov	al, byte ptr [rsp + 39] # 1-byte Reload
	add	rsp, 88
	ret
.Ltmp74:
.Lfunc_end14:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z"
	.globl	"??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z" # -- Begin function ??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z
	.p2align	4, 0x90
"??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z": # @"??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z"
.Lfunc_begin15:
	.cv_func_id 15
	.cv_loc	15 1 129 0              # ..\tests\span_compile_only.cpp:129:0
.seh_proc "??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, rcx
	#DEBUG_VALUE: convert_span<unsigned char,gsl::span<unsigned short,-1> >:s <- [$rdx+0]
.Ltmp75:
	.cv_loc	15 1 132 0              # ..\tests\span_compile_only.cpp:132:0
	mov	qword ptr [rsp + 72], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	qword ptr [rsp + 64], rax # 8-byte Spill
	mov	qword ptr [rsp + 56], rdx # 8-byte Spill
.Ltmp76:
	#DEBUG_VALUE: convert_span<unsigned char,gsl::span<unsigned short,-1> >:s <- [DW_OP_plus_uconst 56, DW_OP_deref] [$rsp+0]
	call	"?data@?$span@G$0?0@gsl@@QEBAPEAGXZ"
	mov	qword ptr [rsp + 80], rax
	.cv_loc	15 1 133 0              # ..\tests\span_compile_only.cpp:133:0
	mov	rdx, qword ptr [rsp + 80]
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 48], rdx # 8-byte Spill
	call	"?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ"
	mov	r8d, 1
	mov	ecx, r8d
	cqo
	idiv	rcx
	mov	rcx, qword ptr [rsp + 72] # 8-byte Reload
	mov	r9, qword ptr [rsp + 48] # 8-byte Reload
	mov	rdx, r9
	mov	r8, rax
	call	"??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
	mov	rcx, qword ptr [rsp + 64] # 8-byte Reload
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 88
.Ltmp77:
	ret
.Ltmp78:
.Lfunc_end15:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?mysubspan1@@YA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?mysubspan1@@YA_JXZ"   # -- Begin function ?mysubspan1@@YA_JXZ
	.p2align	4, 0x90
"?mysubspan1@@YA_JXZ":                  # @"?mysubspan1@@YA_JXZ"
.Lfunc_begin16:
	.cv_func_id 16
	.cv_loc	16 1 155 0              # ..\tests\span_compile_only.cpp:155:0
.seh_proc "?mysubspan1@@YA_JXZ"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 112], rax
.Ltmp79:
	.cv_loc	16 1 156 0              # ..\tests\span_compile_only.cpp:156:0
	mov	rax, qword ptr [rip + ".L?x@?1??mysubspan1@@YA_JXZ@3PAHA"]
	mov	qword ptr [rsp + 80], rax
	mov	rax, qword ptr [rip + ".L?x@?1??mysubspan1@@YA_JXZ@3PAHA"+8]
	mov	qword ptr [rsp + 88], rax
	mov	rax, qword ptr [rip + ".L?x@?1??mysubspan1@@YA_JXZ@3PAHA"+16]
	mov	qword ptr [rsp + 96], rax
	.cv_loc	16 1 157 0              # ..\tests\span_compile_only.cpp:157:0
	lea	rcx, [rsp + 72]
.Ltmp80:
	#DEBUG_VALUE: mysubspan1:s <- [$rcx+0]
	lea	rdx, [rsp + 80]
.Ltmp81:
	#DEBUG_VALUE: mysubspan1:x <- [$rdx+0]
	call	"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z"
.Ltmp82:
	mov	r8d, 3
                                        # kill: def $r8 killed $r8d
	.cv_loc	16 1 159 0              # ..\tests\span_compile_only.cpp:159:0
	lea	rcx, [rsp + 72]
	lea	rdx, [rsp + 56]
.Ltmp83:
	#DEBUG_VALUE: mysubspan1:subspan <- [$rdx+0]
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z"
.Ltmp84:
	.cv_loc	16 1 161 0              # ..\tests\span_compile_only.cpp:161:0
	lea	rcx, [rsp + 56]
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rsp + 112]
	xor	rcx, rsp
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 120
	ret
.Ltmp85:
.Lfunc_end16:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z"
	.globl	"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z" # -- Begin function ??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z
	.p2align	4, 0x90
"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z": # @"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z"
.Lfunc_begin17:
	.cv_func_id 17
	.cv_loc	17 2 395 0              # ..\include\gsl/span:395:0
.seh_proc "??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 96
	.seh_stackalloc 96
	lea	rbp, [rsp + 96]
	.seh_setframe 5, 96
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rdx
	mov	qword ptr [rbp - 24], rcx
	mov	rcx, qword ptr [rbp - 24]
	lea	rdx, [rbp - 32]
.Ltmp88:
	mov	qword ptr [rbp - 48], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"??0?$extent_type@$05@details@gsl@@QEAA@XZ"
	mov	rcx, qword ptr [rbp - 16]
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??$addressof@H@std@@YAPEAHAEAH@Z"
	mov	qword ptr [rbp - 40], rax
	mov	rdx, qword ptr [rbp - 40]
	mov	r8b, byte ptr [rbp - 32]
.Ltmp86:
	mov	rcx, qword ptr [rbp - 48] # 8-byte Reload
	call	"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
.Ltmp87:
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	jmp	.LBB17_1
.LBB17_1:
	mov	rax, qword ptr [rbp - 48] # 8-byte Reload
	add	rsp, 96
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z@4HA":
.seh_proc "?dtor$2@?0???$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z@4HA"
.LBB17_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp89:
.Lfunc_end17:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z"
	.p2align	2
"$cppxdata$??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z")@IMGREL # IPToStateXData
	.long	88                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z@4HA"@IMGREL # Action
"$ip2state$??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z":
	.long	.Lfunc_begin17@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp86@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp87@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z"
                                        # -- End function
	.def	 "?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z"
	.globl	"?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z" # -- Begin function ?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z
	.p2align	4, 0x90
"?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z": # @"?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z"
.Lfunc_begin18:
	.cv_func_id 18
	.cv_loc	18 2 487 0              # ..\include\gsl/span:487:0
.seh_proc "?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z"
# %bb.0:
	sub	rsp, 104
	.seh_stackalloc 104
	.seh_endprologue
	mov	rax, rdx
	mov	qword ptr [rsp + 96], r8
	mov	qword ptr [rsp + 88], rcx
	mov	rcx, qword ptr [rsp + 88]
.Ltmp90:
	.cv_loc	18 2 488 0              # ..\include\gsl/span:488:0
	mov	qword ptr [rsp + 72], rcx # 8-byte Spill
	mov	qword ptr [rsp + 64], rax # 8-byte Spill
	mov	qword ptr [rsp + 56], rdx # 8-byte Spill
	call	"?size@?$span@H$05@gsl@@QEBA_JXZ"
	sub	rax, qword ptr [rsp + 96]
	mov	r9b, byte ptr [rsp + 80]
	mov	rcx, qword ptr [rsp + 72] # 8-byte Reload
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	r8, rax
	mov	rax, -1
	mov	byte ptr [rsp + 55], r9b # 1-byte Spill
	mov	r9, rax
	mov	r10b, byte ptr [rsp + 55] # 1-byte Reload
	mov	byte ptr [rsp + 32], r10b
	call	"??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z"
	mov	rax, qword ptr [rsp + 64] # 8-byte Reload
	add	rsp, 104
	ret
.Ltmp91:
.Lfunc_end18:
	.seh_handlerdata
	.section	.text,"xr",discard,"?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?mysubspan2@@YA_J_J@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?mysubspan2@@YA_J_J@Z" # -- Begin function ?mysubspan2@@YA_J_J@Z
	.p2align	4, 0x90
"?mysubspan2@@YA_J_J@Z":                # @"?mysubspan2@@YA_J_J@Z"
.Lfunc_begin19:
	.cv_func_id 19
	.cv_loc	19 1 166 0              # ..\tests\span_compile_only.cpp:166:0
.seh_proc "?mysubspan2@@YA_J_J@Z"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 112], rax
	mov	qword ptr [rsp + 48], rcx
.Ltmp92:
	.cv_loc	19 1 167 0              # ..\tests\span_compile_only.cpp:167:0
	mov	rax, qword ptr [rip + ".L?x@?1??mysubspan2@@YA_J_J@Z@3PAHA"]
	mov	qword ptr [rsp + 80], rax
	mov	rax, qword ptr [rip + ".L?x@?1??mysubspan2@@YA_J_J@Z@3PAHA"+8]
	mov	qword ptr [rsp + 88], rax
	mov	rax, qword ptr [rip + ".L?x@?1??mysubspan2@@YA_J_J@Z@3PAHA"+16]
	mov	qword ptr [rsp + 96], rax
	.cv_loc	19 1 168 0              # ..\tests\span_compile_only.cpp:168:0
	lea	rcx, [rsp + 72]
.Ltmp93:
	#DEBUG_VALUE: mysubspan2:s <- [$rcx+0]
	lea	rdx, [rsp + 80]
.Ltmp94:
	#DEBUG_VALUE: mysubspan2:x <- [$rdx+0]
	call	"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z"
.Ltmp95:
	.cv_loc	19 1 170 0              # ..\tests\span_compile_only.cpp:170:0
	mov	r8, qword ptr [rsp + 48]
	lea	rcx, [rsp + 72]
	lea	rdx, [rsp + 56]
.Ltmp96:
	#DEBUG_VALUE: mysubspan2:subspan <- [$rdx+0]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z"
.Ltmp97:
	.cv_loc	19 1 172 0              # ..\tests\span_compile_only.cpp:172:0
	lea	rcx, [rsp + 56]
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rsp + 112]
	xor	rcx, rsp
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 32] # 8-byte Reload
	add	rsp, 120
	ret
.Ltmp98:
.Lfunc_end19:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "?mysubspan3@@YA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.globl	"?mysubspan3@@YA_JXZ"   # -- Begin function ?mysubspan3@@YA_JXZ
	.p2align	4, 0x90
"?mysubspan3@@YA_JXZ":                  # @"?mysubspan3@@YA_JXZ"
.Lfunc_begin20:
	.cv_func_id 20
	.cv_loc	20 1 177 0              # ..\tests\span_compile_only.cpp:177:0
.seh_proc "?mysubspan3@@YA_JXZ"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 112], rax
.Ltmp99:
	.cv_loc	20 1 178 0              # ..\tests\span_compile_only.cpp:178:0
	mov	rax, qword ptr [rip + ".L?x@?1??mysubspan3@@YA_JXZ@3PAHA"]
	mov	qword ptr [rsp + 80], rax
	mov	rax, qword ptr [rip + ".L?x@?1??mysubspan3@@YA_JXZ@3PAHA"+8]
	mov	qword ptr [rsp + 88], rax
	mov	rax, qword ptr [rip + ".L?x@?1??mysubspan3@@YA_JXZ@3PAHA"+16]
	mov	qword ptr [rsp + 96], rax
	.cv_loc	20 1 179 0              # ..\tests\span_compile_only.cpp:179:0
	lea	rcx, [rsp + 72]
.Ltmp100:
	#DEBUG_VALUE: mysubspan3:s <- [$rcx+0]
	lea	rdx, [rsp + 80]
.Ltmp101:
	#DEBUG_VALUE: mysubspan3:x <- [$rdx+0]
	call	"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z"
.Ltmp102:
	mov	r8d, 3
                                        # kill: def $r8 killed $r8d
	.cv_loc	20 1 181 0              # ..\tests\span_compile_only.cpp:181:0
	lea	rcx, [rsp + 72]
	lea	rdx, [rsp + 56]
.Ltmp103:
	#DEBUG_VALUE: mysubspan3:subspan <- [$rdx+0]
	mov	r9, -1
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z"
.Ltmp104:
	.cv_loc	20 1 183 0              # ..\tests\span_compile_only.cpp:183:0
	lea	rcx, [rsp + 56]
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rsp + 112]
	xor	rcx, rsp
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 120
	ret
.Ltmp105:
.Lfunc_end20:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z"
	.globl	"?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z" # -- Begin function ?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z
	.p2align	4, 0x90
"?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z": # @"?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z"
.Lfunc_begin21:
	.cv_func_id 21
	.cv_loc	21 2 493 0              # ..\include\gsl/span:493:0
.seh_proc "?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, rdx
	mov	qword ptr [rsp + 80], r9
	mov	qword ptr [rsp + 72], r8
	mov	qword ptr [rsp + 64], rcx
	mov	rcx, qword ptr [rsp + 64]
.Ltmp106:
	.cv_loc	21 2 494 0              # ..\include\gsl/span:494:0
	mov	r9, qword ptr [rsp + 80]
	mov	r8, qword ptr [rsp + 72]
	mov	r10b, byte ptr [rsp + 56]
	mov	byte ptr [rsp + 32], r10b
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z"
	mov	rax, qword ptr [rsp + 48] # 8-byte Reload
	add	rsp, 88
	ret
.Ltmp107:
.Lfunc_end21:
	.seh_handlerdata
	.section	.text,"xr",discard,"?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?mysubspan4@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?mysubspan4@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # -- Begin function ?mysubspan4@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z
	.p2align	4, 0x90
"?mysubspan4@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z": # @"?mysubspan4@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z"
.Lfunc_begin22:
	.cv_func_id 22
	.cv_loc	22 1 188 0              # ..\tests\span_compile_only.cpp:188:0
.seh_proc "?mysubspan4@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, rcx
	mov	r10, qword ptr [rip + __security_cookie]
	xor	r10, rsp
	mov	qword ptr [rsp + 112], r10
	mov	qword ptr [rsp + 88], r9
	mov	qword ptr [rsp + 80], r8
	mov	qword ptr [rsp + 72], rdx
.Ltmp108:
	.cv_loc	22 1 189 0              # ..\tests\span_compile_only.cpp:189:0
	cmp	qword ptr [rsp + 72], 0
	mov	qword ptr [rsp + 64], rax # 8-byte Spill
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	je	.LBB22_2
# %bb.1:
.Ltmp109:
	.cv_loc	22 1 191 0              # ..\tests\span_compile_only.cpp:191:0
	mov	rdx, qword ptr [rsp + 72]
	mov	r8, qword ptr [rsp + 80]
	lea	rcx, [rsp + 96]
.Ltmp110:
	#DEBUG_VALUE: s <- [$rcx+0]
	call	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
.Ltmp111:
	.cv_loc	22 1 192 0              # ..\tests\span_compile_only.cpp:192:0
	mov	r8, qword ptr [rsp + 88]
	lea	rcx, [rsp + 96]
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z"
	jmp	.LBB22_3
.Ltmp112:
.LBB22_2:
	.cv_loc	22 1 195 0              # ..\tests\span_compile_only.cpp:195:0
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	call	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
.LBB22_3:
	.cv_loc	22 1 196 0              # ..\tests\span_compile_only.cpp:196:0
	mov	rax, qword ptr [rsp + 112]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 64] # 8-byte Reload
	add	rsp, 120
	ret
.Ltmp113:
.Lfunc_end22:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.globl	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # -- Begin function ??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z
	.p2align	4, 0x90
"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z":   # @"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
.Lfunc_begin23:
	.cv_func_id 23
	.cv_loc	23 2 386 0              # ..\include\gsl/span:386:0
.seh_proc "??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], r8
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp114:
	mov	r8, qword ptr [rsp + 64]
	mov	rdx, qword ptr [rsp + 56]
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	call	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 72
	ret
.Ltmp115:
.Lfunc_end23:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z"
	.globl	"?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z" # -- Begin function ?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z
	.p2align	4, 0x90
"?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z": # @"?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z"
.Lfunc_begin24:
	.cv_func_id 24
	.cv_loc	24 2 487 0              # ..\include\gsl/span:487:0
.seh_proc "?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z"
# %bb.0:
	sub	rsp, 104
	.seh_stackalloc 104
	.seh_endprologue
	mov	rax, rdx
	mov	qword ptr [rsp + 96], r8
	mov	qword ptr [rsp + 88], rcx
	mov	rcx, qword ptr [rsp + 88]
.Ltmp116:
	.cv_loc	24 2 488 0              # ..\include\gsl/span:488:0
	mov	qword ptr [rsp + 72], rcx # 8-byte Spill
	mov	qword ptr [rsp + 64], rax # 8-byte Spill
	mov	qword ptr [rsp + 56], rdx # 8-byte Spill
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	sub	rax, qword ptr [rsp + 96]
	mov	r9b, byte ptr [rsp + 80]
	mov	rcx, qword ptr [rsp + 72] # 8-byte Reload
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	r8, rax
	mov	rax, -1
	mov	byte ptr [rsp + 55], r9b # 1-byte Spill
	mov	r9, rax
	mov	r10b, byte ptr [rsp + 55] # 1-byte Reload
	mov	byte ptr [rsp + 32], r10b
	call	"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z"
	mov	rax, qword ptr [rsp + 64] # 8-byte Reload
	add	rsp, 104
	ret
.Ltmp117:
.Lfunc_end24:
	.seh_handlerdata
	.section	.text,"xr",discard,"?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.globl	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ" # -- Begin function ??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ
	.p2align	4, 0x90
"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ": # @"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
.Lfunc_begin25:
	.cv_func_id 25
	.cv_loc	25 2 384 0              # ..\include\gsl/span:384:0
.seh_proc "??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe 5, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx
	mov	rcx, qword ptr [rbp - 16]
	lea	rax, [rbp - 24]
.Ltmp120:
	mov	qword ptr [rbp - 32], rcx # 8-byte Spill
	mov	rcx, rax
	call	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	mov	r8b, byte ptr [rbp - 24]
.Ltmp118:
	xor	edx, edx
                                        # kill: def $rdx killed $edx
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	mov	qword ptr [rbp - 40], rax # 8-byte Spill
	call	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
.Ltmp119:
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	jmp	.LBB25_1
.LBB25_1:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	add	rsp, 80
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ@4HA"
.LBB25_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp121:
.Lfunc_end25:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.p2align	2
"$cppxdata$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ":
	.long	.Lfunc_begin25@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp118@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp119@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
                                        # -- End function
	.def	 "?mysubspan5@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?mysubspan5@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # -- Begin function ?mysubspan5@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z
	.p2align	4, 0x90
"?mysubspan5@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z": # @"?mysubspan5@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z"
.Lfunc_begin26:
	.cv_func_id 26
	.cv_loc	26 1 199 0              # ..\tests\span_compile_only.cpp:199:0
.seh_proc "?mysubspan5@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, rcx
	mov	r10, qword ptr [rip + __security_cookie]
	xor	r10, rsp
	mov	qword ptr [rsp + 112], r10
	mov	qword ptr [rsp + 88], r9
	mov	qword ptr [rsp + 80], r8
	mov	qword ptr [rsp + 72], rdx
.Ltmp122:
	.cv_loc	26 1 200 0              # ..\tests\span_compile_only.cpp:200:0
	cmp	qword ptr [rsp + 72], 0
	mov	qword ptr [rsp + 64], rax # 8-byte Spill
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	je	.LBB26_2
# %bb.1:
.Ltmp123:
	.cv_loc	26 1 202 0              # ..\tests\span_compile_only.cpp:202:0
	mov	rdx, qword ptr [rsp + 72]
	mov	r8, qword ptr [rsp + 80]
	lea	rcx, [rsp + 96]
.Ltmp124:
	#DEBUG_VALUE: s <- [$rcx+0]
	call	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
.Ltmp125:
	.cv_loc	26 1 203 0              # ..\tests\span_compile_only.cpp:203:0
	mov	r8, qword ptr [rsp + 88]
	lea	rcx, [rsp + 96]
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	r9, -1
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z"
	jmp	.LBB26_3
.Ltmp126:
.LBB26_2:
	.cv_loc	26 1 206 0              # ..\tests\span_compile_only.cpp:206:0
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	call	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
.LBB26_3:
	.cv_loc	26 1 207 0              # ..\tests\span_compile_only.cpp:207:0
	mov	rax, qword ptr [rsp + 112]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 64] # 8-byte Reload
	add	rsp, 120
	ret
.Ltmp127:
.Lfunc_end26:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z"
	.globl	"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z" # -- Begin function ?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z
	.p2align	4, 0x90
"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z": # @"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z"
.Lfunc_begin27:
	.cv_func_id 27
	.cv_loc	27 2 493 0              # ..\include\gsl/span:493:0
.seh_proc "?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, rdx
	mov	qword ptr [rsp + 80], r9
	mov	qword ptr [rsp + 72], r8
	mov	qword ptr [rsp + 64], rcx
	mov	rcx, qword ptr [rsp + 64]
.Ltmp128:
	.cv_loc	27 2 494 0              # ..\include\gsl/span:494:0
	mov	r9, qword ptr [rsp + 80]
	mov	r8, qword ptr [rsp + 72]
	mov	r10b, byte ptr [rsp + 56]
	mov	byte ptr [rsp + 32], r10b
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z"
	mov	rax, qword ptr [rsp + 48] # 8-byte Reload
	add	rsp, 88
	ret
.Ltmp129:
.Lfunc_end27:
	.seh_handlerdata
	.section	.text,"xr",discard,"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?mysubspan6@@YA?AV?$span@H$0?0@gsl@@PEAH_J@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?mysubspan6@@YA?AV?$span@H$0?0@gsl@@PEAH_J@Z" # -- Begin function ?mysubspan6@@YA?AV?$span@H$0?0@gsl@@PEAH_J@Z
	.p2align	4, 0x90
"?mysubspan6@@YA?AV?$span@H$0?0@gsl@@PEAH_J@Z": # @"?mysubspan6@@YA?AV?$span@H$0?0@gsl@@PEAH_J@Z"
.Lfunc_begin28:
	.cv_func_id 28
	.cv_loc	28 1 211 0              # ..\tests\span_compile_only.cpp:211:0
.seh_proc "?mysubspan6@@YA?AV?$span@H$0?0@gsl@@PEAH_J@Z"
# %bb.0:
	sub	rsp, 104
	.seh_stackalloc 104
	.seh_endprologue
	mov	rax, rcx
	mov	r9, qword ptr [rip + __security_cookie]
	xor	r9, rsp
	mov	qword ptr [rsp + 96], r9
	mov	qword ptr [rsp + 72], r8
	mov	qword ptr [rsp + 64], rdx
.Ltmp130:
	.cv_loc	28 1 212 0              # ..\tests\span_compile_only.cpp:212:0
	cmp	qword ptr [rsp + 64], 0
	mov	qword ptr [rsp + 56], rax # 8-byte Spill
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	je	.LBB28_2
# %bb.1:
.Ltmp131:
	.cv_loc	28 1 214 0              # ..\tests\span_compile_only.cpp:214:0
	mov	rdx, qword ptr [rsp + 64]
	mov	r8, qword ptr [rsp + 72]
	lea	rcx, [rsp + 80]
.Ltmp132:
	#DEBUG_VALUE: s <- [$rcx+0]
	call	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
.Ltmp133:
	mov	r9d, 3
	mov	r8d, r9d
	.cv_loc	28 1 215 0              # ..\tests\span_compile_only.cpp:215:0
	lea	rcx, [rsp + 80]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	r9, -1
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z"
	jmp	.LBB28_3
.Ltmp134:
.LBB28_2:
	.cv_loc	28 1 218 0              # ..\tests\span_compile_only.cpp:218:0
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	call	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
.LBB28_3:
	.cv_loc	28 1 219 0              # ..\tests\span_compile_only.cpp:219:0
	mov	rax, qword ptr [rsp + 96]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 56] # 8-byte Reload
	add	rsp, 104
	ret
.Ltmp135:
.Lfunc_end28:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "?mysubspan7@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?mysubspan7@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # -- Begin function ?mysubspan7@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z
	.p2align	4, 0x90
"?mysubspan7@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z": # @"?mysubspan7@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z"
.Lfunc_begin29:
	.cv_func_id 29
	.cv_loc	29 1 223 0              # ..\tests\span_compile_only.cpp:223:0
.seh_proc "?mysubspan7@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, rcx
	mov	r10, qword ptr [rip + __security_cookie]
	xor	r10, rsp
	mov	qword ptr [rsp + 112], r10
	mov	qword ptr [rsp + 88], r9
	mov	qword ptr [rsp + 80], r8
	mov	qword ptr [rsp + 72], rdx
.Ltmp136:
	.cv_loc	29 1 224 0              # ..\tests\span_compile_only.cpp:224:0
	cmp	qword ptr [rsp + 72], 0
	mov	qword ptr [rsp + 64], rax # 8-byte Spill
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	je	.LBB29_2
# %bb.1:
.Ltmp137:
	.cv_loc	29 1 226 0              # ..\tests\span_compile_only.cpp:226:0
	mov	rdx, qword ptr [rsp + 72]
	mov	r8, qword ptr [rsp + 80]
	lea	rcx, [rsp + 96]
.Ltmp138:
	#DEBUG_VALUE: s <- [$rcx+0]
	call	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
.Ltmp139:
	mov	r9d, 3
                                        # kill: def $r9 killed $r9d
	.cv_loc	29 1 227 0              # ..\tests\span_compile_only.cpp:227:0
	mov	r8, qword ptr [rsp + 88]
	lea	rcx, [rsp + 96]
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z"
	jmp	.LBB29_3
.Ltmp140:
.LBB29_2:
	.cv_loc	29 1 230 0              # ..\tests\span_compile_only.cpp:230:0
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	call	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
.LBB29_3:
	.cv_loc	29 1 231 0              # ..\tests\span_compile_only.cpp:231:0
	mov	rax, qword ptr [rsp + 112]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 64] # 8-byte Reload
	add	rsp, 120
	ret
.Ltmp141:
.Lfunc_end29:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "?mysubspan8@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?mysubspan8@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # -- Begin function ?mysubspan8@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z
	.p2align	4, 0x90
"?mysubspan8@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z": # @"?mysubspan8@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z"
.Lfunc_begin30:
	.cv_func_id 30
	.cv_loc	30 1 234 0              # ..\tests\span_compile_only.cpp:234:0
.seh_proc "?mysubspan8@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, rcx
	mov	r10, qword ptr [rip + __security_cookie]
	xor	r10, rsp
	mov	qword ptr [rsp + 112], r10
	mov	qword ptr [rsp + 88], r9
	mov	qword ptr [rsp + 80], r8
	mov	qword ptr [rsp + 72], rdx
.Ltmp142:
	.cv_loc	30 1 235 0              # ..\tests\span_compile_only.cpp:235:0
	cmp	qword ptr [rsp + 72], 0
	mov	qword ptr [rsp + 64], rax # 8-byte Spill
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	je	.LBB30_2
# %bb.1:
.Ltmp143:
	.cv_loc	30 1 237 0              # ..\tests\span_compile_only.cpp:237:0
	mov	rdx, qword ptr [rsp + 72]
	mov	r8, qword ptr [rsp + 80]
	lea	rcx, [rsp + 96]
.Ltmp144:
	#DEBUG_VALUE: s <- [$rcx+0]
	call	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
.Ltmp145:
	.cv_loc	30 1 238 0              # ..\tests\span_compile_only.cpp:238:0
	mov	rcx, qword ptr [rsp + 80]
	sub	rcx, qword ptr [rsp + 88]
	mov	r8, qword ptr [rsp + 88]
	lea	rdx, [rsp + 96]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	r9, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z"
	jmp	.LBB30_3
.Ltmp146:
.LBB30_2:
	.cv_loc	30 1 241 0              # ..\tests\span_compile_only.cpp:241:0
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	call	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
.LBB30_3:
	.cv_loc	30 1 242 0              # ..\tests\span_compile_only.cpp:242:0
	mov	rax, qword ptr [rsp + 112]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 64] # 8-byte Reload
	add	rsp, 120
	ret
.Ltmp147:
.Lfunc_end30:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "?mysubspan9@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?mysubspan9@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # -- Begin function ?mysubspan9@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z
	.p2align	4, 0x90
"?mysubspan9@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z": # @"?mysubspan9@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z"
.Lfunc_begin31:
	.cv_func_id 31
	.cv_loc	31 1 246 0              # ..\tests\span_compile_only.cpp:246:0
.seh_proc "?mysubspan9@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, rcx
	mov	r10, qword ptr [rip + __security_cookie]
	xor	r10, rsp
	mov	qword ptr [rsp + 112], r10
	mov	qword ptr [rsp + 88], r9
	mov	qword ptr [rsp + 80], r8
	mov	qword ptr [rsp + 72], rdx
.Ltmp148:
	.cv_loc	31 1 247 0              # ..\tests\span_compile_only.cpp:247:0
	cmp	qword ptr [rsp + 72], 0
	mov	qword ptr [rsp + 64], rax # 8-byte Spill
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	je	.LBB31_2
# %bb.1:
.Ltmp149:
	.cv_loc	31 1 249 0              # ..\tests\span_compile_only.cpp:249:0
	mov	rdx, qword ptr [rsp + 72]
	mov	r8, qword ptr [rsp + 80]
	lea	rcx, [rsp + 96]
.Ltmp150:
	#DEBUG_VALUE: s <- [$rcx+0]
	call	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
.Ltmp151:
	mov	r9d, 3
	mov	r8d, r9d
	.cv_loc	31 1 250 0              # ..\tests\span_compile_only.cpp:250:0
	mov	r9, qword ptr [rsp + 88]
	lea	rcx, [rsp + 96]
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z"
	jmp	.LBB31_3
.Ltmp152:
.LBB31_2:
	.cv_loc	31 1 253 0              # ..\tests\span_compile_only.cpp:253:0
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	call	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
.LBB31_3:
	.cv_loc	31 1 254 0              # ..\tests\span_compile_only.cpp:254:0
	mov	rax, qword ptr [rsp + 112]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 64] # 8-byte Reload
	add	rsp, 120
	ret
.Ltmp153:
.Lfunc_end31:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "?doterminate@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.globl	"?doterminate@@YAXXZ"   # -- Begin function ?doterminate@@YAXXZ
	.p2align	4, 0x90
"?doterminate@@YAXXZ":                  # @"?doterminate@@YAXXZ"
.Lfunc_begin32:
	.cv_func_id 32
	.cv_loc	32 1 305 0              # ..\tests\span_compile_only.cpp:305:0
.seh_proc "?doterminate@@YAXXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
.Ltmp154:
	.cv_loc	32 1 306 0              # ..\tests\span_compile_only.cpp:306:0
	mov	rax, qword ptr [rip + __imp_terminate]
	call	rax
	ud2
.Ltmp155:
.Lfunc_end32:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "?copy_span@@YAXV?$span@H$0?0@gsl@@0@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?copy_span@@YAXV?$span@H$0?0@gsl@@0@Z" # -- Begin function ?copy_span@@YAXV?$span@H$0?0@gsl@@0@Z
	.p2align	4, 0x90
"?copy_span@@YAXV?$span@H$0?0@gsl@@0@Z": # @"?copy_span@@YAXV?$span@H$0?0@gsl@@0@Z"
.Lfunc_begin33:
	.cv_func_id 33
	.cv_loc	33 1 312 0              # ..\tests\span_compile_only.cpp:312:0
.seh_proc "?copy_span@@YAXV?$span@H$0?0@gsl@@0@Z"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 112], rax
	#DEBUG_VALUE: copy_span:y <- [$rdx+0]
	#DEBUG_VALUE: copy_span:x <- [$rcx+0]
.Ltmp156:
	.cv_loc	33 1 313 0              # ..\tests\span_compile_only.cpp:313:0
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
.Ltmp157:
	#DEBUG_VALUE: copy_span:x <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
	mov	rcx, rdx
	lea	rdx, [rsp + 96]
.Ltmp158:
	call	"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	lea	rdx, [rsp + 80]
	call	"?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	lea	rdx, [rsp + 64]
	call	"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
	lea	rcx, [rsp + 48]
	lea	rdx, [rsp + 64]
	lea	r8, [rsp + 80]
	lea	r9, [rsp + 96]
	call	"??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z"
	mov	rax, qword ptr [rsp + 112]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	.cv_loc	33 1 314 0              # ..\tests\span_compile_only.cpp:314:0
	nop
	add	rsp, 120
.Ltmp159:
	ret
.Ltmp160:
.Lfunc_end33:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z"
	.globl	"??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z" # -- Begin function ??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z
	.p2align	4, 0x90
"??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z": # @"??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z"
.Lfunc_begin34:
	.cv_func_id 34
	.cv_file	3 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility" "A162BEAAC17F997B0C72AFDAD71F40D6" 1
	.cv_loc	34 3 2440 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2440:0
.seh_proc "??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, rcx
	mov	r10, qword ptr [rip + __security_cookie]
	xor	r10, rsp
	mov	qword ptr [rsp + 112], r10
	#DEBUG_VALUE: copy<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> >:_Dest <- [$r9+0]
	#DEBUG_VALUE: copy<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> >:_Last <- [$r8+0]
	#DEBUG_VALUE: copy<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> >:_First <- [$rdx+0]
.Ltmp161:
	.cv_loc	34 3 2441 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2441:0
	mov	qword ptr [rsp + 72], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	qword ptr [rsp + 64], rdx # 8-byte Spill
.Ltmp162:
	#DEBUG_VALUE: copy<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> >:_First <- [DW_OP_plus_uconst 64, DW_OP_deref] [$rsp+0]
	mov	rdx, r8
	mov	qword ptr [rsp + 56], rax # 8-byte Spill
	mov	qword ptr [rsp + 48], r9 # 8-byte Spill
.Ltmp163:
	#DEBUG_VALUE: copy<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> >:_Dest <- [DW_OP_plus_uconst 48, DW_OP_deref] [$rsp+0]
	mov	qword ptr [rsp + 40], r8 # 8-byte Spill
.Ltmp164:
	#DEBUG_VALUE: copy<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> >:_Last <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
	call	"??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z"
	.cv_loc	34 3 2442 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2442:0
	mov	rcx, qword ptr [rsp + 64] # 8-byte Reload
	call	"??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z"
	mov	qword ptr [rsp + 104], rax
	.cv_loc	34 3 2443 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2443:0
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	call	"??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z"
	mov	qword ptr [rsp + 96], rax
	.cv_loc	34 3 2444 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2444:0
	lea	rcx, [rsp + 104]
	lea	rdx, [rsp + 96]
	call	"??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z"
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	rdx, rax
	call	"??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z"
	mov	qword ptr [rsp + 80], rax
	.cv_loc	34 3 2445 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2445:0
	mov	r8, qword ptr [rsp + 80]
	mov	rdx, qword ptr [rsp + 96]
	mov	rcx, qword ptr [rsp + 104]
	call	"??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z"
	mov	qword ptr [rsp + 88], rax
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	lea	rdx, [rsp + 88]
	call	"??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z"
	.cv_loc	34 3 2446 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2446:0
	mov	rax, qword ptr [rsp + 48] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	mov	rdx, qword ptr [rsp + 72] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	rcx, qword ptr [rax + 8]
	mov	qword ptr [rdx + 8], rcx
	mov	rcx, qword ptr [rsp + 112]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 56] # 8-byte Reload
	add	rsp, 120
.Ltmp165:
	ret
.Ltmp166:
.Lfunc_end34:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?gsl_copy_span@@YAXV?$span@H$0?0@gsl@@0@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?gsl_copy_span@@YAXV?$span@H$0?0@gsl@@0@Z" # -- Begin function ?gsl_copy_span@@YAXV?$span@H$0?0@gsl@@0@Z
	.p2align	4, 0x90
"?gsl_copy_span@@YAXV?$span@H$0?0@gsl@@0@Z": # @"?gsl_copy_span@@YAXV?$span@H$0?0@gsl@@0@Z"
.Lfunc_begin35:
	.cv_func_id 35
	.cv_loc	35 1 317 0              # ..\tests\span_compile_only.cpp:317:0
.seh_proc "?gsl_copy_span@@YAXV?$span@H$0?0@gsl@@0@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	#DEBUG_VALUE: gsl_copy_span:y <- [$rdx+0]
	#DEBUG_VALUE: gsl_copy_span:x <- [$rcx+0]
.Ltmp167:
	.cv_loc	35 1 318 0              # ..\tests\span_compile_only.cpp:318:0
	mov	rax, qword ptr [rdx]
	mov	qword ptr [rsp + 48], rax
	mov	rax, qword ptr [rdx + 8]
	mov	qword ptr [rsp + 56], rax
	mov	rax, qword ptr [rcx]
	mov	qword ptr [rsp + 32], rax
	mov	rax, qword ptr [rcx + 8]
	mov	qword ptr [rsp + 40], rax
	lea	rcx, [rsp + 32]
.Ltmp168:
	lea	rdx, [rsp + 48]
.Ltmp169:
	call	"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z"
	mov	rax, qword ptr [rsp + 64]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	.cv_loc	35 1 319 0              # ..\tests\span_compile_only.cpp:319:0
	nop
	add	rsp, 72
	ret
.Ltmp170:
.Lfunc_end35:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z"
	.globl	"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z" # -- Begin function ??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z
	.p2align	4, 0x90
"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z": # @"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z"
.Lfunc_begin36:
	.cv_func_id 36
	.cv_file	4 "C:\\projects\\gsl\\include\\gsl\\gsl_algorithm" "9A2A4E79F74472CC2EEC5F230C3B6DE5" 1
	.cv_loc	36 4 43 0               # ..\include\gsl/gsl_algorithm:43:0
.seh_proc "??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 144
	.seh_stackalloc 144
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
.Ltmp173:
	.cv_loc	36 4 50 0               # ..\include\gsl/gsl_algorithm:50:0
	mov	qword ptr [rbp + 8], -2
	#DEBUG_VALUE: copy<int,-1,int,-1>:dest <- [$rdx+0]
	#DEBUG_VALUE: copy<int,-1,int,-1>:src <- [$rcx+0]
	mov	qword ptr [rbp - 32], rcx # 8-byte Spill
.Ltmp174:
	#DEBUG_VALUE: copy<int,-1,int,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	rcx, rdx
	mov	qword ptr [rbp - 40], rdx # 8-byte Spill
.Ltmp175:
	#DEBUG_VALUE: copy<int,-1,int,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 48] # 8-byte Reload
	cmp	rcx, rax
	setge	r8b
	mov	byte ptr [rbp - 17], 0
	test	r8b, 1
	jne	.LBB36_1
	jmp	.LBB36_2
.Ltmp176:
.LBB36_1:
	#DEBUG_VALUE: copy<int,-1,int,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: copy<int,-1,int,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	test	byte ptr [rbp - 17], 1
	jne	.LBB36_4
	jmp	.LBB36_5
.Ltmp177:
.LBB36_2:
	#DEBUG_VALUE: copy<int,-1,int,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: copy<int,-1,int,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	lea	rdx, [rip + "??_C@_0DO@ODIBPFEH@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 16]
	mov	rcx, rax
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 17], 1
.Ltmp171:
	mov	rcx, qword ptr [rbp - 56] # 8-byte Reload
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp172:
	jmp	.LBB36_3
.Ltmp178:
.LBB36_3:
	#DEBUG_VALUE: copy<int,-1,int,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: copy<int,-1,int,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	ud2
.Ltmp179:
.LBB36_4:
	#DEBUG_VALUE: copy<int,-1,int,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: copy<int,-1,int,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	lea	rcx, [rbp - 16]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp180:
.LBB36_5:
	#DEBUG_VALUE: copy<int,-1,int,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: copy<int,-1,int,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	.cv_loc	36 4 52 0               # ..\include\gsl/gsl_algorithm:52:0
	mov	rcx, qword ptr [rbp - 40] # 8-byte Reload
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	mov	rcx, rax
	mov	rdx, qword ptr [rbp - 80] # 8-byte Reload
	mov	r8, qword ptr [rbp - 72] # 8-byte Reload
	call	"??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z"
	.cv_loc	36 4 53 0               # ..\include\gsl/gsl_algorithm:53:0
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	add	rsp, 144
	pop	rbp
.Ltmp181:
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z")@IMGREL
	.section	.text,"xr",discard,"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z@4HA":
.seh_proc "?dtor$6@?0???$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z@4HA"
.LBB36_6:
.Ltmp182:
	#DEBUG_VALUE: copy<int,-1,int,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: copy<int,-1,int,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
.Ltmp183:
	.seh_endprologue
	.cv_loc	36 4 50 0               # ..\include\gsl/gsl_algorithm:50:0
	test	byte ptr [rbp - 17], 1
	jne	.LBB36_7
	jmp	.LBB36_8
.LBB36_7:
	lea	rcx, [rbp - 16]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB36_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp184:
.Lfunc_end36:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z"
	.p2align	2
"$cppxdata$??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z")@IMGREL # IPToStateXData
	.long	136                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z@4HA"@IMGREL # Action
"$ip2state$??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z":
	.long	.Lfunc_begin36@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp171@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp172@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z"
                                        # -- End function
	.def	 "?test_string_std_copy@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?test_string_std_copy@@YAXXZ" # -- Begin function ?test_string_std_copy@@YAXXZ
	.p2align	4, 0x90
"?test_string_std_copy@@YAXXZ":         # @"?test_string_std_copy@@YAXXZ"
.Lfunc_begin37:
	.cv_func_id 37
	.cv_loc	37 1 322 0              # ..\tests\span_compile_only.cpp:322:0
.seh_proc "?test_string_std_copy@@YAXXZ"
# %bb.0:
	sub	rsp, 200
	.seh_stackalloc 200
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 192], rax
.Ltmp185:
	.cv_loc	37 1 324 0              # ..\tests\span_compile_only.cpp:324:0
	lea	rcx, [rsp + 160]
.Ltmp186:
	#DEBUG_VALUE: test_string_std_copy:byteSpan <- [$rcx+0]
	lea	rdx, [rsp + 182]
.Ltmp187:
	#DEBUG_VALUE: test_string_std_copy:bytes <- [$rdx+0]
	call	"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z"
.Ltmp188:
	.cv_loc	37 1 326 0              # ..\tests\span_compile_only.cpp:326:0
	lea	rcx, [rsp + 128]
	lea	rdx, [rip + "??_C@_0L@CCAJJBND@iVtrau?5lDC?$AA@"]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z"
	lea	rcx, [rsp + 144]
	lea	rdx, [rsp + 128]
	call	"??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z"
	.cv_loc	37 1 327 0              # ..\tests\span_compile_only.cpp:327:0
	lea	rcx, [rsp + 160]
	lea	rdx, [rsp + 112]
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	"?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ"
	lea	rcx, [rsp + 144]
	lea	rdx, [rsp + 96]
	call	"?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	lea	rcx, [rsp + 144]
	lea	rdx, [rsp + 80]
	call	"?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	lea	rcx, [rsp + 64]
	lea	rdx, [rsp + 80]
	lea	r8, [rsp + 96]
	lea	r9, [rsp + 112]
	call	"??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z"
	.cv_loc	37 1 329 0              # ..\tests\span_compile_only.cpp:329:0
	mov	rax, qword ptr [rsp + 160]
	mov	qword ptr [rsp + 48], rax
	mov	rax, qword ptr [rsp + 168]
	mov	qword ptr [rsp + 56], rax
	lea	rcx, [rsp + 48]
	call	"?bar@@YAXV?$span@E$0?0@gsl@@@Z"
	mov	rax, qword ptr [rsp + 192]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	.cv_loc	37 1 330 0              # ..\tests\span_compile_only.cpp:330:0
	nop
	add	rsp, 200
	ret
.Ltmp189:
.Lfunc_end37:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z"
	.globl	"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z" # -- Begin function ??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z
	.p2align	4, 0x90
"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z": # @"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z"
.Lfunc_begin38:
	.cv_func_id 38
	.cv_loc	38 2 395 0              # ..\include\gsl/span:395:0
.seh_proc "??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 96
	.seh_stackalloc 96
	lea	rbp, [rsp + 96]
	.seh_setframe 5, 96
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rdx
	mov	qword ptr [rbp - 24], rcx
	mov	rcx, qword ptr [rbp - 24]
	lea	rdx, [rbp - 32]
.Ltmp192:
	mov	qword ptr [rbp - 48], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"??0?$extent_type@$09@details@gsl@@QEAA@XZ"
	mov	rcx, qword ptr [rbp - 16]
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??$addressof@E@std@@YAPEAEAEAE@Z"
	mov	qword ptr [rbp - 40], rax
	mov	rdx, qword ptr [rbp - 40]
	mov	r8b, byte ptr [rbp - 32]
.Ltmp190:
	mov	rcx, qword ptr [rbp - 48] # 8-byte Reload
	call	"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z"
.Ltmp191:
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	jmp	.LBB38_1
.LBB38_1:
	mov	rax, qword ptr [rbp - 48] # 8-byte Reload
	add	rsp, 96
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z@4HA":
.seh_proc "?dtor$2@?0???$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z@4HA"
.LBB38_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp193:
.Lfunc_end38:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z"
	.p2align	2
"$cppxdata$??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z")@IMGREL # IPToStateXData
	.long	88                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z@4HA"@IMGREL # Action
"$ip2state$??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z":
	.long	.Lfunc_begin38@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp190@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp191@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z"
                                        # -- End function
	.def	 "??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z"
	.globl	"??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z" # -- Begin function ??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z
	.p2align	4, 0x90
"??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z": # @"??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z"
.Lfunc_begin39:
	.cv_func_id 39
	.cv_file	5 "C:\\projects\\gsl\\include\\gsl\\string_span" "62D838D95BE053005398EA9C3E1D4E52" 1
	.cv_loc	39 5 139 0              # ..\include\gsl/string_span:139:0
.seh_proc "??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, rcx
	mov	r8, qword ptr [rip + __security_cookie]
	xor	r8, rsp
	mov	qword ptr [rsp + 80], r8
	mov	qword ptr [rsp + 56], rdx
.Ltmp194:
	.cv_loc	39 5 140 0              # ..\include\gsl/string_span:140:0
	mov	qword ptr [rsp + 72], 11
	lea	rdx, [rsp + 72]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z"
	mov	rcx, qword ptr [rsp + 56]
	mov	qword ptr [rsp + 64], rcx
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	lea	rdx, [rsp + 64]
	mov	r8, rax
	call	"??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z"
	mov	rax, qword ptr [rsp + 80]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 88
	ret
.Ltmp195:
.Lfunc_end39:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z"
	.globl	"??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z" # -- Begin function ??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z
	.p2align	4, 0x90
"??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z": # @"??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z"
.Lfunc_begin40:
	.cv_func_id 40
	.cv_loc	40 5 244 0              # ..\include\gsl/string_span:244:0
.seh_proc "??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp196:
	mov	rdx, qword ptr [rsp + 8]
	mov	rax, qword ptr [rdx]
	mov	qword ptr [rcx], rax
	mov	rax, qword ptr [rdx + 8]
	mov	qword ptr [rcx + 8], rax
	mov	rax, rcx
	add	rsp, 16
	ret
.Ltmp197:
.Lfunc_end40:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z"
	.globl	"??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z" # -- Begin function ??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z
	.p2align	4, 0x90
"??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z": # @"??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z"
.Lfunc_begin41:
	.cv_func_id 41
	.cv_loc	41 3 2440 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2440:0
.seh_proc "??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, rcx
	mov	r10, qword ptr [rip + __security_cookie]
	xor	r10, rsp
	mov	qword ptr [rsp + 112], r10
	#DEBUG_VALUE: copy<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> >:_Dest <- [$r9+0]
	#DEBUG_VALUE: copy<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> >:_Last <- [$r8+0]
	#DEBUG_VALUE: copy<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> >:_First <- [$rdx+0]
.Ltmp198:
	.cv_loc	41 3 2441 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2441:0
	mov	qword ptr [rsp + 72], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	qword ptr [rsp + 64], rdx # 8-byte Spill
.Ltmp199:
	#DEBUG_VALUE: copy<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> >:_First <- [DW_OP_plus_uconst 64, DW_OP_deref] [$rsp+0]
	mov	rdx, r8
	mov	qword ptr [rsp + 56], rax # 8-byte Spill
	mov	qword ptr [rsp + 48], r9 # 8-byte Spill
.Ltmp200:
	#DEBUG_VALUE: copy<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> >:_Dest <- [DW_OP_plus_uconst 48, DW_OP_deref] [$rsp+0]
	mov	qword ptr [rsp + 40], r8 # 8-byte Spill
.Ltmp201:
	#DEBUG_VALUE: copy<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> >:_Last <- [DW_OP_plus_uconst 40, DW_OP_deref] [$rsp+0]
	call	"??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z"
	.cv_loc	41 3 2442 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2442:0
	mov	rcx, qword ptr [rsp + 64] # 8-byte Reload
	call	"??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z"
	mov	qword ptr [rsp + 104], rax
	.cv_loc	41 3 2443 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2443:0
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	call	"??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z"
	mov	qword ptr [rsp + 96], rax
	.cv_loc	41 3 2444 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2444:0
	lea	rcx, [rsp + 104]
	lea	rdx, [rsp + 96]
	call	"??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z"
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	rdx, rax
	call	"??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z"
	mov	qword ptr [rsp + 80], rax
	.cv_loc	41 3 2445 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2445:0
	mov	r8, qword ptr [rsp + 80]
	mov	rdx, qword ptr [rsp + 96]
	mov	rcx, qword ptr [rsp + 104]
	call	"??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
	mov	qword ptr [rsp + 88], rax
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	lea	rdx, [rsp + 88]
	call	"??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z"
	.cv_loc	41 3 2446 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2446:0
	mov	rax, qword ptr [rsp + 48] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	mov	rdx, qword ptr [rsp + 72] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	rcx, qword ptr [rax + 8]
	mov	qword ptr [rdx + 8], rcx
	mov	rcx, qword ptr [rsp + 112]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 56] # 8-byte Reload
	add	rsp, 120
.Ltmp202:
	ret
.Ltmp203:
.Lfunc_end41:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ"
	.globl	"?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ" # -- Begin function ?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ
	.p2align	4, 0x90
"?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ": # @"?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ"
.Lfunc_begin42:
	.cv_func_id 42
	.cv_loc	42 2 518 0              # ..\include\gsl/span:518:0
.seh_proc "?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, rdx
	xor	r8d, r8d
                                        # kill: def $r8 killed $r8d
	mov	qword ptr [rsp + 64], rcx
	mov	rcx, qword ptr [rsp + 64]
.Ltmp204:
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z"
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 72
	ret
.Ltmp205:
.Lfunc_end42:
	.seh_handlerdata
	.section	.text,"xr",discard,"?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	.globl	"?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # -- Begin function ?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ
	.p2align	4, 0x90
"?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ": # @"?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
.Lfunc_begin43:
	.cv_func_id 43
	.cv_loc	43 5 301 0              # ..\include\gsl/string_span:301:0
.seh_proc "?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	rax, rdx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp206:
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 56
	ret
.Ltmp207:
.Lfunc_end43:
	.seh_handlerdata
	.section	.text,"xr",discard,"?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	.globl	"?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # -- Begin function ?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ
	.p2align	4, 0x90
"?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ": # @"?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
.Lfunc_begin44:
	.cv_func_id 44
	.cv_loc	44 5 300 0              # ..\include\gsl/string_span:300:0
.seh_proc "?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	rax, rdx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp208:
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 56
	ret
.Ltmp209:
.Lfunc_end44:
	.seh_handlerdata
	.section	.text,"xr",discard,"?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?test_string_gsl_copy@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?test_string_gsl_copy@@YAXXZ" # -- Begin function ?test_string_gsl_copy@@YAXXZ
	.p2align	4, 0x90
"?test_string_gsl_copy@@YAXXZ":         # @"?test_string_gsl_copy@@YAXXZ"
.Lfunc_begin45:
	.cv_func_id 45
	.cv_loc	45 1 333 0              # ..\tests\span_compile_only.cpp:333:0
.seh_proc "?test_string_gsl_copy@@YAXXZ"
# %bb.0:
	sub	rsp, 184
	.seh_stackalloc 184
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 176], rax
.Ltmp210:
	.cv_loc	45 1 335 0              # ..\tests\span_compile_only.cpp:335:0
	lea	rcx, [rsp + 144]
.Ltmp211:
	#DEBUG_VALUE: test_string_gsl_copy:byteSpan <- [$rcx+0]
	lea	rdx, [rsp + 166]
.Ltmp212:
	#DEBUG_VALUE: test_string_gsl_copy:bytes <- [$rdx+0]
	call	"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z"
.Ltmp213:
	.cv_loc	45 1 337 0              # ..\tests\span_compile_only.cpp:337:0
	lea	rcx, [rsp + 112]
	lea	rdx, [rip + "??_C@_0L@CCAJJBND@iVtrau?5lDC?$AA@"]
	mov	qword ptr [rsp + 56], rax # 8-byte Spill
	call	"??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z"
	lea	rcx, [rsp + 128]
	lea	rdx, [rsp + 112]
	call	"??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z"
	.cv_loc	45 1 338 0              # ..\tests\span_compile_only.cpp:338:0
	mov	rcx, qword ptr [rsp + 144]
	mov	qword ptr [rsp + 96], rcx
	mov	rcx, qword ptr [rsp + 152]
	mov	qword ptr [rsp + 104], rcx
	lea	rcx, [rsp + 80]
	lea	rdx, [rsp + 128]
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z"
	lea	rcx, [rsp + 80]
	lea	rdx, [rsp + 96]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z"
	.cv_loc	45 1 340 0              # ..\tests\span_compile_only.cpp:340:0
	mov	rax, qword ptr [rsp + 144]
	mov	qword ptr [rsp + 64], rax
	mov	rax, qword ptr [rsp + 152]
	mov	qword ptr [rsp + 72], rax
	lea	rcx, [rsp + 64]
	call	"?bar@@YAXV?$span@E$0?0@gsl@@@Z"
	mov	rax, qword ptr [rsp + 176]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	.cv_loc	45 1 341 0              # ..\tests\span_compile_only.cpp:341:0
	nop
	add	rsp, 184
	ret
.Ltmp214:
.Lfunc_end45:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z"
	.globl	"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z" # -- Begin function ??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z
	.p2align	4, 0x90
"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z": # @"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z"
.Lfunc_begin46:
	.cv_func_id 46
	.cv_loc	46 4 43 0               # ..\include\gsl/gsl_algorithm:43:0
.seh_proc "??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 144
	.seh_stackalloc 144
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
.Ltmp217:
	.cv_loc	46 4 50 0               # ..\include\gsl/gsl_algorithm:50:0
	mov	qword ptr [rbp + 8], -2
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:dest <- [$rdx+0]
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:src <- [$rcx+0]
	mov	qword ptr [rbp - 32], rcx # 8-byte Spill
.Ltmp218:
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	rcx, rdx
	mov	qword ptr [rbp - 40], rdx # 8-byte Spill
.Ltmp219:
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	call	"?size@?$span@E$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	call	"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 48] # 8-byte Reload
	cmp	rcx, rax
	setge	r8b
	mov	byte ptr [rbp - 17], 0
	test	r8b, 1
	jne	.LBB46_1
	jmp	.LBB46_2
.Ltmp220:
.LBB46_1:
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	test	byte ptr [rbp - 17], 1
	jne	.LBB46_4
	jmp	.LBB46_5
.Ltmp221:
.LBB46_2:
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	lea	rdx, [rip + "??_C@_0DO@ODIBPFEH@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 16]
	mov	rcx, rax
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 17], 1
.Ltmp215:
	mov	rcx, qword ptr [rbp - 56] # 8-byte Reload
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp216:
	jmp	.LBB46_3
.Ltmp222:
.LBB46_3:
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	ud2
.Ltmp223:
.LBB46_4:
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	lea	rcx, [rbp - 16]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp224:
.LBB46_5:
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	.cv_loc	46 4 52 0               # ..\include\gsl/gsl_algorithm:52:0
	mov	rcx, qword ptr [rbp - 40] # 8-byte Reload
	call	"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ"
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	mov	rcx, rax
	mov	rdx, qword ptr [rbp - 80] # 8-byte Reload
	mov	r8, qword ptr [rbp - 72] # 8-byte Reload
	call	"??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z"
	.cv_loc	46 4 53 0               # ..\include\gsl/gsl_algorithm:53:0
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	add	rsp, 144
	pop	rbp
.Ltmp225:
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z")@IMGREL
	.section	.text,"xr",discard,"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z@4HA":
.seh_proc "?dtor$6@?0???$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z@4HA"
.LBB46_6:
.Ltmp226:
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:dest <- [DW_OP_constu 40, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: copy<const char,-1,unsigned char,-1>:src <- [DW_OP_constu 32, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
.Ltmp227:
	.seh_endprologue
	.cv_loc	46 4 50 0               # ..\include\gsl/gsl_algorithm:50:0
	test	byte ptr [rbp - 17], 1
	jne	.LBB46_7
	jmp	.LBB46_8
.LBB46_7:
	lea	rcx, [rbp - 16]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB46_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp228:
.Lfunc_end46:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z"
	.p2align	2
"$cppxdata$??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z")@IMGREL # IPToStateXData
	.long	136                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z@4HA"@IMGREL # Action
"$ip2state$??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z":
	.long	.Lfunc_begin46@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp215@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp216@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z"
                                        # -- End function
	.def	 "??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z"
	.globl	"??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z" # -- Begin function ??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z
	.p2align	4, 0x90
"??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z": # @"??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z"
.Lfunc_begin47:
	.cv_func_id 47
	.cv_loc	47 2 428 0              # ..\include\gsl/span:428:0
.seh_proc "??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp229:
	mov	rdx, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ"
	mov	rcx, rax
	call	"??$narrow@_J_J@gsl@@YA_J_J@Z"
	mov	rcx, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	rdx, rax
	mov	r8, qword ptr [rsp + 40] # 8-byte Reload
	call	"??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 72
	ret
.Ltmp230:
.Lfunc_end47:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z"
	.globl	"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z" # -- Begin function ?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z
	.p2align	4, 0x90
"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z": # @"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z"
.Lfunc_begin48:
	.cv_func_id 48
	.cv_loc	48 2 548 0              # ..\include\gsl/span:548:0
.seh_proc "?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
.Ltmp231:
	.cv_loc	48 2 565 0              # ..\include\gsl/span:565:0
	lea	rcx, [rsp + 48]
	#DEBUG_VALUE: CheckRange:idx <- [$rcx+0]
	call	"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
.Ltmp232:
	lea	rcx, [rsp + 56]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	cmp	rcx, rax
	setb	r8b
	and	r8b, 1
	movzx	eax, r8b
	mov	rdx, qword ptr [rsp + 64]
	xor	rdx, rsp
	mov	rcx, rdx
	mov	dword ptr [rsp + 36], eax # 4-byte Spill
	call	__security_check_cookie
	mov	eax, dword ptr [rsp + 36] # 4-byte Reload
	add	rsp, 72
	ret
.Ltmp233:
.Lfunc_end48:
	.seh_handlerdata
	.section	.text,"xr",discard,"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	.globl	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ" # -- Begin function ?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ": # @"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
.Lfunc_begin49:
	.cv_func_id 49
	.cv_loc	49 2 338 0              # ..\include\gsl/span:338:0
.seh_proc "?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp234:
	mov	rax, qword ptr [rcx]
	pop	rcx
	ret
.Ltmp235:
.Lfunc_end49:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
	.globl	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z" # -- Begin function ??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z
	.p2align	4, 0x90
"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z": # @"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Lfunc_begin50:
	.cv_func_id 50
	.cv_file	6 "C:\\projects\\gsl\\include\\gsl\\gsl_assert" "DC2D278DC08DD14FC7E736FCD7722B8E" 1
	.cv_loc	50 6 143 0              # ..\include\gsl/gsl_assert:143:0
.seh_proc "??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	qword ptr [rsp + 80], rcx
.Ltmp236:
	.cv_loc	50 6 144 0              # ..\include\gsl/gsl_assert:144:0
	mov	rcx, qword ptr [rsp + 80]
	call	"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
	lea	rcx, [rsp + 56]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rdx, rax
	call	"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
	lea	rdx, [rip + "_TI3?AUfail_fast@gsl@@"]
	mov	rcx, qword ptr [rip + __imp__CxxThrowException]
	mov	r8, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, r8
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	r9
	ud2
.Ltmp237:
.Lfunc_end50:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0fail_fast@gsl@@QEAA@QEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@QEBD@Z"
	.globl	"??0fail_fast@gsl@@QEAA@QEBD@Z" # -- Begin function ??0fail_fast@gsl@@QEAA@QEBD@Z
	.p2align	4, 0x90
"??0fail_fast@gsl@@QEAA@QEBD@Z":        # @"??0fail_fast@gsl@@QEAA@QEBD@Z"
.Lfunc_begin51:
	.cv_func_id 51
	.cv_loc	51 6 99 0               # ..\include\gsl/gsl_assert:99:0
.seh_proc "??0fail_fast@gsl@@QEAA@QEBD@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp238:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0logic_error@std@@QEAA@PEBD@Z"
	lea	rcx, [rip + "??_7fail_fast@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp239:
.Lfunc_end51:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@QEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1fail_fast@gsl@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1fail_fast@gsl@@UEAA@XZ"
	.globl	"??1fail_fast@gsl@@UEAA@XZ" # -- Begin function ??1fail_fast@gsl@@UEAA@XZ
	.p2align	4, 0x90
"??1fail_fast@gsl@@UEAA@XZ":            # @"??1fail_fast@gsl@@UEAA@XZ"
.Lfunc_begin52:
	.cv_func_id 52
	.cv_loc	52 6 97 0               # ..\include\gsl/gsl_assert:97:0
.seh_proc "??1fail_fast@gsl@@UEAA@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp240:
	.cv_loc	52 6 97 0               # ..\include\gsl/gsl_assert:97:0
	call	"??1logic_error@std@@UEAA@XZ"
.Ltmp241:
	.cv_loc	52 6 97 0               # ..\include\gsl/gsl_assert:97:0
	nop
	add	rsp, 40
	ret
.Ltmp242:
.Lfunc_end52:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1fail_fast@gsl@@UEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$span@H$0?0@gsl@@QEBAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.globl	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ" # -- Begin function ?data@?$span@H$0?0@gsl@@QEBAPEAHXZ
	.p2align	4, 0x90
"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ":   # @"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
.Lfunc_begin53:
	.cv_func_id 53
	.cv_loc	53 2 515 0              # ..\include\gsl/span:515:0
.seh_proc "?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp243:
	call	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	nop
	add	rsp, 40
	ret
.Ltmp244:
.Lfunc_end53:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
	.globl	"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z" # -- Begin function ??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z
	.p2align	4, 0x90
"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z": # @"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
.Lfunc_begin54:
	.cv_func_id 54
	.cv_file	7 "C:\\projects\\gsl\\include\\gsl\\gsl_util" "9954522A071AE96641C34E4C32052141" 1
	.cv_loc	54 7 99 0               # ..\include\gsl/gsl_util:99:0
.seh_proc "??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
.Ltmp245:
	.cv_loc	54 7 100 0              # ..\include\gsl/gsl_util:100:0
	mov	rcx, qword ptr [rsp + 32]
	call	"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
	mov	rax, qword ptr [rax]
	add	rsp, 40
	ret
.Ltmp246:
.Lfunc_end54:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$forward@AEA_J@std@@YAAEA_JAEA_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
	.globl	"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z" # -- Begin function ??$forward@AEA_J@std@@YAAEA_JAEA_J@Z
	.p2align	4, 0x90
"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z": # @"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
.Lfunc_begin55:
	.cv_func_id 55
	.cv_file	8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits" "31392DB14D6313D8182AD771AA06F210" 1
	.cv_loc	55 8 1573 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1573:0
.seh_proc "??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp247:
	.cv_loc	55 8 1574 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1574:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp248:
.Lfunc_end55:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
	.globl	"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z" # -- Begin function ??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z
	.p2align	4, 0x90
"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z": # @"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
.Lfunc_begin56:
	.cv_func_id 56
	.cv_loc	56 8 1573 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1573:0
.seh_proc "??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp249:
	.cv_loc	56 8 1574 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1574:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp250:
.Lfunc_end56:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0fail_fast@gsl@@QEAA@$$QEAU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
	.globl	"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z" # -- Begin function ??0fail_fast@gsl@@QEAA@$$QEAU01@@Z
	.p2align	4, 0x90
"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z":   # @"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
.Lfunc_begin57:
	.cv_func_id 57
	.cv_loc	57 6 97 0               # ..\include\gsl/gsl_assert:97:0
.seh_proc "??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp251:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0logic_error@std@@QEAA@$$QEAV01@@Z"
	lea	rcx, [rip + "??_7fail_fast@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp252:
.Lfunc_end57:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0fail_fast@gsl@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@AEBU01@@Z"
	.globl	"??0fail_fast@gsl@@QEAA@AEBU01@@Z" # -- Begin function ??0fail_fast@gsl@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0fail_fast@gsl@@QEAA@AEBU01@@Z":     # @"??0fail_fast@gsl@@QEAA@AEBU01@@Z"
.Lfunc_begin58:
	.cv_func_id 58
	.cv_loc	58 6 97 0               # ..\include\gsl/gsl_assert:97:0
.seh_proc "??0fail_fast@gsl@@QEAA@AEBU01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp253:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0logic_error@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7fail_fast@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp254:
.Lfunc_end58:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@AEBU01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0logic_error@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.globl	"??0logic_error@std@@QEAA@AEBV01@@Z" # -- Begin function ??0logic_error@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0logic_error@std@@QEAA@AEBV01@@Z":   # @"??0logic_error@std@@QEAA@AEBV01@@Z"
.Lfunc_begin59:
	.cv_func_id 59
	.cv_file	9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept" "2FE06AF7EACFB232C6FF033DBFC4412E" 1
	.cv_loc	59 9 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
.seh_proc "??0logic_error@std@@QEAA@AEBV01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp255:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7logic_error@std@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp256:
.Lfunc_end59:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0exception@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
	.globl	"??0exception@std@@QEAA@AEBV01@@Z" # -- Begin function ??0exception@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0exception@std@@QEAA@AEBV01@@Z":     # @"??0exception@std@@QEAA@AEBV01@@Z"
.Lfunc_begin60:
	.cv_func_id 60
	.cv_file	10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h" "6C163BAA92D5C81892AD5480D109CCEE" 1
	.cv_loc	60 10 68 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:68:0
.seh_proc "??0exception@std@@QEAA@AEBV01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	xor	eax, eax
	mov	r8d, 16
                                        # kill: def $r8 killed $r8d
	lea	r9, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp257:
	mov	qword ptr [rcx], r9
	mov	rdx, rcx
	add	rdx, 8
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	edx, eax
	call	memset
.Ltmp258:
	.cv_loc	60 10 69 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:69:0
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	add	rcx, 8
	mov	r8, qword ptr [rsp + 64]
	add	r8, 8
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, r8
	mov	rdx, qword ptr [rsp + 40] # 8-byte Reload
	call	__std_exception_copy
.Ltmp259:
	.cv_loc	60 10 70 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:70:0
	mov	rax, qword ptr [rsp + 48] # 8-byte Reload
	add	rsp, 72
	ret
.Ltmp260:
.Lfunc_end60:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0logic_error@std@@QEAA@$$QEAV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@$$QEAV01@@Z"
	.globl	"??0logic_error@std@@QEAA@$$QEAV01@@Z" # -- Begin function ??0logic_error@std@@QEAA@$$QEAV01@@Z
	.p2align	4, 0x90
"??0logic_error@std@@QEAA@$$QEAV01@@Z": # @"??0logic_error@std@@QEAA@$$QEAV01@@Z"
.Lfunc_begin61:
	.cv_func_id 61
	.cv_loc	61 9 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
.seh_proc "??0logic_error@std@@QEAA@$$QEAV01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp261:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7logic_error@std@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp262:
.Lfunc_end61:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@$$QEAV01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??_Gfail_fast@gsl@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
	.globl	"??_Gfail_fast@gsl@@UEAAPEAXI@Z" # -- Begin function ??_Gfail_fast@gsl@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gfail_fast@gsl@@UEAAPEAXI@Z":       # @"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
.Lfunc_begin62:
	.cv_func_id 62
	.cv_loc	62 6 97 0               # ..\include\gsl/gsl_assert:97:0
.seh_proc "??_Gfail_fast@gsl@@UEAAPEAXI@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	dword ptr [rsp + 60], edx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
	mov	rax, rcx
	mov	qword ptr [rsp + 64], rax
	mov	edx, dword ptr [rsp + 60]
.Ltmp263:
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	dword ptr [rsp + 36], edx # 4-byte Spill
	call	"??1fail_fast@gsl@@UEAA@XZ"
	mov	edx, dword ptr [rsp + 36] # 4-byte Reload
	cmp	edx, 0
	je	.LBB62_2
# %bb.1:
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	mov	rcx, rax
	call	"??3@YAXPEAX@Z"
.LBB62_2:
	mov	rax, qword ptr [rsp + 64]
	add	rsp, 72
	ret
.Ltmp264:
.Lfunc_end62:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?what@exception@std@@UEBAPEBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?what@exception@std@@UEBAPEBDXZ"
	.globl	"?what@exception@std@@UEBAPEBDXZ" # -- Begin function ?what@exception@std@@UEBAPEBDXZ
	.p2align	4, 0x90
"?what@exception@std@@UEBAPEBDXZ":      # @"?what@exception@std@@UEBAPEBDXZ"
.Lfunc_begin63:
	.cv_func_id 63
	.cv_loc	63 10 90 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:90:0
.seh_proc "?what@exception@std@@UEBAPEBDXZ"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	qword ptr [rsp + 16], rcx
	mov	rcx, qword ptr [rsp + 16]
.Ltmp265:
	.cv_loc	63 10 91 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:91:0
	cmp	qword ptr [rcx + 8], 0
	mov	qword ptr [rsp + 8], rcx # 8-byte Spill
	je	.LBB63_2
# %bb.1:
	mov	rax, qword ptr [rsp + 8] # 8-byte Reload
	mov	rcx, qword ptr [rax + 8]
	mov	qword ptr [rsp], rcx    # 8-byte Spill
	jmp	.LBB63_3
.LBB63_2:
	lea	rax, [rip + "??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"]
	mov	qword ptr [rsp], rax    # 8-byte Spill
	jmp	.LBB63_3
.LBB63_3:
	mov	rax, qword ptr [rsp]    # 8-byte Reload
	add	rsp, 24
	ret
.Ltmp266:
.Lfunc_end63:
	.seh_handlerdata
	.section	.text,"xr",discard,"?what@exception@std@@UEBAPEBDXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_Glogic_error@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.globl	"??_Glogic_error@std@@UEAAPEAXI@Z" # -- Begin function ??_Glogic_error@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Glogic_error@std@@UEAAPEAXI@Z":     # @"??_Glogic_error@std@@UEAAPEAXI@Z"
.Lfunc_begin64:
	.cv_func_id 64
	.cv_loc	64 9 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
.seh_proc "??_Glogic_error@std@@UEAAPEAXI@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	dword ptr [rsp + 60], edx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
	mov	rax, rcx
	mov	qword ptr [rsp + 64], rax
	mov	edx, dword ptr [rsp + 60]
.Ltmp267:
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	dword ptr [rsp + 36], edx # 4-byte Spill
	call	"??1logic_error@std@@UEAA@XZ"
	mov	edx, dword ptr [rsp + 36] # 4-byte Reload
	cmp	edx, 0
	je	.LBB64_2
# %bb.1:
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	mov	rcx, rax
	call	"??3@YAXPEAX@Z"
.LBB64_2:
	mov	rax, qword ptr [rsp + 64]
	add	rsp, 72
	ret
.Ltmp268:
.Lfunc_end64:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1logic_error@std@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1logic_error@std@@UEAA@XZ"
	.globl	"??1logic_error@std@@UEAA@XZ" # -- Begin function ??1logic_error@std@@UEAA@XZ
	.p2align	4, 0x90
"??1logic_error@std@@UEAA@XZ":          # @"??1logic_error@std@@UEAA@XZ"
.Lfunc_begin65:
	.cv_func_id 65
	.cv_loc	65 9 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
.seh_proc "??1logic_error@std@@UEAA@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp269:
	.cv_loc	65 9 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
	call	"??1exception@std@@UEAA@XZ"
.Ltmp270:
	.cv_loc	65 9 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
	nop
	add	rsp, 40
	ret
.Ltmp271:
.Lfunc_end65:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1logic_error@std@@UEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??1exception@std@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
	.globl	"??1exception@std@@UEAA@XZ" # -- Begin function ??1exception@std@@UEAA@XZ
	.p2align	4, 0x90
"??1exception@std@@UEAA@XZ":            # @"??1exception@std@@UEAA@XZ"
.Lfunc_begin66:
	.cv_func_id 66
	.cv_loc	66 10 85 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:85:0
.seh_proc "??1exception@std@@UEAA@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp272:
	mov	qword ptr [rcx], rax
.Ltmp273:
	.cv_loc	66 10 86 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:86:0
	add	rcx, 8
	call	__std_exception_destroy
.Ltmp274:
	.cv_loc	66 10 87 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:87:0
	nop
	add	rsp, 40
	ret
.Ltmp275:
.Lfunc_end66:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_Gexception@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gexception@std@@UEAAPEAXI@Z"
	.globl	"??_Gexception@std@@UEAAPEAXI@Z" # -- Begin function ??_Gexception@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gexception@std@@UEAAPEAXI@Z":       # @"??_Gexception@std@@UEAAPEAXI@Z"
.Lfunc_begin67:
	.cv_func_id 67
	.cv_loc	67 10 85 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:85:0
.seh_proc "??_Gexception@std@@UEAAPEAXI@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	dword ptr [rsp + 60], edx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
	mov	rax, rcx
	mov	qword ptr [rsp + 64], rax
	mov	edx, dword ptr [rsp + 60]
.Ltmp276:
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	dword ptr [rsp + 36], edx # 4-byte Spill
	call	"??1exception@std@@UEAA@XZ"
	mov	edx, dword ptr [rsp + 36] # 4-byte Reload
	cmp	edx, 0
	je	.LBB67_2
# %bb.1:
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	mov	rcx, rax
	call	"??3@YAXPEAX@Z"
.LBB67_2:
	.cv_loc	67 10 87 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:87:0
	mov	rax, qword ptr [rsp + 64]
	add	rsp, 72
	ret
.Ltmp277:
.Lfunc_end67:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gexception@std@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0logic_error@std@@QEAA@PEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@PEBD@Z"
	.globl	"??0logic_error@std@@QEAA@PEBD@Z" # -- Begin function ??0logic_error@std@@QEAA@PEBD@Z
	.p2align	4, 0x90
"??0logic_error@std@@QEAA@PEBD@Z":      # @"??0logic_error@std@@QEAA@PEBD@Z"
.Lfunc_begin68:
	.cv_func_id 68
	.cv_loc	68 9 30 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:30:0
.seh_proc "??0logic_error@std@@QEAA@PEBD@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp278:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@QEBD@Z"
	lea	rcx, [rip + "??_7logic_error@std@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	.cv_loc	68 9 31 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:31:0
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp279:
.Lfunc_end68:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@PEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0exception@std@@QEAA@QEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QEAA@QEBD@Z"
	.globl	"??0exception@std@@QEAA@QEBD@Z" # -- Begin function ??0exception@std@@QEAA@QEBD@Z
	.p2align	4, 0x90
"??0exception@std@@QEAA@QEBD@Z":        # @"??0exception@std@@QEAA@QEBD@Z"
.Lfunc_begin69:
	.cv_func_id 69
	.cv_loc	69 10 55 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:55:0
.seh_proc "??0exception@std@@QEAA@QEBD@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	xor	eax, eax
	mov	r8d, 16
                                        # kill: def $r8 killed $r8d
	lea	r9, [rip + "??_7exception@std@@6B@"]
	mov	r10, qword ptr [rip + __security_cookie]
	xor	r10, rsp
	mov	qword ptr [rsp + 80], r10
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp280:
	mov	qword ptr [rcx], r9
	mov	rdx, rcx
	add	rdx, 8
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	edx, eax
	call	memset
.Ltmp281:
	.cv_loc	69 10 56 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:56:0
	mov	rcx, qword ptr [rsp + 56]
	mov	qword ptr [rsp + 64], rcx
	mov	byte ptr [rsp + 72], 1
	.cv_loc	69 10 57 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:57:0
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	add	rcx, 8
	lea	r8, [rsp + 64]
.Ltmp282:
	#DEBUG_VALUE: _InitData <- [$r8+0]
	mov	qword ptr [rsp + 32], rcx # 8-byte Spill
	mov	rcx, r8
	mov	rdx, qword ptr [rsp + 32] # 8-byte Reload
	call	__std_exception_copy
.Ltmp283:
	mov	rcx, qword ptr [rsp + 80]
	xor	rcx, rsp
	call	__security_check_cookie
.Ltmp284:
	.cv_loc	69 10 58 0              # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:58:0
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 88
	ret
.Ltmp285:
.Lfunc_end69:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0exception@std@@QEAA@QEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.globl	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ" # -- Begin function ?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ
	.p2align	4, 0x90
"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ": # @"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
.Lfunc_begin70:
	.cv_func_id 70
	.cv_loc	70 2 602 0              # ..\include\gsl/span:602:0
.seh_proc "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp286:
	mov	rax, qword ptr [rcx + 8]
	pop	rcx
	ret
.Ltmp287:
.Lfunc_end70:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z"
	.globl	"??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z" # -- Begin function ??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z
	.p2align	4, 0x90
"??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z": # @"??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z"
.Lfunc_begin71:
	.cv_func_id 71
	.cv_loc	71 2 146 0              # ..\include\gsl/span:146:0
.seh_proc "??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	qword ptr [rsp + 16], r8
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp288:
	mov	rdx, qword ptr [rsp + 8]
	mov	qword ptr [rcx], rdx
	mov	rdx, qword ptr [rsp + 16]
	mov	qword ptr [rcx + 8], rdx
	mov	rax, rcx
	add	rsp, 24
	ret
.Ltmp289:
.Lfunc_end71:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
	.globl	"??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z" # -- Begin function ??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z
	.p2align	4, 0x90
"??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z": # @"??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
.Lfunc_begin72:
	.cv_func_id 72
	.cv_loc	72 2 230 0              # ..\include\gsl/span:230:0
.seh_proc "??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	xor	eax, eax
	mov	r8b, al
	#DEBUG_VALUE: operator==:rhs <- [$rdx+0]
	#DEBUG_VALUE: operator==:lhs <- [$rcx+0]
.Ltmp290:
	.cv_loc	72 2 231 0              # ..\include\gsl/span:231:0
	mov	r9, qword ptr [rcx]
	cmp	r9, qword ptr [rdx]
	mov	qword ptr [rsp + 16], rdx # 8-byte Spill
.Ltmp291:
	#DEBUG_VALUE: operator==:rhs <- [DW_OP_plus_uconst 16, DW_OP_deref] [$rsp+0]
	mov	qword ptr [rsp + 8], rcx # 8-byte Spill
.Ltmp292:
	#DEBUG_VALUE: operator==:lhs <- [DW_OP_plus_uconst 8, DW_OP_deref] [$rsp+0]
	mov	byte ptr [rsp + 7], r8b # 1-byte Spill
	jne	.LBB72_2
# %bb.1:
	#DEBUG_VALUE: operator==:lhs <- [DW_OP_plus_uconst 8, DW_OP_deref] [$rsp+0]
	#DEBUG_VALUE: operator==:rhs <- [DW_OP_plus_uconst 16, DW_OP_deref] [$rsp+0]
	mov	rax, qword ptr [rsp + 8] # 8-byte Reload
	mov	rcx, qword ptr [rax + 8]
	mov	rdx, qword ptr [rsp + 16] # 8-byte Reload
	cmp	rcx, qword ptr [rdx + 8]
	sete	r8b
	mov	byte ptr [rsp + 7], r8b # 1-byte Spill
.LBB72_2:
	#DEBUG_VALUE: operator==:lhs <- [DW_OP_plus_uconst 8, DW_OP_deref] [$rsp+0]
	#DEBUG_VALUE: operator==:rhs <- [DW_OP_plus_uconst 16, DW_OP_deref] [$rsp+0]
	mov	al, byte ptr [rsp + 7]  # 1-byte Reload
	and	al, 1
	movzx	eax, al
	add	rsp, 24
	ret
.Ltmp293:
.Lfunc_end72:
	.seh_handlerdata
	.section	.text,"xr",discard,"??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$extent_type@$05@details@gsl@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$extent_type@$05@details@gsl@@QEAA@XZ"
	.globl	"??0?$extent_type@$05@details@gsl@@QEAA@XZ" # -- Begin function ??0?$extent_type@$05@details@gsl@@QEAA@XZ
	.p2align	4, 0x90
"??0?$extent_type@$05@details@gsl@@QEAA@XZ": # @"??0?$extent_type@$05@details@gsl@@QEAA@XZ"
.Lfunc_begin73:
	.cv_func_id 73
	.cv_loc	73 2 311 0              # ..\include\gsl/span:311:0
.seh_proc "??0?$extent_type@$05@details@gsl@@QEAA@XZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rax, qword ptr [rsp]
.Ltmp294:
	pop	rcx
	ret
.Ltmp295:
.Lfunc_end73:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$extent_type@$05@details@gsl@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$addressof@E@std@@YAPEAEAEAE@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$addressof@E@std@@YAPEAEAEAE@Z"
	.globl	"??$addressof@E@std@@YAPEAEAEAE@Z" # -- Begin function ??$addressof@E@std@@YAPEAEAEAE@Z
	.p2align	4, 0x90
"??$addressof@E@std@@YAPEAEAEAE@Z":     # @"??$addressof@E@std@@YAPEAEAEAE@Z"
.Lfunc_begin74:
	.cv_func_id 74
	.cv_file	11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef" "9F14E8187A77026EF6762781B0266A96" 1
	.cv_loc	74 11 329 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstddef:329:0
.seh_proc "??$addressof@E@std@@YAPEAEAEAE@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp296:
	.cv_loc	74 11 330 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstddef:330:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp297:
.Lfunc_end74:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$addressof@E@std@@YAPEAEAEAE@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
	.globl	"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z" # -- Begin function ??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z
	.p2align	4, 0x90
"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z": # @"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
.Lfunc_begin75:
	.cv_func_id 75
	.cv_loc	75 2 591 0              # ..\include\gsl/span:591:0
.seh_proc "??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 144
	.seh_stackalloc 144
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 8], -2
	mov	qword ptr [rbp - 8], rdx
	mov	byte ptr [rbp - 16], r8b
	mov	qword ptr [rbp - 24], rcx
	mov	rcx, qword ptr [rbp - 24]
	mov	qword ptr [rbp], rcx
.Ltmp300:
	mov	rdx, rcx
	mov	r8b, byte ptr [rbp - 32]
	mov	qword ptr [rbp - 72], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	dl, r8b
	call	"??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z"
	mov	rcx, qword ptr [rbp - 8]
	mov	r9, qword ptr [rbp - 72] # 8-byte Reload
	mov	qword ptr [r9 + 8], rcx
.Ltmp301:
	.cv_loc	75 2 592 0              # ..\include\gsl/span:592:0
	mov	rcx, r9
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	dl
	mov	byte ptr [rbp - 57], 0
	test	dl, 1
	jne	.LBB75_1
	jmp	.LBB75_2
.LBB75_1:
	test	byte ptr [rbp - 57], 1
	jne	.LBB75_4
	jmp	.LBB75_5
.LBB75_2:
	lea	rdx, [rip + "??_C@_0DG@PFBAEBPE@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 56]
	mov	rcx, rax
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 57], 1
.Ltmp298:
	mov	rcx, qword ptr [rbp - 88] # 8-byte Reload
	mov	qword ptr [rbp - 96], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp299:
	jmp	.LBB75_3
.LBB75_3:
	ud2
.LBB75_4:
	lea	rcx, [rbp - 56]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp302:
.LBB75_5:
	.cv_loc	75 2 593 0              # ..\include\gsl/span:593:0
	mov	rax, qword ptr [rbp]
	add	rsp, 144
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z@4HA":
.seh_proc "?dtor$6@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z@4HA"
.LBB75_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp303:
	.cv_loc	75 2 592 0              # ..\include\gsl/span:592:0
	test	byte ptr [rbp - 57], 1
	jne	.LBB75_7
	jmp	.LBB75_8
.LBB75_7:
	lea	rcx, [rbp - 56]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB75_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp304:
.Lfunc_end75:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
	.p2align	2
"$cppxdata$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z")@IMGREL # IPToStateXData
	.long	136                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z@4HA"@IMGREL # Action
"$ip2state$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z":
	.long	.Lfunc_begin75@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp298@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp299@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
                                        # -- End function
	.def	 "??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z"
	.globl	"??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z" # -- Begin function ??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z
	.p2align	4, 0x90
"??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z": # @"??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z"
.Lfunc_begin76:
	.cv_func_id 76
	.cv_loc	76 2 334 0              # ..\include\gsl/span:334:0
.seh_proc "??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	byte ptr [rsp + 56], dl
	mov	qword ptr [rsp + 48], rcx
	mov	rax, qword ptr [rsp + 48]
.Ltmp305:
	lea	rcx, [rsp + 56]
	#DEBUG_VALUE: extent_type<6>:ext <- [$rcx+0]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?size@?$extent_type@$05@details@gsl@@QEBA_JXZ"
.Ltmp306:
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rcx], rax
	mov	rax, qword ptr [rsp + 64]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 72
	ret
.Ltmp307:
.Lfunc_end76:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$extent_type@$05@details@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$extent_type@$05@details@gsl@@QEBA_JXZ"
	.globl	"?size@?$extent_type@$05@details@gsl@@QEBA_JXZ" # -- Begin function ?size@?$extent_type@$05@details@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$extent_type@$05@details@gsl@@QEBA_JXZ": # @"?size@?$extent_type@$05@details@gsl@@QEBA_JXZ"
.Lfunc_begin77:
	.cv_func_id 77
	.cv_loc	77 2 323 0              # ..\include\gsl/span:323:0
.seh_proc "?size@?$extent_type@$05@details@gsl@@QEBA_JXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	eax, 6
                                        # kill: def $rax killed $eax
	mov	qword ptr [rsp], rcx
.Ltmp308:
	pop	rcx
	ret
.Ltmp309:
.Lfunc_end77:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$extent_type@$05@details@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z"
	.globl	"?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z" # -- Begin function ?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z
	.p2align	4, 0x90
"?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z": # @"?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z"
.Lfunc_begin78:
	.cv_func_id 78
	.cv_loc	78 2 548 0              # ..\include\gsl/span:548:0
.seh_proc "?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
.Ltmp310:
	.cv_loc	78 2 565 0              # ..\include\gsl/span:565:0
	lea	rcx, [rsp + 48]
	#DEBUG_VALUE: CheckRange:idx <- [$rcx+0]
	call	"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
.Ltmp311:
	lea	rcx, [rsp + 56]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	cmp	rcx, rax
	setb	r8b
	and	r8b, 1
	movzx	eax, r8b
	mov	rdx, qword ptr [rsp + 64]
	xor	rdx, rsp
	mov	rcx, rdx
	mov	dword ptr [rsp + 36], eax # 4-byte Spill
	call	__security_check_cookie
	mov	eax, dword ptr [rsp + 36] # 4-byte Reload
	add	rsp, 72
	ret
.Ltmp312:
.Lfunc_end78:
	.seh_handlerdata
	.section	.text,"xr",discard,"?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$span@E$0?0@gsl@@QEBAPEAEXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ"
	.globl	"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ" # -- Begin function ?data@?$span@E$0?0@gsl@@QEBAPEAEXZ
	.p2align	4, 0x90
"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ":   # @"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ"
.Lfunc_begin79:
	.cv_func_id 79
	.cv_loc	79 2 515 0              # ..\include\gsl/span:515:0
.seh_proc "?data@?$span@E$0?0@gsl@@QEBAPEAEXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp313:
	call	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ"
	nop
	add	rsp, 40
	ret
.Ltmp314:
.Lfunc_end79:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ"
	.globl	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ" # -- Begin function ?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ
	.p2align	4, 0x90
"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ": # @"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ"
.Lfunc_begin80:
	.cv_func_id 80
	.cv_loc	80 2 602 0              # ..\include\gsl/span:602:0
.seh_proc "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp315:
	mov	rax, qword ptr [rcx + 8]
	pop	rcx
	ret
.Ltmp316:
.Lfunc_end80:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$addressof@H@std@@YAPEAHAEAH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$addressof@H@std@@YAPEAHAEAH@Z"
	.globl	"??$addressof@H@std@@YAPEAHAEAH@Z" # -- Begin function ??$addressof@H@std@@YAPEAHAEAH@Z
	.p2align	4, 0x90
"??$addressof@H@std@@YAPEAHAEAH@Z":     # @"??$addressof@H@std@@YAPEAHAEAH@Z"
.Lfunc_begin81:
	.cv_func_id 81
	.cv_loc	81 11 329 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstddef:329:0
.seh_proc "??$addressof@H@std@@YAPEAHAEAH@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp317:
	.cv_loc	81 11 330 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstddef:330:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp318:
.Lfunc_end81:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$addressof@H@std@@YAPEAHAEAH@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
	.globl	"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z" # -- Begin function ??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z
	.p2align	4, 0x90
"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z": # @"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
.Lfunc_begin82:
	.cv_func_id 82
	.cv_loc	82 2 591 0              # ..\include\gsl/span:591:0
.seh_proc "??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 128
	.seh_stackalloc 128
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 24], rdx
	mov	byte ptr [rbp - 32], r8b
	mov	qword ptr [rbp - 40], rcx
	mov	rcx, qword ptr [rbp - 40]
	mov	qword ptr [rbp - 16], rcx
.Ltmp321:
	mov	rdx, qword ptr [rbp - 24]
	mov	qword ptr [rcx], rdx
.Ltmp322:
	.cv_loc	82 2 592 0              # ..\include\gsl/span:592:0
	call	"?size@?$extent_type@$05@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	r8b
	mov	byte ptr [rbp - 65], 0
	test	r8b, 1
	jne	.LBB82_1
	jmp	.LBB82_2
.LBB82_1:
	test	byte ptr [rbp - 65], 1
	jne	.LBB82_4
	jmp	.LBB82_5
.LBB82_2:
	lea	rdx, [rip + "??_C@_0DG@PFBAEBPE@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 64]
	mov	rcx, rax
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 65], 1
.Ltmp319:
	mov	rcx, qword ptr [rbp - 80] # 8-byte Reload
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp320:
	jmp	.LBB82_3
.LBB82_3:
	ud2
.LBB82_4:
	lea	rcx, [rbp - 64]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp323:
.LBB82_5:
	.cv_loc	82 2 593 0              # ..\include\gsl/span:593:0
	mov	rax, qword ptr [rbp - 16]
	add	rsp, 128
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z@4HA":
.seh_proc "?dtor$6@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z@4HA"
.LBB82_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp324:
	.cv_loc	82 2 592 0              # ..\include\gsl/span:592:0
	test	byte ptr [rbp - 65], 1
	jne	.LBB82_7
	jmp	.LBB82_8
.LBB82_7:
	lea	rcx, [rbp - 64]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB82_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp325:
.Lfunc_end82:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
	.p2align	2
"$cppxdata$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z")@IMGREL # IPToStateXData
	.long	120                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z@4HA"@IMGREL # Action
"$ip2state$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z":
	.long	.Lfunc_begin82@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp319@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp320@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
                                        # -- End function
	.def	 "??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z"
	.globl	"??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z" # -- Begin function ??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z
	.p2align	4, 0x90
"??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z": # @"??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z"
.Lfunc_begin83:
	.cv_func_id 83
	.cv_loc	83 2 622 0              # ..\include\gsl/span:622:0
.seh_proc "??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z"
# %bb.0:
	sub	rsp, 120
	.seh_stackalloc 120
	.seh_endprologue
	mov	rax, rdx
	mov	r10b, byte ptr [rsp + 160]
	mov	r11, qword ptr [rip + __security_cookie]
	xor	r11, rsp
	mov	qword ptr [rsp + 112], r11
	mov	byte ptr [rsp + 88], r10b
	mov	qword ptr [rsp + 80], r9
	mov	qword ptr [rsp + 72], r8
	mov	qword ptr [rsp + 64], rcx
	mov	rcx, qword ptr [rsp + 64]
.Ltmp326:
	.cv_loc	83 2 623 0              # ..\include\gsl/span:623:0
	lea	r8, [rsp + 96]
.Ltmp327:
	#DEBUG_VALUE: make_subspan<6>:tmp <- [$r8+0]
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	rcx, r8
	mov	r8, qword ptr [rsp + 56] # 8-byte Reload
.Ltmp328:
	mov	qword ptr [rsp + 48], rdx # 8-byte Spill
	mov	rdx, r8
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z"
	.cv_loc	83 2 624 0              # ..\include\gsl/span:624:0
	mov	r9, qword ptr [rsp + 80]
	mov	r8, qword ptr [rsp + 72]
	lea	rcx, [rsp + 96]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z"
	mov	rax, qword ptr [rsp + 112]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 120
	ret
.Ltmp329:
.Lfunc_end83:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$span@H$05@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$span@H$05@gsl@@QEBA_JXZ"
	.globl	"?size@?$span@H$05@gsl@@QEBA_JXZ" # -- Begin function ?size@?$span@H$05@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$span@H$05@gsl@@QEBA_JXZ":      # @"?size@?$span@H$05@gsl@@QEBA_JXZ"
.Lfunc_begin84:
	.cv_func_id 84
	.cv_loc	84 2 498 0              # ..\include\gsl/span:498:0
.seh_proc "?size@?$span@H$05@gsl@@QEBA_JXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp330:
	call	"?size@?$extent_type@$05@details@gsl@@QEBA_JXZ"
	nop
	add	rsp, 40
	ret
.Ltmp331:
.Lfunc_end84:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$span@H$05@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z"
	.globl	"??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z" # -- Begin function ??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z
	.p2align	4, 0x90
"??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z": # @"??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z"
.Lfunc_begin85:
	.cv_func_id 85
	.cv_loc	85 2 448 0              # ..\include\gsl/span:448:0
.seh_proc "??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 80], rax
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rax, qword ptr [rsp + 56]
.Ltmp332:
	mov	rcx, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"?size@?$span@H$05@gsl@@QEBA_JXZ"
	lea	rcx, [rsp + 72]
	mov	rdx, rax
	call	"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z"
	mov	rcx, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?data@?$span@H$05@gsl@@QEBAPEAHXZ"
	mov	r8b, byte ptr [rsp + 72]
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	rdx, rax
	call	"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z"
	mov	rcx, qword ptr [rsp + 80]
	xor	rcx, rsp
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 48] # 8-byte Reload
	add	rsp, 88
	ret
.Ltmp333:
.Lfunc_end85:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$extent_type@$05@details@gsl@@QEAA@_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z"
	.globl	"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z" # -- Begin function ??0?$extent_type@$05@details@gsl@@QEAA@_J@Z
	.p2align	4, 0x90
"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z": # @"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z"
.Lfunc_begin86:
	.cv_func_id 86
	.cv_loc	86 2 321 0              # ..\include\gsl/span:321:0
.seh_proc "??0?$extent_type@$05@details@gsl@@QEAA@_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe 5, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 24], rdx
	mov	qword ptr [rbp - 32], rcx
	mov	rcx, qword ptr [rbp - 32]
	mov	qword ptr [rbp - 16], rcx
.Ltmp336:
	.cv_loc	86 2 321 0              # ..\include\gsl/span:321:0
	cmp	qword ptr [rbp - 24], 6
	sete	al
	mov	byte ptr [rbp - 57], 0
	test	al, 1
	jne	.LBB86_1
	jmp	.LBB86_2
.LBB86_1:
	test	byte ptr [rbp - 57], 1
	jne	.LBB86_4
	jmp	.LBB86_5
.LBB86_2:
	lea	rdx, [rip + "??_C@_0DG@PHADKCAK@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 56]
	mov	rcx, rax
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 57], 1
.Ltmp334:
	mov	rcx, qword ptr [rbp - 72] # 8-byte Reload
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp335:
	jmp	.LBB86_3
.LBB86_3:
	ud2
.LBB86_4:
	lea	rcx, [rbp - 56]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp337:
.LBB86_5:
	.cv_loc	86 2 321 0              # ..\include\gsl/span:321:0
	mov	rax, qword ptr [rbp - 16]
	add	rsp, 112
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$extent_type@$05@details@gsl@@QEAA@_J@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???0?$extent_type@$05@details@gsl@@QEAA@_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???0?$extent_type@$05@details@gsl@@QEAA@_J@Z@4HA":
.seh_proc "?dtor$6@?0???0?$extent_type@$05@details@gsl@@QEAA@_J@Z@4HA"
.LBB86_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
.Ltmp338:
	.cv_loc	86 2 321 0              # ..\include\gsl/span:321:0
	test	byte ptr [rbp - 57], 1
	jne	.LBB86_7
	jmp	.LBB86_8
.LBB86_7:
	lea	rcx, [rbp - 56]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB86_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp339:
.Lfunc_end86:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z"
	.p2align	2
"$cppxdata$??0?$extent_type@$05@details@gsl@@QEAA@_J@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$extent_type@$05@details@gsl@@QEAA@_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$extent_type@$05@details@gsl@@QEAA@_J@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$extent_type@$05@details@gsl@@QEAA@_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???0?$extent_type@$05@details@gsl@@QEAA@_J@Z@4HA"@IMGREL # Action
"$ip2state$??0?$extent_type@$05@details@gsl@@QEAA@_J@Z":
	.long	.Lfunc_begin86@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp334@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp335@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z"
                                        # -- End function
	.def	 "?data@?$span@H$05@gsl@@QEBAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$span@H$05@gsl@@QEBAPEAHXZ"
	.globl	"?data@?$span@H$05@gsl@@QEBAPEAHXZ" # -- Begin function ?data@?$span@H$05@gsl@@QEBAPEAHXZ
	.p2align	4, 0x90
"?data@?$span@H$05@gsl@@QEBAPEAHXZ":    # @"?data@?$span@H$05@gsl@@QEBAPEAHXZ"
.Lfunc_begin87:
	.cv_func_id 87
	.cv_loc	87 2 515 0              # ..\include\gsl/span:515:0
.seh_proc "?data@?$span@H$05@gsl@@QEBAPEAHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp340:
	call	"?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ"
	nop
	add	rsp, 40
	ret
.Ltmp341:
.Lfunc_end87:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$span@H$05@gsl@@QEBAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z"
	.globl	"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z" # -- Begin function ??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z
	.p2align	4, 0x90
"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z": # @"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z"
.Lfunc_begin88:
	.cv_func_id 88
	.cv_loc	88 2 597 0              # ..\include\gsl/span:597:0
.seh_proc "??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 208
	.seh_stackalloc 208
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 72], -2
	mov	byte ptr [rbp + 56], r8b
	mov	qword ptr [rbp + 48], rdx
	mov	qword ptr [rbp + 40], rcx
	mov	rcx, qword ptr [rbp + 40]
	mov	qword ptr [rbp + 64], rcx
.Ltmp346:
	mov	rdx, rcx
	mov	r8b, byte ptr [rbp + 32]
	mov	qword ptr [rbp - 40], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	dl, r8b
	call	"??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z"
	mov	rcx, qword ptr [rbp + 48]
	mov	r9, qword ptr [rbp - 40] # 8-byte Reload
	mov	qword ptr [r9 + 8], rcx
.Ltmp347:
	.cv_loc	88 2 598 0              # ..\include\gsl/span:598:0
	mov	rcx, r9
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	dl
	mov	byte ptr [rbp + 7], 0
	test	dl, 1
	jne	.LBB88_1
	jmp	.LBB88_2
.LBB88_1:
	test	byte ptr [rbp + 7], 1
	jne	.LBB88_4
	jmp	.LBB88_5
.LBB88_2:
	lea	rdx, [rip + "??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp + 8]
	mov	rcx, rax
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp + 7], 1
.Ltmp342:
	mov	rcx, qword ptr [rbp - 56] # 8-byte Reload
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp343:
	jmp	.LBB88_3
.LBB88_3:
	ud2
.LBB88_4:
	lea	rcx, [rbp + 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB88_5:
	.cv_loc	88 2 599 0              # ..\include\gsl/span:599:0
	mov	rax, qword ptr [rbp + 48]
	mov	byte ptr [rbp - 25], 0
	cmp	rax, 0
	mov	cl, 1
	mov	byte ptr [rbp - 65], cl # 1-byte Spill
	jne	.LBB88_7
# %bb.6:
	mov	rax, qword ptr [rbp - 40] # 8-byte Reload
	mov	rcx, rax
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rbp - 65], dl # 1-byte Spill
.LBB88_7:
	mov	al, byte ptr [rbp - 65] # 1-byte Reload
	test	al, 1
	jne	.LBB88_8
	jmp	.LBB88_9
.LBB88_8:
	test	byte ptr [rbp - 25], 1
	jne	.LBB88_14
	jmp	.LBB88_15
.LBB88_9:
	lea	rdx, [rip + "??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 24]
	mov	rcx, rax
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 25], 1
.Ltmp344:
	mov	rcx, qword ptr [rbp - 80] # 8-byte Reload
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp345:
	jmp	.LBB88_10
.LBB88_10:
	ud2
.LBB88_14:
	lea	rcx, [rbp - 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp348:
.LBB88_15:
	.cv_loc	88 2 600 0              # ..\include\gsl/span:600:0
	mov	rax, qword ptr [rbp + 64]
	add	rsp, 208
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$11@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z@4HA":
.seh_proc "?dtor$11@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z@4HA"
.LBB88_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp349:
	.cv_loc	88 2 598 0              # ..\include\gsl/span:598:0
	test	byte ptr [rbp + 7], 1
	jne	.LBB88_12
	jmp	.LBB88_13
.LBB88_12:
	lea	rcx, [rbp + 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB88_13:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$16@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z@4HA":
.seh_proc "?dtor$16@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z@4HA"
.LBB88_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	88 2 599 0              # ..\include\gsl/span:599:0
	test	byte ptr [rbp - 25], 1
	jne	.LBB88_17
	jmp	.LBB88_18
.LBB88_17:
	lea	rcx, [rbp - 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB88_18:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp350:
.Lfunc_end88:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z"
	.p2align	2
"$cppxdata$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z")@IMGREL # IPToStateXData
	.long	200                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z@4HA"@IMGREL # Action
"$ip2state$??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z":
	.long	.Lfunc_begin88@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp342@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp343@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp344@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp345@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z"
                                        # -- End function
	.def	 "?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ"
	.globl	"?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ" # -- Begin function ?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ
	.p2align	4, 0x90
"?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ": # @"?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ"
.Lfunc_begin89:
	.cv_func_id 89
	.cv_loc	89 2 602 0              # ..\include\gsl/span:602:0
.seh_proc "?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp351:
	mov	rax, qword ptr [rcx]
	pop	rcx
	ret
.Ltmp352:
.Lfunc_end89:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.globl	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # -- Begin function ??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z
	.p2align	4, 0x90
"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z": # @"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
.Lfunc_begin90:
	.cv_func_id 90
	.cv_loc	90 2 597 0              # ..\include\gsl/span:597:0
.seh_proc "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 192
	.seh_stackalloc 192
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 56], -2
	mov	qword ptr [rbp + 40], r8
	mov	qword ptr [rbp + 32], rdx
	mov	qword ptr [rbp + 24], rcx
	mov	rcx, qword ptr [rbp + 24]
	mov	qword ptr [rbp + 48], rcx
.Ltmp357:
	mov	rdx, rcx
	mov	r8, qword ptr [rbp + 40]
	mov	qword ptr [rbp - 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, r8
	call	"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	mov	rcx, qword ptr [rbp + 32]
	mov	rdx, qword ptr [rbp - 48] # 8-byte Reload
	mov	qword ptr [rdx + 8], rcx
.Ltmp358:
	.cv_loc	90 2 598 0              # ..\include\gsl/span:598:0
	mov	rcx, rdx
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	r9b
	mov	byte ptr [rbp - 1], 0
	test	r9b, 1
	jne	.LBB90_1
	jmp	.LBB90_2
.LBB90_1:
	test	byte ptr [rbp - 1], 1
	jne	.LBB90_4
	jmp	.LBB90_5
.LBB90_2:
	lea	rdx, [rip + "??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	mov	rax, rbp
	mov	rcx, rax
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 1], 1
.Ltmp353:
	mov	rcx, qword ptr [rbp - 64] # 8-byte Reload
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp354:
	jmp	.LBB90_3
.LBB90_3:
	ud2
.LBB90_4:
	mov	rcx, rbp
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB90_5:
	.cv_loc	90 2 599 0              # ..\include\gsl/span:599:0
	mov	rax, qword ptr [rbp + 32]
	mov	byte ptr [rbp - 33], 0
	cmp	rax, 0
	mov	cl, 1
	mov	byte ptr [rbp - 73], cl # 1-byte Spill
	jne	.LBB90_7
# %bb.6:
	mov	rax, qword ptr [rbp - 48] # 8-byte Reload
	mov	rcx, rax
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rbp - 73], dl # 1-byte Spill
.LBB90_7:
	mov	al, byte ptr [rbp - 73] # 1-byte Reload
	test	al, 1
	jne	.LBB90_8
	jmp	.LBB90_9
.LBB90_8:
	test	byte ptr [rbp - 33], 1
	jne	.LBB90_14
	jmp	.LBB90_15
.LBB90_9:
	lea	rdx, [rip + "??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 32]
	mov	rcx, rax
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 33], 1
.Ltmp355:
	mov	rcx, qword ptr [rbp - 88] # 8-byte Reload
	mov	qword ptr [rbp - 96], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp356:
	jmp	.LBB90_10
.LBB90_10:
	ud2
.LBB90_14:
	lea	rcx, [rbp - 32]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp359:
.LBB90_15:
	.cv_loc	90 2 600 0              # ..\include\gsl/span:600:0
	mov	rax, qword ptr [rbp + 48]
	add	rsp, 192
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.seh_endproc
	.def	 "?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA":
.seh_proc "?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA"
.LBB90_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp360:
	.cv_loc	90 2 598 0              # ..\include\gsl/span:598:0
	test	byte ptr [rbp - 1], 1
	jne	.LBB90_12
	jmp	.LBB90_13
.LBB90_12:
	mov	rcx, rbp
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB90_13:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.seh_endproc
	.def	 "?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA":
.seh_proc "?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA"
.LBB90_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	90 2 599 0              # ..\include\gsl/span:599:0
	test	byte ptr [rbp - 33], 1
	jne	.LBB90_17
	jmp	.LBB90_18
.LBB90_17:
	lea	rcx, [rbp - 32]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB90_18:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp361:
.Lfunc_end90:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.p2align	2
"$cppxdata$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z")@IMGREL # IPToStateXData
	.long	184                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z@4HA"@IMGREL # Action
"$ip2state$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z":
	.long	.Lfunc_begin90@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp353@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp354@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp355@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp356@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
                                        # -- End function
	.def	 "??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	.globl	"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z" # -- Begin function ??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z
	.p2align	4, 0x90
"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z": # @"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
.Lfunc_begin91:
	.cv_func_id 91
	.cv_loc	91 2 336 0              # ..\include\gsl/span:336:0
.seh_proc "??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe 5, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 24], rdx
	mov	qword ptr [rbp - 32], rcx
	mov	rcx, qword ptr [rbp - 32]
	mov	qword ptr [rbp - 16], rcx
.Ltmp364:
	mov	rdx, qword ptr [rbp - 24]
	mov	qword ptr [rcx], rdx
.Ltmp365:
	.cv_loc	91 2 336 0              # ..\include\gsl/span:336:0
	cmp	qword ptr [rbp - 24], 0
	setge	al
	mov	byte ptr [rbp - 57], 0
	test	al, 1
	jne	.LBB91_1
	jmp	.LBB91_2
.LBB91_1:
	test	byte ptr [rbp - 57], 1
	jne	.LBB91_4
	jmp	.LBB91_5
.LBB91_2:
	lea	rdx, [rip + "??_C@_0DG@LJIAFOPK@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 56]
	mov	rcx, rax
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 57], 1
.Ltmp362:
	mov	rcx, qword ptr [rbp - 72] # 8-byte Reload
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp363:
	jmp	.LBB91_3
.LBB91_3:
	ud2
.LBB91_4:
	lea	rcx, [rbp - 56]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp366:
.LBB91_5:
	.cv_loc	91 2 336 0              # ..\include\gsl/span:336:0
	mov	rax, qword ptr [rbp - 16]
	add	rsp, 112
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z@4HA":
.seh_proc "?dtor$6@?0???0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z@4HA"
.LBB91_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
.Ltmp367:
	.cv_loc	91 2 336 0              # ..\include\gsl/span:336:0
	test	byte ptr [rbp - 57], 1
	jne	.LBB91_7
	jmp	.LBB91_8
.LBB91_7:
	lea	rcx, [rbp - 56]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB91_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp368:
.Lfunc_end91:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	.p2align	2
"$cppxdata$??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z@4HA"@IMGREL # Action
"$ip2state$??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z":
	.long	.Lfunc_begin91@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp362@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp363@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
                                        # -- End function
	.def	 "?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z"
	.globl	"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z" # -- Begin function ?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z
	.p2align	4, 0x90
"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z": # @"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z"
.Lfunc_begin92:
	.cv_func_id 92
	.cv_loc	92 2 630 0              # ..\include\gsl/span:630:0
.seh_proc "?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	push	rbx
	.seh_pushreg 3
	sub	rsp, 248
	.seh_stackalloc 248
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 112], -2
	mov	rax, rdx
	mov	r10b, byte ptr [rbp + 176]
	xor	r11d, r11d
	mov	bl, r11b
	mov	byte ptr [rbp + 104], r10b
	mov	qword ptr [rbp + 96], r9
	mov	qword ptr [rbp + 88], r8
	mov	qword ptr [rbp + 80], rcx
	mov	rcx, qword ptr [rbp + 80]
.Ltmp373:
	.cv_loc	92 2 631 0              # ..\include\gsl/span:631:0
	mov	r8, qword ptr [rbp + 88]
	mov	byte ptr [rbp + 55], 0
	cmp	r8, 0
	mov	qword ptr [rbp - 8], rcx # 8-byte Spill
	mov	qword ptr [rbp - 16], rdx # 8-byte Spill
	mov	qword ptr [rbp - 24], rax # 8-byte Spill
	mov	byte ptr [rbp - 25], bl # 1-byte Spill
	jl	.LBB92_2
# %bb.1:
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	sub	rax, qword ptr [rbp + 88]
	cmp	rax, 0
	setge	dl
	mov	byte ptr [rbp - 25], dl # 1-byte Spill
.LBB92_2:
	mov	al, byte ptr [rbp - 25] # 1-byte Reload
	test	al, 1
	jne	.LBB92_3
	jmp	.LBB92_4
.LBB92_3:
	test	byte ptr [rbp + 55], 1
	jne	.LBB92_6
	jmp	.LBB92_7
.LBB92_4:
	lea	rdx, [rip + "??_C@_0DG@MBBPDIAP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp + 56]
	mov	rcx, rax
	mov	qword ptr [rbp - 40], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp + 55], 1
.Ltmp369:
	mov	rcx, qword ptr [rbp - 40] # 8-byte Reload
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp370:
	jmp	.LBB92_5
.LBB92_5:
	ud2
.LBB92_6:
	lea	rcx, [rbp + 56]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB92_7:
	.cv_loc	92 2 633 0              # ..\include\gsl/span:633:0
	cmp	qword ptr [rbp + 96], -1
	jne	.LBB92_12
# %bb.8:
.Ltmp374:
	.cv_loc	92 2 633 0              # ..\include\gsl/span:633:0
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	mov	rcx, qword ptr [rbp + 88]
	shl	rcx, 2
	add	rax, rcx
	mov	qword ptr [rbp + 40], rax
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	sub	rax, qword ptr [rbp + 88]
	mov	rdx, qword ptr [rbp + 40]
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	r8, rax
	call	"??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z"
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	jmp	.LBB92_23
.Ltmp375:
.LBB92_12:
	.cv_loc	92 2 635 0              # ..\include\gsl/span:635:0
	xor	eax, eax
	mov	cl, al
	mov	rdx, qword ptr [rbp + 96]
	mov	byte ptr [rbp + 15], 0
	cmp	rdx, 0
	mov	byte ptr [rbp - 57], cl # 1-byte Spill
	jl	.LBB92_14
# %bb.13:
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	sub	rax, qword ptr [rbp + 88]
	cmp	rax, qword ptr [rbp + 96]
	setge	dl
	mov	byte ptr [rbp - 57], dl # 1-byte Spill
.LBB92_14:
	mov	al, byte ptr [rbp - 57] # 1-byte Reload
	test	al, 1
	jne	.LBB92_15
	jmp	.LBB92_16
.LBB92_15:
	test	byte ptr [rbp + 15], 1
	jne	.LBB92_18
	jmp	.LBB92_19
.LBB92_16:
	lea	rdx, [rip + "??_C@_0DG@KFHDPNAL@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp + 16]
	mov	rcx, rax
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp + 15], 1
.Ltmp371:
	mov	rcx, qword ptr [rbp - 72] # 8-byte Reload
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp372:
	jmp	.LBB92_17
.LBB92_17:
	ud2
.LBB92_18:
	lea	rcx, [rbp + 16]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB92_19:
	.cv_loc	92 2 636 0              # ..\include\gsl/span:636:0
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	mov	rcx, qword ptr [rbp + 88]
	shl	rcx, 2
	add	rax, rcx
	mov	qword ptr [rbp], rax
	mov	r8, qword ptr [rbp + 96]
	mov	rdx, qword ptr [rbp]
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	call	"??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z"
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	jmp	.LBB92_23
.LBB92_23:
	.cv_loc	92 2 637 0              # ..\include\gsl/span:637:0
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	add	rsp, 248
	pop	rbx
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z")@IMGREL
	.section	.text,"xr",discard,"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z"
	.seh_endproc
	.def	 "?dtor$9@?0??make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0??make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z@4HA":
.seh_proc "?dtor$9@?0??make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z@4HA"
.LBB92_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	push	rbx
	.seh_pushreg 3
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	92 2 631 0              # ..\include\gsl/span:631:0
	test	byte ptr [rbp + 55], 1
	jne	.LBB92_10
	jmp	.LBB92_11
.LBB92_10:
	lea	rcx, [rbp + 56]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB92_11:
	nop
	add	rsp, 40
	pop	rbx
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z"
	.seh_endproc
	.def	 "?dtor$20@?0??make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$20@?0??make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z@4HA":
.seh_proc "?dtor$20@?0??make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z@4HA"
.LBB92_20:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	push	rbx
	.seh_pushreg 3
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	92 2 635 0              # ..\include\gsl/span:635:0
	test	byte ptr [rbp + 15], 1
	jne	.LBB92_21
	jmp	.LBB92_22
.LBB92_21:
	lea	rcx, [rbp + 16]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB92_22:
	nop
	add	rsp, 40
	pop	rbx
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp376:
.Lfunc_end92:
	.seh_handlerdata
	.section	.text,"xr",discard,"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z"
	.p2align	2
"$cppxdata$?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z")@IMGREL # IPToStateXData
	.long	240                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$9@?0??make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$20@?0??make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z@4HA"@IMGREL # Action
"$ip2state$?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z":
	.long	.Lfunc_begin92@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp369@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp370@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp371@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp372@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z"
                                        # -- End function
	.def	 "??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z"
	.globl	"??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z" # -- Begin function ??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z
	.p2align	4, 0x90
"??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z": # @"??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z"
.Lfunc_begin93:
	.cv_func_id 93
	.cv_loc	93 2 612 0              # ..\include\gsl/span:612:0
.seh_proc "??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 80], rax
	mov	qword ptr [rsp + 72], rdx
	mov	qword ptr [rsp + 56], r8
	mov	qword ptr [rsp + 48], rcx
	mov	rax, qword ptr [rsp + 48]
.Ltmp377:
	mov	r8, qword ptr [rsp + 56]
	mov	rcx, qword ptr [rsp + 72]
	mov	qword ptr [rsp + 64], rcx
	mov	rdx, qword ptr [rsp + 64]
	mov	rcx, rax
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z"
	mov	rcx, qword ptr [rsp + 80]
	xor	rcx, rsp
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 88
	ret
.Ltmp378:
.Lfunc_end93:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z"
	.globl	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z" # -- Begin function ??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z
	.p2align	4, 0x90
"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z": # @"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z"
.Lfunc_begin94:
	.cv_func_id 94
	.cv_loc	94 2 591 0              # ..\include\gsl/span:591:0
.seh_proc "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 144
	.seh_stackalloc 144
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 8], -2
	mov	qword ptr [rbp - 8], rdx
	mov	qword ptr [rbp - 16], r8
	mov	qword ptr [rbp - 24], rcx
	mov	rcx, qword ptr [rbp - 24]
	mov	qword ptr [rbp], rcx
.Ltmp381:
	mov	rdx, rcx
	mov	r8, qword ptr [rbp - 16]
	mov	qword ptr [rbp - 64], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, r8
	call	"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	mov	rcx, qword ptr [rbp - 8]
	mov	rdx, qword ptr [rbp - 64] # 8-byte Reload
	mov	qword ptr [rdx + 8], rcx
.Ltmp382:
	.cv_loc	94 2 592 0              # ..\include\gsl/span:592:0
	mov	rcx, rdx
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	r9b
	mov	byte ptr [rbp - 49], 0
	test	r9b, 1
	jne	.LBB94_1
	jmp	.LBB94_2
.LBB94_1:
	test	byte ptr [rbp - 49], 1
	jne	.LBB94_4
	jmp	.LBB94_5
.LBB94_2:
	lea	rdx, [rip + "??_C@_0DG@PFBAEBPE@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 48]
	mov	rcx, rax
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 49], 1
.Ltmp379:
	mov	rcx, qword ptr [rbp - 80] # 8-byte Reload
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp380:
	jmp	.LBB94_3
.LBB94_3:
	ud2
.LBB94_4:
	lea	rcx, [rbp - 48]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp383:
.LBB94_5:
	.cv_loc	94 2 593 0              # ..\include\gsl/span:593:0
	mov	rax, qword ptr [rbp]
	add	rsp, 144
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z@4HA":
.seh_proc "?dtor$6@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z@4HA"
.LBB94_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp384:
	.cv_loc	94 2 592 0              # ..\include\gsl/span:592:0
	test	byte ptr [rbp - 49], 1
	jne	.LBB94_7
	jmp	.LBB94_8
.LBB94_7:
	lea	rcx, [rbp - 48]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB94_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp385:
.Lfunc_end94:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z"
	.p2align	2
"$cppxdata$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z")@IMGREL # IPToStateXData
	.long	136                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z@4HA"@IMGREL # Action
"$ip2state$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z":
	.long	.Lfunc_begin94@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp379@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp380@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z"
                                        # -- End function
	.def	 "??0?$extent_type@$0A@@details@gsl@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	.globl	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ" # -- Begin function ??0?$extent_type@$0A@@details@gsl@@QEAA@XZ
	.p2align	4, 0x90
"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ": # @"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
.Lfunc_begin95:
	.cv_func_id 95
	.cv_loc	95 2 311 0              # ..\include\gsl/span:311:0
.seh_proc "??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rax, qword ptr [rsp]
.Ltmp386:
	pop	rcx
	ret
.Ltmp387:
.Lfunc_end95:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.globl	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z" # -- Begin function ??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z
	.p2align	4, 0x90
"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z": # @"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
.Lfunc_begin96:
	.cv_func_id 96
	.cv_loc	96 2 597 0              # ..\include\gsl/span:597:0
.seh_proc "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 208
	.seh_stackalloc 208
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 72], -2
	mov	byte ptr [rbp + 56], r8b
	mov	qword ptr [rbp + 48], rdx
	mov	qword ptr [rbp + 40], rcx
	mov	rcx, qword ptr [rbp + 40]
	mov	qword ptr [rbp + 64], rcx
.Ltmp392:
	mov	rdx, rcx
	mov	r8b, byte ptr [rbp + 32]
	mov	qword ptr [rbp - 40], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	dl, r8b
	call	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	mov	rcx, qword ptr [rbp + 48]
	mov	r9, qword ptr [rbp - 40] # 8-byte Reload
	mov	qword ptr [r9 + 8], rcx
.Ltmp393:
	.cv_loc	96 2 598 0              # ..\include\gsl/span:598:0
	mov	rcx, r9
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	dl
	mov	byte ptr [rbp + 7], 0
	test	dl, 1
	jne	.LBB96_1
	jmp	.LBB96_2
.LBB96_1:
	test	byte ptr [rbp + 7], 1
	jne	.LBB96_4
	jmp	.LBB96_5
.LBB96_2:
	lea	rdx, [rip + "??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp + 8]
	mov	rcx, rax
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp + 7], 1
.Ltmp388:
	mov	rcx, qword ptr [rbp - 56] # 8-byte Reload
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp389:
	jmp	.LBB96_3
.LBB96_3:
	ud2
.LBB96_4:
	lea	rcx, [rbp + 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB96_5:
	.cv_loc	96 2 599 0              # ..\include\gsl/span:599:0
	mov	rax, qword ptr [rbp + 48]
	mov	byte ptr [rbp - 25], 0
	cmp	rax, 0
	mov	cl, 1
	mov	byte ptr [rbp - 65], cl # 1-byte Spill
	jne	.LBB96_7
# %bb.6:
	mov	rax, qword ptr [rbp - 40] # 8-byte Reload
	mov	rcx, rax
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rbp - 65], dl # 1-byte Spill
.LBB96_7:
	mov	al, byte ptr [rbp - 65] # 1-byte Reload
	test	al, 1
	jne	.LBB96_8
	jmp	.LBB96_9
.LBB96_8:
	test	byte ptr [rbp - 25], 1
	jne	.LBB96_14
	jmp	.LBB96_15
.LBB96_9:
	lea	rdx, [rip + "??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 24]
	mov	rcx, rax
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 25], 1
.Ltmp390:
	mov	rcx, qword ptr [rbp - 80] # 8-byte Reload
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp391:
	jmp	.LBB96_10
.LBB96_10:
	ud2
.LBB96_14:
	lea	rcx, [rbp - 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp394:
.LBB96_15:
	.cv_loc	96 2 600 0              # ..\include\gsl/span:600:0
	mov	rax, qword ptr [rbp + 64]
	add	rsp, 208
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA":
.seh_proc "?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA"
.LBB96_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp395:
	.cv_loc	96 2 598 0              # ..\include\gsl/span:598:0
	test	byte ptr [rbp + 7], 1
	jne	.LBB96_12
	jmp	.LBB96_13
.LBB96_12:
	lea	rcx, [rbp + 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB96_13:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA":
.seh_proc "?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA"
.LBB96_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	96 2 599 0              # ..\include\gsl/span:599:0
	test	byte ptr [rbp - 25], 1
	jne	.LBB96_17
	jmp	.LBB96_18
.LBB96_17:
	lea	rcx, [rbp - 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB96_18:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp396:
.Lfunc_end96:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
"$cppxdata$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z")@IMGREL # IPToStateXData
	.long	200                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA"@IMGREL # Action
"$ip2state$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z":
	.long	.Lfunc_begin96@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp388@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp389@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp390@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp391@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
                                        # -- End function
	.def	 "??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	.globl	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z" # -- Begin function ??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z
	.p2align	4, 0x90
"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z": # @"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
.Lfunc_begin97:
	.cv_func_id 97
	.cv_loc	97 2 334 0              # ..\include\gsl/span:334:0
.seh_proc "??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	byte ptr [rsp + 56], dl
	mov	qword ptr [rsp + 48], rcx
	mov	rax, qword ptr [rsp + 48]
.Ltmp397:
	lea	rcx, [rsp + 56]
	#DEBUG_VALUE: extent_type<0>:ext <- [$rcx+0]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
.Ltmp398:
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rcx], rax
	mov	rax, qword ptr [rsp + 64]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 72
	ret
.Ltmp399:
.Lfunc_end97:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
	.globl	"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ" # -- Begin function ?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ": # @"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
.Lfunc_begin98:
	.cv_func_id 98
	.cv_loc	98 2 323 0              # ..\include\gsl/span:323:0
.seh_proc "?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	xor	eax, eax
                                        # kill: def $rax killed $eax
	mov	qword ptr [rsp], rcx
.Ltmp400:
	pop	rcx
	ret
.Ltmp401:
.Lfunc_end98:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$extent_type@$09@details@gsl@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$extent_type@$09@details@gsl@@QEAA@XZ"
	.globl	"??0?$extent_type@$09@details@gsl@@QEAA@XZ" # -- Begin function ??0?$extent_type@$09@details@gsl@@QEAA@XZ
	.p2align	4, 0x90
"??0?$extent_type@$09@details@gsl@@QEAA@XZ": # @"??0?$extent_type@$09@details@gsl@@QEAA@XZ"
.Lfunc_begin99:
	.cv_func_id 99
	.cv_loc	99 2 311 0              # ..\include\gsl/span:311:0
.seh_proc "??0?$extent_type@$09@details@gsl@@QEAA@XZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rax, qword ptr [rsp]
.Ltmp402:
	pop	rcx
	ret
.Ltmp403:
.Lfunc_end99:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$extent_type@$09@details@gsl@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z"
	.globl	"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z" # -- Begin function ??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z
	.p2align	4, 0x90
"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z": # @"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z"
.Lfunc_begin100:
	.cv_func_id 100
	.cv_loc	100 2 591 0             # ..\include\gsl/span:591:0
.seh_proc "??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 144
	.seh_stackalloc 144
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 8], -2
	mov	qword ptr [rbp - 8], rdx
	mov	byte ptr [rbp - 16], r8b
	mov	qword ptr [rbp - 24], rcx
	mov	rcx, qword ptr [rbp - 24]
	mov	qword ptr [rbp], rcx
.Ltmp406:
	mov	rdx, rcx
	mov	r8b, byte ptr [rbp - 32]
	mov	qword ptr [rbp - 72], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	dl, r8b
	call	"??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z"
	mov	rcx, qword ptr [rbp - 8]
	mov	r9, qword ptr [rbp - 72] # 8-byte Reload
	mov	qword ptr [r9 + 8], rcx
.Ltmp407:
	.cv_loc	100 2 592 0             # ..\include\gsl/span:592:0
	mov	rcx, r9
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	dl
	mov	byte ptr [rbp - 57], 0
	test	dl, 1
	jne	.LBB100_1
	jmp	.LBB100_2
.LBB100_1:
	test	byte ptr [rbp - 57], 1
	jne	.LBB100_4
	jmp	.LBB100_5
.LBB100_2:
	lea	rdx, [rip + "??_C@_0DG@PFBAEBPE@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 56]
	mov	rcx, rax
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 57], 1
.Ltmp404:
	mov	rcx, qword ptr [rbp - 88] # 8-byte Reload
	mov	qword ptr [rbp - 96], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp405:
	jmp	.LBB100_3
.LBB100_3:
	ud2
.LBB100_4:
	lea	rcx, [rbp - 56]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp408:
.LBB100_5:
	.cv_loc	100 2 593 0             # ..\include\gsl/span:593:0
	mov	rax, qword ptr [rbp]
	add	rsp, 144
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z@4HA":
.seh_proc "?dtor$6@?0???$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z@4HA"
.LBB100_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp409:
	.cv_loc	100 2 592 0             # ..\include\gsl/span:592:0
	test	byte ptr [rbp - 57], 1
	jne	.LBB100_7
	jmp	.LBB100_8
.LBB100_7:
	lea	rcx, [rbp - 56]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB100_8:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp410:
.Lfunc_end100:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z"
	.p2align	2
"$cppxdata$??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z")@IMGREL # IPToStateXData
	.long	136                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z@4HA"@IMGREL # Action
"$ip2state$??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z":
	.long	.Lfunc_begin100@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp404@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp405@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z"
                                        # -- End function
	.def	 "??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z"
	.globl	"??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z" # -- Begin function ??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z
	.p2align	4, 0x90
"??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z": # @"??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z"
.Lfunc_begin101:
	.cv_func_id 101
	.cv_loc	101 2 334 0             # ..\include\gsl/span:334:0
.seh_proc "??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	byte ptr [rsp + 56], dl
	mov	qword ptr [rsp + 48], rcx
	mov	rax, qword ptr [rsp + 48]
.Ltmp411:
	lea	rcx, [rsp + 56]
	#DEBUG_VALUE: extent_type<10>:ext <- [$rcx+0]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?size@?$extent_type@$09@details@gsl@@QEBA_JXZ"
.Ltmp412:
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rcx], rax
	mov	rax, qword ptr [rsp + 64]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 72
	ret
.Ltmp413:
.Lfunc_end101:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$extent_type@$09@details@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$extent_type@$09@details@gsl@@QEBA_JXZ"
	.globl	"?size@?$extent_type@$09@details@gsl@@QEBA_JXZ" # -- Begin function ?size@?$extent_type@$09@details@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$extent_type@$09@details@gsl@@QEBA_JXZ": # @"?size@?$extent_type@$09@details@gsl@@QEBA_JXZ"
.Lfunc_begin102:
	.cv_func_id 102
	.cv_loc	102 2 323 0             # ..\include\gsl/span:323:0
.seh_proc "?size@?$extent_type@$09@details@gsl@@QEBA_JXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	eax, 10
                                        # kill: def $rax killed $eax
	mov	qword ptr [rsp], rcx
.Ltmp414:
	pop	rcx
	ret
.Ltmp415:
.Lfunc_end102:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$extent_type@$09@details@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z"
	.globl	"??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z" # -- Begin function ??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z
	.p2align	4, 0x90
"??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z": # @"??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z"
.Lfunc_begin103:
	.cv_func_id 103
	.cv_loc	103 2 146 0             # ..\include\gsl/span:146:0
.seh_proc "??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	qword ptr [rsp + 16], r8
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp416:
	mov	rdx, qword ptr [rsp + 8]
	mov	qword ptr [rcx], rdx
	mov	rdx, qword ptr [rsp + 16]
	mov	qword ptr [rcx + 8], rdx
	mov	rax, rcx
	add	rsp, 24
	ret
.Ltmp417:
.Lfunc_end103:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	.globl	"?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # -- Begin function ?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ
	.p2align	4, 0x90
"?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ": # @"?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
.Lfunc_begin104:
	.cv_func_id 104
	.cv_loc	104 2 519 0             # ..\include\gsl/span:519:0
.seh_proc "?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, rdx
	mov	qword ptr [rsp + 64], rcx
	mov	rcx, qword ptr [rsp + 64]
.Ltmp418:
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	mov	qword ptr [rsp + 40], rdx # 8-byte Spill
	call	"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	r8, rax
	call	"??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z"
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 72
	ret
.Ltmp419:
.Lfunc_end104:
	.seh_handlerdata
	.section	.text,"xr",discard,"?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ"
	.globl	"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ" # -- Begin function ?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ": # @"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ"
.Lfunc_begin105:
	.cv_func_id 105
	.cv_loc	105 2 498 0             # ..\include\gsl/span:498:0
.seh_proc "?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp420:
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	nop
	add	rsp, 40
	ret
.Ltmp421:
.Lfunc_end105:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z"
	.globl	"??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z" # -- Begin function ??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z
	.p2align	4, 0x90
"??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z": # @"??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z"
.Lfunc_begin106:
	.cv_func_id 106
	.cv_loc	106 2 146 0             # ..\include\gsl/span:146:0
.seh_proc "??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	qword ptr [rsp + 16], r8
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp422:
	mov	rdx, qword ptr [rsp + 8]
	mov	qword ptr [rcx], rdx
	mov	rdx, qword ptr [rsp + 16]
	mov	qword ptr [rcx + 8], rdx
	mov	rax, rcx
	add	rsp, 24
	ret
.Ltmp423:
.Lfunc_end106:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	.globl	"?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # -- Begin function ?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ
	.p2align	4, 0x90
"?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ": # @"?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
.Lfunc_begin107:
	.cv_func_id 107
	.cv_loc	107 2 518 0             # ..\include\gsl/span:518:0
.seh_proc "?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, rdx
	xor	r8d, r8d
                                        # kill: def $r8 killed $r8d
	mov	qword ptr [rsp + 64], rcx
	mov	rcx, qword ptr [rsp + 64]
.Ltmp424:
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	call	"??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z"
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 72
	ret
.Ltmp425:
.Lfunc_end107:
	.seh_handlerdata
	.section	.text,"xr",discard,"?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$narrow@_J_J@gsl@@YA_J_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$narrow@_J_J@gsl@@YA_J_J@Z"
	.globl	"??$narrow@_J_J@gsl@@YA_J_J@Z" # -- Begin function ??$narrow@_J_J@gsl@@YA_J_J@Z
	.p2align	4, 0x90
"??$narrow@_J_J@gsl@@YA_J_J@Z":         # @"??$narrow@_J_J@gsl@@YA_J_J@Z"
.Lfunc_begin108:
	.cv_func_id 108
	.cv_loc	108 7 124 0             # ..\include\gsl/gsl_util:124:0
.seh_proc "??$narrow@_J_J@gsl@@YA_J_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 96
	.seh_stackalloc 96
	lea	rbp, [rsp + 96]
	.seh_setframe 5, 96
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx
.Ltmp428:
	.cv_loc	108 7 125 0             # ..\include\gsl/gsl_util:125:0
	lea	rcx, [rbp - 16]
	#DEBUG_VALUE: narrow<long long,long long>:u <- [$rcx+0]
	call	"??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z"
.Ltmp429:
	mov	qword ptr [rbp - 24], rax
	.cv_loc	108 7 126 0             # ..\include\gsl/gsl_util:126:0
	mov	rax, qword ptr [rbp - 24]
	cmp	rax, qword ptr [rbp - 16]
	je	.LBB108_4
# %bb.1:
.Ltmp430:
	.cv_loc	108 7 126 0             # ..\include\gsl/gsl_util:126:0
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rbp - 48], xmm0
	mov	qword ptr [rbp - 32], 0
	lea	rax, [rbp - 48]
	mov	rcx, rax
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??0narrowing_error@gsl@@QEAA@XZ"
.Ltmp426:
	mov	rcx, qword ptr [rbp - 56] # 8-byte Reload
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
.Ltmp427:
	jmp	.LBB108_2
.LBB108_2:
	ud2
.Ltmp431:
.LBB108_4:
	.cv_loc	108 7 129 0             # ..\include\gsl/gsl_util:129:0
	mov	rax, qword ptr [rbp - 24]
	add	rsp, 96
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$narrow@_J_J@gsl@@YA_J_J@Z")@IMGREL
	.section	.text,"xr",discard,"??$narrow@_J_J@gsl@@YA_J_J@Z"
	.seh_endproc
	.def	 "?dtor$3@?0???$narrow@_J_J@gsl@@YA_J_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0???$narrow@_J_J@gsl@@YA_J_J@Z@4HA":
.seh_proc "?dtor$3@?0???$narrow@_J_J@gsl@@YA_J_J@Z@4HA"
.LBB108_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
	.seh_endprologue
	lea	rcx, [rbp - 48]
.Ltmp432:
	.cv_loc	108 7 126 0             # ..\include\gsl/gsl_util:126:0
	call	"??1narrowing_error@gsl@@UEAA@XZ"
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp433:
.Lfunc_end108:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$narrow@_J_J@gsl@@YA_J_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$narrow@_J_J@gsl@@YA_J_J@Z"
	.p2align	2
"$cppxdata$??$narrow@_J_J@gsl@@YA_J_J@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$narrow@_J_J@gsl@@YA_J_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$narrow@_J_J@gsl@@YA_J_J@Z")@IMGREL # IPToStateXData
	.long	88                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$narrow@_J_J@gsl@@YA_J_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$3@?0???$narrow@_J_J@gsl@@YA_J_J@Z@4HA"@IMGREL # Action
"$ip2state$??$narrow@_J_J@gsl@@YA_J_J@Z":
	.long	.Lfunc_begin108@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp426@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp427@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$narrow@_J_J@gsl@@YA_J_J@Z"
                                        # -- End function
	.def	 "?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ"
	.globl	"?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ" # -- Begin function ?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ": # @"?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ"
.Lfunc_begin109:
	.cv_func_id 109
	.cv_loc	109 5 295 0             # ..\include\gsl/string_span:295:0
.seh_proc "?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp434:
	call	"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ"
	nop
	add	rsp, 40
	ret
.Ltmp435:
.Lfunc_end109:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	.globl	"?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ" # -- Begin function ?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ
	.p2align	4, 0x90
"?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ": # @"?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
.Lfunc_begin110:
	.cv_func_id 110
	.cv_loc	110 5 292 0             # ..\include\gsl/string_span:292:0
.seh_proc "?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp436:
	call	"?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	nop
	add	rsp, 40
	ret
.Ltmp437:
.Lfunc_end110:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	.globl	"??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z" # -- Begin function ??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z
	.p2align	4, 0x90
"??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z": # @"??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
.Lfunc_begin111:
	.cv_func_id 111
	.cv_loc	111 2 386 0             # ..\include\gsl/span:386:0
.seh_proc "??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], r8
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp438:
	mov	r8, qword ptr [rsp + 64]
	mov	rdx, qword ptr [rsp + 56]
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	call	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 72
	ret
.Ltmp439:
.Lfunc_end111:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z"
	.globl	"??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z" # -- Begin function ??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z
	.p2align	4, 0x90
"??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z": # @"??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z"
.Lfunc_begin112:
	.cv_func_id 112
	.cv_loc	112 7 99 0              # ..\include\gsl/gsl_util:99:0
.seh_proc "??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
.Ltmp440:
	.cv_loc	112 7 100 0             # ..\include\gsl/gsl_util:100:0
	mov	rcx, qword ptr [rsp + 32]
	call	"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
	mov	rax, qword ptr [rax]
	add	rsp, 40
	ret
.Ltmp441:
.Lfunc_end112:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
	.globl	"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z" # -- Begin function ??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z
	.p2align	4, 0x90
"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z": # @"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
.Lfunc_begin113:
	.cv_func_id 113
	.cv_loc	113 6 143 0             # ..\include\gsl/gsl_assert:143:0
.seh_proc "??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	qword ptr [rsp + 80], rcx
.Ltmp442:
	.cv_loc	113 6 144 0             # ..\include\gsl/gsl_assert:144:0
	mov	rcx, qword ptr [rsp + 80]
	call	"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z"
	lea	rcx, [rsp + 56]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rdx, rax
	call	"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z"
	lea	rdx, [rip + "_TI2?AUnarrowing_error@gsl@@"]
	mov	rcx, qword ptr [rip + __imp__CxxThrowException]
	mov	r8, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, r8
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	r9
	ud2
.Ltmp443:
.Lfunc_end113:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0narrowing_error@gsl@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0narrowing_error@gsl@@QEAA@XZ"
	.globl	"??0narrowing_error@gsl@@QEAA@XZ" # -- Begin function ??0narrowing_error@gsl@@QEAA@XZ
	.p2align	4, 0x90
"??0narrowing_error@gsl@@QEAA@XZ":      # @"??0narrowing_error@gsl@@QEAA@XZ"
.Lfunc_begin114:
	.cv_func_id 114
	.cv_loc	114 7 103 0             # ..\include\gsl/gsl_util:103:0
.seh_proc "??0narrowing_error@gsl@@QEAA@XZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp444:
	mov	rax, rcx
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rax
	call	"??0exception@std@@QEAA@XZ"
	lea	rcx, [rip + "??_7narrowing_error@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 56
	ret
.Ltmp445:
.Lfunc_end114:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0narrowing_error@gsl@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??1narrowing_error@gsl@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1narrowing_error@gsl@@UEAA@XZ"
	.globl	"??1narrowing_error@gsl@@UEAA@XZ" # -- Begin function ??1narrowing_error@gsl@@UEAA@XZ
	.p2align	4, 0x90
"??1narrowing_error@gsl@@UEAA@XZ":      # @"??1narrowing_error@gsl@@UEAA@XZ"
.Lfunc_begin115:
	.cv_func_id 115
	.cv_loc	115 7 103 0             # ..\include\gsl/gsl_util:103:0
.seh_proc "??1narrowing_error@gsl@@UEAA@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp446:
	.cv_loc	115 7 103 0             # ..\include\gsl/gsl_util:103:0
	call	"??1exception@std@@UEAA@XZ"
.Ltmp447:
	.cv_loc	115 7 103 0             # ..\include\gsl/gsl_util:103:0
	nop
	add	rsp, 40
	ret
.Ltmp448:
.Lfunc_end115:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1narrowing_error@gsl@@UEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z"
	.globl	"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z" # -- Begin function ??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z
	.p2align	4, 0x90
"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z": # @"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z"
.Lfunc_begin116:
	.cv_func_id 116
	.cv_loc	116 8 1573 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1573:0
.seh_proc "??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp449:
	.cv_loc	116 8 1574 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1574:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp450:
.Lfunc_end116:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z"
	.globl	"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z" # -- Begin function ??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z
	.p2align	4, 0x90
"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z": # @"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z"
.Lfunc_begin117:
	.cv_func_id 117
	.cv_loc	117 7 103 0             # ..\include\gsl/gsl_util:103:0
.seh_proc "??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp451:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7narrowing_error@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp452:
.Lfunc_end117:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0narrowing_error@gsl@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0narrowing_error@gsl@@QEAA@AEBU01@@Z"
	.globl	"??0narrowing_error@gsl@@QEAA@AEBU01@@Z" # -- Begin function ??0narrowing_error@gsl@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0narrowing_error@gsl@@QEAA@AEBU01@@Z": # @"??0narrowing_error@gsl@@QEAA@AEBU01@@Z"
.Lfunc_begin118:
	.cv_func_id 118
	.cv_loc	118 7 103 0             # ..\include\gsl/gsl_util:103:0
.seh_proc "??0narrowing_error@gsl@@QEAA@AEBU01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp453:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7narrowing_error@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp454:
.Lfunc_end118:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0narrowing_error@gsl@@QEAA@AEBU01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??_Gnarrowing_error@gsl@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z"
	.globl	"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z" # -- Begin function ??_Gnarrowing_error@gsl@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z": # @"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z"
.Lfunc_begin119:
	.cv_func_id 119
	.cv_loc	119 7 103 0             # ..\include\gsl/gsl_util:103:0
.seh_proc "??_Gnarrowing_error@gsl@@UEAAPEAXI@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	dword ptr [rsp + 60], edx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
	mov	rax, rcx
	mov	qword ptr [rsp + 64], rax
	mov	edx, dword ptr [rsp + 60]
.Ltmp455:
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	dword ptr [rsp + 36], edx # 4-byte Spill
	call	"??1narrowing_error@gsl@@UEAA@XZ"
	mov	edx, dword ptr [rsp + 36] # 4-byte Reload
	cmp	edx, 0
	je	.LBB119_2
# %bb.1:
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	mov	rcx, rax
	call	"??3@YAXPEAX@Z"
.LBB119_2:
	mov	rax, qword ptr [rsp + 64]
	add	rsp, 72
	ret
.Ltmp456:
.Lfunc_end119:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0exception@std@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QEAA@XZ"
	.globl	"??0exception@std@@QEAA@XZ" # -- Begin function ??0exception@std@@QEAA@XZ
	.p2align	4, 0x90
"??0exception@std@@QEAA@XZ":            # @"??0exception@std@@QEAA@XZ"
.Lfunc_begin120:
	.cv_func_id 120
	.cv_loc	120 10 50 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:50:0
.seh_proc "??0exception@std@@QEAA@XZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	xor	edx, edx
	mov	eax, 16
	mov	r8d, eax
	lea	r9, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp457:
	mov	qword ptr [rcx], r9
	mov	r9, rcx
	add	r9, 8
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, r9
	call	memset
	.cv_loc	120 10 51 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:51:0
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 56
	ret
.Ltmp458:
.Lfunc_end120:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0exception@std@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	.globl	"?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ" # -- Begin function ?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ
	.p2align	4, 0x90
"?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ": # @"?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
.Lfunc_begin121:
	.cv_func_id 121
	.cv_loc	121 2 515 0             # ..\include\gsl/span:515:0
.seh_proc "?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp459:
	call	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	nop
	add	rsp, 40
	ret
.Ltmp460:
.Lfunc_end121:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	.globl	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ" # -- Begin function ?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ
	.p2align	4, 0x90
"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ": # @"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
.Lfunc_begin122:
	.cv_func_id 122
	.cv_loc	122 2 602 0             # ..\include\gsl/span:602:0
.seh_proc "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp461:
	mov	rax, qword ptr [rcx + 8]
	pop	rcx
	ret
.Ltmp462:
.Lfunc_end122:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	.globl	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z" # -- Begin function ??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z
	.p2align	4, 0x90
"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z": # @"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
.Lfunc_begin123:
	.cv_func_id 123
	.cv_loc	123 2 597 0             # ..\include\gsl/span:597:0
.seh_proc "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 192
	.seh_stackalloc 192
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 56], -2
	mov	qword ptr [rbp + 40], r8
	mov	qword ptr [rbp + 32], rdx
	mov	qword ptr [rbp + 24], rcx
	mov	rcx, qword ptr [rbp + 24]
	mov	qword ptr [rbp + 48], rcx
.Ltmp467:
	mov	rdx, rcx
	mov	r8, qword ptr [rbp + 40]
	mov	qword ptr [rbp - 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, r8
	call	"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	mov	rcx, qword ptr [rbp + 32]
	mov	rdx, qword ptr [rbp - 48] # 8-byte Reload
	mov	qword ptr [rdx + 8], rcx
.Ltmp468:
	.cv_loc	123 2 598 0             # ..\include\gsl/span:598:0
	mov	rcx, rdx
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	r9b
	mov	byte ptr [rbp - 1], 0
	test	r9b, 1
	jne	.LBB123_1
	jmp	.LBB123_2
.LBB123_1:
	test	byte ptr [rbp - 1], 1
	jne	.LBB123_4
	jmp	.LBB123_5
.LBB123_2:
	lea	rdx, [rip + "??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	mov	rax, rbp
	mov	rcx, rax
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 1], 1
.Ltmp463:
	mov	rcx, qword ptr [rbp - 64] # 8-byte Reload
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp464:
	jmp	.LBB123_3
.LBB123_3:
	ud2
.LBB123_4:
	mov	rcx, rbp
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB123_5:
	.cv_loc	123 2 599 0             # ..\include\gsl/span:599:0
	mov	rax, qword ptr [rbp + 32]
	mov	byte ptr [rbp - 33], 0
	cmp	rax, 0
	mov	cl, 1
	mov	byte ptr [rbp - 73], cl # 1-byte Spill
	jne	.LBB123_7
# %bb.6:
	mov	rax, qword ptr [rbp - 48] # 8-byte Reload
	mov	rcx, rax
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rbp - 73], dl # 1-byte Spill
.LBB123_7:
	mov	al, byte ptr [rbp - 73] # 1-byte Reload
	test	al, 1
	jne	.LBB123_8
	jmp	.LBB123_9
.LBB123_8:
	test	byte ptr [rbp - 33], 1
	jne	.LBB123_14
	jmp	.LBB123_15
.LBB123_9:
	lea	rdx, [rip + "??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 32]
	mov	rcx, rax
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 33], 1
.Ltmp465:
	mov	rcx, qword ptr [rbp - 88] # 8-byte Reload
	mov	qword ptr [rbp - 96], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp466:
	jmp	.LBB123_10
.LBB123_10:
	ud2
.LBB123_14:
	lea	rcx, [rbp - 32]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp469:
.LBB123_15:
	.cv_loc	123 2 600 0             # ..\include\gsl/span:600:0
	mov	rax, qword ptr [rbp + 48]
	add	rsp, 192
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	.seh_endproc
	.def	 "?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z@4HA":
.seh_proc "?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z@4HA"
.LBB123_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp470:
	.cv_loc	123 2 598 0             # ..\include\gsl/span:598:0
	test	byte ptr [rbp - 1], 1
	jne	.LBB123_12
	jmp	.LBB123_13
.LBB123_12:
	mov	rcx, rbp
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB123_13:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	.seh_endproc
	.def	 "?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z@4HA":
.seh_proc "?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z@4HA"
.LBB123_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	123 2 599 0             # ..\include\gsl/span:599:0
	test	byte ptr [rbp - 33], 1
	jne	.LBB123_17
	jmp	.LBB123_18
.LBB123_17:
	lea	rcx, [rbp - 32]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB123_18:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp471:
.Lfunc_end123:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	.p2align	2
"$cppxdata$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z")@IMGREL # IPToStateXData
	.long	184                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z@4HA"@IMGREL # Action
"$ip2state$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z":
	.long	.Lfunc_begin123@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp463@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp464@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp465@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp466@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
                                        # -- End function
	.def	 "?data@?$span@G$0?0@gsl@@QEBAPEAGXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$span@G$0?0@gsl@@QEBAPEAGXZ"
	.globl	"?data@?$span@G$0?0@gsl@@QEBAPEAGXZ" # -- Begin function ?data@?$span@G$0?0@gsl@@QEBAPEAGXZ
	.p2align	4, 0x90
"?data@?$span@G$0?0@gsl@@QEBAPEAGXZ":   # @"?data@?$span@G$0?0@gsl@@QEBAPEAGXZ"
.Lfunc_begin124:
	.cv_func_id 124
	.cv_loc	124 2 515 0             # ..\include\gsl/span:515:0
.seh_proc "?data@?$span@G$0?0@gsl@@QEBAPEAGXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp472:
	call	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ"
	nop
	add	rsp, 40
	ret
.Ltmp473:
.Lfunc_end124:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$span@G$0?0@gsl@@QEBAPEAGXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ"
	.globl	"?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ" # -- Begin function ?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ": # @"?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ"
.Lfunc_begin125:
	.cv_func_id 125
	.cv_loc	125 2 500 0             # ..\include\gsl/span:500:0
.seh_proc "?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp474:
	.cv_loc	125 2 501 0             # ..\include\gsl/span:501:0
	call	"?size@?$span@G$0?0@gsl@@QEBA_JXZ"
	mov	qword ptr [rsp + 56], 2
	lea	rcx, [rsp + 56]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	imul	rcx, rax
	mov	rax, qword ptr [rsp + 64]
	xor	rax, rsp
	mov	qword ptr [rsp + 32], rcx # 8-byte Spill
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 32] # 8-byte Reload
	add	rsp, 72
	ret
.Ltmp475:
.Lfunc_end125:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
	.globl	"??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z" # -- Begin function ??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z
	.p2align	4, 0x90
"??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z":   # @"??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
.Lfunc_begin126:
	.cv_func_id 126
	.cv_loc	126 2 386 0             # ..\include\gsl/span:386:0
.seh_proc "??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], r8
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp476:
	mov	r8, qword ptr [rsp + 64]
	mov	rdx, qword ptr [rsp + 56]
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	call	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 72
	ret
.Ltmp477:
.Lfunc_end126:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ"
	.globl	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ" # -- Begin function ?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ
	.p2align	4, 0x90
"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ": # @"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ"
.Lfunc_begin127:
	.cv_func_id 127
	.cv_loc	127 2 602 0             # ..\include\gsl/span:602:0
.seh_proc "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp478:
	mov	rax, qword ptr [rcx + 8]
	pop	rcx
	ret
.Ltmp479:
.Lfunc_end127:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$span@G$0?0@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$span@G$0?0@gsl@@QEBA_JXZ"
	.globl	"?size@?$span@G$0?0@gsl@@QEBA_JXZ" # -- Begin function ?size@?$span@G$0?0@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$span@G$0?0@gsl@@QEBA_JXZ":     # @"?size@?$span@G$0?0@gsl@@QEBA_JXZ"
.Lfunc_begin128:
	.cv_func_id 128
	.cv_loc	128 2 498 0             # ..\include\gsl/span:498:0
.seh_proc "?size@?$span@G$0?0@gsl@@QEBA_JXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp480:
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	nop
	add	rsp, 40
	ret
.Ltmp481:
.Lfunc_end128:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$span@G$0?0@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z"
	.globl	"??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z" # -- Begin function ??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z
	.p2align	4, 0x90
"??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z": # @"??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z"
.Lfunc_begin129:
	.cv_func_id 129
	.cv_loc	129 7 99 0              # ..\include\gsl/gsl_util:99:0
.seh_proc "??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
.Ltmp482:
	.cv_loc	129 7 100 0             # ..\include\gsl/gsl_util:100:0
	mov	rcx, qword ptr [rsp + 32]
	call	"??$forward@_K@std@@YA$$QEA_KAEA_K@Z"
	mov	rax, qword ptr [rax]
	add	rsp, 40
	ret
.Ltmp483:
.Lfunc_end129:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$forward@_K@std@@YA$$QEA_KAEA_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$forward@_K@std@@YA$$QEA_KAEA_K@Z"
	.globl	"??$forward@_K@std@@YA$$QEA_KAEA_K@Z" # -- Begin function ??$forward@_K@std@@YA$$QEA_KAEA_K@Z
	.p2align	4, 0x90
"??$forward@_K@std@@YA$$QEA_KAEA_K@Z":  # @"??$forward@_K@std@@YA$$QEA_KAEA_K@Z"
.Lfunc_begin130:
	.cv_func_id 130
	.cv_loc	130 8 1573 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1573:0
.seh_proc "??$forward@_K@std@@YA$$QEA_KAEA_K@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp484:
	.cv_loc	130 8 1574 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1574:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp485:
.Lfunc_end130:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$forward@_K@std@@YA$$QEA_KAEA_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
	.globl	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z" # -- Begin function ??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z
	.p2align	4, 0x90
"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z": # @"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
.Lfunc_begin131:
	.cv_func_id 131
	.cv_loc	131 2 597 0             # ..\include\gsl/span:597:0
.seh_proc "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 192
	.seh_stackalloc 192
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 56], -2
	mov	qword ptr [rbp + 40], r8
	mov	qword ptr [rbp + 32], rdx
	mov	qword ptr [rbp + 24], rcx
	mov	rcx, qword ptr [rbp + 24]
	mov	qword ptr [rbp + 48], rcx
.Ltmp490:
	mov	rdx, rcx
	mov	r8, qword ptr [rbp + 40]
	mov	qword ptr [rbp - 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, r8
	call	"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	mov	rcx, qword ptr [rbp + 32]
	mov	rdx, qword ptr [rbp - 48] # 8-byte Reload
	mov	qword ptr [rdx + 8], rcx
.Ltmp491:
	.cv_loc	131 2 598 0             # ..\include\gsl/span:598:0
	mov	rcx, rdx
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	r9b
	mov	byte ptr [rbp - 1], 0
	test	r9b, 1
	jne	.LBB131_1
	jmp	.LBB131_2
.LBB131_1:
	test	byte ptr [rbp - 1], 1
	jne	.LBB131_4
	jmp	.LBB131_5
.LBB131_2:
	lea	rdx, [rip + "??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	mov	rax, rbp
	mov	rcx, rax
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 1], 1
.Ltmp486:
	mov	rcx, qword ptr [rbp - 64] # 8-byte Reload
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp487:
	jmp	.LBB131_3
.LBB131_3:
	ud2
.LBB131_4:
	mov	rcx, rbp
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB131_5:
	.cv_loc	131 2 599 0             # ..\include\gsl/span:599:0
	mov	rax, qword ptr [rbp + 32]
	mov	byte ptr [rbp - 33], 0
	cmp	rax, 0
	mov	cl, 1
	mov	byte ptr [rbp - 73], cl # 1-byte Spill
	jne	.LBB131_7
# %bb.6:
	mov	rax, qword ptr [rbp - 48] # 8-byte Reload
	mov	rcx, rax
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rbp - 73], dl # 1-byte Spill
.LBB131_7:
	mov	al, byte ptr [rbp - 73] # 1-byte Reload
	test	al, 1
	jne	.LBB131_8
	jmp	.LBB131_9
.LBB131_8:
	test	byte ptr [rbp - 33], 1
	jne	.LBB131_14
	jmp	.LBB131_15
.LBB131_9:
	lea	rdx, [rip + "??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 32]
	mov	rcx, rax
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 33], 1
.Ltmp488:
	mov	rcx, qword ptr [rbp - 88] # 8-byte Reload
	mov	qword ptr [rbp - 96], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp489:
	jmp	.LBB131_10
.LBB131_10:
	ud2
.LBB131_14:
	lea	rcx, [rbp - 32]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp492:
.LBB131_15:
	.cv_loc	131 2 600 0             # ..\include\gsl/span:600:0
	mov	rax, qword ptr [rbp + 48]
	add	rsp, 192
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
	.seh_endproc
	.def	 "?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z@4HA":
.seh_proc "?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z@4HA"
.LBB131_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp493:
	.cv_loc	131 2 598 0             # ..\include\gsl/span:598:0
	test	byte ptr [rbp - 1], 1
	jne	.LBB131_12
	jmp	.LBB131_13
.LBB131_12:
	mov	rcx, rbp
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB131_13:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
	.seh_endproc
	.def	 "?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z@4HA":
.seh_proc "?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z@4HA"
.LBB131_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	131 2 599 0             # ..\include\gsl/span:599:0
	test	byte ptr [rbp - 33], 1
	jne	.LBB131_17
	jmp	.LBB131_18
.LBB131_17:
	lea	rcx, [rbp - 32]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB131_18:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp494:
.Lfunc_end131:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
	.p2align	2
"$cppxdata$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z")@IMGREL # IPToStateXData
	.long	184                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z@4HA"@IMGREL # Action
"$ip2state$??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z":
	.long	.Lfunc_begin131@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp486@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp487@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp488@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp489@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
                                        # -- End function
	.def	 "??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z"
	.globl	"??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z" # -- Begin function ??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z
	.p2align	4, 0x90
"??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z": # @"??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z"
.Lfunc_begin132:
	.cv_func_id 132
	.cv_loc	132 3 615 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:615:0
.seh_proc "??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp495:
	.cv_loc	132 3 616 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:616:0
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40]
	mov	r8b, byte ptr [rsp + 32]
	call	"??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z"
	.cv_loc	132 3 617 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:617:0
	nop
	add	rsp, 56
	ret
.Ltmp496:
.Lfunc_end132:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z"
	.globl	"??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z" # -- Begin function ??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z
	.p2align	4, 0x90
"??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z": # @"??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z"
.Lfunc_begin133:
	.cv_func_id 133
	.cv_loc	133 3 642 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:642:0
.seh_proc "??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
.Ltmp497:
	.cv_loc	133 3 643 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:643:0
	mov	rcx, qword ptr [rsp + 32]
	call	"?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ"
	nop
	add	rsp, 40
	ret
.Ltmp498:
.Lfunc_end133:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z"
	.globl	"??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z" # -- Begin function ??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z
	.p2align	4, 0x90
"??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z": # @"??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z"
.Lfunc_begin134:
	.cv_func_id 134
	.cv_loc	134 3 760 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:760:0
.seh_proc "??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	qword ptr [rsp + 80], rdx
	mov	qword ptr [rsp + 72], rcx
.Ltmp499:
	.cv_loc	134 3 763 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:763:0
	mov	rcx, qword ptr [rsp + 80]
	mov	qword ptr [rsp + 64], rcx
# %bb.1:
.Ltmp500:
	.cv_loc	134 3 765 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:765:0
	movabs	rax, 9223372036854775807
	cmp	qword ptr [rsp + 64], rax
	jg	.LBB134_4
# %bb.2:
	movabs	rax, -9223372036854775808
	cmp	rax, qword ptr [rsp + 64]
	jg	.LBB134_4
# %bb.3:
.Ltmp501:
	.cv_loc	134 3 765 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:765:0
	jmp	.LBB134_9
.Ltmp502:
.LBB134_4:
	.cv_loc	134 3 765 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:765:0
	jmp	.LBB134_5
.LBB134_5:
.Ltmp503:
	.cv_loc	134 3 765 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:765:0
	lea	rax, [rip + "??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@"]
	mov	rcx, rsp
	mov	qword ptr [rcx + 40], rax
	lea	rax, [rip + "??_C@_02DKCKIIND@?$CFs?$AA@"]
	mov	qword ptr [rcx + 32], rax
	lea	rdx, [rip + "??_C@_0GJ@NMPOIJPD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@"]
	mov	rax, qword ptr [rip + __imp__CrtDbgReport]
	xor	r8d, r8d
	mov	r9d, r8d
	mov	ecx, 2
	mov	r8d, 767
	call	rax
	mov	ecx, 1
	cmp	ecx, eax
	jne	.LBB134_7
# %bb.6:
	int3
.LBB134_7:
	xor	eax, eax
	mov	ecx, eax
	lea	rdx, [rip + "??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?$CC?$AA?$AA@"]
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	rcx, rdx
	lea	rdx, [rip + "??_C@_1CC@GJHFANPG@?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa?$AAp?$AAp?$AAe?$AAd?$AA_?$AAn?$AA?$AA@"]
	lea	r8, [rip + "??_C@_1NC@PGCJAEEB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@"]
	mov	r9d, 767
	mov	qword ptr [rsp + 32], 0
	call	qword ptr [rip + __imp__invalid_parameter]
.Ltmp504:
# %bb.8:
	.cv_loc	134 3 765 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:765:0
	jmp	.LBB134_9
.Ltmp505:
.LBB134_9:
	.cv_loc	134 3 765 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:765:0
	jmp	.LBB134_10
.Ltmp506:
.LBB134_10:
	.cv_loc	134 3 770 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:770:0
	mov	rcx, qword ptr [rsp + 72]
	mov	rdx, qword ptr [rsp + 80]
	call	"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.cv_loc	134 3 771 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:771:0
	mov	rcx, qword ptr [rsp + 72]
	call	"?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ"
	nop
	add	rsp, 88
	ret
.Ltmp507:
.Lfunc_end134:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z"
	.globl	"??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z" # -- Begin function ??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z
	.p2align	4, 0x90
"??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z": # @"??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z"
.Lfunc_begin135:
	.cv_func_id 135
	.cv_loc	135 3 974 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:974:0
.seh_proc "??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp508:
	.cv_loc	135 3 975 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:975:0
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40]
	mov	r8b, byte ptr [rsp + 32]
	call	"??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z"
	nop
	add	rsp, 56
	ret
.Ltmp509:
.Lfunc_end135:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z"
	.globl	"??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z" # -- Begin function ??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z
	.p2align	4, 0x90
"??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z": # @"??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z"
.Lfunc_begin136:
	.cv_func_id 136
	.cv_loc	136 3 856 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:856:0
.seh_proc "??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp510:
	.cv_loc	136 3 857 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:857:0
	mov	rcx, qword ptr [rsp + 40]
	mov	rdx, qword ptr [rsp + 48]
	mov	rdx, qword ptr [rdx]
	call	"?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z"
	.cv_loc	136 3 858 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:858:0
	nop
	add	rsp, 56
	ret
.Ltmp511:
.Lfunc_end136:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z"
	.globl	"??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z" # -- Begin function ??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z
	.p2align	4, 0x90
"??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z": # @"??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z"
.Lfunc_begin137:
	.cv_func_id 137
	.cv_loc	137 3 2432 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2432:0
.seh_proc "??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 80], rax
	mov	qword ptr [rsp + 72], r8
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 64], rcx
.Ltmp512:
	.cv_loc	137 3 2434 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2434:0
	lea	rcx, [rsp + 56]
	lea	rdx, [rsp + 64]
	#DEBUG_VALUE: _Copy_unchecked<int *,int *>:_First <- [$rdx+0]
	lea	r8, [rsp + 72]
	#DEBUG_VALUE: _Copy_unchecked<int *,int *>:_Dest <- [$r8+0]
	call	"??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z"
.Ltmp513:
	mov	r8, qword ptr [rsp + 72]
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 64]
	mov	r9b, byte ptr [rsp + 40]
	call	"??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z"
	mov	rcx, qword ptr [rsp + 80]
	xor	rcx, rsp
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 32] # 8-byte Reload
	add	rsp, 88
	ret
.Ltmp514:
.Lfunc_end137:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z"
	.globl	"??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z" # -- Begin function ??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z
	.p2align	4, 0x90
"??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z": # @"??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z"
.Lfunc_begin138:
	.cv_func_id 138
	.cv_loc	138 3 602 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:602:0
.seh_proc "??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z"
# %bb.0:
	sub	rsp, 104
	.seh_stackalloc 104
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 96], rax
	mov	byte ptr [rsp + 56], r8b
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp515:
	.cv_loc	138 3 603 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:603:0
	mov	rax, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rax]
	mov	qword ptr [rsp + 80], rcx
	mov	rax, qword ptr [rax + 8]
	mov	qword ptr [rsp + 88], rax
	mov	rax, qword ptr [rsp + 40]
	mov	rcx, qword ptr [rax]
	mov	qword ptr [rsp + 64], rcx
	mov	rax, qword ptr [rax + 8]
	mov	qword ptr [rsp + 72], rax
	lea	rcx, [rsp + 64]
	lea	rdx, [rsp + 80]
	call	"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z"
	mov	rax, qword ptr [rsp + 96]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	.cv_loc	138 3 604 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:604:0
	nop
	add	rsp, 104
	ret
.Ltmp516:
.Lfunc_end138:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z"
	.globl	"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z" # -- Begin function ?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z
	.p2align	4, 0x90
"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z": # @"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z"
.Lfunc_begin139:
	.cv_func_id 139
	.cv_loc	139 2 264 0             # ..\include\gsl/span:264:0
.seh_proc "?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe 5, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	xor	eax, eax
	mov	r8b, al
	#DEBUG_VALUE: _Verify_range:rhs <- [$rdx+0]
	#DEBUG_VALUE: _Verify_range:lhs <- [$rcx+0]
.Ltmp521:
	.cv_loc	139 2 265 0             # ..\include\gsl/span:265:0
	mov	r9, qword ptr [rcx]
	mov	r10, qword ptr [rdx]
	mov	byte ptr [rbp - 33], 0
	cmp	r9, r10
	mov	qword ptr [rbp - 48], rdx # 8-byte Spill
.Ltmp522:
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	qword ptr [rbp - 56], rcx # 8-byte Spill
.Ltmp523:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	byte ptr [rbp - 57], r8b # 1-byte Spill
	jne	.LBB139_2
.Ltmp524:
# %bb.1:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	rax, qword ptr [rbp - 56] # 8-byte Reload
	mov	rcx, qword ptr [rax + 8]
	mov	rdx, qword ptr [rbp - 48] # 8-byte Reload
	cmp	rcx, qword ptr [rdx + 8]
	setle	r8b
	mov	byte ptr [rbp - 57], r8b # 1-byte Spill
.Ltmp525:
.LBB139_2:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	al, byte ptr [rbp - 57] # 1-byte Reload
	test	al, 1
	jne	.LBB139_3
	jmp	.LBB139_4
.Ltmp526:
.LBB139_3:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	test	byte ptr [rbp - 33], 1
	jne	.LBB139_7
	jmp	.LBB139_8
.Ltmp527:
.LBB139_4:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
.Ltmp517:
	lea	rdx, [rip + "??_C@_0DG@HPHPLHE@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rcx, [rbp - 32]
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
.Ltmp518:
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	jmp	.LBB139_5
.Ltmp528:
.LBB139_5:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	byte ptr [rbp - 33], 1
.Ltmp519:
	lea	rcx, [rbp - 32]
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp520:
	jmp	.LBB139_6
.Ltmp529:
.LBB139_6:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	ud2
.Ltmp530:
.LBB139_7:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	lea	rcx, [rbp - 32]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp531:
.LBB139_8:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	.cv_loc	139 2 267 0             # ..\include\gsl/span:267:0
	nop
	add	rsp, 112
	pop	rbp
.Ltmp532:
	ret
	.seh_handlerdata
	.long	("$cppxdata$?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z")@IMGREL
	.section	.text,"xr",discard,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z"
	.seh_endproc
	.def	 "?dtor$9@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z@4HA":
.seh_proc "?dtor$9@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z@4HA"
.LBB139_9:
.Ltmp533:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
.Ltmp534:
	.seh_endprologue
	.cv_loc	139 2 265 0             # ..\include\gsl/span:265:0
	test	byte ptr [rbp - 33], 1
	jne	.LBB139_10
	jmp	.LBB139_11
.LBB139_10:
	lea	rcx, [rbp - 32]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB139_11:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z"
	.seh_endproc
	.def	 "?dtor$12@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z@4HA":
.seh_proc "?dtor$12@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z@4HA"
.LBB139_12:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp535:
.Lfunc_end139:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z"
	.p2align	2
"$cppxdata$?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z":
	.long	-1                      # ToState
	.long	"?dtor$12@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z@4HA"@IMGREL # Action
	.long	0                       # ToState
	.long	"?dtor$9@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z@4HA"@IMGREL # Action
"$ip2state$?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z":
	.long	.Lfunc_begin139@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp517@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp519@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp520@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z"
                                        # -- End function
	.def	 "?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ"
	.globl	"?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ" # -- Begin function ?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ
	.p2align	4, 0x90
"?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ": # @"?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ"
.Lfunc_begin140:
	.cv_func_id 140
	.cv_loc	140 2 277 0             # ..\include\gsl/span:277:0
.seh_proc "?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp536:
	.cv_loc	140 2 280 0             # ..\include\gsl/span:280:0
	mov	rax, qword ptr [rcx]
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rax
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	rdx, qword ptr [rcx + 8]
	shl	rdx, 2
	add	rax, rdx
	add	rsp, 56
	ret
.Ltmp537:
.Lfunc_end140:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.globl	"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z" # -- Begin function ?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z
	.p2align	4, 0x90
"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z": # @"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
.Lfunc_begin141:
	.cv_func_id 141
	.cv_loc	141 2 270 0             # ..\include\gsl/span:270:0
.seh_proc "?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 128
	.seh_stackalloc 128
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	xor	eax, eax
	mov	r8b, al
	mov	qword ptr [rbp - 16], rdx
	mov	qword ptr [rbp - 24], rcx
	mov	rcx, qword ptr [rbp - 24]
.Ltmp542:
	.cv_loc	141 2 272 0             # ..\include\gsl/span:272:0
	mov	rdx, qword ptr [rcx + 8]
	add	rdx, qword ptr [rbp - 16]
	mov	byte ptr [rbp - 49], 0
	cmp	rdx, 0
	mov	qword ptr [rbp - 64], rcx # 8-byte Spill
	mov	byte ptr [rbp - 65], r8b # 1-byte Spill
	jl	.LBB141_2
# %bb.1:
	mov	rax, qword ptr [rbp - 64] # 8-byte Reload
	mov	rcx, qword ptr [rax + 8]
	add	rcx, qword ptr [rbp - 16]
	mov	rdx, qword ptr [rax]
	mov	qword ptr [rbp - 80], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 80] # 8-byte Reload
	cmp	rcx, rax
	setle	r8b
	mov	byte ptr [rbp - 65], r8b # 1-byte Spill
.LBB141_2:
	mov	al, byte ptr [rbp - 65] # 1-byte Reload
	test	al, 1
	jne	.LBB141_3
	jmp	.LBB141_4
.LBB141_3:
	test	byte ptr [rbp - 49], 1
	jne	.LBB141_7
	jmp	.LBB141_8
.LBB141_4:
.Ltmp538:
	lea	rdx, [rip + "??_C@_0DG@GCFJFEEH@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rcx, [rbp - 48]
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
.Ltmp539:
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	jmp	.LBB141_5
.LBB141_5:
	mov	byte ptr [rbp - 49], 1
.Ltmp540:
	lea	rcx, [rbp - 48]
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp541:
	jmp	.LBB141_6
.LBB141_6:
	ud2
.LBB141_7:
	lea	rcx, [rbp - 48]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB141_8:
	.cv_loc	141 2 273 0             # ..\include\gsl/span:273:0
	nop
	add	rsp, 128
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z")@IMGREL
	.section	.text,"xr",discard,"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.seh_endproc
	.def	 "?dtor$9@?0??_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0??_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA":
.seh_proc "?dtor$9@?0??_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA"
.LBB141_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	141 2 272 0             # ..\include\gsl/span:272:0
	test	byte ptr [rbp - 49], 1
	jne	.LBB141_10
	jmp	.LBB141_11
.LBB141_10:
	lea	rcx, [rbp - 48]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB141_11:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.seh_endproc
	.def	 "?dtor$12@?0??_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0??_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA":
.seh_proc "?dtor$12@?0??_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA"
.LBB141_12:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp543:
.Lfunc_end141:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.p2align	2
"$cppxdata$?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z")@IMGREL # IPToStateXData
	.long	120                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$12@?0??_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA"@IMGREL # Action
	.long	0                       # ToState
	.long	"?dtor$9@?0??_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA"@IMGREL # Action
"$ip2state$?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z":
	.long	.Lfunc_begin141@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp538@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp540@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp541@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
                                        # -- End function
	.def	 "??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z"
	.globl	"??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z" # -- Begin function ??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z
	.p2align	4, 0x90
"??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z": # @"??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z"
.Lfunc_begin142:
	.cv_func_id 142
	.cv_loc	142 3 967 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:967:0
.seh_proc "??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	byte ptr [rsp + 16], r8b
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp544:
	.cv_loc	142 3 968 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:968:0
	mov	rcx, qword ptr [rsp + 8]
	mov	rcx, qword ptr [rcx]
	mov	rdx, qword ptr [rsp]
	mov	rdx, qword ptr [rdx]
	sub	rcx, rdx
	sar	rcx, 2
	mov	rax, rcx
	add	rsp, 24
	ret
.Ltmp545:
.Lfunc_end142:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z"
	.globl	"?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z" # -- Begin function ?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z
	.p2align	4, 0x90
"?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z": # @"?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z"
.Lfunc_begin143:
	.cv_func_id 143
	.cv_loc	143 2 292 0             # ..\include\gsl/span:292:0
.seh_proc "?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp546:
	.cv_loc	143 2 294 0             # ..\include\gsl/span:294:0
	mov	rdx, qword ptr [rsp + 64]
	mov	rax, qword ptr [rcx]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rax
	mov	qword ptr [rsp + 40], rdx # 8-byte Spill
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	sub	rcx, rax
	sar	rcx, 2
	mov	rax, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rax + 8], rcx
	.cv_loc	143 2 295 0             # ..\include\gsl/span:295:0
	add	rsp, 72
	ret
.Ltmp547:
.Lfunc_end143:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z"
	.globl	"??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z" # -- Begin function ??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z
	.p2align	4, 0x90
"??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z": # @"??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z"
.Lfunc_begin144:
	.cv_func_id 144
	.cv_loc	144 3 2424 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2424:0
.seh_proc "??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	byte ptr [rsp + 64], r9b
	mov	qword ptr [rsp + 56], r8
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp548:
	.cv_loc	144 3 2425 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2425:0
	mov	r8, qword ptr [rsp + 56]
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40]
	call	"??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z"
	nop
	add	rsp, 72
	ret
.Ltmp549:
.Lfunc_end144:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z"
	.globl	"??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z" # -- Begin function ??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z
	.p2align	4, 0x90
"??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z": # @"??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z"
.Lfunc_begin145:
	.cv_func_id 145
	.cv_loc	145 3 1069 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:1069:0
.seh_proc "??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], r8
	mov	qword ptr [rsp], rdx
.Ltmp550:
	.cv_loc	145 3 1070 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:1070:0
	mov	rax, rcx
	add	rsp, 16
	ret
.Ltmp551:
.Lfunc_end145:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z"
	.globl	"??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z" # -- Begin function ??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z
	.p2align	4, 0x90
"??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z": # @"??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z"
.Lfunc_begin146:
	.cv_func_id 146
	.cv_loc	146 3 2398 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2398:0
.seh_proc "??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z"
# %bb.0:
	sub	rsp, 104
	.seh_stackalloc 104
	.seh_endprologue
	mov	qword ptr [rsp + 96], r8
	mov	qword ptr [rsp + 88], rdx
	mov	qword ptr [rsp + 80], rcx
.Ltmp552:
	.cv_loc	146 3 2399 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2399:0
	mov	rcx, qword ptr [rsp + 80]
	mov	qword ptr [rsp + 72], rcx
	.cv_loc	146 3 2400 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2400:0
	mov	rcx, qword ptr [rsp + 88]
	mov	qword ptr [rsp + 64], rcx
	.cv_loc	146 3 2401 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2401:0
	mov	rcx, qword ptr [rsp + 96]
	mov	qword ptr [rsp + 56], rcx
	.cv_loc	146 3 2402 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2402:0
	mov	rcx, qword ptr [rsp + 64]
	mov	rdx, qword ptr [rsp + 72]
	sub	rcx, rdx
	mov	qword ptr [rsp + 48], rcx
	.cv_loc	146 3 2403 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2403:0
	mov	rcx, qword ptr [rsp + 56]
	mov	rdx, qword ptr [rsp + 72]
	mov	r8, qword ptr [rsp + 48]
	call	memmove
	.cv_loc	146 3 2404 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2404:0
	mov	rcx, qword ptr [rsp + 56]
	add	rcx, qword ptr [rsp + 48]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 104
	ret
.Ltmp553:
.Lfunc_end146:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z"
	.globl	"??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z" # -- Begin function ??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z
	.p2align	4, 0x90
"??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z": # @"??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z"
.Lfunc_begin147:
	.cv_func_id 147
	.cv_loc	147 3 2536 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2536:0
.seh_proc "??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z"
# %bb.0:
	sub	rsp, 104
	.seh_stackalloc 104
	.seh_endprologue
	xor	eax, eax
	mov	r9d, eax
	mov	r10, qword ptr [rip + __security_cookie]
	xor	r10, rsp
	mov	qword ptr [rsp + 96], r10
	mov	qword ptr [rsp + 88], r8
	mov	qword ptr [rsp + 80], rdx
	mov	qword ptr [rsp + 72], rcx
.Ltmp554:
	.cv_loc	147 3 2537 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2537:0
	mov	rcx, qword ptr [rsp + 80]
	mov	qword ptr [rsp + 64], rcx
	.cv_loc	147 3 2538 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2538:0
	cmp	r9, qword ptr [rsp + 64]
	jge	.LBB147_2
# %bb.1:
.Ltmp555:
	.cv_loc	147 3 2540 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2540:0
	mov	rdx, qword ptr [rsp + 64]
	mov	rcx, qword ptr [rsp + 88]
	call	"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
	mov	rdx, qword ptr [rsp + 64]
	mov	rcx, qword ptr [rsp + 64]
	mov	r8, qword ptr [rsp + 72]
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	rcx, r8
	mov	r8, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 48], rdx # 8-byte Spill
	mov	rdx, r8
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
	mov	rcx, rax
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	r8, qword ptr [rsp + 40] # 8-byte Reload
	call	"??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z"
	lea	rcx, [rsp + 88]
	mov	rdx, rax
	call	"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z"
.Ltmp556:
.LBB147_2:
	.cv_loc	147 3 2544 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2544:0
	mov	rax, qword ptr [rsp + 88]
	mov	rcx, qword ptr [rsp + 96]
	xor	rcx, rsp
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 32] # 8-byte Reload
	add	rsp, 104
	ret
.Ltmp557:
.Lfunc_end147:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z"
	.globl	"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z" # -- Begin function ??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z
	.p2align	4, 0x90
"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z": # @"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z"
.Lfunc_begin148:
	.cv_func_id 148
	.cv_loc	148 3 871 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:871:0
.seh_proc "??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp558:
	.cv_loc	148 3 872 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:872:0
	mov	rcx, qword ptr [rsp + 8]
	mov	rdx, qword ptr [rsp]
	mov	qword ptr [rdx], rcx
	.cv_loc	148 3 873 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:873:0
	add	rsp, 16
	ret
.Ltmp559:
.Lfunc_end148:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z"
	.globl	"??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z" # -- Begin function ??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z
	.p2align	4, 0x90
"??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z": # @"??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z"
.Lfunc_begin149:
	.cv_func_id 149
	.cv_loc	149 3 2526 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2526:0
.seh_proc "??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 80], rax
	mov	qword ptr [rsp + 72], r8
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 64], rcx
.Ltmp560:
	.cv_loc	149 3 2528 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2528:0
	lea	rcx, [rsp + 56]
	lea	rdx, [rsp + 64]
	#DEBUG_VALUE: _Copy_n_unchecked3<int *,long long,int *>:_First <- [$rdx+0]
	lea	r8, [rsp + 72]
	#DEBUG_VALUE: _Copy_n_unchecked3<int *,long long,int *>:_Dest <- [$r8+0]
	call	"??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z"
.Ltmp561:
	mov	r8, qword ptr [rsp + 72]
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 64]
	mov	r9b, byte ptr [rsp + 40]
	call	"??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z"
	mov	rcx, qword ptr [rsp + 80]
	xor	rcx, rsp
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 32] # 8-byte Reload
	add	rsp, 88
	ret
.Ltmp562:
.Lfunc_end149:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
	.globl	"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z" # -- Begin function ??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z
	.p2align	4, 0x90
"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z": # @"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
.Lfunc_begin150:
	.cv_func_id 150
	.cv_loc	150 3 808 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:808:0
.seh_proc "??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp563:
	.cv_loc	150 3 809 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:809:0
	mov	rax, qword ptr [rsp]
	add	rsp, 16
	ret
.Ltmp564:
.Lfunc_end150:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z"
	.globl	"??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z" # -- Begin function ??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z
	.p2align	4, 0x90
"??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z": # @"??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z"
.Lfunc_begin151:
	.cv_func_id 151
	.cv_loc	151 3 2516 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2516:0
.seh_proc "??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	byte ptr [rsp + 64], r9b
	mov	qword ptr [rsp + 56], r8
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp565:
	.cv_loc	151 3 2518 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2518:0
	mov	r8, qword ptr [rsp + 56]
	mov	rcx, qword ptr [rsp + 40]
	mov	rdx, qword ptr [rsp + 48]
	shl	rdx, 2
	add	rcx, rdx
	mov	rdx, qword ptr [rsp + 40]
	mov	qword ptr [rsp + 32], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, qword ptr [rsp + 32] # 8-byte Reload
	call	"??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z"
	nop
	add	rsp, 72
	ret
.Ltmp566:
.Lfunc_end151:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z"
	.globl	"??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z" # -- Begin function ??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z
	.p2align	4, 0x90
"??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z": # @"??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z"
.Lfunc_begin152:
	.cv_func_id 152
	.cv_loc	152 5 133 0             # ..\include\gsl/string_span:133:0
.seh_proc "??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	rax, rcx
	mov	qword ptr [rsp + 48], r8
	mov	qword ptr [rsp + 40], rdx
.Ltmp567:
	.cv_loc	152 5 134 0             # ..\include\gsl/string_span:134:0
	mov	r8, qword ptr [rsp + 48]
	mov	rdx, qword ptr [rsp + 40]
	mov	rdx, qword ptr [rdx]
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z"
	mov	rax, qword ptr [rsp + 32] # 8-byte Reload
	add	rsp, 56
	ret
.Ltmp568:
.Lfunc_end152:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z"
	.globl	"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z" # -- Begin function ??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z
	.p2align	4, 0x90
"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z": # @"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z"
.Lfunc_begin153:
	.cv_func_id 153
	.cv_loc	153 5 113 0             # ..\include\gsl/string_span:113:0
.seh_proc "??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 240
	.seh_stackalloc 240
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 104], -2
	mov	rax, rcx
	mov	qword ptr [rbp + 96], r8
	mov	qword ptr [rbp + 88], rdx
.Ltmp575:
	.cv_loc	153 5 114 0             # ..\include\gsl/string_span:114:0
	cmp	qword ptr [rbp + 88], 0
	setne	r9b
	mov	byte ptr [rbp + 63], 0
	test	r9b, 1
	mov	qword ptr [rbp - 24], rax # 8-byte Spill
	mov	qword ptr [rbp - 32], rcx # 8-byte Spill
	jne	.LBB153_1
	jmp	.LBB153_2
.LBB153_1:
	test	byte ptr [rbp + 63], 1
	jne	.LBB153_4
	jmp	.LBB153_5
.LBB153_2:
	lea	rdx, [rip + "??_C@_0DO@KLJPDEHN@GSL?3?5Postcondition?5failure?5at?5?4?4@"]
	lea	rax, [rbp + 64]
	mov	rcx, rax
	mov	qword ptr [rbp - 40], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp + 63], 1
.Ltmp569:
	mov	rcx, qword ptr [rbp - 40] # 8-byte Reload
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp570:
	jmp	.LBB153_3
.LBB153_3:
	ud2
.LBB153_4:
	lea	rcx, [rbp + 64]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB153_5:
	.cv_loc	153 5 117 0             # ..\include\gsl/string_span:117:0
	mov	rax, qword ptr [rbp + 88]
	mov	qword ptr [rbp + 48], rax
	.cv_loc	153 5 118 0             # ..\include\gsl/string_span:118:0
	cmp	qword ptr [rbp + 48], 0
	setne	cl
	mov	byte ptr [rbp + 23], 0
	test	cl, 1
	jne	.LBB153_6
	jmp	.LBB153_7
.LBB153_6:
	test	byte ptr [rbp + 23], 1
	jne	.LBB153_12
	jmp	.LBB153_13
.LBB153_7:
	lea	rdx, [rip + "??_C@_0DO@HCKHLHB@GSL?3?5Postcondition?5failure?5at?5?4?4@"]
	lea	rax, [rbp + 24]
	mov	rcx, rax
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp + 23], 1
.Ltmp571:
	mov	rcx, qword ptr [rbp - 56] # 8-byte Reload
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp572:
	jmp	.LBB153_8
.LBB153_8:
	ud2
.LBB153_12:
	lea	rcx, [rbp + 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB153_13:
	.cv_loc	153 5 121 0             # ..\include\gsl/string_span:121:0
	jmp	.LBB153_14
.LBB153_14:                             # =>This Inner Loop Header: Depth=1
	xor	eax, eax
	mov	cl, al
	mov	rdx, qword ptr [rbp + 48]
	mov	r8, qword ptr [rbp + 88]
	sub	rdx, r8
	cmp	rdx, qword ptr [rbp + 96]
	mov	byte ptr [rbp - 65], cl # 1-byte Spill
	jge	.LBB153_16
# %bb.15:                               #   in Loop: Header=BB153_14 Depth=1
	mov	rax, qword ptr [rbp + 48]
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 0
	setne	dl
	mov	byte ptr [rbp - 65], dl # 1-byte Spill
.LBB153_16:                             #   in Loop: Header=BB153_14 Depth=1
	mov	al, byte ptr [rbp - 65] # 1-byte Reload
	test	al, 1
	jne	.LBB153_17
	jmp	.LBB153_21
.LBB153_17:                             #   in Loop: Header=BB153_14 Depth=1
	mov	rax, qword ptr [rbp + 48]
	add	rax, 1
	mov	qword ptr [rbp + 48], rax
	jmp	.LBB153_14
.LBB153_21:
	.cv_loc	153 5 122 0             # ..\include\gsl/string_span:122:0
	mov	rax, qword ptr [rbp + 48]
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 0
	sete	dl
	mov	byte ptr [rbp - 9], 0
	test	dl, 1
	jne	.LBB153_22
	jmp	.LBB153_23
.LBB153_22:
	test	byte ptr [rbp - 9], 1
	jne	.LBB153_25
	jmp	.LBB153_26
.LBB153_23:
	lea	rdx, [rip + "??_C@_0DO@PPIDCNKC@GSL?3?5Postcondition?5failure?5at?5?4?4@"]
	lea	rax, [rbp - 8]
	mov	rcx, rax
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 9], 1
.Ltmp573:
	mov	rcx, qword ptr [rbp - 80] # 8-byte Reload
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp574:
	jmp	.LBB153_24
.LBB153_24:
	ud2
.LBB153_25:
	lea	rcx, [rbp - 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB153_26:
	.cv_loc	153 5 123 0             # ..\include\gsl/string_span:123:0
	mov	rdx, qword ptr [rbp + 88]
	mov	rax, qword ptr [rbp + 48]
	mov	rcx, qword ptr [rbp + 88]
	sub	rax, rcx
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	mov	r8, rax
	call	"??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	mov	qword ptr [rbp - 96], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 240
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z")@IMGREL
	.section	.text,"xr",discard,"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z@4HA":
.seh_proc "?dtor$9@?0???$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z@4HA"
.LBB153_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	153 5 114 0             # ..\include\gsl/string_span:114:0
	test	byte ptr [rbp + 63], 1
	jne	.LBB153_10
	jmp	.LBB153_11
.LBB153_10:
	lea	rcx, [rbp + 64]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB153_11:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z"
	.seh_endproc
	.def	 "?dtor$18@?0???$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0???$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z@4HA":
.seh_proc "?dtor$18@?0???$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z@4HA"
.LBB153_18:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	153 5 118 0             # ..\include\gsl/string_span:118:0
	test	byte ptr [rbp + 23], 1
	jne	.LBB153_19
	jmp	.LBB153_20
.LBB153_19:
	lea	rcx, [rbp + 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB153_20:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z"
	.seh_endproc
	.def	 "?dtor$27@?0???$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$27@?0???$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z@4HA":
.seh_proc "?dtor$27@?0???$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z@4HA"
.LBB153_27:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	153 5 122 0             # ..\include\gsl/string_span:122:0
	test	byte ptr [rbp - 9], 1
	jne	.LBB153_28
	jmp	.LBB153_29
.LBB153_28:
	lea	rcx, [rbp - 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB153_29:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp576:
.Lfunc_end153:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z"
	.p2align	2
"$cppxdata$??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	7                       # IPMapEntries
	.long	("$ip2state$??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z")@IMGREL # IPToStateXData
	.long	232                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$9@?0???$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$18@?0???$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$27@?0???$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z@4HA"@IMGREL # Action
"$ip2state$??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z":
	.long	.Lfunc_begin153@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp569@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp570@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp571@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp572@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp573@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp574@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z"
                                        # -- End function
	.def	 "??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z"
	.globl	"??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z" # -- Begin function ??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z
	.p2align	4, 0x90
"??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z": # @"??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z"
.Lfunc_begin154:
	.cv_func_id 154
	.cv_loc	154 3 615 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:615:0
.seh_proc "??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp577:
	.cv_loc	154 3 616 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:616:0
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40]
	mov	r8b, byte ptr [rsp + 32]
	call	"??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z"
	.cv_loc	154 3 617 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:617:0
	nop
	add	rsp, 56
	ret
.Ltmp578:
.Lfunc_end154:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z"
	.globl	"??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z" # -- Begin function ??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z
	.p2align	4, 0x90
"??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z": # @"??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z"
.Lfunc_begin155:
	.cv_func_id 155
	.cv_loc	155 3 642 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:642:0
.seh_proc "??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
.Ltmp579:
	.cv_loc	155 3 643 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:643:0
	mov	rcx, qword ptr [rsp + 32]
	call	"?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ"
	nop
	add	rsp, 40
	ret
.Ltmp580:
.Lfunc_end155:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z"
	.globl	"??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z" # -- Begin function ??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z
	.p2align	4, 0x90
"??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z": # @"??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z"
.Lfunc_begin156:
	.cv_func_id 156
	.cv_loc	156 3 760 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:760:0
.seh_proc "??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	qword ptr [rsp + 80], rdx
	mov	qword ptr [rsp + 72], rcx
.Ltmp581:
	.cv_loc	156 3 763 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:763:0
	mov	rcx, qword ptr [rsp + 80]
	mov	qword ptr [rsp + 64], rcx
# %bb.1:
.Ltmp582:
	.cv_loc	156 3 765 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:765:0
	movabs	rax, 9223372036854775807
	cmp	qword ptr [rsp + 64], rax
	jg	.LBB156_4
# %bb.2:
	movabs	rax, -9223372036854775808
	cmp	rax, qword ptr [rsp + 64]
	jg	.LBB156_4
# %bb.3:
.Ltmp583:
	.cv_loc	156 3 765 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:765:0
	jmp	.LBB156_9
.Ltmp584:
.LBB156_4:
	.cv_loc	156 3 765 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:765:0
	jmp	.LBB156_5
.LBB156_5:
.Ltmp585:
	.cv_loc	156 3 765 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:765:0
	lea	rax, [rip + "??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@"]
	mov	rcx, rsp
	mov	qword ptr [rcx + 40], rax
	lea	rax, [rip + "??_C@_02DKCKIIND@?$CFs?$AA@"]
	mov	qword ptr [rcx + 32], rax
	lea	rdx, [rip + "??_C@_0GJ@NMPOIJPD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@"]
	mov	rax, qword ptr [rip + __imp__CrtDbgReport]
	xor	r8d, r8d
	mov	r9d, r8d
	mov	ecx, 2
	mov	r8d, 767
	call	rax
	mov	ecx, 1
	cmp	ecx, eax
	jne	.LBB156_7
# %bb.6:
	int3
.LBB156_7:
	xor	eax, eax
	mov	ecx, eax
	lea	rdx, [rip + "??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?$CC?$AA?$AA@"]
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	rcx, rdx
	lea	rdx, [rip + "??_C@_1CC@GJHFANPG@?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa?$AAp?$AAp?$AAe?$AAd?$AA_?$AAn?$AA?$AA@"]
	lea	r8, [rip + "??_C@_1NC@PGCJAEEB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@"]
	mov	r9d, 767
	mov	qword ptr [rsp + 32], 0
	call	qword ptr [rip + __imp__invalid_parameter]
.Ltmp586:
# %bb.8:
	.cv_loc	156 3 765 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:765:0
	jmp	.LBB156_9
.Ltmp587:
.LBB156_9:
	.cv_loc	156 3 765 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:765:0
	jmp	.LBB156_10
.Ltmp588:
.LBB156_10:
	.cv_loc	156 3 770 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:770:0
	mov	rcx, qword ptr [rsp + 72]
	mov	rdx, qword ptr [rsp + 80]
	call	"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.cv_loc	156 3 771 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:771:0
	mov	rcx, qword ptr [rsp + 72]
	call	"?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ"
	nop
	add	rsp, 88
	ret
.Ltmp589:
.Lfunc_end156:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z"
	.globl	"??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z" # -- Begin function ??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z
	.p2align	4, 0x90
"??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z": # @"??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z"
.Lfunc_begin157:
	.cv_func_id 157
	.cv_loc	157 3 974 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:974:0
.seh_proc "??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp590:
	.cv_loc	157 3 975 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:975:0
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40]
	mov	r8b, byte ptr [rsp + 32]
	call	"??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z"
	nop
	add	rsp, 56
	ret
.Ltmp591:
.Lfunc_end157:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z"
	.globl	"??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z" # -- Begin function ??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z
	.p2align	4, 0x90
"??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z": # @"??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z"
.Lfunc_begin158:
	.cv_func_id 158
	.cv_loc	158 3 856 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:856:0
.seh_proc "??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp592:
	.cv_loc	158 3 857 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:857:0
	mov	rcx, qword ptr [rsp + 40]
	mov	rdx, qword ptr [rsp + 48]
	mov	rdx, qword ptr [rdx]
	call	"?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z"
	.cv_loc	158 3 858 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:858:0
	nop
	add	rsp, 56
	ret
.Ltmp593:
.Lfunc_end158:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
	.globl	"??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z" # -- Begin function ??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z
	.p2align	4, 0x90
"??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z": # @"??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
.Lfunc_begin159:
	.cv_func_id 159
	.cv_loc	159 3 2432 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2432:0
.seh_proc "??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 80], rax
	mov	qword ptr [rsp + 72], r8
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 64], rcx
.Ltmp594:
	.cv_loc	159 3 2434 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2434:0
	lea	rcx, [rsp + 56]
	lea	rdx, [rsp + 64]
	#DEBUG_VALUE: _Copy_unchecked<const char *,unsigned char *>:_First <- [$rdx+0]
	lea	r8, [rsp + 72]
	#DEBUG_VALUE: _Copy_unchecked<const char *,unsigned char *>:_Dest <- [$r8+0]
	call	"??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z"
.Ltmp595:
	mov	r8, qword ptr [rsp + 72]
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 64]
	mov	r9b, byte ptr [rsp + 40]
	call	"??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z"
	mov	rcx, qword ptr [rsp + 80]
	xor	rcx, rsp
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 32] # 8-byte Reload
	add	rsp, 88
	ret
.Ltmp596:
.Lfunc_end159:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z"
	.globl	"??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z" # -- Begin function ??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z
	.p2align	4, 0x90
"??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z": # @"??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z"
.Lfunc_begin160:
	.cv_func_id 160
	.cv_loc	160 3 602 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:602:0
.seh_proc "??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z"
# %bb.0:
	sub	rsp, 104
	.seh_stackalloc 104
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 96], rax
	mov	byte ptr [rsp + 56], r8b
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp597:
	.cv_loc	160 3 603 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:603:0
	mov	rax, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rax]
	mov	qword ptr [rsp + 80], rcx
	mov	rax, qword ptr [rax + 8]
	mov	qword ptr [rsp + 88], rax
	mov	rax, qword ptr [rsp + 40]
	mov	rcx, qword ptr [rax]
	mov	qword ptr [rsp + 64], rcx
	mov	rax, qword ptr [rax + 8]
	mov	qword ptr [rsp + 72], rax
	lea	rcx, [rsp + 64]
	lea	rdx, [rsp + 80]
	call	"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z"
	mov	rax, qword ptr [rsp + 96]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	.cv_loc	160 3 604 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:604:0
	nop
	add	rsp, 104
	ret
.Ltmp598:
.Lfunc_end160:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z"
	.globl	"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z" # -- Begin function ?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z
	.p2align	4, 0x90
"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z": # @"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z"
.Lfunc_begin161:
	.cv_func_id 161
	.cv_loc	161 2 264 0             # ..\include\gsl/span:264:0
.seh_proc "?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe 5, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	xor	eax, eax
	mov	r8b, al
	#DEBUG_VALUE: _Verify_range:rhs <- [$rdx+0]
	#DEBUG_VALUE: _Verify_range:lhs <- [$rcx+0]
.Ltmp603:
	.cv_loc	161 2 265 0             # ..\include\gsl/span:265:0
	mov	r9, qword ptr [rcx]
	mov	r10, qword ptr [rdx]
	mov	byte ptr [rbp - 33], 0
	cmp	r9, r10
	mov	qword ptr [rbp - 48], rdx # 8-byte Spill
.Ltmp604:
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	qword ptr [rbp - 56], rcx # 8-byte Spill
.Ltmp605:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	byte ptr [rbp - 57], r8b # 1-byte Spill
	jne	.LBB161_2
.Ltmp606:
# %bb.1:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	rax, qword ptr [rbp - 56] # 8-byte Reload
	mov	rcx, qword ptr [rax + 8]
	mov	rdx, qword ptr [rbp - 48] # 8-byte Reload
	cmp	rcx, qword ptr [rdx + 8]
	setle	r8b
	mov	byte ptr [rbp - 57], r8b # 1-byte Spill
.Ltmp607:
.LBB161_2:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	al, byte ptr [rbp - 57] # 1-byte Reload
	test	al, 1
	jne	.LBB161_3
	jmp	.LBB161_4
.Ltmp608:
.LBB161_3:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	test	byte ptr [rbp - 33], 1
	jne	.LBB161_7
	jmp	.LBB161_8
.Ltmp609:
.LBB161_4:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
.Ltmp599:
	lea	rdx, [rip + "??_C@_0DG@HPHPLHE@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rcx, [rbp - 32]
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
.Ltmp600:
	mov	qword ptr [rbp - 72], rax # 8-byte Spill
	jmp	.LBB161_5
.Ltmp610:
.LBB161_5:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	byte ptr [rbp - 33], 1
.Ltmp601:
	lea	rcx, [rbp - 32]
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp602:
	jmp	.LBB161_6
.Ltmp611:
.LBB161_6:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	ud2
.Ltmp612:
.LBB161_7:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	lea	rcx, [rbp - 32]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp613:
.LBB161_8:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	.cv_loc	161 2 267 0             # ..\include\gsl/span:267:0
	nop
	add	rsp, 112
	pop	rbp
.Ltmp614:
	ret
	.seh_handlerdata
	.long	("$cppxdata$?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z")@IMGREL
	.section	.text,"xr",discard,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z"
	.seh_endproc
	.def	 "?dtor$9@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z@4HA":
.seh_proc "?dtor$9@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z@4HA"
.LBB161_9:
.Ltmp615:
	#DEBUG_VALUE: _Verify_range:lhs <- [DW_OP_constu 56, DW_OP_minus, DW_OP_deref] [$rbp+0]
	#DEBUG_VALUE: _Verify_range:rhs <- [DW_OP_constu 48, DW_OP_minus, DW_OP_deref] [$rbp+0]
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
.Ltmp616:
	.seh_endprologue
	.cv_loc	161 2 265 0             # ..\include\gsl/span:265:0
	test	byte ptr [rbp - 33], 1
	jne	.LBB161_10
	jmp	.LBB161_11
.LBB161_10:
	lea	rcx, [rbp - 32]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB161_11:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z"
	.seh_endproc
	.def	 "?dtor$12@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z@4HA":
.seh_proc "?dtor$12@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z@4HA"
.LBB161_12:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp617:
.Lfunc_end161:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z"
	.p2align	2
"$cppxdata$?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z":
	.long	-1                      # ToState
	.long	"?dtor$12@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z@4HA"@IMGREL # Action
	.long	0                       # ToState
	.long	"?dtor$9@?0??_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z@4HA"@IMGREL # Action
"$ip2state$?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z":
	.long	.Lfunc_begin161@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp599@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp601@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp602@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z"
                                        # -- End function
	.def	 "?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ"
	.globl	"?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ" # -- Begin function ?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ
	.p2align	4, 0x90
"?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ": # @"?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ"
.Lfunc_begin162:
	.cv_func_id 162
	.cv_loc	162 2 277 0             # ..\include\gsl/span:277:0
.seh_proc "?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp618:
	.cv_loc	162 2 280 0             # ..\include\gsl/span:280:0
	mov	rax, qword ptr [rcx]
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rax
	call	"?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	add	rax, qword ptr [rcx + 8]
	add	rsp, 56
	ret
.Ltmp619:
.Lfunc_end162:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.globl	"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z" # -- Begin function ?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z
	.p2align	4, 0x90
"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z": # @"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
.Lfunc_begin163:
	.cv_func_id 163
	.cv_loc	163 2 270 0             # ..\include\gsl/span:270:0
.seh_proc "?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 128
	.seh_stackalloc 128
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	xor	eax, eax
	mov	r8b, al
	mov	qword ptr [rbp - 16], rdx
	mov	qword ptr [rbp - 24], rcx
	mov	rcx, qword ptr [rbp - 24]
.Ltmp624:
	.cv_loc	163 2 272 0             # ..\include\gsl/span:272:0
	mov	rdx, qword ptr [rcx + 8]
	add	rdx, qword ptr [rbp - 16]
	mov	byte ptr [rbp - 49], 0
	cmp	rdx, 0
	mov	qword ptr [rbp - 64], rcx # 8-byte Spill
	mov	byte ptr [rbp - 65], r8b # 1-byte Spill
	jl	.LBB163_2
# %bb.1:
	mov	rax, qword ptr [rbp - 64] # 8-byte Reload
	mov	rcx, qword ptr [rax + 8]
	add	rcx, qword ptr [rbp - 16]
	mov	rdx, qword ptr [rax]
	mov	qword ptr [rbp - 80], rcx # 8-byte Spill
	mov	rcx, rdx
	call	"?size@?$span@E$0?0@gsl@@QEBA_JXZ"
	mov	rcx, qword ptr [rbp - 80] # 8-byte Reload
	cmp	rcx, rax
	setle	r8b
	mov	byte ptr [rbp - 65], r8b # 1-byte Spill
.LBB163_2:
	mov	al, byte ptr [rbp - 65] # 1-byte Reload
	test	al, 1
	jne	.LBB163_3
	jmp	.LBB163_4
.LBB163_3:
	test	byte ptr [rbp - 49], 1
	jne	.LBB163_7
	jmp	.LBB163_8
.LBB163_4:
.Ltmp620:
	lea	rdx, [rip + "??_C@_0DG@GCFJFEEH@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rcx, [rbp - 48]
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
.Ltmp621:
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	jmp	.LBB163_5
.LBB163_5:
	mov	byte ptr [rbp - 49], 1
.Ltmp622:
	lea	rcx, [rbp - 48]
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp623:
	jmp	.LBB163_6
.LBB163_6:
	ud2
.LBB163_7:
	lea	rcx, [rbp - 48]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB163_8:
	.cv_loc	163 2 273 0             # ..\include\gsl/span:273:0
	nop
	add	rsp, 128
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z")@IMGREL
	.section	.text,"xr",discard,"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.seh_endproc
	.def	 "?dtor$9@?0??_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0??_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA":
.seh_proc "?dtor$9@?0??_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA"
.LBB163_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	163 2 272 0             # ..\include\gsl/span:272:0
	test	byte ptr [rbp - 49], 1
	jne	.LBB163_10
	jmp	.LBB163_11
.LBB163_10:
	lea	rcx, [rbp - 48]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB163_11:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.seh_endproc
	.def	 "?dtor$12@?0??_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0??_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA":
.seh_proc "?dtor$12@?0??_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA"
.LBB163_12:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp625:
.Lfunc_end163:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.p2align	2
"$cppxdata$?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z")@IMGREL # IPToStateXData
	.long	120                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z":
	.long	-1                      # ToState
	.long	"?dtor$12@?0??_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA"@IMGREL # Action
	.long	0                       # ToState
	.long	"?dtor$9@?0??_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z@4HA"@IMGREL # Action
"$ip2state$?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z":
	.long	.Lfunc_begin163@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp620@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp622@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp623@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
                                        # -- End function
	.def	 "?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ"
	.globl	"?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ" # -- Begin function ?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ
	.p2align	4, 0x90
"?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ": # @"?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ"
.Lfunc_begin164:
	.cv_func_id 164
	.cv_loc	164 2 277 0             # ..\include\gsl/span:277:0
.seh_proc "?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp626:
	.cv_loc	164 2 280 0             # ..\include\gsl/span:280:0
	mov	rax, qword ptr [rcx]
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rax
	call	"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	add	rax, qword ptr [rcx + 8]
	add	rsp, 56
	ret
.Ltmp627:
.Lfunc_end164:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$span@E$0?0@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$span@E$0?0@gsl@@QEBA_JXZ"
	.globl	"?size@?$span@E$0?0@gsl@@QEBA_JXZ" # -- Begin function ?size@?$span@E$0?0@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$span@E$0?0@gsl@@QEBA_JXZ":     # @"?size@?$span@E$0?0@gsl@@QEBA_JXZ"
.Lfunc_begin165:
	.cv_func_id 165
	.cv_loc	165 2 498 0             # ..\include\gsl/span:498:0
.seh_proc "?size@?$span@E$0?0@gsl@@QEBA_JXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp628:
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	nop
	add	rsp, 40
	ret
.Ltmp629:
.Lfunc_end165:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$span@E$0?0@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z"
	.globl	"??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z" # -- Begin function ??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z
	.p2align	4, 0x90
"??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z": # @"??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z"
.Lfunc_begin166:
	.cv_func_id 166
	.cv_loc	166 3 967 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:967:0
.seh_proc "??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	byte ptr [rsp + 16], r8b
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp630:
	.cv_loc	166 3 968 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:968:0
	mov	rcx, qword ptr [rsp + 8]
	mov	rcx, qword ptr [rcx]
	mov	rdx, qword ptr [rsp]
	mov	rdx, qword ptr [rdx]
	sub	rcx, rdx
	mov	rax, rcx
	add	rsp, 24
	ret
.Ltmp631:
.Lfunc_end166:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z"
	.globl	"?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z" # -- Begin function ?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z
	.p2align	4, 0x90
"?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z": # @"?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z"
.Lfunc_begin167:
	.cv_func_id 167
	.cv_loc	167 2 292 0             # ..\include\gsl/span:292:0
.seh_proc "?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp632:
	.cv_loc	167 2 294 0             # ..\include\gsl/span:294:0
	mov	rdx, qword ptr [rsp + 64]
	mov	rax, qword ptr [rcx]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rax
	mov	qword ptr [rsp + 40], rdx # 8-byte Spill
	call	"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ"
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	sub	rcx, rax
	mov	rax, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rax + 8], rcx
	.cv_loc	167 2 295 0             # ..\include\gsl/span:295:0
	add	rsp, 72
	ret
.Ltmp633:
.Lfunc_end167:
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z"
	.globl	"??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z" # -- Begin function ??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z
	.p2align	4, 0x90
"??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z": # @"??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z"
.Lfunc_begin168:
	.cv_func_id 168
	.cv_loc	168 3 2424 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2424:0
.seh_proc "??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	byte ptr [rsp + 64], r9b
	mov	qword ptr [rsp + 56], r8
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp634:
	.cv_loc	168 3 2425 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2425:0
	mov	r8, qword ptr [rsp + 56]
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 40]
	call	"??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
	nop
	add	rsp, 72
	ret
.Ltmp635:
.Lfunc_end168:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z"
	.globl	"??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z" # -- Begin function ??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z
	.p2align	4, 0x90
"??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z": # @"??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z"
.Lfunc_begin169:
	.cv_func_id 169
	.cv_loc	169 3 1069 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:1069:0
.seh_proc "??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], r8
	mov	qword ptr [rsp], rdx
.Ltmp636:
	.cv_loc	169 3 1070 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:1070:0
	mov	rax, rcx
	add	rsp, 16
	ret
.Ltmp637:
.Lfunc_end169:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
	.globl	"??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z" # -- Begin function ??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z
	.p2align	4, 0x90
"??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z": # @"??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
.Lfunc_begin170:
	.cv_func_id 170
	.cv_loc	170 3 2398 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2398:0
.seh_proc "??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
# %bb.0:
	sub	rsp, 104
	.seh_stackalloc 104
	.seh_endprologue
	mov	qword ptr [rsp + 96], r8
	mov	qword ptr [rsp + 88], rdx
	mov	qword ptr [rsp + 80], rcx
.Ltmp638:
	.cv_loc	170 3 2399 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2399:0
	mov	rcx, qword ptr [rsp + 80]
	mov	qword ptr [rsp + 72], rcx
	.cv_loc	170 3 2400 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2400:0
	mov	rcx, qword ptr [rsp + 88]
	mov	qword ptr [rsp + 64], rcx
	.cv_loc	170 3 2401 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2401:0
	mov	rcx, qword ptr [rsp + 96]
	mov	qword ptr [rsp + 56], rcx
	.cv_loc	170 3 2402 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2402:0
	mov	rcx, qword ptr [rsp + 64]
	mov	rdx, qword ptr [rsp + 72]
	sub	rcx, rdx
	mov	qword ptr [rsp + 48], rcx
	.cv_loc	170 3 2403 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2403:0
	mov	rcx, qword ptr [rsp + 56]
	mov	rdx, qword ptr [rsp + 72]
	mov	r8, qword ptr [rsp + 48]
	call	memmove
	.cv_loc	170 3 2404 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2404:0
	mov	rcx, qword ptr [rsp + 56]
	add	rcx, qword ptr [rsp + 48]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rcx
	add	rsp, 104
	ret
.Ltmp639:
.Lfunc_end170:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z"
	.globl	"??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z" # -- Begin function ??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z
	.p2align	4, 0x90
"??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z": # @"??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z"
.Lfunc_begin171:
	.cv_func_id 171
	.cv_loc	171 3 2536 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2536:0
.seh_proc "??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z"
# %bb.0:
	sub	rsp, 104
	.seh_stackalloc 104
	.seh_endprologue
	xor	eax, eax
	mov	r9d, eax
	mov	r10, qword ptr [rip + __security_cookie]
	xor	r10, rsp
	mov	qword ptr [rsp + 96], r10
	mov	qword ptr [rsp + 88], r8
	mov	qword ptr [rsp + 80], rdx
	mov	qword ptr [rsp + 72], rcx
.Ltmp640:
	.cv_loc	171 3 2537 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2537:0
	mov	rcx, qword ptr [rsp + 80]
	mov	qword ptr [rsp + 64], rcx
	.cv_loc	171 3 2538 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2538:0
	cmp	r9, qword ptr [rsp + 64]
	jge	.LBB171_2
# %bb.1:
.Ltmp641:
	.cv_loc	171 3 2540 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2540:0
	mov	rdx, qword ptr [rsp + 64]
	mov	rcx, qword ptr [rsp + 88]
	call	"??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z"
	mov	rdx, qword ptr [rsp + 64]
	mov	rcx, qword ptr [rsp + 64]
	mov	r8, qword ptr [rsp + 72]
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	rcx, r8
	mov	r8, qword ptr [rsp + 56] # 8-byte Reload
	mov	qword ptr [rsp + 48], rdx # 8-byte Spill
	mov	rdx, r8
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z"
	mov	rcx, rax
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	r8, qword ptr [rsp + 40] # 8-byte Reload
	call	"??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z"
	lea	rcx, [rsp + 88]
	mov	rdx, rax
	call	"??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z"
.Ltmp642:
.LBB171_2:
	.cv_loc	171 3 2544 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2544:0
	mov	rax, qword ptr [rsp + 88]
	mov	rcx, qword ptr [rsp + 96]
	xor	rcx, rsp
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 32] # 8-byte Reload
	add	rsp, 104
	ret
.Ltmp643:
.Lfunc_end171:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z"
	.globl	"??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z" # -- Begin function ??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z
	.p2align	4, 0x90
"??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z": # @"??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z"
.Lfunc_begin172:
	.cv_func_id 172
	.cv_loc	172 3 871 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:871:0
.seh_proc "??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp644:
	.cv_loc	172 3 872 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:872:0
	mov	rcx, qword ptr [rsp + 8]
	mov	rdx, qword ptr [rsp]
	mov	qword ptr [rdx], rcx
	.cv_loc	172 3 873 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:873:0
	add	rsp, 16
	ret
.Ltmp645:
.Lfunc_end172:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z"
	.globl	"??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z" # -- Begin function ??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z
	.p2align	4, 0x90
"??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z": # @"??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z"
.Lfunc_begin173:
	.cv_func_id 173
	.cv_loc	173 3 2526 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2526:0
.seh_proc "??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 80], rax
	mov	qword ptr [rsp + 72], r8
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 64], rcx
.Ltmp646:
	.cv_loc	173 3 2528 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2528:0
	lea	rcx, [rsp + 56]
	lea	rdx, [rsp + 64]
	#DEBUG_VALUE: _Copy_n_unchecked3<const char *,long long,unsigned char *>:_First <- [$rdx+0]
	lea	r8, [rsp + 72]
	#DEBUG_VALUE: _Copy_n_unchecked3<const char *,long long,unsigned char *>:_Dest <- [$r8+0]
	call	"??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z"
.Ltmp647:
	mov	r8, qword ptr [rsp + 72]
	mov	rdx, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsp + 64]
	mov	r9b, byte ptr [rsp + 40]
	call	"??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z"
	mov	rcx, qword ptr [rsp + 80]
	xor	rcx, rsp
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 32] # 8-byte Reload
	add	rsp, 88
	ret
.Ltmp648:
.Lfunc_end173:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z"
	.globl	"??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z" # -- Begin function ??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z
	.p2align	4, 0x90
"??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z": # @"??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z"
.Lfunc_begin174:
	.cv_func_id 174
	.cv_loc	174 3 808 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:808:0
.seh_proc "??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp649:
	.cv_loc	174 3 809 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:809:0
	mov	rax, qword ptr [rsp]
	add	rsp, 16
	ret
.Ltmp650:
.Lfunc_end174:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z"
	.globl	"??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z" # -- Begin function ??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z
	.p2align	4, 0x90
"??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z": # @"??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z"
.Lfunc_begin175:
	.cv_func_id 175
	.cv_loc	175 3 808 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:808:0
.seh_proc "??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z"
# %bb.0:
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp], rcx
.Ltmp651:
	.cv_loc	175 3 809 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:809:0
	mov	rax, qword ptr [rsp]
	add	rsp, 16
	ret
.Ltmp652:
.Lfunc_end175:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z"
	.globl	"??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z" # -- Begin function ??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z
	.p2align	4, 0x90
"??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z": # @"??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z"
.Lfunc_begin176:
	.cv_func_id 176
	.cv_loc	176 3 2516 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2516:0
.seh_proc "??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	byte ptr [rsp + 64], r9b
	mov	qword ptr [rsp + 56], r8
	mov	qword ptr [rsp + 48], rdx
	mov	qword ptr [rsp + 40], rcx
.Ltmp653:
	.cv_loc	176 3 2518 0            # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility:2518:0
	mov	r8, qword ptr [rsp + 56]
	mov	rcx, qword ptr [rsp + 40]
	add	rcx, qword ptr [rsp + 48]
	mov	rdx, qword ptr [rsp + 40]
	mov	qword ptr [rsp + 32], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, qword ptr [rsp + 32] # 8-byte Reload
	call	"??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
	nop
	add	rsp, 72
	ret
.Ltmp654:
.Lfunc_end176:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z"
	.seh_endproc
                                        # -- End function
	.section	.rdata,"dr"
	.p2align	4               # @"?x@?1??mysubspan1@@YA_JXZ@3PAHA"
".L?x@?1??mysubspan1@@YA_JXZ@3PAHA":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5

	.p2align	4               # @"?x@?1??mysubspan2@@YA_J_J@Z@3PAHA"
".L?x@?1??mysubspan2@@YA_J_J@Z@3PAHA":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5

	.p2align	4               # @"?x@?1??mysubspan3@@YA_JXZ@3PAHA"
".L?x@?1??mysubspan3@@YA_JXZ@3PAHA":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5

	.section	.rdata,"dr",discard,"??_C@_0L@CCAJJBND@iVtrau?5lDC?$AA@"
	.globl	"??_C@_0L@CCAJJBND@iVtrau?5lDC?$AA@" # @"??_C@_0L@CCAJJBND@iVtrau?5lDC?$AA@"
"??_C@_0L@CCAJJBND@iVtrau?5lDC?$AA@":
	.asciz	"iVtrau lDC"

	.section	.rdata,"dr",discard,"??_C@_0DG@BJDFKDLA@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@BJDFKDLA@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@BJDFKDLA@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@BJDFKDLA@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 509"

	.section	.data,"dw",discard,"??_R0?AUfail_fast@gsl@@@8"
	.globl	"??_R0?AUfail_fast@gsl@@@8" # @"??_R0?AUfail_fast@gsl@@@8"
	.p2align	4
"??_R0?AUfail_fast@gsl@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUfail_fast@gsl@@"
	.zero	4

	.section	.xdata,"dr",discard,"_CT??_R0?AUfail_fast@gsl@@@824"
	.globl	"_CT??_R0?AUfail_fast@gsl@@@824" # @"_CT??_R0?AUfail_fast@gsl@@@824"
	.p2align	4
"_CT??_R0?AUfail_fast@gsl@@@824":
	.long	0                       # 0x0
	.long	"??_R0?AUfail_fast@gsl@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0fail_fast@gsl@@QEAA@AEBU01@@Z"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVlogic_error@std@@@8"
	.globl	"??_R0?AVlogic_error@std@@@8" # @"??_R0?AVlogic_error@std@@@8"
	.p2align	4
"??_R0?AVlogic_error@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVlogic_error@std@@"
	.zero	2

	.section	.xdata,"dr",discard,"_CT??_R0?AVlogic_error@std@@@824"
	.globl	"_CT??_R0?AVlogic_error@std@@@824" # @"_CT??_R0?AVlogic_error@std@@@824"
	.p2align	4
"_CT??_R0?AVlogic_error@std@@@824":
	.long	0                       # 0x0
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0logic_error@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVexception@std@@@8"
	.globl	"??_R0?AVexception@std@@@8" # @"??_R0?AVexception@std@@@8"
	.p2align	4
"??_R0?AVexception@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVexception@std@@"
	.zero	4

	.section	.xdata,"dr",discard,"_CT??_R0?AVexception@std@@@824"
	.globl	"_CT??_R0?AVexception@std@@@824" # @"_CT??_R0?AVexception@std@@@824"
	.p2align	4
"_CT??_R0?AVexception@std@@@824":
	.long	0                       # 0x0
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0exception@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA3?AUfail_fast@gsl@@"
	.globl	"_CTA3?AUfail_fast@gsl@@" # @"_CTA3?AUfail_fast@gsl@@"
	.p2align	3
"_CTA3?AUfail_fast@gsl@@":
	.long	3                       # 0x3
	.long	"_CT??_R0?AUfail_fast@gsl@@@824"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@824"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@824"@IMGREL

	.section	.xdata,"dr",discard,"_TI3?AUfail_fast@gsl@@"
	.globl	"_TI3?AUfail_fast@gsl@@" # @"_TI3?AUfail_fast@gsl@@"
	.p2align	3
"_TI3?AUfail_fast@gsl@@":
	.long	0                       # 0x0
	.long	"??1fail_fast@gsl@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA3?AUfail_fast@gsl@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7fail_fast@gsl@@6B@"
	.p2align	4               # @0
.L__unnamed_1:
	.quad	"??_R4fail_fast@gsl@@6B@"
	.quad	"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4fail_fast@gsl@@6B@"
	.globl	"??_R4fail_fast@gsl@@6B@" # @"??_R4fail_fast@gsl@@6B@"
	.p2align	4
"??_R4fail_fast@gsl@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUfail_fast@gsl@@@8"@IMGREL
	.long	"??_R3fail_fast@gsl@@8"@IMGREL
	.long	"??_R4fail_fast@gsl@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3fail_fast@gsl@@8"
	.globl	"??_R3fail_fast@gsl@@8" # @"??_R3fail_fast@gsl@@8"
	.p2align	3
"??_R3fail_fast@gsl@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	"??_R2fail_fast@gsl@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2fail_fast@gsl@@8"
	.globl	"??_R2fail_fast@gsl@@8" # @"??_R2fail_fast@gsl@@8"
	.p2align	2
"??_R2fail_fast@gsl@@8":
	.long	"??_R1A@?0A@EA@fail_fast@gsl@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@fail_fast@gsl@@8"
	.globl	"??_R1A@?0A@EA@fail_fast@gsl@@8" # @"??_R1A@?0A@EA@fail_fast@gsl@@8"
	.p2align	4
"??_R1A@?0A@EA@fail_fast@gsl@@8":
	.long	"??_R0?AUfail_fast@gsl@@@8"@IMGREL
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3fail_fast@gsl@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@logic_error@std@@8"
	.globl	"??_R1A@?0A@EA@logic_error@std@@8" # @"??_R1A@?0A@EA@logic_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@logic_error@std@@8":
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3logic_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R3logic_error@std@@8"
	.globl	"??_R3logic_error@std@@8" # @"??_R3logic_error@std@@8"
	.p2align	3
"??_R3logic_error@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2logic_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2logic_error@std@@8"
	.globl	"??_R2logic_error@std@@8" # @"??_R2logic_error@std@@8"
	.p2align	2
"??_R2logic_error@std@@8":
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@exception@std@@8"
	.globl	"??_R1A@?0A@EA@exception@std@@8" # @"??_R1A@?0A@EA@exception@std@@8"
	.p2align	4
"??_R1A@?0A@EA@exception@std@@8":
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3exception@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R3exception@std@@8"
	.globl	"??_R3exception@std@@8" # @"??_R3exception@std@@8"
	.p2align	3
"??_R3exception@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	"??_R2exception@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2exception@std@@8"
	.globl	"??_R2exception@std@@8" # @"??_R2exception@std@@8"
	.p2align	2
"??_R2exception@std@@8":
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",largest,"??_7logic_error@std@@6B@"
	.p2align	4               # @1
.L__unnamed_2:
	.quad	"??_R4logic_error@std@@6B@"
	.quad	"??_Glogic_error@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4logic_error@std@@6B@"
	.globl	"??_R4logic_error@std@@6B@" # @"??_R4logic_error@std@@6B@"
	.p2align	4
"??_R4logic_error@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	"??_R3logic_error@std@@8"@IMGREL
	.long	"??_R4logic_error@std@@6B@"@IMGREL

	.section	.rdata,"dr",largest,"??_7exception@std@@6B@"
	.p2align	4               # @2
.L__unnamed_3:
	.quad	"??_R4exception@std@@6B@"
	.quad	"??_Gexception@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4exception@std@@6B@"
	.globl	"??_R4exception@std@@6B@" # @"??_R4exception@std@@6B@"
	.p2align	4
"??_R4exception@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	"??_R3exception@std@@8"@IMGREL
	.long	"??_R4exception@std@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
	.globl	"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@" # @"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@":
	.asciz	"Unknown exception"

	.section	.rdata,"dr",discard,"??_C@_0DG@OBPNLIC@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@OBPNLIC@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@OBPNLIC@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@OBPNLIC@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 157"

	.section	.rdata,"dr",discard,"??_C@_0DG@JCNKEIFF@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@JCNKEIFF@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@JCNKEIFF@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@JCNKEIFF@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 169"

	.section	.rdata,"dr",discard,"??_C@_0DG@PFBAEBPE@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@PFBAEBPE@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@PFBAEBPE@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@PFBAEBPE@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 592"

	.section	.rdata,"dr",discard,"??_C@_0DG@PHADKCAK@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@PHADKCAK@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@PHADKCAK@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@PHADKCAK@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 321"

	.section	.rdata,"dr",discard,"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 598"

	.section	.rdata,"dr",discard,"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 599"

	.section	.rdata,"dr",discard,"??_C@_0DG@LJIAFOPK@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@LJIAFOPK@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@LJIAFOPK@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@LJIAFOPK@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 336"

	.section	.rdata,"dr",discard,"??_C@_0DG@MBBPDIAP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@MBBPDIAP@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@MBBPDIAP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@MBBPDIAP@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 631"

	.section	.rdata,"dr",discard,"??_C@_0DG@KFHDPNAL@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@KFHDPNAL@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@KFHDPNAL@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@KFHDPNAL@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 635"

	.section	.data,"dw",discard,"??_R0?AUnarrowing_error@gsl@@@8"
	.globl	"??_R0?AUnarrowing_error@gsl@@@8" # @"??_R0?AUnarrowing_error@gsl@@@8"
	.p2align	4
"??_R0?AUnarrowing_error@gsl@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUnarrowing_error@gsl@@"
	.zero	6

	.section	.xdata,"dr",discard,"_CT??_R0?AUnarrowing_error@gsl@@@824"
	.globl	"_CT??_R0?AUnarrowing_error@gsl@@@824" # @"_CT??_R0?AUnarrowing_error@gsl@@@824"
	.p2align	4
"_CT??_R0?AUnarrowing_error@gsl@@@824":
	.long	0                       # 0x0
	.long	"??_R0?AUnarrowing_error@gsl@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0narrowing_error@gsl@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA2?AUnarrowing_error@gsl@@"
	.globl	"_CTA2?AUnarrowing_error@gsl@@" # @"_CTA2?AUnarrowing_error@gsl@@"
	.p2align	3
"_CTA2?AUnarrowing_error@gsl@@":
	.long	2                       # 0x2
	.long	"_CT??_R0?AUnarrowing_error@gsl@@@824"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@824"@IMGREL

	.section	.xdata,"dr",discard,"_TI2?AUnarrowing_error@gsl@@"
	.globl	"_TI2?AUnarrowing_error@gsl@@" # @"_TI2?AUnarrowing_error@gsl@@"
	.p2align	3
"_TI2?AUnarrowing_error@gsl@@":
	.long	0                       # 0x0
	.long	"??1narrowing_error@gsl@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA2?AUnarrowing_error@gsl@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7narrowing_error@gsl@@6B@"
	.p2align	4               # @3
.L__unnamed_4:
	.quad	"??_R4narrowing_error@gsl@@6B@"
	.quad	"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4narrowing_error@gsl@@6B@"
	.globl	"??_R4narrowing_error@gsl@@6B@" # @"??_R4narrowing_error@gsl@@6B@"
	.p2align	4
"??_R4narrowing_error@gsl@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUnarrowing_error@gsl@@@8"@IMGREL
	.long	"??_R3narrowing_error@gsl@@8"@IMGREL
	.long	"??_R4narrowing_error@gsl@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3narrowing_error@gsl@@8"
	.globl	"??_R3narrowing_error@gsl@@8" # @"??_R3narrowing_error@gsl@@8"
	.p2align	3
"??_R3narrowing_error@gsl@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2narrowing_error@gsl@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2narrowing_error@gsl@@8"
	.globl	"??_R2narrowing_error@gsl@@8" # @"??_R2narrowing_error@gsl@@8"
	.p2align	2
"??_R2narrowing_error@gsl@@8":
	.long	"??_R1A@?0A@EA@narrowing_error@gsl@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@narrowing_error@gsl@@8"
	.globl	"??_R1A@?0A@EA@narrowing_error@gsl@@8" # @"??_R1A@?0A@EA@narrowing_error@gsl@@8"
	.p2align	4
"??_R1A@?0A@EA@narrowing_error@gsl@@8":
	.long	"??_R0?AUnarrowing_error@gsl@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3narrowing_error@gsl@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_C@_0DG@HPHPLHE@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@HPHPLHE@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@HPHPLHE@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@HPHPLHE@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 266"

	.section	.rdata,"dr",discard,"??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@"
	.globl	"??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@" # @"??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@"
"??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@":
	.asciz	"integer overflow"

	.section	.rdata,"dr",discard,"??_C@_02DKCKIIND@?$CFs?$AA@"
	.globl	"??_C@_02DKCKIIND@?$CFs?$AA@" # @"??_C@_02DKCKIIND@?$CFs?$AA@"
"??_C@_02DKCKIIND@?$CFs?$AA@":
	.asciz	"%s"

	.section	.rdata,"dr",discard,"??_C@_0GJ@NMPOIJPD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@"
	.globl	"??_C@_0GJ@NMPOIJPD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@" # @"??_C@_0GJ@NMPOIJPD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@"
"??_C@_0GJ@NMPOIJPD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@":
	.asciz	"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

	.section	.rdata,"dr",discard,"??_C@_1NC@PGCJAEEB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@"
	.globl	"??_C@_1NC@PGCJAEEB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@" # @"??_C@_1NC@PGCJAEEB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@"
	.p2align	1
"??_C@_1NC@PGCJAEEB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@":
	.short	67                      # 0x43
	.short	58                      # 0x3a
	.short	92                      # 0x5c
	.short	80                      # 0x50
	.short	114                     # 0x72
	.short	111                     # 0x6f
	.short	103                     # 0x67
	.short	114                     # 0x72
	.short	97                      # 0x61
	.short	109                     # 0x6d
	.short	32                      # 0x20
	.short	70                      # 0x46
	.short	105                     # 0x69
	.short	108                     # 0x6c
	.short	101                     # 0x65
	.short	115                     # 0x73
	.short	32                      # 0x20
	.short	40                      # 0x28
	.short	120                     # 0x78
	.short	56                      # 0x38
	.short	54                      # 0x36
	.short	41                      # 0x29
	.short	92                      # 0x5c
	.short	77                      # 0x4d
	.short	105                     # 0x69
	.short	99                      # 0x63
	.short	114                     # 0x72
	.short	111                     # 0x6f
	.short	115                     # 0x73
	.short	111                     # 0x6f
	.short	102                     # 0x66
	.short	116                     # 0x74
	.short	32                      # 0x20
	.short	86                      # 0x56
	.short	105                     # 0x69
	.short	115                     # 0x73
	.short	117                     # 0x75
	.short	97                      # 0x61
	.short	108                     # 0x6c
	.short	32                      # 0x20
	.short	83                      # 0x53
	.short	116                     # 0x74
	.short	117                     # 0x75
	.short	100                     # 0x64
	.short	105                     # 0x69
	.short	111                     # 0x6f
	.short	92                      # 0x5c
	.short	50                      # 0x32
	.short	48                      # 0x30
	.short	49                      # 0x31
	.short	55                      # 0x37
	.short	92                      # 0x5c
	.short	67                      # 0x43
	.short	111                     # 0x6f
	.short	109                     # 0x6d
	.short	109                     # 0x6d
	.short	117                     # 0x75
	.short	110                     # 0x6e
	.short	105                     # 0x69
	.short	116                     # 0x74
	.short	121                     # 0x79
	.short	92                      # 0x5c
	.short	86                      # 0x56
	.short	67                      # 0x43
	.short	92                      # 0x5c
	.short	84                      # 0x54
	.short	111                     # 0x6f
	.short	111                     # 0x6f
	.short	108                     # 0x6c
	.short	115                     # 0x73
	.short	92                      # 0x5c
	.short	77                      # 0x4d
	.short	83                      # 0x53
	.short	86                      # 0x56
	.short	67                      # 0x43
	.short	92                      # 0x5c
	.short	49                      # 0x31
	.short	52                      # 0x34
	.short	46                      # 0x2e
	.short	49                      # 0x31
	.short	54                      # 0x36
	.short	46                      # 0x2e
	.short	50                      # 0x32
	.short	55                      # 0x37
	.short	48                      # 0x30
	.short	50                      # 0x32
	.short	51                      # 0x33
	.short	92                      # 0x5c
	.short	105                     # 0x69
	.short	110                     # 0x6e
	.short	99                      # 0x63
	.short	108                     # 0x6c
	.short	117                     # 0x75
	.short	100                     # 0x64
	.short	101                     # 0x65
	.short	92                      # 0x5c
	.short	120                     # 0x78
	.short	117                     # 0x75
	.short	116                     # 0x74
	.short	105                     # 0x69
	.short	108                     # 0x6c
	.short	105                     # 0x69
	.short	116                     # 0x74
	.short	121                     # 0x79
	.short	0                       # 0x0

	.section	.rdata,"dr",discard,"??_C@_1CC@GJHFANPG@?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa?$AAp?$AAp?$AAe?$AAd?$AA_?$AAn?$AA?$AA@"
	.globl	"??_C@_1CC@GJHFANPG@?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa?$AAp?$AAp?$AAe?$AAd?$AA_?$AAn?$AA?$AA@" # @"??_C@_1CC@GJHFANPG@?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa?$AAp?$AAp?$AAe?$AAd?$AA_?$AAn?$AA?$AA@"
	.p2align	1
"??_C@_1CC@GJHFANPG@?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa?$AAp?$AAp?$AAe?$AAd?$AA_?$AAn?$AA?$AA@":
	.short	95                      # 0x5f
	.short	71                      # 0x47
	.short	101                     # 0x65
	.short	116                     # 0x74
	.short	95                      # 0x5f
	.short	117                     # 0x75
	.short	110                     # 0x6e
	.short	119                     # 0x77
	.short	114                     # 0x72
	.short	97                      # 0x61
	.short	112                     # 0x70
	.short	112                     # 0x70
	.short	101                     # 0x65
	.short	100                     # 0x64
	.short	95                      # 0x5f
	.short	110                     # 0x6e
	.short	0                       # 0x0

	.section	.rdata,"dr",discard,"??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?$CC?$AA?$AA@"
	.globl	"??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?$CC?$AA?$AA@" # @"??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?$CC?$AA?$AA@"
	.p2align	1
"??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?$CC?$AA?$AA@":
	.short	34                      # 0x22
	.short	105                     # 0x69
	.short	110                     # 0x6e
	.short	116                     # 0x74
	.short	101                     # 0x65
	.short	103                     # 0x67
	.short	101                     # 0x65
	.short	114                     # 0x72
	.short	32                      # 0x20
	.short	111                     # 0x6f
	.short	118                     # 0x76
	.short	101                     # 0x65
	.short	114                     # 0x72
	.short	102                     # 0x66
	.short	108                     # 0x6c
	.short	111                     # 0x6f
	.short	119                     # 0x77
	.short	34                      # 0x22
	.short	0                       # 0x0

	.section	.rdata,"dr",discard,"??_C@_0DG@GCFJFEEH@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@GCFJFEEH@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@GCFJFEEH@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@GCFJFEEH@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 272"

	.section	.rdata,"dr",discard,"??_C@_0DO@ODIBPFEH@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DO@ODIBPFEH@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DO@ODIBPFEH@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DO@ODIBPFEH@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/gsl_algorithm: 50"

	.section	.rdata,"dr",discard,"??_C@_0DO@KLJPDEHN@GSL?3?5Postcondition?5failure?5at?5?4?4@"
	.globl	"??_C@_0DO@KLJPDEHN@GSL?3?5Postcondition?5failure?5at?5?4?4@" # @"??_C@_0DO@KLJPDEHN@GSL?3?5Postcondition?5failure?5at?5?4?4@"
"??_C@_0DO@KLJPDEHN@GSL?3?5Postcondition?5failure?5at?5?4?4@":
	.asciz	"GSL: Postcondition failure at ..\\include\\gsl/string_span: 114"

	.section	.rdata,"dr",discard,"??_C@_0DO@HCKHLHB@GSL?3?5Postcondition?5failure?5at?5?4?4@"
	.globl	"??_C@_0DO@HCKHLHB@GSL?3?5Postcondition?5failure?5at?5?4?4@" # @"??_C@_0DO@HCKHLHB@GSL?3?5Postcondition?5failure?5at?5?4?4@"
"??_C@_0DO@HCKHLHB@GSL?3?5Postcondition?5failure?5at?5?4?4@":
	.asciz	"GSL: Postcondition failure at ..\\include\\gsl/string_span: 118"

	.section	.rdata,"dr",discard,"??_C@_0DO@PPIDCNKC@GSL?3?5Postcondition?5failure?5at?5?4?4@"
	.globl	"??_C@_0DO@PPIDCNKC@GSL?3?5Postcondition?5failure?5at?5?4?4@" # @"??_C@_0DO@PPIDCNKC@GSL?3?5Postcondition?5failure?5at?5?4?4@"
"??_C@_0DO@PPIDCNKC@GSL?3?5Postcondition?5failure?5at?5?4?4@":
	.asciz	"GSL: Postcondition failure at ..\\include\\gsl/string_span: 122"

	.section	.drectve,"yn"
	.ascii	" /DEFAULTLIB:msvcrtd.lib"
	.ascii	" /DEFAULTLIB:oldnames.lib"
	.ascii	" /FAILIFMISMATCH:\"_MSC_VER=1900\""
	.ascii	" /FAILIFMISMATCH:\"_ITERATOR_DEBUG_LEVEL=2\""
	.ascii	" /FAILIFMISMATCH:\"RuntimeLibrary=MDd_DynamicDebug\""
	.ascii	" /DEFAULTLIB:msvcprtd.lib"
	.ascii	" /FAILIFMISMATCH:\"_CRT_STDIO_ISO_WIDE_SPECIFIERS=0\""
	.section	.debug$S,"dr"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241
	.long	.Ltmp656-.Ltmp655       # Subsection size
.Ltmp655:
	.short	.Ltmp658-.Ltmp657       # Record length
.Ltmp657:
	.short	4412                    # Record kind: S_COMPILE3
	.long	1                       # Flags and language
	.short	208                     # CPUType
	.short	7                       # Frontend version
	.short	0
	.short	1
	.short	0
	.short	7001                    # Backend version
	.short	0
	.short	0
	.short	0
	.asciz	"clang version 7.0.1 (tags/RELEASE_701/final)" # Null-terminated compiler version string
.Ltmp658:
.Ltmp656:
	.p2align	2
	.long	241                     # Symbol subsection for test_span_unoptimizable_rangecheck
	.long	.Ltmp660-.Ltmp659       # Subsection size
.Ltmp659:
	.short	.Ltmp662-.Ltmp661       # Record length
.Ltmp661:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end0-"?test_span_unoptimizable_rangecheck@@YAXV?$span@H$0?0@gsl@@H@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4218                    # Function type index
	.secrel32	"?test_span_unoptimizable_rangecheck@@YAXV?$span@H$0?0@gsl@@H@Z" # Function section relative address
	.secidx	"?test_span_unoptimizable_rangecheck@@YAXV?$span@H$0?0@gsl@@H@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"test_span_unoptimizable_rangecheck" # Function name
.Ltmp662:
	.short	.Ltmp664-.Ltmp663       # Record length
.Ltmp663:
	.short	4414                    # Record kind: S_LOCAL
	.long	4219                    # TypeIndex
	.short	1                       # Flags
	.asciz	"s"
.Ltmp664:
	.cv_def_range	 .Lfunc_begin0 .Ltmp1, "A\021J\001\000\000"
	.cv_def_range	 .Ltmp1 .Ltmp5, "E\021O\001\000\000 \000\000\000"
	.short	.Ltmp666-.Ltmp665       # Record length
.Ltmp665:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"len"
.Ltmp666:
	.cv_def_range	 .Ltmp0 .Ltmp6, "E\021O\001\000\0004\000\000\000"
	.short	.Ltmp668-.Ltmp667       # Record length
.Ltmp667:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp4-.Ltmp0           # Code size
	.secrel32	.Ltmp0          # Function section relative address
	.secidx	.Lfunc_begin0           # Function section index
	.byte	0                       # Lexical block name
.Ltmp668:
	.short	.Ltmp670-.Ltmp669       # Record length
.Ltmp669:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	0                       # Flags
	.asciz	"i"
.Ltmp670:
	.cv_def_range	 .Ltmp0 .Ltmp4, "E\021O\001\000\000(\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp660:
	.p2align	2
	.cv_linetable	0, "?test_span_unoptimizable_rangecheck@@YAXV?$span@H$0?0@gsl@@H@Z", .Lfunc_end0
	.section	.debug$S,"dr",associative,"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::operator[]
	.long	.Ltmp672-.Ltmp671       # Subsection size
.Ltmp671:
	.short	.Ltmp674-.Ltmp673       # Record length
.Ltmp673:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end1-"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4220                    # Function type index
	.secrel32	"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z" # Function section relative address
	.secidx	"??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::operator[]" # Function name
.Ltmp674:
	.short	.Ltmp676-.Ltmp675       # Record length
.Ltmp675:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp676:
	.cv_def_range	 .Ltmp9 .Ltmp10, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp678-.Ltmp677       # Record length
.Ltmp677:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"idx"
.Ltmp678:
	.cv_def_range	 .Ltmp9 .Ltmp10, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp672:
	.p2align	2
	.cv_linetable	1, "??A?$span@H$0?0@gsl@@QEBAAEAH_J@Z", .Lfunc_end1
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for test_span_for
	.long	.Ltmp680-.Ltmp679       # Subsection size
.Ltmp679:
	.short	.Ltmp682-.Ltmp681       # Record length
.Ltmp681:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end2-"?test_span_for@@YAXV?$span@H$0?0@gsl@@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4223                    # Function type index
	.secrel32	"?test_span_for@@YAXV?$span@H$0?0@gsl@@@Z" # Function section relative address
	.secidx	"?test_span_for@@YAXV?$span@H$0?0@gsl@@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"test_span_for"         # Function name
.Ltmp682:
	.short	.Ltmp684-.Ltmp683       # Record length
.Ltmp683:
	.short	4414                    # Record kind: S_LOCAL
	.long	4219                    # TypeIndex
	.short	1                       # Flags
	.asciz	"s"
.Ltmp684:
	.cv_def_range	 .Lfunc_begin2 .Ltmp12, "A\021J\001\000\000"
	.cv_def_range	 .Ltmp12 .Ltmp16, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp686-.Ltmp685       # Record length
.Ltmp685:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp15-.Ltmp11         # Code size
	.secrel32	.Ltmp11         # Function section relative address
	.secidx	.Lfunc_begin2           # Function section index
	.byte	0                       # Lexical block name
.Ltmp686:
	.short	.Ltmp688-.Ltmp687       # Record length
.Ltmp687:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	0                       # Flags
	.asciz	"i"
.Ltmp688:
	.cv_def_range	 .Ltmp11 .Ltmp15, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp680:
	.p2align	2
	.cv_linetable	2, "?test_span_for@@YAXV?$span@H$0?0@gsl@@@Z", .Lfunc_end2
	.section	.debug$S,"dr",associative,"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::size
	.long	.Ltmp690-.Ltmp689       # Subsection size
.Ltmp689:
	.short	.Ltmp692-.Ltmp691       # Record length
.Ltmp691:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end3-"?size@?$span@H$0?0@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4224                    # Function type index
	.secrel32	"?size@?$span@H$0?0@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$span@H$0?0@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::size" # Function name
.Ltmp692:
	.short	.Ltmp694-.Ltmp693       # Record length
.Ltmp693:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp694:
	.cv_def_range	 .Ltmp18 .Ltmp19, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp690:
	.p2align	2
	.cv_linetable	3, "?size@?$span@H$0?0@gsl@@QEBA_JXZ", .Lfunc_end3
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for test_span_iter
	.long	.Ltmp696-.Ltmp695       # Subsection size
.Ltmp695:
	.short	.Ltmp698-.Ltmp697       # Record length
.Ltmp697:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end4-"?test_span_iter@@YAXV?$span@H$0?0@gsl@@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4225                    # Function type index
	.secrel32	"?test_span_iter@@YAXV?$span@H$0?0@gsl@@@Z" # Function section relative address
	.secidx	"?test_span_iter@@YAXV?$span@H$0?0@gsl@@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"test_span_iter"        # Function name
.Ltmp698:
	.short	.Ltmp700-.Ltmp699       # Record length
.Ltmp699:
	.short	4414                    # Record kind: S_LOCAL
	.long	4219                    # TypeIndex
	.short	1                       # Flags
	.asciz	"s"
.Ltmp700:
	.cv_def_range	 .Lfunc_begin4 .Ltmp21, "A\021J\001\000\000"
	.cv_def_range	 .Ltmp21 .Ltmp27, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp702-.Ltmp701       # Record length
.Ltmp701:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp26-.Ltmp20         # Code size
	.secrel32	.Ltmp20         # Function section relative address
	.secidx	.Lfunc_begin4           # Function section index
	.byte	0                       # Lexical block name
.Ltmp702:
	.short	.Ltmp704-.Ltmp703       # Record length
.Ltmp703:
	.short	4414                    # Record kind: S_LOCAL
	.long	4190                    # TypeIndex
	.short	0                       # Flags
	.asciz	"it"
.Ltmp704:
	.cv_def_range	 .Ltmp20 .Ltmp26, "E\021O\001\000\000P\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp696:
	.p2align	2
	.cv_linetable	4, "?test_span_iter@@YAXV?$span@H$0?0@gsl@@@Z", .Lfunc_end4
	.section	.debug$S,"dr",associative,"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::begin
	.long	.Ltmp706-.Ltmp705       # Subsection size
.Ltmp705:
	.short	.Ltmp708-.Ltmp707       # Record length
.Ltmp707:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end5-"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4226                    # Function type index
	.secrel32	"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ" # Function section relative address
	.secidx	"?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::begin" # Function name
.Ltmp708:
	.short	.Ltmp710-.Ltmp709       # Record length
.Ltmp709:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp710:
	.cv_def_range	 .Ltmp29 .Ltmp30, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp706:
	.p2align	2
	.cv_linetable	5, "?begin@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ", .Lfunc_end5
	.section	.debug$S,"dr",associative,"??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::operator!=
	.long	.Ltmp712-.Ltmp711       # Subsection size
.Ltmp711:
	.short	.Ltmp714-.Ltmp713       # Record length
.Ltmp713:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end6-"??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4230                    # Function type index
	.secrel32	"??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z" # Function section relative address
	.secidx	"??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::operator!=" # Function name
.Ltmp714:
	.short	.Ltmp716-.Ltmp715       # Record length
.Ltmp715:
	.short	4414                    # Record kind: S_LOCAL
	.long	4190                    # TypeIndex
	.short	1                       # Flags
	.asciz	"lhs"
.Ltmp716:
	.cv_def_range	 .Lfunc_begin6 .Ltmp32, "E\021J\001\000\000\000\000\000\000"
	.short	.Ltmp718-.Ltmp717       # Record length
.Ltmp717:
	.short	4414                    # Record kind: S_LOCAL
	.long	4190                    # TypeIndex
	.short	1                       # Flags
	.asciz	"rhs"
.Ltmp718:
	.cv_def_range	 .Lfunc_begin6 .Ltmp33, "E\021K\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp712:
	.p2align	2
	.cv_linetable	6, "??9details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z", .Lfunc_end6
	.section	.debug$S,"dr",associative,"?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::end
	.long	.Ltmp720-.Ltmp719       # Subsection size
.Ltmp719:
	.short	.Ltmp722-.Ltmp721       # Record length
.Ltmp721:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end7-"?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4231                    # Function type index
	.secrel32	"?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ" # Function section relative address
	.secidx	"?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::end" # Function name
.Ltmp722:
	.short	.Ltmp724-.Ltmp723       # Record length
.Ltmp723:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp724:
	.cv_def_range	 .Ltmp35 .Ltmp36, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp720:
	.p2align	2
	.cv_linetable	7, "?end@?$span@H$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@2@XZ", .Lfunc_end7
	.section	.debug$S,"dr",associative,"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::span_iterator<gsl::span<int,-1>,0>::operator*
	.long	.Ltmp726-.Ltmp725       # Subsection size
.Ltmp725:
	.short	.Ltmp728-.Ltmp727       # Record length
.Ltmp727:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end8-"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4232                    # Function type index
	.secrel32	"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ" # Function section relative address
	.secidx	"??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::span_iterator<gsl::span<int,-1>,0>::operator*" # Function name
.Ltmp728:
	.short	.Ltmp730-.Ltmp729       # Record length
.Ltmp729:
	.short	4414                    # Record kind: S_LOCAL
	.long	4169                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp730:
	.cv_def_range	 .Ltmp39 .Ltmp40, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp726:
	.p2align	2
	.cv_linetable	8, "??D?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAAEAHXZ", .Lfunc_end8
	.section	.debug$S,"dr",associative,"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::span_iterator<gsl::span<int,-1>,0>::operator++
	.long	.Ltmp732-.Ltmp731       # Subsection size
.Ltmp731:
	.short	.Ltmp734-.Ltmp733       # Record length
.Ltmp733:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end9-"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4233                    # Function type index
	.secrel32	"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ" # Function section relative address
	.secidx	"??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::span_iterator<gsl::span<int,-1>,0>::operator++" # Function name
.Ltmp734:
	.short	.Ltmp736-.Ltmp735       # Record length
.Ltmp735:
	.short	4414                    # Record kind: S_LOCAL
	.long	4163                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp736:
	.cv_def_range	 .Ltmp43 .Ltmp44, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp732:
	.p2align	2
	.cv_linetable	9, "??E?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAAEAV012@XZ", .Lfunc_end9
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for test_span_rangeiter
	.long	.Ltmp738-.Ltmp737       # Subsection size
.Ltmp737:
	.short	.Ltmp740-.Ltmp739       # Record length
.Ltmp739:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end10-"?test_span_rangeiter@@YAXV?$span@H$0?0@gsl@@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4234                    # Function type index
	.secrel32	"?test_span_rangeiter@@YAXV?$span@H$0?0@gsl@@@Z" # Function section relative address
	.secidx	"?test_span_rangeiter@@YAXV?$span@H$0?0@gsl@@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"test_span_rangeiter"   # Function name
.Ltmp740:
	.short	.Ltmp742-.Ltmp741       # Record length
.Ltmp741:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	1                       # Flags
	.asciz	"s"
.Ltmp742:
	.cv_def_range	 .Lfunc_begin10 .Ltmp46, "E\021J\001\000\000\000\000\000\000"
	.short	.Ltmp744-.Ltmp743       # Record length
.Ltmp743:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp54-.Ltmp45         # Code size
	.secrel32	.Ltmp45         # Function section relative address
	.secidx	.Lfunc_begin10          # Function section index
	.byte	0                       # Lexical block name
.Ltmp744:
	.short	.Ltmp746-.Ltmp745       # Record length
.Ltmp745:
	.short	4414                    # Record kind: S_LOCAL
	.long	4124                    # TypeIndex
	.short	0                       # Flags
	.asciz	"__range1"
.Ltmp746:
	.cv_def_range	 .Ltmp45 .Ltmp54, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp748-.Ltmp747       # Record length
.Ltmp747:
	.short	4414                    # Record kind: S_LOCAL
	.long	4190                    # TypeIndex
	.short	0                       # Flags
	.asciz	"__begin1"
.Ltmp748:
	.cv_def_range	 .Ltmp45 .Ltmp54, "E\021O\001\000\000p\000\000\000"
	.short	.Ltmp750-.Ltmp749       # Record length
.Ltmp749:
	.short	4414                    # Record kind: S_LOCAL
	.long	4190                    # TypeIndex
	.short	0                       # Flags
	.asciz	"__end1"
.Ltmp750:
	.cv_def_range	 .Ltmp45 .Ltmp54, "E\021O\001\000\000`\000\000\000"
	.short	.Ltmp752-.Ltmp751       # Record length
.Ltmp751:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp53-.Ltmp51         # Code size
	.secrel32	.Ltmp51         # Function section relative address
	.secidx	.Lfunc_begin10          # Function section index
	.byte	0                       # Lexical block name
.Ltmp752:
	.short	.Ltmp754-.Ltmp753       # Record length
.Ltmp753:
	.short	4414                    # Record kind: S_LOCAL
	.long	4133                    # TypeIndex
	.short	0                       # Flags
	.asciz	"e"
.Ltmp754:
	.cv_def_range	 .Ltmp51 .Ltmp53, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp738:
	.p2align	2
	.cv_linetable	10, "?test_span_rangeiter@@YAXV?$span@H$0?0@gsl@@@Z", .Lfunc_end10
	.long	241                     # Symbol subsection for static_size_array_span
	.long	.Ltmp756-.Ltmp755       # Subsection size
.Ltmp755:
	.short	.Ltmp758-.Ltmp757       # Record length
.Ltmp757:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end11-"?static_size_array_span@@YAXAEAUIDE_DRIVE_STATE@@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4303                    # Function type index
	.secrel32	"?static_size_array_span@@YAXAEAUIDE_DRIVE_STATE@@@Z" # Function section relative address
	.secidx	"?static_size_array_span@@YAXAEAUIDE_DRIVE_STATE@@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"static_size_array_span" # Function name
.Ltmp758:
	.short	.Ltmp760-.Ltmp759       # Record length
.Ltmp759:
	.short	4414                    # Record kind: S_LOCAL
	.long	4236                    # TypeIndex
	.short	1                       # Flags
	.asciz	"Drive"
.Ltmp760:
	.cv_def_range	 .Ltmp56 .Ltmp62, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp762-.Ltmp761       # Record length
.Ltmp761:
	.short	4414                    # Record kind: S_LOCAL
	.long	4351                    # TypeIndex
	.short	0                       # Flags
	.asciz	"sp"
.Ltmp762:
	.cv_def_range	 .Ltmp56 .Ltmp62, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp764-.Ltmp763       # Record length
.Ltmp763:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp61-.Ltmp58         # Code size
	.secrel32	.Ltmp58         # Function section relative address
	.secidx	.Lfunc_begin11          # Function section index
	.byte	0                       # Lexical block name
.Ltmp764:
	.short	.Ltmp766-.Ltmp765       # Record length
.Ltmp765:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	0                       # Flags
	.asciz	"i"
.Ltmp766:
	.cv_def_range	 .Ltmp58 .Ltmp61, "E\021O\001\000\0004\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp756:
	.p2align	2
	.cv_linetable	11, "?static_size_array_span@@YAXAEAUIDE_DRIVE_STATE@@@Z", .Lfunc_end11
	.section	.debug$S,"dr",associative,"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned char,-1>::span<6>
	.long	.Ltmp768-.Ltmp767       # Subsection size
.Ltmp767:
	.short	.Ltmp770-.Ltmp769       # Record length
.Ltmp769:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end12-"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4391                    # Function type index
	.secrel32	"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z" # Function section relative address
	.secidx	"??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned char,-1>::span<6>" # Function name
.Ltmp770:
	.short	.Ltmp772-.Ltmp771       # Record length
.Ltmp771:
	.short	4414                    # Record kind: S_LOCAL
	.long	4306                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp772:
	.cv_def_range	 .Ltmp65 .Ltmp66, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp774-.Ltmp773       # Record length
.Ltmp773:
	.short	4414                    # Record kind: S_LOCAL
	.long	4388                    # TypeIndex
	.short	1                       # Flags
	.asciz	"arr"
.Ltmp774:
	.cv_def_range	 .Ltmp65 .Ltmp66, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp768:
	.p2align	2
	.cv_linetable	12, "??$?0$05@?$span@E$0?0@gsl@@QEAA@AEAY05E@Z", .Lfunc_end12
	.section	.debug$S,"dr",associative,"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned char,-1>::operator[]
	.long	.Ltmp776-.Ltmp775       # Subsection size
.Ltmp775:
	.short	.Ltmp778-.Ltmp777       # Record length
.Ltmp777:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end13-"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4392                    # Function type index
	.secrel32	"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z" # Function section relative address
	.secidx	"??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned char,-1>::operator[]" # Function name
.Ltmp778:
	.short	.Ltmp780-.Ltmp779       # Record length
.Ltmp779:
	.short	4414                    # Record kind: S_LOCAL
	.long	4330                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp780:
	.cv_def_range	 .Ltmp69 .Ltmp70, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp782-.Ltmp781       # Record length
.Ltmp781:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"idx"
.Ltmp782:
	.cv_def_range	 .Ltmp69 .Ltmp70, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp776:
	.p2align	2
	.cv_linetable	13, "??A?$span@E$0?0@gsl@@QEBAAEAE_J@Z", .Lfunc_end13
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for test_convert_span_Joe
	.long	.Ltmp784-.Ltmp783       # Subsection size
.Ltmp783:
	.short	.Ltmp786-.Ltmp785       # Record length
.Ltmp785:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end14-"?test_convert_span_Joe@@YAEAEAUIDE_DRIVE_STATE@@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4394                    # Function type index
	.secrel32	"?test_convert_span_Joe@@YAEAEAUIDE_DRIVE_STATE@@@Z" # Function section relative address
	.secidx	"?test_convert_span_Joe@@YAEAEAUIDE_DRIVE_STATE@@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"test_convert_span_Joe" # Function name
.Ltmp786:
	.short	.Ltmp788-.Ltmp787       # Record length
.Ltmp787:
	.short	4414                    # Record kind: S_LOCAL
	.long	4236                    # TypeIndex
	.short	1                       # Flags
	.asciz	"Drive"
.Ltmp788:
	.cv_def_range	 .Ltmp71 .Ltmp74, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp790-.Ltmp789       # Record length
.Ltmp789:
	.short	4414                    # Record kind: S_LOCAL
	.long	4351                    # TypeIndex
	.short	0                       # Flags
	.asciz	"curBuffer"
.Ltmp790:
	.cv_def_range	 .Ltmp71 .Ltmp74, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp784:
	.p2align	2
	.cv_linetable	14, "?test_convert_span_Joe@@YAEAEAUIDE_DRIVE_STATE@@@Z", .Lfunc_end14
	.section	.debug$S,"dr",associative,"??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for convert_span<unsigned char,gsl::span<unsigned short,-1> >
	.long	.Ltmp792-.Ltmp791       # Subsection size
.Ltmp791:
	.short	.Ltmp794-.Ltmp793       # Record length
.Ltmp793:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end15-"??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4397                    # Function type index
	.secrel32	"??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z" # Function section relative address
	.secidx	"??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"convert_span<unsigned char,gsl::span<unsigned short,-1> >" # Function name
.Ltmp794:
	.short	.Ltmp796-.Ltmp795       # Record length
.Ltmp795:
	.short	4414                    # Record kind: S_LOCAL
	.long	4398                    # TypeIndex
	.short	1                       # Flags
	.asciz	"s"
.Ltmp796:
	.cv_def_range	 .Lfunc_begin15 .Ltmp76, "A\021K\001\000\000"
	.cv_def_range	 .Ltmp76 .Ltmp77, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp798-.Ltmp797       # Record length
.Ltmp797:
	.short	4414                    # Record kind: S_LOCAL
	.long	1568                    # TypeIndex
	.short	0                       # Flags
	.asciz	"ptr"
.Ltmp798:
	.cv_def_range	 .Ltmp75 .Ltmp78, "E\021O\001\000\000P\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp792:
	.p2align	2
	.cv_linetable	15, "??$convert_span@EV?$span@G$0?0@gsl@@@@YA?AV?$span@E$0?0@gsl@@V?$span@G$0?0@1@@Z", .Lfunc_end15
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for mysubspan1
	.long	.Ltmp800-.Ltmp799       # Subsection size
.Ltmp799:
	.short	.Ltmp802-.Ltmp801       # Record length
.Ltmp801:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end16-"?mysubspan1@@YA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4400                    # Function type index
	.secrel32	"?mysubspan1@@YA_JXZ" # Function section relative address
	.secidx	"?mysubspan1@@YA_JXZ"   # Function section index
	.byte	0                       # Flags
	.asciz	"mysubspan1"            # Function name
.Ltmp802:
	.short	.Ltmp804-.Ltmp803       # Record length
.Ltmp803:
	.short	4414                    # Record kind: S_LOCAL
	.long	4401                    # TypeIndex
	.short	0                       # Flags
	.asciz	"x"
.Ltmp804:
	.cv_def_range	 .Ltmp79 .Ltmp85, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp806-.Ltmp805       # Record length
.Ltmp805:
	.short	4414                    # Record kind: S_LOCAL
	.long	4440                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
.Ltmp806:
	.cv_def_range	 .Ltmp79 .Ltmp85, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp808-.Ltmp807       # Record length
.Ltmp807:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"subspan"
.Ltmp808:
	.cv_def_range	 .Ltmp79 .Ltmp85, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp800:
	.p2align	2
	.cv_linetable	16, "?mysubspan1@@YA_JXZ", .Lfunc_end16
	.section	.debug$S,"dr",associative,"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,6>::span<6>
	.long	.Ltmp810-.Ltmp809       # Subsection size
.Ltmp809:
	.short	.Ltmp812-.Ltmp811       # Record length
.Ltmp811:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end17-"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4464                    # Function type index
	.secrel32	"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z" # Function section relative address
	.secidx	"??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,6>::span<6>" # Function name
.Ltmp812:
	.short	.Ltmp814-.Ltmp813       # Record length
.Ltmp813:
	.short	4414                    # Record kind: S_LOCAL
	.long	4404                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp814:
	.cv_def_range	 .Ltmp88 .Ltmp89, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp816-.Ltmp815       # Record length
.Ltmp815:
	.short	4414                    # Record kind: S_LOCAL
	.long	4461                    # TypeIndex
	.short	1                       # Flags
	.asciz	"arr"
.Ltmp816:
	.cv_def_range	 .Ltmp88 .Ltmp89, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp810:
	.p2align	2
	.cv_linetable	17, "??$?0$05@?$span@H$05@gsl@@QEAA@AEAY05H@Z", .Lfunc_end17
	.section	.debug$S,"dr",associative,"?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,6>::last
	.long	.Ltmp818-.Ltmp817       # Subsection size
.Ltmp817:
	.short	.Ltmp820-.Ltmp819       # Record length
.Ltmp819:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end18-"?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4465                    # Function type index
	.secrel32	"?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z" # Function section relative address
	.secidx	"?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,6>::last" # Function name
.Ltmp820:
	.short	.Ltmp822-.Ltmp821       # Record length
.Ltmp821:
	.short	4414                    # Record kind: S_LOCAL
	.long	4420                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp822:
	.cv_def_range	 .Ltmp90 .Ltmp91, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp824-.Ltmp823       # Record length
.Ltmp823:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"count"
.Ltmp824:
	.cv_def_range	 .Ltmp90 .Ltmp91, "E\021O\001\000\000`\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp818:
	.p2align	2
	.cv_linetable	18, "?last@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J@Z", .Lfunc_end18
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for mysubspan2
	.long	.Ltmp826-.Ltmp825       # Subsection size
.Ltmp825:
	.short	.Ltmp828-.Ltmp827       # Record length
.Ltmp827:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end19-"?mysubspan2@@YA_J_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4467                    # Function type index
	.secrel32	"?mysubspan2@@YA_J_J@Z" # Function section relative address
	.secidx	"?mysubspan2@@YA_J_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"mysubspan2"            # Function name
.Ltmp828:
	.short	.Ltmp830-.Ltmp829       # Record length
.Ltmp829:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"i"
.Ltmp830:
	.cv_def_range	 .Ltmp92 .Ltmp98, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp832-.Ltmp831       # Record length
.Ltmp831:
	.short	4414                    # Record kind: S_LOCAL
	.long	4401                    # TypeIndex
	.short	0                       # Flags
	.asciz	"x"
.Ltmp832:
	.cv_def_range	 .Ltmp92 .Ltmp98, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp834-.Ltmp833       # Record length
.Ltmp833:
	.short	4414                    # Record kind: S_LOCAL
	.long	4440                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
.Ltmp834:
	.cv_def_range	 .Ltmp92 .Ltmp98, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp836-.Ltmp835       # Record length
.Ltmp835:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"subspan"
.Ltmp836:
	.cv_def_range	 .Ltmp92 .Ltmp98, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp826:
	.p2align	2
	.cv_linetable	19, "?mysubspan2@@YA_J_J@Z", .Lfunc_end19
	.long	241                     # Symbol subsection for mysubspan3
	.long	.Ltmp838-.Ltmp837       # Subsection size
.Ltmp837:
	.short	.Ltmp840-.Ltmp839       # Record length
.Ltmp839:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end20-"?mysubspan3@@YA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4468                    # Function type index
	.secrel32	"?mysubspan3@@YA_JXZ" # Function section relative address
	.secidx	"?mysubspan3@@YA_JXZ"   # Function section index
	.byte	0                       # Flags
	.asciz	"mysubspan3"            # Function name
.Ltmp840:
	.short	.Ltmp842-.Ltmp841       # Record length
.Ltmp841:
	.short	4414                    # Record kind: S_LOCAL
	.long	4401                    # TypeIndex
	.short	0                       # Flags
	.asciz	"x"
.Ltmp842:
	.cv_def_range	 .Ltmp99 .Ltmp105, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp844-.Ltmp843       # Record length
.Ltmp843:
	.short	4414                    # Record kind: S_LOCAL
	.long	4440                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
.Ltmp844:
	.cv_def_range	 .Ltmp99 .Ltmp105, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp846-.Ltmp845       # Record length
.Ltmp845:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"subspan"
.Ltmp846:
	.cv_def_range	 .Ltmp99 .Ltmp105, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp838:
	.p2align	2
	.cv_linetable	20, "?mysubspan3@@YA_JXZ", .Lfunc_end20
	.section	.debug$S,"dr",associative,"?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,6>::subspan
	.long	.Ltmp848-.Ltmp847       # Subsection size
.Ltmp847:
	.short	.Ltmp850-.Ltmp849       # Record length
.Ltmp849:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end21-"?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4469                    # Function type index
	.secrel32	"?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z" # Function section relative address
	.secidx	"?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,6>::subspan" # Function name
.Ltmp850:
	.short	.Ltmp852-.Ltmp851       # Record length
.Ltmp851:
	.short	4414                    # Record kind: S_LOCAL
	.long	4420                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp852:
	.cv_def_range	 .Ltmp106 .Ltmp107, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp854-.Ltmp853       # Record length
.Ltmp853:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"offset"
.Ltmp854:
	.cv_def_range	 .Ltmp106 .Ltmp107, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp856-.Ltmp855       # Record length
.Ltmp855:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"count"
.Ltmp856:
	.cv_def_range	 .Ltmp106 .Ltmp107, "E\021O\001\000\000P\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp848:
	.p2align	2
	.cv_linetable	21, "?subspan@?$span@H$05@gsl@@QEBA?AV?$span@H$0?0@2@_J0@Z", .Lfunc_end21
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for mysubspan4
	.long	.Ltmp858-.Ltmp857       # Subsection size
.Ltmp857:
	.short	.Ltmp860-.Ltmp859       # Record length
.Ltmp859:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end22-"?mysubspan4@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4472                    # Function type index
	.secrel32	"?mysubspan4@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Function section relative address
	.secidx	"?mysubspan4@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"mysubspan4"            # Function name
.Ltmp860:
	.short	.Ltmp862-.Ltmp861       # Record length
.Ltmp861:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"p"
.Ltmp862:
	.cv_def_range	 .Ltmp108 .Ltmp113, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp864-.Ltmp863       # Record length
.Ltmp863:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"size"
.Ltmp864:
	.cv_def_range	 .Ltmp108 .Ltmp113, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp866-.Ltmp865       # Record length
.Ltmp865:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"i"
.Ltmp866:
	.cv_def_range	 .Ltmp108 .Ltmp113, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp868-.Ltmp867       # Record length
.Ltmp867:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp112-.Ltmp109       # Code size
	.secrel32	.Ltmp109        # Function section relative address
	.secidx	.Lfunc_begin22          # Function section index
	.byte	0                       # Lexical block name
.Ltmp868:
	.short	.Ltmp870-.Ltmp869       # Record length
.Ltmp869:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
.Ltmp870:
	.cv_def_range	 .Ltmp109 .Ltmp112, "E\021O\001\000\000`\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp858:
	.p2align	2
	.cv_linetable	22, "?mysubspan4@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z", .Lfunc_end22
	.section	.debug$S,"dr",associative,"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::span
	.long	.Ltmp872-.Ltmp871       # Subsection size
.Ltmp871:
	.short	.Ltmp874-.Ltmp873       # Record length
.Ltmp873:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end23-"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4473                    # Function type index
	.secrel32	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # Function section relative address
	.secidx	"??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::span" # Function name
.Ltmp874:
	.short	.Ltmp876-.Ltmp875       # Record length
.Ltmp875:
	.short	4414                    # Record kind: S_LOCAL
	.long	4101                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp876:
	.cv_def_range	 .Ltmp114 .Ltmp115, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp878-.Ltmp877       # Record length
.Ltmp877:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ptr"
.Ltmp878:
	.cv_def_range	 .Ltmp114 .Ltmp115, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp880-.Ltmp879       # Record length
.Ltmp879:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"count"
.Ltmp880:
	.cv_def_range	 .Ltmp114 .Ltmp115, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp872:
	.p2align	2
	.cv_linetable	23, "??0?$span@H$0?0@gsl@@QEAA@PEAH_J@Z", .Lfunc_end23
	.section	.debug$S,"dr",associative,"?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::last
	.long	.Ltmp882-.Ltmp881       # Subsection size
.Ltmp881:
	.short	.Ltmp884-.Ltmp883       # Record length
.Ltmp883:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end24-"?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4474                    # Function type index
	.secrel32	"?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z" # Function section relative address
	.secidx	"?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::last" # Function name
.Ltmp884:
	.short	.Ltmp886-.Ltmp885       # Record length
.Ltmp885:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp886:
	.cv_def_range	 .Ltmp116 .Ltmp117, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp888-.Ltmp887       # Record length
.Ltmp887:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"count"
.Ltmp888:
	.cv_def_range	 .Ltmp116 .Ltmp117, "E\021O\001\000\000`\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp882:
	.p2align	2
	.cv_linetable	24, "?last@?$span@H$0?0@gsl@@QEBA?AV12@_J@Z", .Lfunc_end24
	.section	.debug$S,"dr",associative,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::span<0,void>
	.long	.Ltmp890-.Ltmp889       # Subsection size
.Ltmp889:
	.short	.Ltmp892-.Ltmp891       # Record length
.Ltmp891:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end25-"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4475                    # Function type index
	.secrel32	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ" # Function section relative address
	.secidx	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::span<0,void>" # Function name
.Ltmp892:
	.short	.Ltmp894-.Ltmp893       # Record length
.Ltmp893:
	.short	4414                    # Record kind: S_LOCAL
	.long	4101                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp894:
	.cv_def_range	 .Ltmp120 .Ltmp121, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp890:
	.p2align	2
	.cv_linetable	25, "??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ", .Lfunc_end25
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for mysubspan5
	.long	.Ltmp896-.Ltmp895       # Subsection size
.Ltmp895:
	.short	.Ltmp898-.Ltmp897       # Record length
.Ltmp897:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end26-"?mysubspan5@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4476                    # Function type index
	.secrel32	"?mysubspan5@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Function section relative address
	.secidx	"?mysubspan5@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"mysubspan5"            # Function name
.Ltmp898:
	.short	.Ltmp900-.Ltmp899       # Record length
.Ltmp899:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"p"
.Ltmp900:
	.cv_def_range	 .Ltmp122 .Ltmp127, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp902-.Ltmp901       # Record length
.Ltmp901:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"size"
.Ltmp902:
	.cv_def_range	 .Ltmp122 .Ltmp127, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp904-.Ltmp903       # Record length
.Ltmp903:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"i"
.Ltmp904:
	.cv_def_range	 .Ltmp122 .Ltmp127, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp906-.Ltmp905       # Record length
.Ltmp905:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp126-.Ltmp123       # Code size
	.secrel32	.Ltmp123        # Function section relative address
	.secidx	.Lfunc_begin26          # Function section index
	.byte	0                       # Lexical block name
.Ltmp906:
	.short	.Ltmp908-.Ltmp907       # Record length
.Ltmp907:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
.Ltmp908:
	.cv_def_range	 .Ltmp123 .Ltmp126, "E\021O\001\000\000`\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp896:
	.p2align	2
	.cv_linetable	26, "?mysubspan5@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z", .Lfunc_end26
	.section	.debug$S,"dr",associative,"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::subspan
	.long	.Ltmp910-.Ltmp909       # Subsection size
.Ltmp909:
	.short	.Ltmp912-.Ltmp911       # Record length
.Ltmp911:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end27-"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4477                    # Function type index
	.secrel32	"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z" # Function section relative address
	.secidx	"?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::subspan" # Function name
.Ltmp912:
	.short	.Ltmp914-.Ltmp913       # Record length
.Ltmp913:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp914:
	.cv_def_range	 .Ltmp128 .Ltmp129, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp916-.Ltmp915       # Record length
.Ltmp915:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"offset"
.Ltmp916:
	.cv_def_range	 .Ltmp128 .Ltmp129, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp918-.Ltmp917       # Record length
.Ltmp917:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"count"
.Ltmp918:
	.cv_def_range	 .Ltmp128 .Ltmp129, "E\021O\001\000\000P\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp910:
	.p2align	2
	.cv_linetable	27, "?subspan@?$span@H$0?0@gsl@@QEBA?AV12@_J0@Z", .Lfunc_end27
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for mysubspan6
	.long	.Ltmp920-.Ltmp919       # Subsection size
.Ltmp919:
	.short	.Ltmp922-.Ltmp921       # Record length
.Ltmp921:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end28-"?mysubspan6@@YA?AV?$span@H$0?0@gsl@@PEAH_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4479                    # Function type index
	.secrel32	"?mysubspan6@@YA?AV?$span@H$0?0@gsl@@PEAH_J@Z" # Function section relative address
	.secidx	"?mysubspan6@@YA?AV?$span@H$0?0@gsl@@PEAH_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"mysubspan6"            # Function name
.Ltmp922:
	.short	.Ltmp924-.Ltmp923       # Record length
.Ltmp923:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"p"
.Ltmp924:
	.cv_def_range	 .Ltmp130 .Ltmp135, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp926-.Ltmp925       # Record length
.Ltmp925:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"size"
.Ltmp926:
	.cv_def_range	 .Ltmp130 .Ltmp135, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp928-.Ltmp927       # Record length
.Ltmp927:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp134-.Ltmp131       # Code size
	.secrel32	.Ltmp131        # Function section relative address
	.secidx	.Lfunc_begin28          # Function section index
	.byte	0                       # Lexical block name
.Ltmp928:
	.short	.Ltmp930-.Ltmp929       # Record length
.Ltmp929:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
.Ltmp930:
	.cv_def_range	 .Ltmp131 .Ltmp134, "E\021O\001\000\000P\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp920:
	.p2align	2
	.cv_linetable	28, "?mysubspan6@@YA?AV?$span@H$0?0@gsl@@PEAH_J@Z", .Lfunc_end28
	.long	241                     # Symbol subsection for mysubspan7
	.long	.Ltmp932-.Ltmp931       # Subsection size
.Ltmp931:
	.short	.Ltmp934-.Ltmp933       # Record length
.Ltmp933:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end29-"?mysubspan7@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4480                    # Function type index
	.secrel32	"?mysubspan7@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Function section relative address
	.secidx	"?mysubspan7@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"mysubspan7"            # Function name
.Ltmp934:
	.short	.Ltmp936-.Ltmp935       # Record length
.Ltmp935:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"p"
.Ltmp936:
	.cv_def_range	 .Ltmp136 .Ltmp141, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp938-.Ltmp937       # Record length
.Ltmp937:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"size"
.Ltmp938:
	.cv_def_range	 .Ltmp136 .Ltmp141, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp940-.Ltmp939       # Record length
.Ltmp939:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"i"
.Ltmp940:
	.cv_def_range	 .Ltmp136 .Ltmp141, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp942-.Ltmp941       # Record length
.Ltmp941:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp140-.Ltmp137       # Code size
	.secrel32	.Ltmp137        # Function section relative address
	.secidx	.Lfunc_begin29          # Function section index
	.byte	0                       # Lexical block name
.Ltmp942:
	.short	.Ltmp944-.Ltmp943       # Record length
.Ltmp943:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
.Ltmp944:
	.cv_def_range	 .Ltmp137 .Ltmp140, "E\021O\001\000\000`\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp932:
	.p2align	2
	.cv_linetable	29, "?mysubspan7@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z", .Lfunc_end29
	.long	241                     # Symbol subsection for mysubspan8
	.long	.Ltmp946-.Ltmp945       # Subsection size
.Ltmp945:
	.short	.Ltmp948-.Ltmp947       # Record length
.Ltmp947:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end30-"?mysubspan8@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4481                    # Function type index
	.secrel32	"?mysubspan8@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Function section relative address
	.secidx	"?mysubspan8@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"mysubspan8"            # Function name
.Ltmp948:
	.short	.Ltmp950-.Ltmp949       # Record length
.Ltmp949:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"p"
.Ltmp950:
	.cv_def_range	 .Ltmp142 .Ltmp147, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp952-.Ltmp951       # Record length
.Ltmp951:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"size"
.Ltmp952:
	.cv_def_range	 .Ltmp142 .Ltmp147, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp954-.Ltmp953       # Record length
.Ltmp953:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"i"
.Ltmp954:
	.cv_def_range	 .Ltmp142 .Ltmp147, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp956-.Ltmp955       # Record length
.Ltmp955:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp146-.Ltmp143       # Code size
	.secrel32	.Ltmp143        # Function section relative address
	.secidx	.Lfunc_begin30          # Function section index
	.byte	0                       # Lexical block name
.Ltmp956:
	.short	.Ltmp958-.Ltmp957       # Record length
.Ltmp957:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
.Ltmp958:
	.cv_def_range	 .Ltmp143 .Ltmp146, "E\021O\001\000\000`\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp946:
	.p2align	2
	.cv_linetable	30, "?mysubspan8@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z", .Lfunc_end30
	.long	241                     # Symbol subsection for mysubspan9
	.long	.Ltmp960-.Ltmp959       # Subsection size
.Ltmp959:
	.short	.Ltmp962-.Ltmp961       # Record length
.Ltmp961:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end31-"?mysubspan9@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4482                    # Function type index
	.secrel32	"?mysubspan9@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Function section relative address
	.secidx	"?mysubspan9@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"mysubspan9"            # Function name
.Ltmp962:
	.short	.Ltmp964-.Ltmp963       # Record length
.Ltmp963:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"p"
.Ltmp964:
	.cv_def_range	 .Ltmp148 .Ltmp153, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp966-.Ltmp965       # Record length
.Ltmp965:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"size"
.Ltmp966:
	.cv_def_range	 .Ltmp148 .Ltmp153, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp968-.Ltmp967       # Record length
.Ltmp967:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"i"
.Ltmp968:
	.cv_def_range	 .Ltmp148 .Ltmp153, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp970-.Ltmp969       # Record length
.Ltmp969:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp152-.Ltmp149       # Code size
	.secrel32	.Ltmp149        # Function section relative address
	.secidx	.Lfunc_begin31          # Function section index
	.byte	0                       # Lexical block name
.Ltmp970:
	.short	.Ltmp972-.Ltmp971       # Record length
.Ltmp971:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
.Ltmp972:
	.cv_def_range	 .Ltmp149 .Ltmp152, "E\021O\001\000\000`\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp960:
	.p2align	2
	.cv_linetable	31, "?mysubspan9@@YA?AV?$span@H$0?0@gsl@@PEAH_J1@Z", .Lfunc_end31
	.long	241                     # Symbol subsection for doterminate
	.long	.Ltmp974-.Ltmp973       # Subsection size
.Ltmp973:
	.short	.Ltmp976-.Ltmp975       # Record length
.Ltmp975:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end32-"?doterminate@@YAXXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4484                    # Function type index
	.secrel32	"?doterminate@@YAXXZ" # Function section relative address
	.secidx	"?doterminate@@YAXXZ"   # Function section index
	.byte	0                       # Flags
	.asciz	"doterminate"           # Function name
.Ltmp976:
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp974:
	.p2align	2
	.cv_linetable	32, "?doterminate@@YAXXZ", .Lfunc_end32
	.long	241                     # Symbol subsection for copy_span
	.long	.Ltmp978-.Ltmp977       # Subsection size
.Ltmp977:
	.short	.Ltmp980-.Ltmp979       # Record length
.Ltmp979:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end33-"?copy_span@@YAXV?$span@H$0?0@gsl@@0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4487                    # Function type index
	.secrel32	"?copy_span@@YAXV?$span@H$0?0@gsl@@0@Z" # Function section relative address
	.secidx	"?copy_span@@YAXV?$span@H$0?0@gsl@@0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"copy_span"             # Function name
.Ltmp980:
	.short	.Ltmp982-.Ltmp981       # Record length
.Ltmp981:
	.short	4414                    # Record kind: S_LOCAL
	.long	4219                    # TypeIndex
	.short	1                       # Flags
	.asciz	"x"
.Ltmp982:
	.cv_def_range	 .Lfunc_begin33 .Ltmp157, "A\021J\001\000\000"
	.cv_def_range	 .Ltmp157 .Ltmp159, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp984-.Ltmp983       # Record length
.Ltmp983:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	1                       # Flags
	.asciz	"y"
.Ltmp984:
	.cv_def_range	 .Lfunc_begin33 .Ltmp158, "E\021K\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp978:
	.p2align	2
	.cv_linetable	33, "?copy_span@@YAXV?$span@H$0?0@gsl@@0@Z", .Lfunc_end33
	.section	.debug$S,"dr",associative,"??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::copy<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> >
	.long	.Ltmp986-.Ltmp985       # Subsection size
.Ltmp985:
	.short	.Ltmp988-.Ltmp987       # Record length
.Ltmp987:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end34-"??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4491                    # Function type index
	.secrel32	"??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z" # Function section relative address
	.secidx	"??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::copy<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> >" # Function name
.Ltmp988:
	.short	.Ltmp990-.Ltmp989       # Record length
.Ltmp989:
	.short	4414                    # Record kind: S_LOCAL
	.long	4492                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp990:
	.cv_def_range	 .Lfunc_begin34 .Ltmp162, "A\021K\001\000\000"
	.cv_def_range	 .Ltmp162 .Ltmp165, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp992-.Ltmp991       # Record length
.Ltmp991:
	.short	4414                    # Record kind: S_LOCAL
	.long	4492                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp992:
	.cv_def_range	 .Lfunc_begin34 .Ltmp164, "A\021P\001\000\000"
	.cv_def_range	 .Ltmp164 .Ltmp165, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp994-.Ltmp993       # Record length
.Ltmp993:
	.short	4414                    # Record kind: S_LOCAL
	.long	4492                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp994:
	.cv_def_range	 .Lfunc_begin34 .Ltmp163, "A\021Q\001\000\000"
	.cv_def_range	 .Ltmp163 .Ltmp165, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp996-.Ltmp995       # Record length
.Ltmp995:
	.short	4414                    # Record kind: S_LOCAL
	.long	4493                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_UFirst"
.Ltmp996:
	.cv_def_range	 .Ltmp161 .Ltmp166, "E\021O\001\000\000h\000\000\000"
	.short	.Ltmp998-.Ltmp997       # Record length
.Ltmp997:
	.short	4414                    # Record kind: S_LOCAL
	.long	4493                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_ULast"
.Ltmp998:
	.cv_def_range	 .Ltmp161 .Ltmp166, "E\021O\001\000\000`\000\000\000"
	.short	.Ltmp1000-.Ltmp999      # Record length
.Ltmp999:
	.short	4414                    # Record kind: S_LOCAL
	.long	4493                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_UDest"
.Ltmp1000:
	.cv_def_range	 .Ltmp161 .Ltmp166, "E\021O\001\000\000P\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp986:
	.p2align	2
	.cv_linetable	34, "??$copy@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YA?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@00@Z", .Lfunc_end34
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for gsl_copy_span
	.long	.Ltmp1002-.Ltmp1001     # Subsection size
.Ltmp1001:
	.short	.Ltmp1004-.Ltmp1003     # Record length
.Ltmp1003:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end35-"?gsl_copy_span@@YAXV?$span@H$0?0@gsl@@0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4494                    # Function type index
	.secrel32	"?gsl_copy_span@@YAXV?$span@H$0?0@gsl@@0@Z" # Function section relative address
	.secidx	"?gsl_copy_span@@YAXV?$span@H$0?0@gsl@@0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl_copy_span"         # Function name
.Ltmp1004:
	.short	.Ltmp1006-.Ltmp1005     # Record length
.Ltmp1005:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	1                       # Flags
	.asciz	"x"
.Ltmp1006:
	.cv_def_range	 .Lfunc_begin35 .Ltmp168, "E\021J\001\000\000\000\000\000\000"
	.short	.Ltmp1008-.Ltmp1007     # Record length
.Ltmp1007:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	1                       # Flags
	.asciz	"y"
.Ltmp1008:
	.cv_def_range	 .Lfunc_begin35 .Ltmp169, "E\021K\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1002:
	.p2align	2
	.cv_linetable	35, "?gsl_copy_span@@YAXV?$span@H$0?0@gsl@@0@Z", .Lfunc_end35
	.section	.debug$S,"dr",associative,"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::copy<int,-1,int,-1>
	.long	.Ltmp1010-.Ltmp1009     # Subsection size
.Ltmp1009:
	.short	.Ltmp1012-.Ltmp1011     # Record length
.Ltmp1011:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end36-"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4496                    # Function type index
	.secrel32	"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z" # Function section relative address
	.secidx	"??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::copy<int,-1,int,-1>" # Function name
.Ltmp1012:
	.short	.Ltmp1014-.Ltmp1013     # Record length
.Ltmp1013:
	.short	4414                    # Record kind: S_LOCAL
	.long	4219                    # TypeIndex
	.short	1                       # Flags
	.asciz	"src"
.Ltmp1014:
	.cv_def_range	 .Lfunc_begin36 .Ltmp174, "A\021J\001\000\000"
	.cv_def_range	 .Ltmp174 .Ltmp181 .Ltmp182 .Ltmp183, "E\021N\001\000\000\340\377\377\377"
	.short	.Ltmp1016-.Ltmp1015     # Record length
.Ltmp1015:
	.short	4414                    # Record kind: S_LOCAL
	.long	4219                    # TypeIndex
	.short	1                       # Flags
	.asciz	"dest"
.Ltmp1016:
	.cv_def_range	 .Lfunc_begin36 .Ltmp175, "A\021K\001\000\000"
	.cv_def_range	 .Ltmp175 .Ltmp181 .Ltmp182 .Ltmp183, "E\021N\001\000\000\330\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1010:
	.p2align	2
	.cv_linetable	36, "??$copy@H$0?0H$0?0@gsl@@YAXV?$span@H$0?0@0@0@Z", .Lfunc_end36
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for test_string_std_copy
	.long	.Ltmp1018-.Ltmp1017     # Subsection size
.Ltmp1017:
	.short	.Ltmp1020-.Ltmp1019     # Record length
.Ltmp1019:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end37-"?test_string_std_copy@@YAXXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4497                    # Function type index
	.secrel32	"?test_string_std_copy@@YAXXZ" # Function section relative address
	.secidx	"?test_string_std_copy@@YAXXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"test_string_std_copy"  # Function name
.Ltmp1020:
	.short	.Ltmp1022-.Ltmp1021     # Record length
.Ltmp1021:
	.short	4414                    # Record kind: S_LOCAL
	.long	4498                    # TypeIndex
	.short	0                       # Flags
	.asciz	"bytes"
.Ltmp1022:
	.cv_def_range	 .Ltmp185 .Ltmp189, "E\021O\001\000\000\266\000\000\000"
	.short	.Ltmp1024-.Ltmp1023     # Record length
.Ltmp1023:
	.short	4414                    # Record kind: S_LOCAL
	.long	4351                    # TypeIndex
	.short	0                       # Flags
	.asciz	"byteSpan"
.Ltmp1024:
	.cv_def_range	 .Ltmp185 .Ltmp189, "E\021O\001\000\000\240\000\000\000"
	.short	.Ltmp1026-.Ltmp1025     # Record length
.Ltmp1025:
	.short	4414                    # Record kind: S_LOCAL
	.long	4499                    # TypeIndex
	.short	0                       # Flags
	.asciz	"cdModelType"
.Ltmp1026:
	.cv_def_range	 .Ltmp185 .Ltmp189, "E\021O\001\000\000\220\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1018:
	.p2align	2
	.cv_linetable	37, "?test_string_std_copy@@YAXXZ", .Lfunc_end37
	.section	.debug$S,"dr",associative,"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned char,-1>::span<10>
	.long	.Ltmp1028-.Ltmp1027     # Subsection size
.Ltmp1027:
	.short	.Ltmp1030-.Ltmp1029     # Record length
.Ltmp1029:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end38-"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4615                    # Function type index
	.secrel32	"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z" # Function section relative address
	.secidx	"??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned char,-1>::span<10>" # Function name
.Ltmp1030:
	.short	.Ltmp1032-.Ltmp1031     # Record length
.Ltmp1031:
	.short	4414                    # Record kind: S_LOCAL
	.long	4306                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1032:
	.cv_def_range	 .Ltmp192 .Ltmp193, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp1034-.Ltmp1033     # Record length
.Ltmp1033:
	.short	4414                    # Record kind: S_LOCAL
	.long	4612                    # TypeIndex
	.short	1                       # Flags
	.asciz	"arr"
.Ltmp1034:
	.cv_def_range	 .Ltmp192 .Ltmp193, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1028:
	.p2align	2
	.cv_linetable	38, "??$?0$09@?$span@E$0?0@gsl@@QEAA@AEAY09E@Z", .Lfunc_end38
	.section	.debug$S,"dr",associative,"??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::ensure_z<const char,11>
	.long	.Ltmp1036-.Ltmp1035     # Subsection size
.Ltmp1035:
	.short	.Ltmp1038-.Ltmp1037     # Record length
.Ltmp1037:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end39-"??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4620                    # Function type index
	.secrel32	"??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z" # Function section relative address
	.secidx	"??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::ensure_z<const char,11>" # Function name
.Ltmp1038:
	.short	.Ltmp1040-.Ltmp1039     # Record length
.Ltmp1039:
	.short	4414                    # Record kind: S_LOCAL
	.long	4617                    # TypeIndex
	.short	1                       # Flags
	.asciz	"sz"
.Ltmp1040:
	.cv_def_range	 .Ltmp194 .Ltmp195, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1036:
	.p2align	2
	.cv_linetable	39, "??$ensure_z@$$CBD$0L@@gsl@@YA?AV?$span@$$CBD$0?0@0@AEAY0L@$$CBD@Z", .Lfunc_end39
	.section	.debug$S,"dr",associative,"??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::basic_string_span<const char,-1>::basic_string_span<gsl::span<const char,-1>,void>
	.long	.Ltmp1042-.Ltmp1041     # Subsection size
.Ltmp1041:
	.short	.Ltmp1044-.Ltmp1043     # Record length
.Ltmp1043:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end40-"??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4622                    # Function type index
	.secrel32	"??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z" # Function section relative address
	.secidx	"??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::basic_string_span<const char,-1>::basic_string_span<gsl::span<const char,-1>,void>" # Function name
.Ltmp1044:
	.short	.Ltmp1046-.Ltmp1045     # Record length
.Ltmp1045:
	.short	4414                    # Record kind: S_LOCAL
	.long	4501                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1046:
	.cv_def_range	 .Ltmp196 .Ltmp197, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1048-.Ltmp1047     # Record length
.Ltmp1047:
	.short	4414                    # Record kind: S_LOCAL
	.long	4553                    # TypeIndex
	.short	1                       # Flags
	.asciz	"cont"
.Ltmp1048:
	.cv_def_range	 .Ltmp196 .Ltmp197, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1042:
	.p2align	2
	.cv_linetable	40, "??$?0V?$span@$$CBD$0?0@gsl@@X@?$basic_string_span@$$CBD$0?0@gsl@@QEAA@AEBV?$span@$$CBD$0?0@1@@Z", .Lfunc_end40
	.section	.debug$S,"dr",associative,"??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::copy<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> >
	.long	.Ltmp1050-.Ltmp1049     # Subsection size
.Ltmp1049:
	.short	.Ltmp1052-.Ltmp1051     # Record length
.Ltmp1051:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end41-"??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4625                    # Function type index
	.secrel32	"??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z" # Function section relative address
	.secidx	"??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::copy<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> >" # Function name
.Ltmp1052:
	.short	.Ltmp1054-.Ltmp1053     # Record length
.Ltmp1053:
	.short	4414                    # Record kind: S_LOCAL
	.long	4626                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1054:
	.cv_def_range	 .Lfunc_begin41 .Ltmp199, "A\021K\001\000\000"
	.cv_def_range	 .Ltmp199 .Ltmp202, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp1056-.Ltmp1055     # Record length
.Ltmp1055:
	.short	4414                    # Record kind: S_LOCAL
	.long	4626                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1056:
	.cv_def_range	 .Lfunc_begin41 .Ltmp201, "A\021P\001\000\000"
	.cv_def_range	 .Ltmp201 .Ltmp202, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1058-.Ltmp1057     # Record length
.Ltmp1057:
	.short	4414                    # Record kind: S_LOCAL
	.long	4627                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp1058:
	.cv_def_range	 .Lfunc_begin41 .Ltmp200, "A\021Q\001\000\000"
	.cv_def_range	 .Ltmp200 .Ltmp202, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1060-.Ltmp1059     # Record length
.Ltmp1059:
	.short	4414                    # Record kind: S_LOCAL
	.long	4628                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_UFirst"
.Ltmp1060:
	.cv_def_range	 .Ltmp198 .Ltmp203, "E\021O\001\000\000h\000\000\000"
	.short	.Ltmp1062-.Ltmp1061     # Record length
.Ltmp1061:
	.short	4414                    # Record kind: S_LOCAL
	.long	4628                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_ULast"
.Ltmp1062:
	.cv_def_range	 .Ltmp198 .Ltmp203, "E\021O\001\000\000`\000\000\000"
	.short	.Ltmp1064-.Ltmp1063     # Record length
.Ltmp1063:
	.short	4414                    # Record kind: S_LOCAL
	.long	4629                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_UDest"
.Ltmp1064:
	.cv_def_range	 .Ltmp198 .Ltmp203, "E\021O\001\000\000P\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1050:
	.p2align	2
	.cv_linetable	41, "??$copy@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@23@@std@@YA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@23@0V123@@Z", .Lfunc_end41
	.section	.debug$S,"dr",associative,"?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned char,-1>::begin
	.long	.Ltmp1066-.Ltmp1065     # Subsection size
.Ltmp1065:
	.short	.Ltmp1068-.Ltmp1067     # Record length
.Ltmp1067:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end42-"?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4630                    # Function type index
	.secrel32	"?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ" # Function section relative address
	.secidx	"?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned char,-1>::begin" # Function name
.Ltmp1068:
	.short	.Ltmp1070-.Ltmp1069     # Record length
.Ltmp1069:
	.short	4414                    # Record kind: S_LOCAL
	.long	4330                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1070:
	.cv_def_range	 .Ltmp204 .Ltmp205, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1066:
	.p2align	2
	.cv_linetable	42, "?begin@?$span@E$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@2@XZ", .Lfunc_end42
	.section	.debug$S,"dr",associative,"?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::basic_string_span<const char,-1>::end
	.long	.Ltmp1072-.Ltmp1071     # Subsection size
.Ltmp1071:
	.short	.Ltmp1074-.Ltmp1073     # Record length
.Ltmp1073:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end43-"?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4631                    # Function type index
	.secrel32	"?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # Function section relative address
	.secidx	"?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::basic_string_span<const char,-1>::end" # Function name
.Ltmp1074:
	.short	.Ltmp1076-.Ltmp1075     # Record length
.Ltmp1075:
	.short	4414                    # Record kind: S_LOCAL
	.long	4516                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1076:
	.cv_def_range	 .Ltmp206 .Ltmp207, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1072:
	.p2align	2
	.cv_linetable	43, "?end@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ", .Lfunc_end43
	.section	.debug$S,"dr",associative,"?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::basic_string_span<const char,-1>::begin
	.long	.Ltmp1078-.Ltmp1077     # Subsection size
.Ltmp1077:
	.short	.Ltmp1080-.Ltmp1079     # Record length
.Ltmp1079:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end44-"?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4632                    # Function type index
	.secrel32	"?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # Function section relative address
	.secidx	"?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::basic_string_span<const char,-1>::begin" # Function name
.Ltmp1080:
	.short	.Ltmp1082-.Ltmp1081     # Record length
.Ltmp1081:
	.short	4414                    # Record kind: S_LOCAL
	.long	4516                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1082:
	.cv_def_range	 .Ltmp208 .Ltmp209, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1078:
	.p2align	2
	.cv_linetable	44, "?begin@?$basic_string_span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ", .Lfunc_end44
	.section	.debug$S,"dr"
	.long	241                     # Symbol subsection for test_string_gsl_copy
	.long	.Ltmp1084-.Ltmp1083     # Subsection size
.Ltmp1083:
	.short	.Ltmp1086-.Ltmp1085     # Record length
.Ltmp1085:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end45-"?test_string_gsl_copy@@YAXXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4633                    # Function type index
	.secrel32	"?test_string_gsl_copy@@YAXXZ" # Function section relative address
	.secidx	"?test_string_gsl_copy@@YAXXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"test_string_gsl_copy"  # Function name
.Ltmp1086:
	.short	.Ltmp1088-.Ltmp1087     # Record length
.Ltmp1087:
	.short	4414                    # Record kind: S_LOCAL
	.long	4498                    # TypeIndex
	.short	0                       # Flags
	.asciz	"bytes"
.Ltmp1088:
	.cv_def_range	 .Ltmp210 .Ltmp214, "E\021O\001\000\000\246\000\000\000"
	.short	.Ltmp1090-.Ltmp1089     # Record length
.Ltmp1089:
	.short	4414                    # Record kind: S_LOCAL
	.long	4351                    # TypeIndex
	.short	0                       # Flags
	.asciz	"byteSpan"
.Ltmp1090:
	.cv_def_range	 .Ltmp210 .Ltmp214, "E\021O\001\000\000\220\000\000\000"
	.short	.Ltmp1092-.Ltmp1091     # Record length
.Ltmp1091:
	.short	4414                    # Record kind: S_LOCAL
	.long	4499                    # TypeIndex
	.short	0                       # Flags
	.asciz	"cdModelType"
.Ltmp1092:
	.cv_def_range	 .Ltmp210 .Ltmp214, "E\021O\001\000\000\200\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1084:
	.p2align	2
	.cv_linetable	45, "?test_string_gsl_copy@@YAXXZ", .Lfunc_end45
	.section	.debug$S,"dr",associative,"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::copy<const char,-1,unsigned char,-1>
	.long	.Ltmp1094-.Ltmp1093     # Subsection size
.Ltmp1093:
	.short	.Ltmp1096-.Ltmp1095     # Record length
.Ltmp1095:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end46-"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4636                    # Function type index
	.secrel32	"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z" # Function section relative address
	.secidx	"??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::copy<const char,-1,unsigned char,-1>" # Function name
.Ltmp1096:
	.short	.Ltmp1098-.Ltmp1097     # Record length
.Ltmp1097:
	.short	4414                    # Record kind: S_LOCAL
	.long	4637                    # TypeIndex
	.short	1                       # Flags
	.asciz	"src"
.Ltmp1098:
	.cv_def_range	 .Lfunc_begin46 .Ltmp218, "A\021J\001\000\000"
	.cv_def_range	 .Ltmp218 .Ltmp225 .Ltmp226 .Ltmp227, "E\021N\001\000\000\340\377\377\377"
	.short	.Ltmp1100-.Ltmp1099     # Record length
.Ltmp1099:
	.short	4414                    # Record kind: S_LOCAL
	.long	4638                    # TypeIndex
	.short	1                       # Flags
	.asciz	"dest"
.Ltmp1100:
	.cv_def_range	 .Lfunc_begin46 .Ltmp219, "A\021K\001\000\000"
	.cv_def_range	 .Ltmp219 .Ltmp225 .Ltmp226 .Ltmp227, "E\021N\001\000\000\330\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1094:
	.p2align	2
	.cv_linetable	46, "??$copy@$$CBD$0?0E$0?0@gsl@@YAXV?$span@$$CBD$0?0@0@V?$span@E$0?0@0@@Z", .Lfunc_end46
	.section	.debug$S,"dr",associative,"??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const char,-1>::span<gsl::basic_string_span<const char,-1>,void>
	.long	.Ltmp1102-.Ltmp1101     # Subsection size
.Ltmp1101:
	.short	.Ltmp1104-.Ltmp1103     # Record length
.Ltmp1103:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end47-"??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4641                    # Function type index
	.secrel32	"??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z" # Function section relative address
	.secidx	"??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const char,-1>::span<gsl::basic_string_span<const char,-1>,void>" # Function name
.Ltmp1104:
	.short	.Ltmp1106-.Ltmp1105     # Record length
.Ltmp1105:
	.short	4414                    # Record kind: S_LOCAL
	.long	4541                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1106:
	.cv_def_range	 .Ltmp229 .Ltmp230, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1108-.Ltmp1107     # Record length
.Ltmp1107:
	.short	4414                    # Record kind: S_LOCAL
	.long	4514                    # TypeIndex
	.short	1                       # Flags
	.asciz	"cont"
.Ltmp1108:
	.cv_def_range	 .Ltmp229 .Ltmp230, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1102:
	.p2align	2
	.cv_linetable	47, "??$?0V?$basic_string_span@$$CBD$0?0@gsl@@X@?$span@$$CBD$0?0@gsl@@QEAA@AEAV?$basic_string_span@$$CBD$0?0@1@@Z", .Lfunc_end47
	.section	.debug$S,"dr",associative,"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::CheckRange
	.long	.Ltmp1110-.Ltmp1109     # Subsection size
.Ltmp1109:
	.short	.Ltmp1112-.Ltmp1111     # Record length
.Ltmp1111:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end48-"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4642                    # Function type index
	.secrel32	"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z" # Function section relative address
	.secidx	"?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::CheckRange" # Function name
.Ltmp1112:
	.short	.Ltmp1114-.Ltmp1113     # Record length
.Ltmp1113:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"idx"
.Ltmp1114:
	.cv_def_range	 .Ltmp231 .Ltmp233, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1116-.Ltmp1115     # Record length
.Ltmp1115:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"size"
.Ltmp1116:
	.cv_def_range	 .Ltmp231 .Ltmp233, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1110:
	.p2align	2
	.cv_linetable	48, "?CheckRange@?$span@H$0?0@gsl@@CA_N_J0@Z", .Lfunc_end48
	.section	.debug$S,"dr",associative,"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<-1>::size
	.long	.Ltmp1118-.Ltmp1117     # Subsection size
.Ltmp1117:
	.short	.Ltmp1120-.Ltmp1119     # Record length
.Ltmp1119:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end49-"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4643                    # Function type index
	.secrel32	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<-1>::size" # Function name
.Ltmp1120:
	.short	.Ltmp1122-.Ltmp1121     # Record length
.Ltmp1121:
	.short	4414                    # Record kind: S_LOCAL
	.long	4198                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1122:
	.cv_def_range	 .Ltmp234 .Ltmp235, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1118:
	.p2align	2
	.cv_linetable	49, "?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ", .Lfunc_end49
	.section	.debug$S,"dr",associative,"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::throw_exception<gsl::fail_fast>
	.long	.Ltmp1124-.Ltmp1123     # Subsection size
.Ltmp1123:
	.short	.Ltmp1126-.Ltmp1125     # Record length
.Ltmp1125:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end50-"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5140                    # Function type index
	.secrel32	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z" # Function section relative address
	.secidx	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::throw_exception<gsl::fail_fast>" # Function name
.Ltmp1126:
	.short	.Ltmp1128-.Ltmp1127     # Record length
.Ltmp1127:
	.short	4414                    # Record kind: S_LOCAL
	.long	4645                    # TypeIndex
	.short	1                       # Flags
	.asciz	"exception"
.Ltmp1128:
	.cv_def_range	 .Ltmp236 .Ltmp237, "E\021O\001\000\000P\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1124:
	.p2align	2
	.cv_linetable	50, "??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z", .Lfunc_end50
	.section	.debug$S,"dr",associative,"??0fail_fast@gsl@@QEAA@QEBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::fail_fast
	.long	.Ltmp1130-.Ltmp1129     # Subsection size
.Ltmp1129:
	.short	.Ltmp1132-.Ltmp1131     # Record length
.Ltmp1131:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end51-"??0fail_fast@gsl@@QEAA@QEBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5141                    # Function type index
	.secrel32	"??0fail_fast@gsl@@QEAA@QEBD@Z" # Function section relative address
	.secidx	"??0fail_fast@gsl@@QEAA@QEBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::fail_fast" # Function name
.Ltmp1132:
	.short	.Ltmp1134-.Ltmp1133     # Record length
.Ltmp1133:
	.short	4414                    # Record kind: S_LOCAL
	.long	4650                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1134:
	.cv_def_range	 .Ltmp238 .Ltmp239, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1136-.Ltmp1135     # Record length
.Ltmp1135:
	.short	4414                    # Record kind: S_LOCAL
	.long	4628                    # TypeIndex
	.short	1                       # Flags
	.asciz	"message"
.Ltmp1136:
	.cv_def_range	 .Ltmp238 .Ltmp239, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1130:
	.p2align	2
	.cv_linetable	51, "??0fail_fast@gsl@@QEAA@QEBD@Z", .Lfunc_end51
	.section	.debug$S,"dr",associative,"??1fail_fast@gsl@@UEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::~fail_fast
	.long	.Ltmp1138-.Ltmp1137     # Subsection size
.Ltmp1137:
	.short	.Ltmp1140-.Ltmp1139     # Record length
.Ltmp1139:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end52-"??1fail_fast@gsl@@UEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5143                    # Function type index
	.secrel32	"??1fail_fast@gsl@@UEAA@XZ" # Function section relative address
	.secidx	"??1fail_fast@gsl@@UEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::~fail_fast" # Function name
.Ltmp1140:
	.short	.Ltmp1142-.Ltmp1141     # Record length
.Ltmp1141:
	.short	4414                    # Record kind: S_LOCAL
	.long	4650                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1142:
	.cv_def_range	 .Ltmp240 .Ltmp242, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1138:
	.p2align	2
	.cv_linetable	52, "??1fail_fast@gsl@@UEAA@XZ", .Lfunc_end52
	.section	.debug$S,"dr",associative,"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::data
	.long	.Ltmp1144-.Ltmp1143     # Subsection size
.Ltmp1143:
	.short	.Ltmp1146-.Ltmp1145     # Record length
.Ltmp1145:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end53-"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5144                    # Function type index
	.secrel32	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Function section relative address
	.secidx	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::data" # Function name
.Ltmp1146:
	.short	.Ltmp1148-.Ltmp1147     # Record length
.Ltmp1147:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1148:
	.cv_def_range	 .Ltmp243 .Ltmp244, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1144:
	.p2align	2
	.cv_linetable	53, "?data@?$span@H$0?0@gsl@@QEBAPEAHXZ", .Lfunc_end53
	.section	.debug$S,"dr",associative,"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrow_cast<unsigned long long,long long &>
	.long	.Ltmp1150-.Ltmp1149     # Subsection size
.Ltmp1149:
	.short	.Ltmp1152-.Ltmp1151     # Record length
.Ltmp1151:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end54-"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5148                    # Function type index
	.secrel32	"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z" # Function section relative address
	.secidx	"??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrow_cast<unsigned long long,long long &>" # Function name
.Ltmp1152:
	.short	.Ltmp1154-.Ltmp1153     # Record length
.Ltmp1153:
	.short	4414                    # Record kind: S_LOCAL
	.long	5145                    # TypeIndex
	.short	1                       # Flags
	.asciz	"u"
.Ltmp1154:
	.cv_def_range	 .Ltmp245 .Ltmp246, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1150:
	.p2align	2
	.cv_linetable	54, "??$narrow_cast@_KAEA_J@gsl@@YA_KAEA_J@Z", .Lfunc_end54
	.section	.debug$S,"dr",associative,"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::forward<long long &>
	.long	.Ltmp1156-.Ltmp1155     # Subsection size
.Ltmp1155:
	.short	.Ltmp1158-.Ltmp1157     # Record length
.Ltmp1157:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end55-"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5150                    # Function type index
	.secrel32	"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z" # Function section relative address
	.secidx	"??$forward@AEA_J@std@@YAAEA_JAEA_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::forward<long long &>" # Function name
.Ltmp1158:
	.short	.Ltmp1160-.Ltmp1159     # Record length
.Ltmp1159:
	.short	4414                    # Record kind: S_LOCAL
	.long	5145                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Arg"
.Ltmp1160:
	.cv_def_range	 .Ltmp247 .Ltmp248, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1156:
	.p2align	2
	.cv_linetable	55, "??$forward@AEA_J@std@@YAAEA_JAEA_J@Z", .Lfunc_end55
	.section	.debug$S,"dr",associative,"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::forward<gsl::fail_fast>
	.long	.Ltmp1162-.Ltmp1161     # Subsection size
.Ltmp1161:
	.short	.Ltmp1164-.Ltmp1163     # Record length
.Ltmp1163:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end56-"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5154                    # Function type index
	.secrel32	"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z" # Function section relative address
	.secidx	"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::forward<gsl::fail_fast>" # Function name
.Ltmp1164:
	.short	.Ltmp1166-.Ltmp1165     # Record length
.Ltmp1165:
	.short	4414                    # Record kind: S_LOCAL
	.long	5151                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Arg"
.Ltmp1166:
	.cv_def_range	 .Ltmp249 .Ltmp250, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1162:
	.p2align	2
	.cv_linetable	56, "??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z", .Lfunc_end56
	.section	.debug$S,"dr",associative,"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::fail_fast
	.long	.Ltmp1168-.Ltmp1167     # Subsection size
.Ltmp1167:
	.short	.Ltmp1170-.Ltmp1169     # Record length
.Ltmp1169:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end57-"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5156                    # Function type index
	.secrel32	"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z" # Function section relative address
	.secidx	"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::fail_fast" # Function name
.Ltmp1170:
	.short	.Ltmp1172-.Ltmp1171     # Record length
.Ltmp1171:
	.short	4414                    # Record kind: S_LOCAL
	.long	4650                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1172:
	.cv_def_range	 .Ltmp251 .Ltmp252, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1174-.Ltmp1173     # Record length
.Ltmp1173:
	.short	4414                    # Record kind: S_LOCAL
	.long	4645                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1174:
	.cv_def_range	 .Ltmp251 .Ltmp252, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1168:
	.p2align	2
	.cv_linetable	57, "??0fail_fast@gsl@@QEAA@$$QEAU01@@Z", .Lfunc_end57
	.section	.debug$S,"dr",associative,"??0fail_fast@gsl@@QEAA@AEBU01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::fail_fast
	.long	.Ltmp1176-.Ltmp1175     # Subsection size
.Ltmp1175:
	.short	.Ltmp1178-.Ltmp1177     # Record length
.Ltmp1177:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end58-"??0fail_fast@gsl@@QEAA@AEBU01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5161                    # Function type index
	.secrel32	"??0fail_fast@gsl@@QEAA@AEBU01@@Z" # Function section relative address
	.secidx	"??0fail_fast@gsl@@QEAA@AEBU01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::fail_fast" # Function name
.Ltmp1178:
	.short	.Ltmp1180-.Ltmp1179     # Record length
.Ltmp1179:
	.short	4414                    # Record kind: S_LOCAL
	.long	4650                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1180:
	.cv_def_range	 .Ltmp253 .Ltmp254, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1182-.Ltmp1181     # Record length
.Ltmp1181:
	.short	4414                    # Record kind: S_LOCAL
	.long	5158                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1182:
	.cv_def_range	 .Ltmp253 .Ltmp254, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1176:
	.p2align	2
	.cv_linetable	58, "??0fail_fast@gsl@@QEAA@AEBU01@@Z", .Lfunc_end58
	.section	.debug$S,"dr",associative,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::logic_error
	.long	.Ltmp1184-.Ltmp1183     # Subsection size
.Ltmp1183:
	.short	.Ltmp1186-.Ltmp1185     # Record length
.Ltmp1185:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end59-"??0logic_error@std@@QEAA@AEBV01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5166                    # Function type index
	.secrel32	"??0logic_error@std@@QEAA@AEBV01@@Z" # Function section relative address
	.secidx	"??0logic_error@std@@QEAA@AEBV01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::logic_error" # Function name
.Ltmp1186:
	.short	.Ltmp1188-.Ltmp1187     # Record length
.Ltmp1187:
	.short	4414                    # Record kind: S_LOCAL
	.long	4658                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1188:
	.cv_def_range	 .Ltmp255 .Ltmp256, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1190-.Ltmp1189     # Record length
.Ltmp1189:
	.short	4414                    # Record kind: S_LOCAL
	.long	5163                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1190:
	.cv_def_range	 .Ltmp255 .Ltmp256, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1184:
	.p2align	2
	.cv_linetable	59, "??0logic_error@std@@QEAA@AEBV01@@Z", .Lfunc_end59
	.section	.debug$S,"dr",associative,"??0exception@std@@QEAA@AEBV01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::exception
	.long	.Ltmp1192-.Ltmp1191     # Subsection size
.Ltmp1191:
	.short	.Ltmp1194-.Ltmp1193     # Record length
.Ltmp1193:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end60-"??0exception@std@@QEAA@AEBV01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5167                    # Function type index
	.secrel32	"??0exception@std@@QEAA@AEBV01@@Z" # Function section relative address
	.secidx	"??0exception@std@@QEAA@AEBV01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::exception" # Function name
.Ltmp1194:
	.short	.Ltmp1196-.Ltmp1195     # Record length
.Ltmp1195:
	.short	4414                    # Record kind: S_LOCAL
	.long	4673                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1196:
	.cv_def_range	 .Ltmp257 .Ltmp260, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1198-.Ltmp1197     # Record length
.Ltmp1197:
	.short	4414                    # Record kind: S_LOCAL
	.long	4679                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Other"
.Ltmp1198:
	.cv_def_range	 .Ltmp257 .Ltmp260, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1192:
	.p2align	2
	.cv_linetable	60, "??0exception@std@@QEAA@AEBV01@@Z", .Lfunc_end60
	.section	.debug$S,"dr",associative,"??0logic_error@std@@QEAA@$$QEAV01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::logic_error
	.long	.Ltmp1200-.Ltmp1199     # Subsection size
.Ltmp1199:
	.short	.Ltmp1202-.Ltmp1201     # Record length
.Ltmp1201:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end61-"??0logic_error@std@@QEAA@$$QEAV01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5171                    # Function type index
	.secrel32	"??0logic_error@std@@QEAA@$$QEAV01@@Z" # Function section relative address
	.secidx	"??0logic_error@std@@QEAA@$$QEAV01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::logic_error" # Function name
.Ltmp1202:
	.short	.Ltmp1204-.Ltmp1203     # Record length
.Ltmp1203:
	.short	4414                    # Record kind: S_LOCAL
	.long	4658                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1204:
	.cv_def_range	 .Ltmp261 .Ltmp262, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1206-.Ltmp1205     # Record length
.Ltmp1205:
	.short	4414                    # Record kind: S_LOCAL
	.long	5168                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1206:
	.cv_def_range	 .Ltmp261 .Ltmp262, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1200:
	.p2align	2
	.cv_linetable	61, "??0logic_error@std@@QEAA@$$QEAV01@@Z", .Lfunc_end61
	.section	.debug$S,"dr",associative,"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::~fail_fast
	.long	.Ltmp1208-.Ltmp1207     # Subsection size
.Ltmp1207:
	.short	.Ltmp1210-.Ltmp1209     # Record length
.Ltmp1209:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end62-"??_Gfail_fast@gsl@@UEAAPEAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5143                    # Function type index
	.secrel32	"??_Gfail_fast@gsl@@UEAAPEAXI@Z" # Function section relative address
	.secidx	"??_Gfail_fast@gsl@@UEAAPEAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::~fail_fast" # Function name
.Ltmp1210:
	.short	.Ltmp1212-.Ltmp1211     # Record length
.Ltmp1211:
	.short	4414                    # Record kind: S_LOCAL
	.long	4650                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1212:
	.cv_def_range	 .Ltmp263 .Ltmp264, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1214-.Ltmp1213     # Record length
.Ltmp1213:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
.Ltmp1214:
	.cv_def_range	 .Ltmp263 .Ltmp264, "E\021O\001\000\000<\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1208:
	.p2align	2
	.cv_linetable	62, "??_Gfail_fast@gsl@@UEAAPEAXI@Z", .Lfunc_end62
	.section	.debug$S,"dr",associative,"?what@exception@std@@UEBAPEBDXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::what
	.long	.Ltmp1216-.Ltmp1215     # Subsection size
.Ltmp1215:
	.short	.Ltmp1218-.Ltmp1217     # Record length
.Ltmp1217:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end63-"?what@exception@std@@UEBAPEBDXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5172                    # Function type index
	.secrel32	"?what@exception@std@@UEBAPEBDXZ" # Function section relative address
	.secidx	"?what@exception@std@@UEBAPEBDXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::what"  # Function name
.Ltmp1218:
	.short	.Ltmp1220-.Ltmp1219     # Record length
.Ltmp1219:
	.short	4414                    # Record kind: S_LOCAL
	.long	4685                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1220:
	.cv_def_range	 .Ltmp265 .Ltmp266, "E\021O\001\000\000\020\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1216:
	.p2align	2
	.cv_linetable	63, "?what@exception@std@@UEBAPEBDXZ", .Lfunc_end63
	.section	.debug$S,"dr",associative,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::~logic_error
	.long	.Ltmp1222-.Ltmp1221     # Subsection size
.Ltmp1221:
	.short	.Ltmp1224-.Ltmp1223     # Record length
.Ltmp1223:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end64-"??_Glogic_error@std@@UEAAPEAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5174                    # Function type index
	.secrel32	"??_Glogic_error@std@@UEAAPEAXI@Z" # Function section relative address
	.secidx	"??_Glogic_error@std@@UEAAPEAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::~logic_error" # Function name
.Ltmp1224:
	.short	.Ltmp1226-.Ltmp1225     # Record length
.Ltmp1225:
	.short	4414                    # Record kind: S_LOCAL
	.long	4658                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1226:
	.cv_def_range	 .Ltmp267 .Ltmp268, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1228-.Ltmp1227     # Record length
.Ltmp1227:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
.Ltmp1228:
	.cv_def_range	 .Ltmp267 .Ltmp268, "E\021O\001\000\000<\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1222:
	.p2align	2
	.cv_linetable	64, "??_Glogic_error@std@@UEAAPEAXI@Z", .Lfunc_end64
	.section	.debug$S,"dr",associative,"??1logic_error@std@@UEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::~logic_error
	.long	.Ltmp1230-.Ltmp1229     # Subsection size
.Ltmp1229:
	.short	.Ltmp1232-.Ltmp1231     # Record length
.Ltmp1231:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end65-"??1logic_error@std@@UEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5174                    # Function type index
	.secrel32	"??1logic_error@std@@UEAA@XZ" # Function section relative address
	.secidx	"??1logic_error@std@@UEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::~logic_error" # Function name
.Ltmp1232:
	.short	.Ltmp1234-.Ltmp1233     # Record length
.Ltmp1233:
	.short	4414                    # Record kind: S_LOCAL
	.long	4658                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1234:
	.cv_def_range	 .Ltmp269 .Ltmp271, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1230:
	.p2align	2
	.cv_linetable	65, "??1logic_error@std@@UEAA@XZ", .Lfunc_end65
	.section	.debug$S,"dr",associative,"??1exception@std@@UEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::~exception
	.long	.Ltmp1236-.Ltmp1235     # Subsection size
.Ltmp1235:
	.short	.Ltmp1238-.Ltmp1237     # Record length
.Ltmp1237:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end66-"??1exception@std@@UEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5175                    # Function type index
	.secrel32	"??1exception@std@@UEAA@XZ" # Function section relative address
	.secidx	"??1exception@std@@UEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::~exception" # Function name
.Ltmp1238:
	.short	.Ltmp1240-.Ltmp1239     # Record length
.Ltmp1239:
	.short	4414                    # Record kind: S_LOCAL
	.long	4673                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1240:
	.cv_def_range	 .Ltmp272 .Ltmp275, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1236:
	.p2align	2
	.cv_linetable	66, "??1exception@std@@UEAA@XZ", .Lfunc_end66
	.section	.debug$S,"dr",associative,"??_Gexception@std@@UEAAPEAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::~exception
	.long	.Ltmp1242-.Ltmp1241     # Subsection size
.Ltmp1241:
	.short	.Ltmp1244-.Ltmp1243     # Record length
.Ltmp1243:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end67-"??_Gexception@std@@UEAAPEAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5175                    # Function type index
	.secrel32	"??_Gexception@std@@UEAAPEAXI@Z" # Function section relative address
	.secidx	"??_Gexception@std@@UEAAPEAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::~exception" # Function name
.Ltmp1244:
	.short	.Ltmp1246-.Ltmp1245     # Record length
.Ltmp1245:
	.short	4414                    # Record kind: S_LOCAL
	.long	4673                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1246:
	.cv_def_range	 .Ltmp276 .Ltmp277, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1248-.Ltmp1247     # Record length
.Ltmp1247:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
.Ltmp1248:
	.cv_def_range	 .Ltmp276 .Ltmp277, "E\021O\001\000\000<\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1242:
	.p2align	2
	.cv_linetable	67, "??_Gexception@std@@UEAAPEAXI@Z", .Lfunc_end67
	.section	.debug$S,"dr",associative,"??0logic_error@std@@QEAA@PEBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::logic_error
	.long	.Ltmp1250-.Ltmp1249     # Subsection size
.Ltmp1249:
	.short	.Ltmp1252-.Ltmp1251     # Record length
.Ltmp1251:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end68-"??0logic_error@std@@QEAA@PEBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5176                    # Function type index
	.secrel32	"??0logic_error@std@@QEAA@PEBD@Z" # Function section relative address
	.secidx	"??0logic_error@std@@QEAA@PEBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::logic_error" # Function name
.Ltmp1252:
	.short	.Ltmp1254-.Ltmp1253     # Record length
.Ltmp1253:
	.short	4414                    # Record kind: S_LOCAL
	.long	4658                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1254:
	.cv_def_range	 .Ltmp278 .Ltmp279, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1256-.Ltmp1255     # Record length
.Ltmp1255:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Message"
.Ltmp1256:
	.cv_def_range	 .Ltmp278 .Ltmp279, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1250:
	.p2align	2
	.cv_linetable	68, "??0logic_error@std@@QEAA@PEBD@Z", .Lfunc_end68
	.section	.debug$S,"dr",associative,"??0exception@std@@QEAA@QEBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::exception
	.long	.Ltmp1258-.Ltmp1257     # Subsection size
.Ltmp1257:
	.short	.Ltmp1260-.Ltmp1259     # Record length
.Ltmp1259:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end69-"??0exception@std@@QEAA@QEBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5177                    # Function type index
	.secrel32	"??0exception@std@@QEAA@QEBD@Z" # Function section relative address
	.secidx	"??0exception@std@@QEAA@QEBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::exception" # Function name
.Ltmp1260:
	.short	.Ltmp1262-.Ltmp1261     # Record length
.Ltmp1261:
	.short	4414                    # Record kind: S_LOCAL
	.long	4673                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1262:
	.cv_def_range	 .Ltmp280 .Ltmp285, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1264-.Ltmp1263     # Record length
.Ltmp1263:
	.short	4414                    # Record kind: S_LOCAL
	.long	4628                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Message"
.Ltmp1264:
	.cv_def_range	 .Ltmp280 .Ltmp285, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1266-.Ltmp1265     # Record length
.Ltmp1265:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp284-.Ltmp281       # Code size
	.secrel32	.Ltmp281        # Function section relative address
	.secidx	.Lfunc_begin69          # Function section index
	.byte	0                       # Lexical block name
.Ltmp1266:
	.short	.Ltmp1268-.Ltmp1267     # Record length
.Ltmp1267:
	.short	4414                    # Record kind: S_LOCAL
	.long	4886                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_InitData"
.Ltmp1268:
	.cv_def_range	 .Ltmp281 .Ltmp284, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1258:
	.p2align	2
	.cv_linetable	69, "??0exception@std@@QEAA@QEBD@Z", .Lfunc_end69
	.section	.debug$S,"dr",associative,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data
	.long	.Ltmp1270-.Ltmp1269     # Subsection size
.Ltmp1269:
	.short	.Ltmp1272-.Ltmp1271     # Record length
.Ltmp1271:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end70-"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5178                    # Function type index
	.secrel32	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Function section relative address
	.secidx	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data" # Function name
.Ltmp1272:
	.short	.Ltmp1274-.Ltmp1273     # Record length
.Ltmp1273:
	.short	4414                    # Record kind: S_LOCAL
	.long	4154                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1274:
	.cv_def_range	 .Ltmp286 .Ltmp287, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1270:
	.p2align	2
	.cv_linetable	70, "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ", .Lfunc_end70
	.section	.debug$S,"dr",associative,"??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::span_iterator<gsl::span<int,-1>,0>::span_iterator
	.long	.Ltmp1276-.Ltmp1275     # Subsection size
.Ltmp1275:
	.short	.Ltmp1278-.Ltmp1277     # Record length
.Ltmp1277:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end71-"??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5179                    # Function type index
	.secrel32	"??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z" # Function section relative address
	.secidx	"??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::span_iterator<gsl::span<int,-1>,0>::span_iterator" # Function name
.Ltmp1278:
	.short	.Ltmp1280-.Ltmp1279     # Record length
.Ltmp1279:
	.short	4414                    # Record kind: S_LOCAL
	.long	4163                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1280:
	.cv_def_range	 .Ltmp288 .Ltmp289, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1282-.Ltmp1281     # Record length
.Ltmp1281:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"span"
.Ltmp1282:
	.cv_def_range	 .Ltmp288 .Ltmp289, "E\021O\001\000\000\b\000\000\000"
	.short	.Ltmp1284-.Ltmp1283     # Record length
.Ltmp1283:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"idx"
.Ltmp1284:
	.cv_def_range	 .Ltmp288 .Ltmp289, "E\021O\001\000\000\020\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1276:
	.p2align	2
	.cv_linetable	71, "??0?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@H$0?0@2@_J@Z", .Lfunc_end71
	.section	.debug$S,"dr",associative,"??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::operator==
	.long	.Ltmp1286-.Ltmp1285     # Subsection size
.Ltmp1285:
	.short	.Ltmp1288-.Ltmp1287     # Record length
.Ltmp1287:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end72-"??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5180                    # Function type index
	.secrel32	"??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z" # Function section relative address
	.secidx	"??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::operator==" # Function name
.Ltmp1288:
	.short	.Ltmp1290-.Ltmp1289     # Record length
.Ltmp1289:
	.short	4414                    # Record kind: S_LOCAL
	.long	4492                    # TypeIndex
	.short	1                       # Flags
	.asciz	"lhs"
.Ltmp1290:
	.cv_def_range	 .Lfunc_begin72 .Ltmp292, "A\021J\001\000\000"
	.cv_def_range	 .Ltmp292 .Lfunc_end72, "E\021O\001\000\000\b\000\000\000"
	.short	.Ltmp1292-.Ltmp1291     # Record length
.Ltmp1291:
	.short	4414                    # Record kind: S_LOCAL
	.long	4492                    # TypeIndex
	.short	1                       # Flags
	.asciz	"rhs"
.Ltmp1292:
	.cv_def_range	 .Lfunc_begin72 .Ltmp291, "A\021K\001\000\000"
	.cv_def_range	 .Ltmp291 .Lfunc_end72, "E\021O\001\000\000\020\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1286:
	.p2align	2
	.cv_linetable	72, "??8details@gsl@@YA_NV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@01@0@Z", .Lfunc_end72
	.section	.debug$S,"dr",associative,"??0?$extent_type@$05@details@gsl@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<6>::extent_type
	.long	.Ltmp1294-.Ltmp1293     # Subsection size
.Ltmp1293:
	.short	.Ltmp1296-.Ltmp1295     # Record length
.Ltmp1295:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end73-"??0?$extent_type@$05@details@gsl@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5181                    # Function type index
	.secrel32	"??0?$extent_type@$05@details@gsl@@QEAA@XZ" # Function section relative address
	.secidx	"??0?$extent_type@$05@details@gsl@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<6>::extent_type" # Function name
.Ltmp1296:
	.short	.Ltmp1298-.Ltmp1297     # Record length
.Ltmp1297:
	.short	4414                    # Record kind: S_LOCAL
	.long	4451                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1298:
	.cv_def_range	 .Ltmp294 .Ltmp295, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1294:
	.p2align	2
	.cv_linetable	73, "??0?$extent_type@$05@details@gsl@@QEAA@XZ", .Lfunc_end73
	.section	.debug$S,"dr",associative,"??$addressof@E@std@@YAPEAEAEAE@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::addressof<unsigned char>
	.long	.Ltmp1300-.Ltmp1299     # Subsection size
.Ltmp1299:
	.short	.Ltmp1302-.Ltmp1301     # Record length
.Ltmp1301:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end74-"??$addressof@E@std@@YAPEAEAEAE@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5184                    # Function type index
	.secrel32	"??$addressof@E@std@@YAPEAEAEAE@Z" # Function section relative address
	.secidx	"??$addressof@E@std@@YAPEAEAEAE@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::addressof<unsigned char>" # Function name
.Ltmp1302:
	.short	.Ltmp1304-.Ltmp1303     # Record length
.Ltmp1303:
	.short	4414                    # Record kind: S_LOCAL
	.long	4335                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Val"
.Ltmp1304:
	.cv_def_range	 .Ltmp296 .Ltmp297, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1300:
	.p2align	2
	.cv_linetable	74, "??$addressof@E@std@@YAPEAEAEAE@Z", .Lfunc_end74
	.section	.debug$S,"dr",associative,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<6> >
	.long	.Ltmp1306-.Ltmp1305     # Subsection size
.Ltmp1305:
	.short	.Ltmp1308-.Ltmp1307     # Record length
.Ltmp1307:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end75-"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5188                    # Function type index
	.secrel32	"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z" # Function section relative address
	.secidx	"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<6> >" # Function name
.Ltmp1308:
	.short	.Ltmp1310-.Ltmp1309     # Record length
.Ltmp1309:
	.short	4414                    # Record kind: S_LOCAL
	.long	5185                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1310:
	.cv_def_range	 .Ltmp300 .Ltmp304, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp1312-.Ltmp1311     # Record length
.Ltmp1311:
	.short	4414                    # Record kind: S_LOCAL
	.long	4360                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp1312:
	.cv_def_range	 .Ltmp300 .Ltmp304, "E\021N\001\000\000\370\377\377\377"
	.short	.Ltmp1314-.Ltmp1313     # Record length
.Ltmp1313:
	.short	4414                    # Record kind: S_LOCAL
	.long	4459                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp1314:
	.cv_def_range	 .Ltmp300 .Ltmp304, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1306:
	.p2align	2
	.cv_linetable	75, "??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z", .Lfunc_end75
	.section	.debug$S,"dr",associative,"??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<-1>::extent_type<6>
	.long	.Ltmp1316-.Ltmp1315     # Subsection size
.Ltmp1315:
	.short	.Ltmp1318-.Ltmp1317     # Record length
.Ltmp1317:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end76-"??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5191                    # Function type index
	.secrel32	"??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z" # Function section relative address
	.secidx	"??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<-1>::extent_type<6>" # Function name
.Ltmp1318:
	.short	.Ltmp1320-.Ltmp1319     # Record length
.Ltmp1319:
	.short	4414                    # Record kind: S_LOCAL
	.long	4195                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1320:
	.cv_def_range	 .Ltmp305 .Ltmp307, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1322-.Ltmp1321     # Record length
.Ltmp1321:
	.short	4414                    # Record kind: S_LOCAL
	.long	4459                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp1322:
	.cv_def_range	 .Ltmp305 .Ltmp307, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1316:
	.p2align	2
	.cv_linetable	76, "??$?0$05@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$05@12@@Z", .Lfunc_end76
	.section	.debug$S,"dr",associative,"?size@?$extent_type@$05@details@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<6>::size
	.long	.Ltmp1324-.Ltmp1323     # Subsection size
.Ltmp1323:
	.short	.Ltmp1326-.Ltmp1325     # Record length
.Ltmp1325:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end77-"?size@?$extent_type@$05@details@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5192                    # Function type index
	.secrel32	"?size@?$extent_type@$05@details@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$extent_type@$05@details@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<6>::size" # Function name
.Ltmp1326:
	.short	.Ltmp1328-.Ltmp1327     # Record length
.Ltmp1327:
	.short	4414                    # Record kind: S_LOCAL
	.long	4456                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1328:
	.cv_def_range	 .Ltmp308 .Ltmp309, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1324:
	.p2align	2
	.cv_linetable	77, "?size@?$extent_type@$05@details@gsl@@QEBA_JXZ", .Lfunc_end77
	.section	.debug$S,"dr",associative,"?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned char,-1>::CheckRange
	.long	.Ltmp1330-.Ltmp1329     # Subsection size
.Ltmp1329:
	.short	.Ltmp1332-.Ltmp1331     # Record length
.Ltmp1331:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end78-"?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5193                    # Function type index
	.secrel32	"?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z" # Function section relative address
	.secidx	"?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned char,-1>::CheckRange" # Function name
.Ltmp1332:
	.short	.Ltmp1334-.Ltmp1333     # Record length
.Ltmp1333:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"idx"
.Ltmp1334:
	.cv_def_range	 .Ltmp310 .Ltmp312, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1336-.Ltmp1335     # Record length
.Ltmp1335:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"size"
.Ltmp1336:
	.cv_def_range	 .Ltmp310 .Ltmp312, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1330:
	.p2align	2
	.cv_linetable	78, "?CheckRange@?$span@E$0?0@gsl@@CA_N_J0@Z", .Lfunc_end78
	.section	.debug$S,"dr",associative,"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned char,-1>::data
	.long	.Ltmp1338-.Ltmp1337     # Subsection size
.Ltmp1337:
	.short	.Ltmp1340-.Ltmp1339     # Record length
.Ltmp1339:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end79-"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5194                    # Function type index
	.secrel32	"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ" # Function section relative address
	.secidx	"?data@?$span@E$0?0@gsl@@QEBAPEAEXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned char,-1>::data" # Function name
.Ltmp1340:
	.short	.Ltmp1342-.Ltmp1341     # Record length
.Ltmp1341:
	.short	4414                    # Record kind: S_LOCAL
	.long	4330                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1342:
	.cv_def_range	 .Ltmp313 .Ltmp314, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1338:
	.p2align	2
	.cv_linetable	79, "?data@?$span@E$0?0@gsl@@QEBAPEAEXZ", .Lfunc_end79
	.section	.debug$S,"dr",associative,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data
	.long	.Ltmp1344-.Ltmp1343     # Subsection size
.Ltmp1343:
	.short	.Ltmp1346-.Ltmp1345     # Record length
.Ltmp1345:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end80-"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5195                    # Function type index
	.secrel32	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ" # Function section relative address
	.secidx	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data" # Function name
.Ltmp1346:
	.short	.Ltmp1348-.Ltmp1347     # Record length
.Ltmp1347:
	.short	4414                    # Record kind: S_LOCAL
	.long	4354                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1348:
	.cv_def_range	 .Ltmp315 .Ltmp316, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1344:
	.p2align	2
	.cv_linetable	80, "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEBAPEAEXZ", .Lfunc_end80
	.section	.debug$S,"dr",associative,"??$addressof@H@std@@YAPEAHAEAH@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::addressof<int>
	.long	.Ltmp1350-.Ltmp1349     # Subsection size
.Ltmp1349:
	.short	.Ltmp1352-.Ltmp1351     # Record length
.Ltmp1351:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end81-"??$addressof@H@std@@YAPEAHAEAH@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5198                    # Function type index
	.secrel32	"??$addressof@H@std@@YAPEAHAEAH@Z" # Function section relative address
	.secidx	"??$addressof@H@std@@YAPEAHAEAH@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::addressof<int>"   # Function name
.Ltmp1352:
	.short	.Ltmp1354-.Ltmp1353     # Record length
.Ltmp1353:
	.short	4414                    # Record kind: S_LOCAL
	.long	4133                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Val"
.Ltmp1354:
	.cv_def_range	 .Ltmp317 .Ltmp318, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1350:
	.p2align	2
	.cv_linetable	81, "??$addressof@H@std@@YAPEAHAEAH@Z", .Lfunc_end81
	.section	.debug$S,"dr",associative,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,6>::storage_type<gsl::details::extent_type<6> >::storage_type<gsl::details::extent_type<6> >
	.long	.Ltmp1356-.Ltmp1355     # Subsection size
.Ltmp1355:
	.short	.Ltmp1358-.Ltmp1357     # Record length
.Ltmp1357:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end82-"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5202                    # Function type index
	.secrel32	"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z" # Function section relative address
	.secidx	"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,6>::storage_type<gsl::details::extent_type<6> >::storage_type<gsl::details::extent_type<6> >" # Function name
.Ltmp1358:
	.short	.Ltmp1360-.Ltmp1359     # Record length
.Ltmp1359:
	.short	4414                    # Record kind: S_LOCAL
	.long	5199                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1360:
	.cv_def_range	 .Ltmp321 .Ltmp325, "E\021N\001\000\000\330\377\377\377"
	.short	.Ltmp1362-.Ltmp1361     # Record length
.Ltmp1361:
	.short	4414                    # Record kind: S_LOCAL
	.long	4449                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp1362:
	.cv_def_range	 .Ltmp321 .Ltmp325, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp1364-.Ltmp1363     # Record length
.Ltmp1363:
	.short	4414                    # Record kind: S_LOCAL
	.long	4459                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp1364:
	.cv_def_range	 .Ltmp321 .Ltmp325, "E\021N\001\000\000\340\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1356:
	.p2align	2
	.cv_linetable	82, "??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$05@details@2@@Z", .Lfunc_end82
	.section	.debug$S,"dr",associative,"??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,6>::make_subspan<6>
	.long	.Ltmp1366-.Ltmp1365     # Subsection size
.Ltmp1365:
	.short	.Ltmp1368-.Ltmp1367     # Record length
.Ltmp1367:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end83-"??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5208                    # Function type index
	.secrel32	"??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z" # Function section relative address
	.secidx	"??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,6>::make_subspan<6>" # Function name
.Ltmp1368:
	.short	.Ltmp1370-.Ltmp1369     # Record length
.Ltmp1369:
	.short	4414                    # Record kind: S_LOCAL
	.long	4420                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1370:
	.cv_def_range	 .Ltmp326 .Ltmp329, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp1372-.Ltmp1371     # Record length
.Ltmp1371:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"offset"
.Ltmp1372:
	.cv_def_range	 .Ltmp326 .Ltmp329, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp1374-.Ltmp1373     # Record length
.Ltmp1373:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"count"
.Ltmp1374:
	.cv_def_range	 .Ltmp326 .Ltmp329, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp1376-.Ltmp1375     # Record length
.Ltmp1375:
	.short	4414                    # Record kind: S_LOCAL
	.long	5206                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1376:
	.cv_def_range	 .Ltmp326 .Ltmp329, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp1378-.Ltmp1377     # Record length
.Ltmp1377:
	.short	4414                    # Record kind: S_LOCAL
	.long	4114                    # TypeIndex
	.short	0                       # Flags
	.asciz	"tmp"
.Ltmp1378:
	.cv_def_range	 .Ltmp326 .Ltmp329, "E\021O\001\000\000`\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1366:
	.p2align	2
	.cv_linetable	83, "??$make_subspan@$05@?$span@H$05@gsl@@AEBA?AV?$span@H$0?0@1@_J0V?$subspan_selector@$05@01@@Z", .Lfunc_end83
	.section	.debug$S,"dr",associative,"?size@?$span@H$05@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,6>::size
	.long	.Ltmp1380-.Ltmp1379     # Subsection size
.Ltmp1379:
	.short	.Ltmp1382-.Ltmp1381     # Record length
.Ltmp1381:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end84-"?size@?$span@H$05@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5209                    # Function type index
	.secrel32	"?size@?$span@H$05@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$span@H$05@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,6>::size" # Function name
.Ltmp1382:
	.short	.Ltmp1384-.Ltmp1383     # Record length
.Ltmp1383:
	.short	4414                    # Record kind: S_LOCAL
	.long	4420                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1384:
	.cv_def_range	 .Ltmp330 .Ltmp331, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1380:
	.p2align	2
	.cv_linetable	84, "?size@?$span@H$05@gsl@@QEBA_JXZ", .Lfunc_end84
	.section	.debug$S,"dr",associative,"??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::span<int,6,void>
	.long	.Ltmp1386-.Ltmp1385     # Subsection size
.Ltmp1385:
	.short	.Ltmp1388-.Ltmp1387     # Record length
.Ltmp1387:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end85-"??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5211                    # Function type index
	.secrel32	"??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z" # Function section relative address
	.secidx	"??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::span<int,6,void>" # Function name
.Ltmp1388:
	.short	.Ltmp1390-.Ltmp1389     # Record length
.Ltmp1389:
	.short	4414                    # Record kind: S_LOCAL
	.long	4101                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1390:
	.cv_def_range	 .Ltmp332 .Ltmp333, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1392-.Ltmp1391     # Record length
.Ltmp1391:
	.short	4414                    # Record kind: S_LOCAL
	.long	4410                    # TypeIndex
	.short	1                       # Flags
	.asciz	"other"
.Ltmp1392:
	.cv_def_range	 .Ltmp332 .Ltmp333, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1386:
	.p2align	2
	.cv_linetable	85, "??$?0H$05X@?$span@H$0?0@gsl@@QEAA@AEBV?$span@H$05@1@@Z", .Lfunc_end85
	.section	.debug$S,"dr",associative,"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<6>::extent_type
	.long	.Ltmp1394-.Ltmp1393     # Subsection size
.Ltmp1393:
	.short	.Ltmp1396-.Ltmp1395     # Record length
.Ltmp1395:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end86-"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5212                    # Function type index
	.secrel32	"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z" # Function section relative address
	.secidx	"??0?$extent_type@$05@details@gsl@@QEAA@_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<6>::extent_type" # Function name
.Ltmp1396:
	.short	.Ltmp1398-.Ltmp1397     # Record length
.Ltmp1397:
	.short	4414                    # Record kind: S_LOCAL
	.long	4451                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1398:
	.cv_def_range	 .Ltmp336 .Ltmp339, "E\021N\001\000\000\340\377\377\377"
	.short	.Ltmp1400-.Ltmp1399     # Record length
.Ltmp1399:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"size"
.Ltmp1400:
	.cv_def_range	 .Ltmp336 .Ltmp339, "E\021N\001\000\000\350\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1394:
	.p2align	2
	.cv_linetable	86, "??0?$extent_type@$05@details@gsl@@QEAA@_J@Z", .Lfunc_end86
	.section	.debug$S,"dr",associative,"?data@?$span@H$05@gsl@@QEBAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,6>::data
	.long	.Ltmp1402-.Ltmp1401     # Subsection size
.Ltmp1401:
	.short	.Ltmp1404-.Ltmp1403     # Record length
.Ltmp1403:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end87-"?data@?$span@H$05@gsl@@QEBAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5213                    # Function type index
	.secrel32	"?data@?$span@H$05@gsl@@QEBAPEAHXZ" # Function section relative address
	.secidx	"?data@?$span@H$05@gsl@@QEBAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,6>::data" # Function name
.Ltmp1404:
	.short	.Ltmp1406-.Ltmp1405     # Record length
.Ltmp1405:
	.short	4414                    # Record kind: S_LOCAL
	.long	4420                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1406:
	.cv_def_range	 .Ltmp340 .Ltmp341, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1402:
	.p2align	2
	.cv_linetable	87, "?data@?$span@H$05@gsl@@QEBAPEAHXZ", .Lfunc_end87
	.section	.debug$S,"dr",associative,"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<6> >
	.long	.Ltmp1408-.Ltmp1407     # Subsection size
.Ltmp1407:
	.short	.Ltmp1410-.Ltmp1409     # Record length
.Ltmp1409:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end88-"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5217                    # Function type index
	.secrel32	"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z" # Function section relative address
	.secidx	"??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<6> >" # Function name
.Ltmp1410:
	.short	.Ltmp1412-.Ltmp1411     # Record length
.Ltmp1411:
	.short	4414                    # Record kind: S_LOCAL
	.long	5214                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1412:
	.cv_def_range	 .Ltmp346 .Ltmp350, "E\021N\001\000\000(\000\000\000"
	.short	.Ltmp1414-.Ltmp1413     # Record length
.Ltmp1413:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp1414:
	.cv_def_range	 .Ltmp346 .Ltmp350, "E\021N\001\000\0000\000\000\000"
	.short	.Ltmp1416-.Ltmp1415     # Record length
.Ltmp1415:
	.short	4414                    # Record kind: S_LOCAL
	.long	4459                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp1416:
	.cv_def_range	 .Ltmp346 .Ltmp350, "E\021N\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1408:
	.p2align	2
	.cv_linetable	88, "??$?0V?$extent_type@$05@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$05@details@2@@Z", .Lfunc_end88
	.section	.debug$S,"dr",associative,"?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,6>::storage_type<gsl::details::extent_type<6> >::data
	.long	.Ltmp1418-.Ltmp1417     # Subsection size
.Ltmp1417:
	.short	.Ltmp1420-.Ltmp1419     # Record length
.Ltmp1419:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end89-"?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5218                    # Function type index
	.secrel32	"?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ" # Function section relative address
	.secidx	"?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,6>::storage_type<gsl::details::extent_type<6> >::data" # Function name
.Ltmp1420:
	.short	.Ltmp1422-.Ltmp1421     # Record length
.Ltmp1421:
	.short	4414                    # Record kind: S_LOCAL
	.long	4444                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1422:
	.cv_def_range	 .Ltmp351 .Ltmp352, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1418:
	.p2align	2
	.cv_linetable	89, "?data@?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@QEBAPEAHXZ", .Lfunc_end89
	.section	.debug$S,"dr",associative,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<long long>
	.long	.Ltmp1424-.Ltmp1423     # Subsection size
.Ltmp1423:
	.short	.Ltmp1426-.Ltmp1425     # Record length
.Ltmp1425:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end90-"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5220                    # Function type index
	.secrel32	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # Function section relative address
	.secidx	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<long long>" # Function name
.Ltmp1426:
	.short	.Ltmp1428-.Ltmp1427     # Record length
.Ltmp1427:
	.short	4414                    # Record kind: S_LOCAL
	.long	5214                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1428:
	.cv_def_range	 .Ltmp357 .Ltmp361, "E\021N\001\000\000\030\000\000\000"
	.short	.Ltmp1430-.Ltmp1429     # Record length
.Ltmp1429:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp1430:
	.cv_def_range	 .Ltmp357 .Ltmp361, "E\021N\001\000\000 \000\000\000"
	.short	.Ltmp1432-.Ltmp1431     # Record length
.Ltmp1431:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp1432:
	.cv_def_range	 .Ltmp357 .Ltmp361, "E\021N\001\000\000(\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1424:
	.p2align	2
	.cv_linetable	90, "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAH_J@Z", .Lfunc_end90
	.section	.debug$S,"dr",associative,"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<-1>::extent_type
	.long	.Ltmp1434-.Ltmp1433     # Subsection size
.Ltmp1433:
	.short	.Ltmp1436-.Ltmp1435     # Record length
.Ltmp1435:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end91-"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5221                    # Function type index
	.secrel32	"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z" # Function section relative address
	.secidx	"??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<-1>::extent_type" # Function name
.Ltmp1436:
	.short	.Ltmp1438-.Ltmp1437     # Record length
.Ltmp1437:
	.short	4414                    # Record kind: S_LOCAL
	.long	4195                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1438:
	.cv_def_range	 .Ltmp364 .Ltmp368, "E\021N\001\000\000\340\377\377\377"
	.short	.Ltmp1440-.Ltmp1439     # Record length
.Ltmp1439:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"size"
.Ltmp1440:
	.cv_def_range	 .Ltmp364 .Ltmp368, "E\021N\001\000\000\350\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1434:
	.p2align	2
	.cv_linetable	91, "??0?$extent_type@$0?0@details@gsl@@QEAA@_J@Z", .Lfunc_end91
	.section	.debug$S,"dr",associative,"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::make_subspan
	.long	.Ltmp1442-.Ltmp1441     # Subsection size
.Ltmp1441:
	.short	.Ltmp1444-.Ltmp1443     # Record length
.Ltmp1443:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end92-"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5222                    # Function type index
	.secrel32	"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z" # Function section relative address
	.secidx	"?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::make_subspan" # Function name
.Ltmp1444:
	.short	.Ltmp1446-.Ltmp1445     # Record length
.Ltmp1445:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1446:
	.cv_def_range	 .Ltmp373 .Ltmp376, "E\021N\001\000\000P\000\000\000"
	.short	.Ltmp1448-.Ltmp1447     # Record length
.Ltmp1447:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"offset"
.Ltmp1448:
	.cv_def_range	 .Ltmp373 .Ltmp376, "E\021N\001\000\000X\000\000\000"
	.short	.Ltmp1450-.Ltmp1449     # Record length
.Ltmp1449:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"count"
.Ltmp1450:
	.cv_def_range	 .Ltmp373 .Ltmp376, "E\021N\001\000\000`\000\000\000"
	.short	.Ltmp1452-.Ltmp1451     # Record length
.Ltmp1451:
	.short	4414                    # Record kind: S_LOCAL
	.long	4193                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1452:
	.cv_def_range	 .Ltmp373 .Ltmp376, "E\021N\001\000\000h\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1442:
	.p2align	2
	.cv_linetable	92, "?make_subspan@?$span@H$0?0@gsl@@AEBA?AV12@_J0V?$subspan_selector@$0?0@12@@Z", .Lfunc_end92
	.section	.debug$S,"dr",associative,"??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::span
	.long	.Ltmp1454-.Ltmp1453     # Subsection size
.Ltmp1453:
	.short	.Ltmp1456-.Ltmp1455     # Record length
.Ltmp1455:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end93-"??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5223                    # Function type index
	.secrel32	"??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z" # Function section relative address
	.secidx	"??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::span" # Function name
.Ltmp1456:
	.short	.Ltmp1458-.Ltmp1457     # Record length
.Ltmp1457:
	.short	4414                    # Record kind: S_LOCAL
	.long	4101                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1458:
	.cv_def_range	 .Ltmp377 .Ltmp378, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1460-.Ltmp1459     # Record length
.Ltmp1459:
	.short	4414                    # Record kind: S_LOCAL
	.long	4160                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ptr"
.Ltmp1460:
	.cv_def_range	 .Ltmp377 .Ltmp378, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp1462-.Ltmp1461     # Record length
.Ltmp1461:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"count"
.Ltmp1462:
	.cv_def_range	 .Ltmp377 .Ltmp378, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1454:
	.p2align	2
	.cv_linetable	93, "??0?$span@H$0?0@gsl@@AEAA@UKnownNotNull@01@_J@Z", .Lfunc_end93
	.section	.debug$S,"dr",associative,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<long long>
	.long	.Ltmp1464-.Ltmp1463     # Subsection size
.Ltmp1463:
	.short	.Ltmp1466-.Ltmp1465     # Record length
.Ltmp1465:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end94-"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5225                    # Function type index
	.secrel32	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z" # Function section relative address
	.secidx	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<long long>" # Function name
.Ltmp1466:
	.short	.Ltmp1468-.Ltmp1467     # Record length
.Ltmp1467:
	.short	4414                    # Record kind: S_LOCAL
	.long	5214                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1468:
	.cv_def_range	 .Ltmp381 .Ltmp385, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp1470-.Ltmp1469     # Record length
.Ltmp1469:
	.short	4414                    # Record kind: S_LOCAL
	.long	4160                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp1470:
	.cv_def_range	 .Ltmp381 .Ltmp385, "E\021N\001\000\000\370\377\377\377"
	.short	.Ltmp1472-.Ltmp1471     # Record length
.Ltmp1471:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp1472:
	.cv_def_range	 .Ltmp381 .Ltmp385, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1464:
	.p2align	2
	.cv_linetable	94, "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@UKnownNotNull@12@_J@Z", .Lfunc_end94
	.section	.debug$S,"dr",associative,"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<0>::extent_type
	.long	.Ltmp1474-.Ltmp1473     # Subsection size
.Ltmp1473:
	.short	.Ltmp1476-.Ltmp1475     # Record length
.Ltmp1475:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end95-"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5237                    # Function type index
	.secrel32	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ" # Function section relative address
	.secidx	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<0>::extent_type" # Function name
.Ltmp1476:
	.short	.Ltmp1478-.Ltmp1477     # Record length
.Ltmp1477:
	.short	4414                    # Record kind: S_LOCAL
	.long	5227                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1478:
	.cv_def_range	 .Ltmp386 .Ltmp387, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1474:
	.p2align	2
	.cv_linetable	95, "??0?$extent_type@$0A@@details@gsl@@QEAA@XZ", .Lfunc_end95
	.section	.debug$S,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >
	.long	.Ltmp1480-.Ltmp1479     # Subsection size
.Ltmp1479:
	.short	.Ltmp1482-.Ltmp1481     # Record length
.Ltmp1481:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end96-"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5240                    # Function type index
	.secrel32	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z" # Function section relative address
	.secidx	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >" # Function name
.Ltmp1482:
	.short	.Ltmp1484-.Ltmp1483     # Record length
.Ltmp1483:
	.short	4414                    # Record kind: S_LOCAL
	.long	5214                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1484:
	.cv_def_range	 .Ltmp392 .Ltmp396, "E\021N\001\000\000(\000\000\000"
	.short	.Ltmp1486-.Ltmp1485     # Record length
.Ltmp1485:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp1486:
	.cv_def_range	 .Ltmp392 .Ltmp396, "E\021N\001\000\0000\000\000\000"
	.short	.Ltmp1488-.Ltmp1487     # Record length
.Ltmp1487:
	.short	4414                    # Record kind: S_LOCAL
	.long	5235                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp1488:
	.cv_def_range	 .Ltmp392 .Ltmp396, "E\021N\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1480:
	.p2align	2
	.cv_linetable	96, "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z", .Lfunc_end96
	.section	.debug$S,"dr",associative,"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<-1>::extent_type<0>
	.long	.Ltmp1490-.Ltmp1489     # Subsection size
.Ltmp1489:
	.short	.Ltmp1492-.Ltmp1491     # Record length
.Ltmp1491:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end97-"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5243                    # Function type index
	.secrel32	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z" # Function section relative address
	.secidx	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<-1>::extent_type<0>" # Function name
.Ltmp1492:
	.short	.Ltmp1494-.Ltmp1493     # Record length
.Ltmp1493:
	.short	4414                    # Record kind: S_LOCAL
	.long	4195                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1494:
	.cv_def_range	 .Ltmp397 .Ltmp399, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1496-.Ltmp1495     # Record length
.Ltmp1495:
	.short	4414                    # Record kind: S_LOCAL
	.long	5235                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp1496:
	.cv_def_range	 .Ltmp397 .Ltmp399, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1490:
	.p2align	2
	.cv_linetable	97, "??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z", .Lfunc_end97
	.section	.debug$S,"dr",associative,"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<0>::size
	.long	.Ltmp1498-.Ltmp1497     # Subsection size
.Ltmp1497:
	.short	.Ltmp1500-.Ltmp1499     # Record length
.Ltmp1499:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end98-"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5244                    # Function type index
	.secrel32	"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<0>::size" # Function name
.Ltmp1500:
	.short	.Ltmp1502-.Ltmp1501     # Record length
.Ltmp1501:
	.short	4414                    # Record kind: S_LOCAL
	.long	5232                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1502:
	.cv_def_range	 .Ltmp400 .Ltmp401, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1498:
	.p2align	2
	.cv_linetable	98, "?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ", .Lfunc_end98
	.section	.debug$S,"dr",associative,"??0?$extent_type@$09@details@gsl@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<10>::extent_type
	.long	.Ltmp1504-.Ltmp1503     # Subsection size
.Ltmp1503:
	.short	.Ltmp1506-.Ltmp1505     # Record length
.Ltmp1505:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end99-"??0?$extent_type@$09@details@gsl@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5256                    # Function type index
	.secrel32	"??0?$extent_type@$09@details@gsl@@QEAA@XZ" # Function section relative address
	.secidx	"??0?$extent_type@$09@details@gsl@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<10>::extent_type" # Function name
.Ltmp1506:
	.short	.Ltmp1508-.Ltmp1507     # Record length
.Ltmp1507:
	.short	4414                    # Record kind: S_LOCAL
	.long	5246                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1508:
	.cv_def_range	 .Ltmp402 .Ltmp403, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1504:
	.p2align	2
	.cv_linetable	99, "??0?$extent_type@$09@details@gsl@@QEAA@XZ", .Lfunc_end99
	.section	.debug$S,"dr",associative,"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<10> >
	.long	.Ltmp1510-.Ltmp1509     # Subsection size
.Ltmp1509:
	.short	.Ltmp1512-.Ltmp1511     # Record length
.Ltmp1511:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end100-"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5259                    # Function type index
	.secrel32	"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z" # Function section relative address
	.secidx	"??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<10> >" # Function name
.Ltmp1512:
	.short	.Ltmp1514-.Ltmp1513     # Record length
.Ltmp1513:
	.short	4414                    # Record kind: S_LOCAL
	.long	5185                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1514:
	.cv_def_range	 .Ltmp406 .Ltmp410, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp1516-.Ltmp1515     # Record length
.Ltmp1515:
	.short	4414                    # Record kind: S_LOCAL
	.long	4360                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp1516:
	.cv_def_range	 .Ltmp406 .Ltmp410, "E\021N\001\000\000\370\377\377\377"
	.short	.Ltmp1518-.Ltmp1517     # Record length
.Ltmp1517:
	.short	4414                    # Record kind: S_LOCAL
	.long	5254                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp1518:
	.cv_def_range	 .Ltmp406 .Ltmp410, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1510:
	.p2align	2
	.cv_linetable	100, "??$?0V?$extent_type@$09@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@UKnownNotNull@12@V?$extent_type@$09@details@2@@Z", .Lfunc_end100
	.section	.debug$S,"dr",associative,"??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<-1>::extent_type<10>
	.long	.Ltmp1520-.Ltmp1519     # Subsection size
.Ltmp1519:
	.short	.Ltmp1522-.Ltmp1521     # Record length
.Ltmp1521:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end101-"??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5262                    # Function type index
	.secrel32	"??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z" # Function section relative address
	.secidx	"??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<-1>::extent_type<10>" # Function name
.Ltmp1522:
	.short	.Ltmp1524-.Ltmp1523     # Record length
.Ltmp1523:
	.short	4414                    # Record kind: S_LOCAL
	.long	4195                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1524:
	.cv_def_range	 .Ltmp411 .Ltmp413, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1526-.Ltmp1525     # Record length
.Ltmp1525:
	.short	4414                    # Record kind: S_LOCAL
	.long	5254                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp1526:
	.cv_def_range	 .Ltmp411 .Ltmp413, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1520:
	.p2align	2
	.cv_linetable	101, "??$?0$09@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$09@12@@Z", .Lfunc_end101
	.section	.debug$S,"dr",associative,"?size@?$extent_type@$09@details@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<10>::size
	.long	.Ltmp1528-.Ltmp1527     # Subsection size
.Ltmp1527:
	.short	.Ltmp1530-.Ltmp1529     # Record length
.Ltmp1529:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end102-"?size@?$extent_type@$09@details@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5263                    # Function type index
	.secrel32	"?size@?$extent_type@$09@details@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$extent_type@$09@details@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<10>::size" # Function name
.Ltmp1530:
	.short	.Ltmp1532-.Ltmp1531     # Record length
.Ltmp1531:
	.short	4414                    # Record kind: S_LOCAL
	.long	5251                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1532:
	.cv_def_range	 .Ltmp414 .Ltmp415, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1528:
	.p2align	2
	.cv_linetable	102, "?size@?$extent_type@$09@details@gsl@@QEBA_JXZ", .Lfunc_end102
	.section	.debug$S,"dr",associative,"??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::span_iterator
	.long	.Ltmp1534-.Ltmp1533     # Subsection size
.Ltmp1533:
	.short	.Ltmp1536-.Ltmp1535     # Record length
.Ltmp1535:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end103-"??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5264                    # Function type index
	.secrel32	"??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z" # Function section relative address
	.secidx	"??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::span_iterator" # Function name
.Ltmp1536:
	.short	.Ltmp1538-.Ltmp1537     # Record length
.Ltmp1537:
	.short	4414                    # Record kind: S_LOCAL
	.long	4362                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1538:
	.cv_def_range	 .Ltmp416 .Ltmp417, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1540-.Ltmp1539     # Record length
.Ltmp1539:
	.short	4414                    # Record kind: S_LOCAL
	.long	4330                    # TypeIndex
	.short	1                       # Flags
	.asciz	"span"
.Ltmp1540:
	.cv_def_range	 .Ltmp416 .Ltmp417, "E\021O\001\000\000\b\000\000\000"
	.short	.Ltmp1542-.Ltmp1541     # Record length
.Ltmp1541:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"idx"
.Ltmp1542:
	.cv_def_range	 .Ltmp416 .Ltmp417, "E\021O\001\000\000\020\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1534:
	.p2align	2
	.cv_linetable	103, "??0?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@E$0?0@2@_J@Z", .Lfunc_end103
	.section	.debug$S,"dr",associative,"?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const char,-1>::end
	.long	.Ltmp1544-.Ltmp1543     # Subsection size
.Ltmp1543:
	.short	.Ltmp1546-.Ltmp1545     # Record length
.Ltmp1545:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end104-"?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5265                    # Function type index
	.secrel32	"?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # Function section relative address
	.secidx	"?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const char,-1>::end" # Function name
.Ltmp1546:
	.short	.Ltmp1548-.Ltmp1547     # Record length
.Ltmp1547:
	.short	4414                    # Record kind: S_LOCAL
	.long	4563                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1548:
	.cv_def_range	 .Ltmp418 .Ltmp419, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1544:
	.p2align	2
	.cv_linetable	104, "?end@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ", .Lfunc_end104
	.section	.debug$S,"dr",associative,"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const char,-1>::size
	.long	.Ltmp1550-.Ltmp1549     # Subsection size
.Ltmp1549:
	.short	.Ltmp1552-.Ltmp1551     # Record length
.Ltmp1551:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end105-"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5266                    # Function type index
	.secrel32	"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const char,-1>::size" # Function name
.Ltmp1552:
	.short	.Ltmp1554-.Ltmp1553     # Record length
.Ltmp1553:
	.short	4414                    # Record kind: S_LOCAL
	.long	4563                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1554:
	.cv_def_range	 .Ltmp420 .Ltmp421, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1550:
	.p2align	2
	.cv_linetable	105, "?size@?$span@$$CBD$0?0@gsl@@QEBA_JXZ", .Lfunc_end105
	.section	.debug$S,"dr",associative,"??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::span_iterator<gsl::span<const char,-1>,0>::span_iterator
	.long	.Ltmp1556-.Ltmp1555     # Subsection size
.Ltmp1555:
	.short	.Ltmp1558-.Ltmp1557     # Record length
.Ltmp1557:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end106-"??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5267                    # Function type index
	.secrel32	"??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z" # Function section relative address
	.secidx	"??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::span_iterator<gsl::span<const char,-1>,0>::span_iterator" # Function name
.Ltmp1558:
	.short	.Ltmp1560-.Ltmp1559     # Record length
.Ltmp1559:
	.short	4414                    # Record kind: S_LOCAL
	.long	4581                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1560:
	.cv_def_range	 .Ltmp422 .Ltmp423, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1562-.Ltmp1561     # Record length
.Ltmp1561:
	.short	4414                    # Record kind: S_LOCAL
	.long	4563                    # TypeIndex
	.short	1                       # Flags
	.asciz	"span"
.Ltmp1562:
	.cv_def_range	 .Ltmp422 .Ltmp423, "E\021O\001\000\000\b\000\000\000"
	.short	.Ltmp1564-.Ltmp1563     # Record length
.Ltmp1563:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"idx"
.Ltmp1564:
	.cv_def_range	 .Ltmp422 .Ltmp423, "E\021O\001\000\000\020\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1556:
	.p2align	2
	.cv_linetable	106, "??0?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEAA@PEBV?$span@$$CBD$0?0@2@_J@Z", .Lfunc_end106
	.section	.debug$S,"dr",associative,"?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const char,-1>::begin
	.long	.Ltmp1566-.Ltmp1565     # Subsection size
.Ltmp1565:
	.short	.Ltmp1568-.Ltmp1567     # Record length
.Ltmp1567:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end107-"?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5268                    # Function type index
	.secrel32	"?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # Function section relative address
	.secidx	"?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const char,-1>::begin" # Function name
.Ltmp1568:
	.short	.Ltmp1570-.Ltmp1569     # Record length
.Ltmp1569:
	.short	4414                    # Record kind: S_LOCAL
	.long	4563                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1570:
	.cv_def_range	 .Ltmp424 .Ltmp425, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1566:
	.p2align	2
	.cv_linetable	107, "?begin@?$span@$$CBD$0?0@gsl@@QEBA?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@2@XZ", .Lfunc_end107
	.section	.debug$S,"dr",associative,"??$narrow@_J_J@gsl@@YA_J_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrow<long long,long long>
	.long	.Ltmp1572-.Ltmp1571     # Subsection size
.Ltmp1571:
	.short	.Ltmp1574-.Ltmp1573     # Record length
.Ltmp1573:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end108-"??$narrow@_J_J@gsl@@YA_J_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5269                    # Function type index
	.secrel32	"??$narrow@_J_J@gsl@@YA_J_J@Z" # Function section relative address
	.secidx	"??$narrow@_J_J@gsl@@YA_J_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrow<long long,long long>" # Function name
.Ltmp1574:
	.short	.Ltmp1576-.Ltmp1575     # Record length
.Ltmp1575:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"u"
.Ltmp1576:
	.cv_def_range	 .Ltmp428 .Ltmp433, "E\021N\001\000\000\360\377\377\377"
	.short	.Ltmp1578-.Ltmp1577     # Record length
.Ltmp1577:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	0                       # Flags
	.asciz	"t"
.Ltmp1578:
	.cv_def_range	 .Ltmp428 .Ltmp433, "E\021N\001\000\000\350\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1572:
	.p2align	2
	.cv_linetable	108, "??$narrow@_J_J@gsl@@YA_J_J@Z", .Lfunc_end108
	.section	.debug$S,"dr",associative,"?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::basic_string_span<const char,-1>::size
	.long	.Ltmp1580-.Ltmp1579     # Subsection size
.Ltmp1579:
	.short	.Ltmp1582-.Ltmp1581     # Record length
.Ltmp1581:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end109-"?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5270                    # Function type index
	.secrel32	"?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::basic_string_span<const char,-1>::size" # Function name
.Ltmp1582:
	.short	.Ltmp1584-.Ltmp1583     # Record length
.Ltmp1583:
	.short	4414                    # Record kind: S_LOCAL
	.long	4516                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1584:
	.cv_def_range	 .Ltmp434 .Ltmp435, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1580:
	.p2align	2
	.cv_linetable	109, "?size@?$basic_string_span@$$CBD$0?0@gsl@@QEBA_JXZ", .Lfunc_end109
	.section	.debug$S,"dr",associative,"?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::basic_string_span<const char,-1>::data
	.long	.Ltmp1586-.Ltmp1585     # Subsection size
.Ltmp1585:
	.short	.Ltmp1588-.Ltmp1587     # Record length
.Ltmp1587:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end110-"?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5271                    # Function type index
	.secrel32	"?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ" # Function section relative address
	.secidx	"?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::basic_string_span<const char,-1>::data" # Function name
.Ltmp1588:
	.short	.Ltmp1590-.Ltmp1589     # Record length
.Ltmp1589:
	.short	4414                    # Record kind: S_LOCAL
	.long	4516                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1590:
	.cv_def_range	 .Ltmp436 .Ltmp437, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1586:
	.p2align	2
	.cv_linetable	110, "?data@?$basic_string_span@$$CBD$0?0@gsl@@QEBAPEBDXZ", .Lfunc_end110
	.section	.debug$S,"dr",associative,"??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const char,-1>::span
	.long	.Ltmp1592-.Ltmp1591     # Subsection size
.Ltmp1591:
	.short	.Ltmp1594-.Ltmp1593     # Record length
.Ltmp1593:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end111-"??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5272                    # Function type index
	.secrel32	"??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z" # Function section relative address
	.secidx	"??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const char,-1>::span" # Function name
.Ltmp1594:
	.short	.Ltmp1596-.Ltmp1595     # Record length
.Ltmp1595:
	.short	4414                    # Record kind: S_LOCAL
	.long	4541                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1596:
	.cv_def_range	 .Ltmp438 .Ltmp439, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1598-.Ltmp1597     # Record length
.Ltmp1597:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ptr"
.Ltmp1598:
	.cv_def_range	 .Ltmp438 .Ltmp439, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1600-.Ltmp1599     # Record length
.Ltmp1599:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"count"
.Ltmp1600:
	.cv_def_range	 .Ltmp438 .Ltmp439, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1592:
	.p2align	2
	.cv_linetable	111, "??0?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z", .Lfunc_end111
	.section	.debug$S,"dr",associative,"??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrow_cast<long long,long long &>
	.long	.Ltmp1602-.Ltmp1601     # Subsection size
.Ltmp1601:
	.short	.Ltmp1604-.Ltmp1603     # Record length
.Ltmp1603:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end112-"??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5274                    # Function type index
	.secrel32	"??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z" # Function section relative address
	.secidx	"??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrow_cast<long long,long long &>" # Function name
.Ltmp1604:
	.short	.Ltmp1606-.Ltmp1605     # Record length
.Ltmp1605:
	.short	4414                    # Record kind: S_LOCAL
	.long	5145                    # TypeIndex
	.short	1                       # Flags
	.asciz	"u"
.Ltmp1606:
	.cv_def_range	 .Ltmp440 .Ltmp441, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1602:
	.p2align	2
	.cv_linetable	112, "??$narrow_cast@_JAEA_J@gsl@@YA_JAEA_J@Z", .Lfunc_end112
	.section	.debug$S,"dr",associative,"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::throw_exception<gsl::narrowing_error>
	.long	.Ltmp1608-.Ltmp1607     # Subsection size
.Ltmp1607:
	.short	.Ltmp1610-.Ltmp1609     # Record length
.Ltmp1609:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end113-"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5283                    # Function type index
	.secrel32	"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z" # Function section relative address
	.secidx	"??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::throw_exception<gsl::narrowing_error>" # Function name
.Ltmp1610:
	.short	.Ltmp1612-.Ltmp1611     # Record length
.Ltmp1611:
	.short	4414                    # Record kind: S_LOCAL
	.long	5276                    # TypeIndex
	.short	1                       # Flags
	.asciz	"exception"
.Ltmp1612:
	.cv_def_range	 .Ltmp442 .Ltmp443, "E\021O\001\000\000P\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1608:
	.p2align	2
	.cv_linetable	113, "??$throw_exception@Unarrowing_error@gsl@@@details@gsl@@YAX$$QEAUnarrowing_error@1@@Z", .Lfunc_end113
	.section	.debug$S,"dr",associative,"??0narrowing_error@gsl@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrowing_error::narrowing_error
	.long	.Ltmp1614-.Ltmp1613     # Subsection size
.Ltmp1613:
	.short	.Ltmp1616-.Ltmp1615     # Record length
.Ltmp1615:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end114-"??0narrowing_error@gsl@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5286                    # Function type index
	.secrel32	"??0narrowing_error@gsl@@QEAA@XZ" # Function section relative address
	.secidx	"??0narrowing_error@gsl@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrowing_error::narrowing_error" # Function name
.Ltmp1616:
	.short	.Ltmp1618-.Ltmp1617     # Record length
.Ltmp1617:
	.short	4414                    # Record kind: S_LOCAL
	.long	5284                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1618:
	.cv_def_range	 .Ltmp444 .Ltmp445, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1614:
	.p2align	2
	.cv_linetable	114, "??0narrowing_error@gsl@@QEAA@XZ", .Lfunc_end114
	.section	.debug$S,"dr",associative,"??1narrowing_error@gsl@@UEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrowing_error::~narrowing_error
	.long	.Ltmp1620-.Ltmp1619     # Subsection size
.Ltmp1619:
	.short	.Ltmp1622-.Ltmp1621     # Record length
.Ltmp1621:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end115-"??1narrowing_error@gsl@@UEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5287                    # Function type index
	.secrel32	"??1narrowing_error@gsl@@UEAA@XZ" # Function section relative address
	.secidx	"??1narrowing_error@gsl@@UEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrowing_error::~narrowing_error" # Function name
.Ltmp1622:
	.short	.Ltmp1624-.Ltmp1623     # Record length
.Ltmp1623:
	.short	4414                    # Record kind: S_LOCAL
	.long	5284                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1624:
	.cv_def_range	 .Ltmp446 .Ltmp448, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1620:
	.p2align	2
	.cv_linetable	115, "??1narrowing_error@gsl@@UEAA@XZ", .Lfunc_end115
	.section	.debug$S,"dr",associative,"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::forward<gsl::narrowing_error>
	.long	.Ltmp1626-.Ltmp1625     # Subsection size
.Ltmp1625:
	.short	.Ltmp1628-.Ltmp1627     # Record length
.Ltmp1627:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end116-"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5291                    # Function type index
	.secrel32	"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z" # Function section relative address
	.secidx	"??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::forward<gsl::narrowing_error>" # Function name
.Ltmp1628:
	.short	.Ltmp1630-.Ltmp1629     # Record length
.Ltmp1629:
	.short	4414                    # Record kind: S_LOCAL
	.long	5288                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Arg"
.Ltmp1630:
	.cv_def_range	 .Ltmp449 .Ltmp450, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1626:
	.p2align	2
	.cv_linetable	116, "??$forward@Unarrowing_error@gsl@@@std@@YA$$QEAUnarrowing_error@gsl@@AEAU12@@Z", .Lfunc_end116
	.section	.debug$S,"dr",associative,"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrowing_error::narrowing_error
	.long	.Ltmp1632-.Ltmp1631     # Subsection size
.Ltmp1631:
	.short	.Ltmp1634-.Ltmp1633     # Record length
.Ltmp1633:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end117-"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5293                    # Function type index
	.secrel32	"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z" # Function section relative address
	.secidx	"??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrowing_error::narrowing_error" # Function name
.Ltmp1634:
	.short	.Ltmp1636-.Ltmp1635     # Record length
.Ltmp1635:
	.short	4414                    # Record kind: S_LOCAL
	.long	5284                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1636:
	.cv_def_range	 .Ltmp451 .Ltmp452, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1638-.Ltmp1637     # Record length
.Ltmp1637:
	.short	4414                    # Record kind: S_LOCAL
	.long	5276                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1638:
	.cv_def_range	 .Ltmp451 .Ltmp452, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1632:
	.p2align	2
	.cv_linetable	117, "??0narrowing_error@gsl@@QEAA@$$QEAU01@@Z", .Lfunc_end117
	.section	.debug$S,"dr",associative,"??0narrowing_error@gsl@@QEAA@AEBU01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrowing_error::narrowing_error
	.long	.Ltmp1640-.Ltmp1639     # Subsection size
.Ltmp1639:
	.short	.Ltmp1642-.Ltmp1641     # Record length
.Ltmp1641:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end118-"??0narrowing_error@gsl@@QEAA@AEBU01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5298                    # Function type index
	.secrel32	"??0narrowing_error@gsl@@QEAA@AEBU01@@Z" # Function section relative address
	.secidx	"??0narrowing_error@gsl@@QEAA@AEBU01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrowing_error::narrowing_error" # Function name
.Ltmp1642:
	.short	.Ltmp1644-.Ltmp1643     # Record length
.Ltmp1643:
	.short	4414                    # Record kind: S_LOCAL
	.long	5284                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1644:
	.cv_def_range	 .Ltmp453 .Ltmp454, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1646-.Ltmp1645     # Record length
.Ltmp1645:
	.short	4414                    # Record kind: S_LOCAL
	.long	5295                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1646:
	.cv_def_range	 .Ltmp453 .Ltmp454, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1640:
	.p2align	2
	.cv_linetable	118, "??0narrowing_error@gsl@@QEAA@AEBU01@@Z", .Lfunc_end118
	.section	.debug$S,"dr",associative,"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrowing_error::~narrowing_error
	.long	.Ltmp1648-.Ltmp1647     # Subsection size
.Ltmp1647:
	.short	.Ltmp1650-.Ltmp1649     # Record length
.Ltmp1649:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end119-"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5287                    # Function type index
	.secrel32	"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z" # Function section relative address
	.secidx	"??_Gnarrowing_error@gsl@@UEAAPEAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrowing_error::~narrowing_error" # Function name
.Ltmp1650:
	.short	.Ltmp1652-.Ltmp1651     # Record length
.Ltmp1651:
	.short	4414                    # Record kind: S_LOCAL
	.long	5284                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1652:
	.cv_def_range	 .Ltmp455 .Ltmp456, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1654-.Ltmp1653     # Record length
.Ltmp1653:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
.Ltmp1654:
	.cv_def_range	 .Ltmp455 .Ltmp456, "E\021O\001\000\000<\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1648:
	.p2align	2
	.cv_linetable	119, "??_Gnarrowing_error@gsl@@UEAAPEAXI@Z", .Lfunc_end119
	.section	.debug$S,"dr",associative,"??0exception@std@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::exception
	.long	.Ltmp1656-.Ltmp1655     # Subsection size
.Ltmp1655:
	.short	.Ltmp1658-.Ltmp1657     # Record length
.Ltmp1657:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end120-"??0exception@std@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5299                    # Function type index
	.secrel32	"??0exception@std@@QEAA@XZ" # Function section relative address
	.secidx	"??0exception@std@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::exception" # Function name
.Ltmp1658:
	.short	.Ltmp1660-.Ltmp1659     # Record length
.Ltmp1659:
	.short	4414                    # Record kind: S_LOCAL
	.long	4673                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1660:
	.cv_def_range	 .Ltmp457 .Ltmp458, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1656:
	.p2align	2
	.cv_linetable	120, "??0exception@std@@QEAA@XZ", .Lfunc_end120
	.section	.debug$S,"dr",associative,"?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const char,-1>::data
	.long	.Ltmp1662-.Ltmp1661     # Subsection size
.Ltmp1661:
	.short	.Ltmp1664-.Ltmp1663     # Record length
.Ltmp1663:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end121-"?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5300                    # Function type index
	.secrel32	"?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ" # Function section relative address
	.secidx	"?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const char,-1>::data" # Function name
.Ltmp1664:
	.short	.Ltmp1666-.Ltmp1665     # Record length
.Ltmp1665:
	.short	4414                    # Record kind: S_LOCAL
	.long	4563                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1666:
	.cv_def_range	 .Ltmp459 .Ltmp460, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1662:
	.p2align	2
	.cv_linetable	121, "?data@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ", .Lfunc_end121
	.section	.debug$S,"dr",associative,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data
	.long	.Ltmp1668-.Ltmp1667     # Subsection size
.Ltmp1667:
	.short	.Ltmp1670-.Ltmp1669     # Record length
.Ltmp1669:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end122-"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5301                    # Function type index
	.secrel32	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ" # Function section relative address
	.secidx	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data" # Function name
.Ltmp1670:
	.short	.Ltmp1672-.Ltmp1671     # Record length
.Ltmp1671:
	.short	4414                    # Record kind: S_LOCAL
	.long	4607                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1672:
	.cv_def_range	 .Ltmp461 .Ltmp462, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1668:
	.p2align	2
	.cv_linetable	122, "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEBAPEBDXZ", .Lfunc_end122
	.section	.debug$S,"dr",associative,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<long long>
	.long	.Ltmp1674-.Ltmp1673     # Subsection size
.Ltmp1673:
	.short	.Ltmp1676-.Ltmp1675     # Record length
.Ltmp1675:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end123-"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5304                    # Function type index
	.secrel32	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z" # Function section relative address
	.secidx	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<long long>" # Function name
.Ltmp1676:
	.short	.Ltmp1678-.Ltmp1677     # Record length
.Ltmp1677:
	.short	4414                    # Record kind: S_LOCAL
	.long	5302                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1678:
	.cv_def_range	 .Ltmp467 .Ltmp471, "E\021N\001\000\000\030\000\000\000"
	.short	.Ltmp1680-.Ltmp1679     # Record length
.Ltmp1679:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp1680:
	.cv_def_range	 .Ltmp467 .Ltmp471, "E\021N\001\000\000 \000\000\000"
	.short	.Ltmp1682-.Ltmp1681     # Record length
.Ltmp1681:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp1682:
	.cv_def_range	 .Ltmp467 .Ltmp471, "E\021N\001\000\000(\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1674:
	.p2align	2
	.cv_linetable	123, "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@QEAA@PEBD_J@Z", .Lfunc_end123
	.section	.debug$S,"dr",associative,"?data@?$span@G$0?0@gsl@@QEBAPEAGXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned short,-1>::data
	.long	.Ltmp1684-.Ltmp1683     # Subsection size
.Ltmp1683:
	.short	.Ltmp1686-.Ltmp1685     # Record length
.Ltmp1685:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end124-"?data@?$span@G$0?0@gsl@@QEBAPEAGXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5305                    # Function type index
	.secrel32	"?data@?$span@G$0?0@gsl@@QEBAPEAGXZ" # Function section relative address
	.secidx	"?data@?$span@G$0?0@gsl@@QEBAPEAGXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned short,-1>::data" # Function name
.Ltmp1686:
	.short	.Ltmp1688-.Ltmp1687     # Record length
.Ltmp1687:
	.short	4414                    # Record kind: S_LOCAL
	.long	4274                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1688:
	.cv_def_range	 .Ltmp472 .Ltmp473, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1684:
	.p2align	2
	.cv_linetable	124, "?data@?$span@G$0?0@gsl@@QEBAPEAGXZ", .Lfunc_end124
	.section	.debug$S,"dr",associative,"?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned short,-1>::size_bytes
	.long	.Ltmp1690-.Ltmp1689     # Subsection size
.Ltmp1689:
	.short	.Ltmp1692-.Ltmp1691     # Record length
.Ltmp1691:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end125-"?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5306                    # Function type index
	.secrel32	"?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned short,-1>::size_bytes" # Function name
.Ltmp1692:
	.short	.Ltmp1694-.Ltmp1693     # Record length
.Ltmp1693:
	.short	4414                    # Record kind: S_LOCAL
	.long	4274                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1694:
	.cv_def_range	 .Ltmp474 .Ltmp475, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1690:
	.p2align	2
	.cv_linetable	125, "?size_bytes@?$span@G$0?0@gsl@@QEBA_JXZ", .Lfunc_end125
	.section	.debug$S,"dr",associative,"??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned char,-1>::span
	.long	.Ltmp1696-.Ltmp1695     # Subsection size
.Ltmp1695:
	.short	.Ltmp1698-.Ltmp1697     # Record length
.Ltmp1697:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end126-"??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5307                    # Function type index
	.secrel32	"??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z" # Function section relative address
	.secidx	"??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned char,-1>::span" # Function name
.Ltmp1698:
	.short	.Ltmp1700-.Ltmp1699     # Record length
.Ltmp1699:
	.short	4414                    # Record kind: S_LOCAL
	.long	4306                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1700:
	.cv_def_range	 .Ltmp476 .Ltmp477, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1702-.Ltmp1701     # Record length
.Ltmp1701:
	.short	4414                    # Record kind: S_LOCAL
	.long	1568                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ptr"
.Ltmp1702:
	.cv_def_range	 .Ltmp476 .Ltmp477, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1704-.Ltmp1703     # Record length
.Ltmp1703:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"count"
.Ltmp1704:
	.cv_def_range	 .Ltmp476 .Ltmp477, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1696:
	.p2align	2
	.cv_linetable	126, "??0?$span@E$0?0@gsl@@QEAA@PEAE_J@Z", .Lfunc_end126
	.section	.debug$S,"dr",associative,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data
	.long	.Ltmp1706-.Ltmp1705     # Subsection size
.Ltmp1705:
	.short	.Ltmp1708-.Ltmp1707     # Record length
.Ltmp1707:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end127-"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5308                    # Function type index
	.secrel32	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ" # Function section relative address
	.secidx	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data" # Function name
.Ltmp1708:
	.short	.Ltmp1710-.Ltmp1709     # Record length
.Ltmp1709:
	.short	4414                    # Record kind: S_LOCAL
	.long	4298                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1710:
	.cv_def_range	 .Ltmp478 .Ltmp479, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1706:
	.p2align	2
	.cv_linetable	127, "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@QEBAPEAGXZ", .Lfunc_end127
	.section	.debug$S,"dr",associative,"?size@?$span@G$0?0@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned short,-1>::size
	.long	.Ltmp1712-.Ltmp1711     # Subsection size
.Ltmp1711:
	.short	.Ltmp1714-.Ltmp1713     # Record length
.Ltmp1713:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end128-"?size@?$span@G$0?0@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5309                    # Function type index
	.secrel32	"?size@?$span@G$0?0@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$span@G$0?0@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned short,-1>::size" # Function name
.Ltmp1714:
	.short	.Ltmp1716-.Ltmp1715     # Record length
.Ltmp1715:
	.short	4414                    # Record kind: S_LOCAL
	.long	4274                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1716:
	.cv_def_range	 .Ltmp480 .Ltmp481, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1712:
	.p2align	2
	.cv_linetable	128, "?size@?$span@G$0?0@gsl@@QEBA_JXZ", .Lfunc_end128
	.section	.debug$S,"dr",associative,"??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::narrow_cast<long long,unsigned long long>
	.long	.Ltmp1718-.Ltmp1717     # Subsection size
.Ltmp1717:
	.short	.Ltmp1720-.Ltmp1719     # Record length
.Ltmp1719:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end129-"??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5313                    # Function type index
	.secrel32	"??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z" # Function section relative address
	.secidx	"??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::narrow_cast<long long,unsigned long long>" # Function name
.Ltmp1720:
	.short	.Ltmp1722-.Ltmp1721     # Record length
.Ltmp1721:
	.short	4414                    # Record kind: S_LOCAL
	.long	5310                    # TypeIndex
	.short	1                       # Flags
	.asciz	"u"
.Ltmp1722:
	.cv_def_range	 .Ltmp482 .Ltmp483, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1718:
	.p2align	2
	.cv_linetable	129, "??$narrow_cast@_J_K@gsl@@YA_J$$QEA_K@Z", .Lfunc_end129
	.section	.debug$S,"dr",associative,"??$forward@_K@std@@YA$$QEA_KAEA_K@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::forward<unsigned long long>
	.long	.Ltmp1724-.Ltmp1723     # Subsection size
.Ltmp1723:
	.short	.Ltmp1726-.Ltmp1725     # Record length
.Ltmp1725:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end130-"??$forward@_K@std@@YA$$QEA_KAEA_K@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5317                    # Function type index
	.secrel32	"??$forward@_K@std@@YA$$QEA_KAEA_K@Z" # Function section relative address
	.secidx	"??$forward@_K@std@@YA$$QEA_KAEA_K@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::forward<unsigned long long>" # Function name
.Ltmp1726:
	.short	.Ltmp1728-.Ltmp1727     # Record length
.Ltmp1727:
	.short	4414                    # Record kind: S_LOCAL
	.long	5314                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Arg"
.Ltmp1728:
	.cv_def_range	 .Ltmp484 .Ltmp485, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1724:
	.p2align	2
	.cv_linetable	130, "??$forward@_K@std@@YA$$QEA_KAEA_K@Z", .Lfunc_end130
	.section	.debug$S,"dr",associative,"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<long long>
	.long	.Ltmp1730-.Ltmp1729     # Subsection size
.Ltmp1729:
	.short	.Ltmp1732-.Ltmp1731     # Record length
.Ltmp1731:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end131-"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5319                    # Function type index
	.secrel32	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z" # Function section relative address
	.secidx	"??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<long long>" # Function name
.Ltmp1732:
	.short	.Ltmp1734-.Ltmp1733     # Record length
.Ltmp1733:
	.short	4414                    # Record kind: S_LOCAL
	.long	5185                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1734:
	.cv_def_range	 .Ltmp490 .Ltmp494, "E\021N\001\000\000\030\000\000\000"
	.short	.Ltmp1736-.Ltmp1735     # Record length
.Ltmp1735:
	.short	4414                    # Record kind: S_LOCAL
	.long	1568                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp1736:
	.cv_def_range	 .Ltmp490 .Ltmp494, "E\021N\001\000\000 \000\000\000"
	.short	.Ltmp1738-.Ltmp1737     # Record length
.Ltmp1737:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp1738:
	.cv_def_range	 .Ltmp490 .Ltmp494, "E\021N\001\000\000(\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1730:
	.p2align	2
	.cv_linetable	131, "??$?0_J@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@QEAA@PEAE_J@Z", .Lfunc_end131
	.section	.debug$S,"dr",associative,"??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Adl_verify_range<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> >
	.long	.Ltmp1740-.Ltmp1739     # Subsection size
.Ltmp1739:
	.short	.Ltmp1742-.Ltmp1741     # Record length
.Ltmp1741:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end132-"??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5323                    # Function type index
	.secrel32	"??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z" # Function section relative address
	.secidx	"??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Adl_verify_range<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> >" # Function name
.Ltmp1742:
	.short	.Ltmp1744-.Ltmp1743     # Record length
.Ltmp1743:
	.short	4414                    # Record kind: S_LOCAL
	.long	5320                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1744:
	.cv_def_range	 .Ltmp495 .Ltmp496, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1746-.Ltmp1745     # Record length
.Ltmp1745:
	.short	4414                    # Record kind: S_LOCAL
	.long	5320                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1746:
	.cv_def_range	 .Ltmp495 .Ltmp496, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1740:
	.p2align	2
	.cv_linetable	132, "??$_Adl_verify_range@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0@Z", .Lfunc_end132
	.section	.debug$S,"dr",associative,"??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Get_unwrapped<gsl::details::span_iterator<gsl::span<int,-1>,0>,0>
	.long	.Ltmp1748-.Ltmp1747     # Subsection size
.Ltmp1747:
	.short	.Ltmp1750-.Ltmp1749     # Record length
.Ltmp1749:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end133-"??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5326                    # Function type index
	.secrel32	"??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z" # Function section relative address
	.secidx	"??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Get_unwrapped<gsl::details::span_iterator<gsl::span<int,-1>,0>,0>" # Function name
.Ltmp1750:
	.short	.Ltmp1752-.Ltmp1751     # Record length
.Ltmp1751:
	.short	4414                    # Record kind: S_LOCAL
	.long	5320                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_It"
.Ltmp1752:
	.cv_def_range	 .Ltmp497 .Ltmp498, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1748:
	.p2align	2
	.cv_linetable	133, "??$_Get_unwrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@Z", .Lfunc_end133
	.section	.debug$S,"dr",associative,"??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Get_unwrapped_n<gsl::details::span_iterator<gsl::span<int,-1>,0>,long long,0>
	.long	.Ltmp1754-.Ltmp1753     # Subsection size
.Ltmp1753:
	.short	.Ltmp1756-.Ltmp1755     # Record length
.Ltmp1755:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end134-"??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5329                    # Function type index
	.secrel32	"??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z" # Function section relative address
	.secidx	"??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Get_unwrapped_n<gsl::details::span_iterator<gsl::span<int,-1>,0>,long long,0>" # Function name
.Ltmp1756:
	.short	.Ltmp1758-.Ltmp1757     # Record length
.Ltmp1757:
	.short	4414                    # Record kind: S_LOCAL
	.long	5320                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_It"
.Ltmp1758:
	.cv_def_range	 .Ltmp499 .Ltmp507, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp1760-.Ltmp1759     # Record length
.Ltmp1759:
	.short	4414                    # Record kind: S_LOCAL
	.long	4099                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Off"
.Ltmp1760:
	.cv_def_range	 .Ltmp499 .Ltmp507, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp1762-.Ltmp1761     # Record length
.Ltmp1761:
	.short	4414                    # Record kind: S_LOCAL
	.long	4099                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_COff"
.Ltmp1762:
	.cv_def_range	 .Ltmp499 .Ltmp507, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1754:
	.p2align	2
	.cv_linetable	134, "??$_Get_unwrapped_n@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@_J@Z", .Lfunc_end134
	.section	.debug$S,"dr",associative,"??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Idl_distance<gsl::details::span_iterator<gsl::span<int,-1>,0>,int *>
	.long	.Ltmp1764-.Ltmp1763     # Subsection size
.Ltmp1763:
	.short	.Ltmp1766-.Ltmp1765     # Record length
.Ltmp1765:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end135-"??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5333                    # Function type index
	.secrel32	"??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z" # Function section relative address
	.secidx	"??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Idl_distance<gsl::details::span_iterator<gsl::span<int,-1>,0>,int *>" # Function name
.Ltmp1766:
	.short	.Ltmp1768-.Ltmp1767     # Record length
.Ltmp1767:
	.short	4414                    # Record kind: S_LOCAL
	.long	5330                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1768:
	.cv_def_range	 .Ltmp508 .Ltmp509, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1770-.Ltmp1769     # Record length
.Ltmp1769:
	.short	4414                    # Record kind: S_LOCAL
	.long	5330                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1770:
	.cv_def_range	 .Ltmp508 .Ltmp509, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1764:
	.p2align	2
	.cv_linetable	135, "??$_Idl_distance@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA?A?<auto>@@AEBQEAH0@Z", .Lfunc_end135
	.section	.debug$S,"dr",associative,"??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Seek_wrapped<gsl::details::span_iterator<gsl::span<int,-1>,0>,int *,0>
	.long	.Ltmp1772-.Ltmp1771     # Subsection size
.Ltmp1771:
	.short	.Ltmp1774-.Ltmp1773     # Record length
.Ltmp1773:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end136-"??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5336                    # Function type index
	.secrel32	"??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z" # Function section relative address
	.secidx	"??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Seek_wrapped<gsl::details::span_iterator<gsl::span<int,-1>,0>,int *,0>" # Function name
.Ltmp1774:
	.short	.Ltmp1776-.Ltmp1775     # Record length
.Ltmp1775:
	.short	4414                    # Record kind: S_LOCAL
	.long	4172                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_It"
.Ltmp1776:
	.cv_def_range	 .Ltmp510 .Ltmp511, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1778-.Ltmp1777     # Record length
.Ltmp1777:
	.short	4414                    # Record kind: S_LOCAL
	.long	5330                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_UIt"
.Ltmp1778:
	.cv_def_range	 .Ltmp510 .Ltmp511, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1772:
	.p2align	2
	.cv_linetable	136, "??$_Seek_wrapped@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH$0A@@std@@YAXAEAV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@AEBQEAH@Z", .Lfunc_end136
	.section	.debug$S,"dr",associative,"??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Copy_unchecked<int *,int *>
	.long	.Ltmp1780-.Ltmp1779     # Subsection size
.Ltmp1779:
	.short	.Ltmp1782-.Ltmp1781     # Record length
.Ltmp1781:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end137-"??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5339                    # Function type index
	.secrel32	"??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z" # Function section relative address
	.secidx	"??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Copy_unchecked<int *,int *>" # Function name
.Ltmp1782:
	.short	.Ltmp1784-.Ltmp1783     # Record length
.Ltmp1783:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1784:
	.cv_def_range	 .Ltmp512 .Ltmp514, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp1786-.Ltmp1785     # Record length
.Ltmp1785:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1786:
	.cv_def_range	 .Ltmp512 .Ltmp514, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1788-.Ltmp1787     # Record length
.Ltmp1787:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp1788:
	.cv_def_range	 .Ltmp512 .Ltmp514, "E\021O\001\000\000H\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1780:
	.p2align	2
	.cv_linetable	137, "??$_Copy_unchecked@PEAHPEAH@std@@YAPEAHPEAH00@Z", .Lfunc_end137
	.section	.debug$S,"dr",associative,"??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Adl_verify_range1<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> >
	.long	.Ltmp1790-.Ltmp1789     # Subsection size
.Ltmp1789:
	.short	.Ltmp1792-.Ltmp1791     # Record length
.Ltmp1791:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end138-"??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5342                    # Function type index
	.secrel32	"??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z" # Function section relative address
	.secidx	"??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Adl_verify_range1<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> >" # Function name
.Ltmp1792:
	.short	.Ltmp1794-.Ltmp1793     # Record length
.Ltmp1793:
	.short	4414                    # Record kind: S_LOCAL
	.long	5320                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1794:
	.cv_def_range	 .Ltmp515 .Ltmp516, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1796-.Ltmp1795     # Record length
.Ltmp1795:
	.short	4414                    # Record kind: S_LOCAL
	.long	5320                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1796:
	.cv_def_range	 .Ltmp515 .Ltmp516, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1798-.Ltmp1797     # Record length
.Ltmp1797:
	.short	4414                    # Record kind: S_LOCAL
	.long	4747                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1798:
	.cv_def_range	 .Ltmp515 .Ltmp516, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1790:
	.p2align	2
	.cv_linetable	138, "??$_Adl_verify_range1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z", .Lfunc_end138
	.section	.debug$S,"dr",associative,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::_Verify_range
	.long	.Ltmp1800-.Ltmp1799     # Subsection size
.Ltmp1799:
	.short	.Ltmp1802-.Ltmp1801     # Record length
.Ltmp1801:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end139-"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5344                    # Function type index
	.secrel32	"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z" # Function section relative address
	.secidx	"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::_Verify_range" # Function name
.Ltmp1802:
	.short	.Ltmp1804-.Ltmp1803     # Record length
.Ltmp1803:
	.short	4414                    # Record kind: S_LOCAL
	.long	4492                    # TypeIndex
	.short	1                       # Flags
	.asciz	"lhs"
.Ltmp1804:
	.cv_def_range	 .Lfunc_begin139 .Ltmp523, "A\021J\001\000\000"
	.cv_def_range	 .Ltmp523 .Ltmp532 .Ltmp533 .Ltmp534, "E\021N\001\000\000\310\377\377\377"
	.short	.Ltmp1806-.Ltmp1805     # Record length
.Ltmp1805:
	.short	4414                    # Record kind: S_LOCAL
	.long	4492                    # TypeIndex
	.short	1                       # Flags
	.asciz	"rhs"
.Ltmp1806:
	.cv_def_range	 .Lfunc_begin139 .Ltmp522, "A\021K\001\000\000"
	.cv_def_range	 .Ltmp522 .Ltmp532 .Ltmp533 .Ltmp534, "E\021N\001\000\000\320\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1800:
	.p2align	2
	.cv_linetable	139, "?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@12@0@Z", .Lfunc_end139
	.section	.debug$S,"dr",associative,"?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::span_iterator<gsl::span<int,-1>,0>::_Unwrapped
	.long	.Ltmp1808-.Ltmp1807     # Subsection size
.Ltmp1807:
	.short	.Ltmp1810-.Ltmp1809     # Record length
.Ltmp1809:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end140-"?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5345                    # Function type index
	.secrel32	"?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ" # Function section relative address
	.secidx	"?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::span_iterator<gsl::span<int,-1>,0>::_Unwrapped" # Function name
.Ltmp1810:
	.short	.Ltmp1812-.Ltmp1811     # Record length
.Ltmp1811:
	.short	4414                    # Record kind: S_LOCAL
	.long	4169                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1812:
	.cv_def_range	 .Ltmp536 .Ltmp537, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1808:
	.p2align	2
	.cv_linetable	140, "?_Unwrapped@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAPEAHXZ", .Lfunc_end140
	.section	.debug$S,"dr",associative,"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::span_iterator<gsl::span<int,-1>,0>::_Verify_offset
	.long	.Ltmp1814-.Ltmp1813     # Subsection size
.Ltmp1813:
	.short	.Ltmp1816-.Ltmp1815     # Record length
.Ltmp1815:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end141-"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5346                    # Function type index
	.secrel32	"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z" # Function section relative address
	.secidx	"?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::span_iterator<gsl::span<int,-1>,0>::_Verify_offset" # Function name
.Ltmp1816:
	.short	.Ltmp1818-.Ltmp1817     # Record length
.Ltmp1817:
	.short	4414                    # Record kind: S_LOCAL
	.long	4169                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1818:
	.cv_def_range	 .Ltmp542 .Ltmp543, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp1820-.Ltmp1819     # Record length
.Ltmp1819:
	.short	4414                    # Record kind: S_LOCAL
	.long	4099                    # TypeIndex
	.short	1                       # Flags
	.asciz	"n"
.Ltmp1820:
	.cv_def_range	 .Ltmp542 .Ltmp543, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1814:
	.p2align	2
	.cv_linetable	141, "?_Verify_offset@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z", .Lfunc_end141
	.section	.debug$S,"dr",associative,"??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Idl_distance1<gsl::details::span_iterator<gsl::span<int,-1>,0>,int *>
	.long	.Ltmp1822-.Ltmp1821     # Subsection size
.Ltmp1821:
	.short	.Ltmp1824-.Ltmp1823     # Record length
.Ltmp1823:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end142-"??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5349                    # Function type index
	.secrel32	"??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z" # Function section relative address
	.secidx	"??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Idl_distance1<gsl::details::span_iterator<gsl::span<int,-1>,0>,int *>" # Function name
.Ltmp1824:
	.short	.Ltmp1826-.Ltmp1825     # Record length
.Ltmp1825:
	.short	4414                    # Record kind: S_LOCAL
	.long	5330                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1826:
	.cv_def_range	 .Ltmp544 .Ltmp545, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1828-.Ltmp1827     # Record length
.Ltmp1827:
	.short	4414                    # Record kind: S_LOCAL
	.long	5330                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1828:
	.cv_def_range	 .Ltmp544 .Ltmp545, "E\021O\001\000\000\b\000\000\000"
	.short	.Ltmp1830-.Ltmp1829     # Record length
.Ltmp1829:
	.short	4414                    # Record kind: S_LOCAL
	.long	4205                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1830:
	.cv_def_range	 .Ltmp544 .Ltmp545, "E\021O\001\000\000\020\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1822:
	.p2align	2
	.cv_linetable	142, "??$_Idl_distance1@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@PEAH@std@@YA_JAEBQEAH0Urandom_access_iterator_tag@0@@Z", .Lfunc_end142
	.section	.debug$S,"dr",associative,"?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::span_iterator<gsl::span<int,-1>,0>::_Seek_to
	.long	.Ltmp1832-.Ltmp1831     # Subsection size
.Ltmp1831:
	.short	.Ltmp1834-.Ltmp1833     # Record length
.Ltmp1833:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end143-"?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5350                    # Function type index
	.secrel32	"?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z" # Function section relative address
	.secidx	"?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::span_iterator<gsl::span<int,-1>,0>::_Seek_to" # Function name
.Ltmp1834:
	.short	.Ltmp1836-.Ltmp1835     # Record length
.Ltmp1835:
	.short	4414                    # Record kind: S_LOCAL
	.long	4163                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp1836:
	.cv_def_range	 .Ltmp546 .Ltmp547, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1838-.Ltmp1837     # Record length
.Ltmp1837:
	.short	4414                    # Record kind: S_LOCAL
	.long	4185                    # TypeIndex
	.short	1                       # Flags
	.asciz	"p"
.Ltmp1838:
	.cv_def_range	 .Ltmp546 .Ltmp547, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1832:
	.p2align	2
	.cv_linetable	143, "?_Seek_to@?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAH@Z", .Lfunc_end143
	.section	.debug$S,"dr",associative,"??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Copy_unchecked1<int *,int *>
	.long	.Ltmp1840-.Ltmp1839     # Subsection size
.Ltmp1839:
	.short	.Ltmp1842-.Ltmp1841     # Record length
.Ltmp1841:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end144-"??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5360                    # Function type index
	.secrel32	"??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z" # Function section relative address
	.secidx	"??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Copy_unchecked1<int *,int *>" # Function name
.Ltmp1842:
	.short	.Ltmp1844-.Ltmp1843     # Record length
.Ltmp1843:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1844:
	.cv_def_range	 .Ltmp548 .Ltmp549, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1846-.Ltmp1845     # Record length
.Ltmp1845:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1846:
	.cv_def_range	 .Ltmp548 .Ltmp549, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1848-.Ltmp1847     # Record length
.Ltmp1847:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp1848:
	.cv_def_range	 .Ltmp548 .Ltmp549, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1850-.Ltmp1849     # Record length
.Ltmp1849:
	.short	4414                    # Record kind: S_LOCAL
	.long	5356                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1850:
	.cv_def_range	 .Ltmp548 .Ltmp549, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1840:
	.p2align	2
	.cv_linetable	144, "??$_Copy_unchecked1@PEAHPEAH@std@@YAPEAHPEAH00U_Trivially_copyable_ptr_iterator_tag@0@@Z", .Lfunc_end144
	.section	.debug$S,"dr",associative,"??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Ptr_copy_cat<int,int>
	.long	.Ltmp1852-.Ltmp1851     # Subsection size
.Ltmp1851:
	.short	.Ltmp1854-.Ltmp1853     # Record length
.Ltmp1853:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end145-"??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5366                    # Function type index
	.secrel32	"??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z" # Function section relative address
	.secidx	"??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Ptr_copy_cat<int,int>" # Function name
.Ltmp1854:
	.short	.Ltmp1856-.Ltmp1855     # Record length
.Ltmp1855:
	.short	4414                    # Record kind: S_LOCAL
	.long	5330                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1856:
	.cv_def_range	 .Ltmp550 .Ltmp551, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1858-.Ltmp1857     # Record length
.Ltmp1857:
	.short	4414                    # Record kind: S_LOCAL
	.long	5330                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1858:
	.cv_def_range	 .Ltmp550 .Ltmp551, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1852:
	.p2align	2
	.cv_linetable	145, "??$_Ptr_copy_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z", .Lfunc_end145
	.section	.debug$S,"dr",associative,"??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Copy_memmove<int *,int *>
	.long	.Ltmp1860-.Ltmp1859     # Subsection size
.Ltmp1859:
	.short	.Ltmp1862-.Ltmp1861     # Record length
.Ltmp1861:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end146-"??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5367                    # Function type index
	.secrel32	"??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z" # Function section relative address
	.secidx	"??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Copy_memmove<int *,int *>" # Function name
.Ltmp1862:
	.short	.Ltmp1864-.Ltmp1863     # Record length
.Ltmp1863:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1864:
	.cv_def_range	 .Ltmp552 .Ltmp553, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp1866-.Ltmp1865     # Record length
.Ltmp1865:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1866:
	.cv_def_range	 .Ltmp552 .Ltmp553, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp1868-.Ltmp1867     # Record length
.Ltmp1867:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp1868:
	.cv_def_range	 .Ltmp552 .Ltmp553, "E\021O\001\000\000`\000\000\000"
	.short	.Ltmp1870-.Ltmp1869     # Record length
.Ltmp1869:
	.short	4414                    # Record kind: S_LOCAL
	.long	4628                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_First_ch"
.Ltmp1870:
	.cv_def_range	 .Ltmp552 .Ltmp553, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp1872-.Ltmp1871     # Record length
.Ltmp1871:
	.short	4414                    # Record kind: S_LOCAL
	.long	4628                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Last_ch"
.Ltmp1872:
	.cv_def_range	 .Ltmp552 .Ltmp553, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp1874-.Ltmp1873     # Record length
.Ltmp1873:
	.short	4414                    # Record kind: S_LOCAL
	.long	4727                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Dest_ch"
.Ltmp1874:
	.cv_def_range	 .Ltmp552 .Ltmp553, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1876-.Ltmp1875     # Record length
.Ltmp1875:
	.short	4414                    # Record kind: S_LOCAL
	.long	4692                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Count"
.Ltmp1876:
	.cv_def_range	 .Ltmp552 .Ltmp553, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1860:
	.p2align	2
	.cv_linetable	146, "??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z", .Lfunc_end146
	.section	.debug$S,"dr",associative,"??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::copy_n<int *,long long,int *>
	.long	.Ltmp1878-.Ltmp1877     # Subsection size
.Ltmp1877:
	.short	.Ltmp1880-.Ltmp1879     # Record length
.Ltmp1879:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end147-"??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5370                    # Function type index
	.secrel32	"??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z" # Function section relative address
	.secidx	"??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::copy_n<int *,long long,int *>" # Function name
.Ltmp1880:
	.short	.Ltmp1882-.Ltmp1881     # Record length
.Ltmp1881:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1882:
	.cv_def_range	 .Ltmp554 .Ltmp557, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp1884-.Ltmp1883     # Record length
.Ltmp1883:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"_Count_raw"
.Ltmp1884:
	.cv_def_range	 .Ltmp554 .Ltmp557, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp1886-.Ltmp1885     # Record length
.Ltmp1885:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp1886:
	.cv_def_range	 .Ltmp554 .Ltmp557, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp1888-.Ltmp1887     # Record length
.Ltmp1887:
	.short	4414                    # Record kind: S_LOCAL
	.long	4099                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Count"
.Ltmp1888:
	.cv_def_range	 .Ltmp554 .Ltmp557, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1878:
	.p2align	2
	.cv_linetable	147, "??$copy_n@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z", .Lfunc_end147
	.section	.debug$S,"dr",associative,"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Seek_wrapped<int>
	.long	.Ltmp1890-.Ltmp1889     # Subsection size
.Ltmp1889:
	.short	.Ltmp1892-.Ltmp1891     # Record length
.Ltmp1891:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end148-"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5374                    # Function type index
	.secrel32	"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z" # Function section relative address
	.secidx	"??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Seek_wrapped<int>" # Function name
.Ltmp1892:
	.short	.Ltmp1894-.Ltmp1893     # Record length
.Ltmp1893:
	.short	4414                    # Record kind: S_LOCAL
	.long	5371                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_It"
.Ltmp1894:
	.cv_def_range	 .Ltmp558 .Ltmp559, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1896-.Ltmp1895     # Record length
.Ltmp1895:
	.short	4414                    # Record kind: S_LOCAL
	.long	4493                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_UIt"
.Ltmp1896:
	.cv_def_range	 .Ltmp558 .Ltmp559, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1890:
	.p2align	2
	.cv_linetable	148, "??$_Seek_wrapped@H@std@@YAXAEAPEAHQEAH@Z", .Lfunc_end148
	.section	.debug$S,"dr",associative,"??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Copy_n_unchecked3<int *,long long,int *>
	.long	.Ltmp1898-.Ltmp1897     # Subsection size
.Ltmp1897:
	.short	.Ltmp1900-.Ltmp1899     # Record length
.Ltmp1899:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end149-"??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5375                    # Function type index
	.secrel32	"??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z" # Function section relative address
	.secidx	"??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Copy_n_unchecked3<int *,long long,int *>" # Function name
.Ltmp1900:
	.short	.Ltmp1902-.Ltmp1901     # Record length
.Ltmp1901:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1902:
	.cv_def_range	 .Ltmp560 .Ltmp562, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp1904-.Ltmp1903     # Record length
.Ltmp1903:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"_Count"
.Ltmp1904:
	.cv_def_range	 .Ltmp560 .Ltmp562, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1906-.Ltmp1905     # Record length
.Ltmp1905:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp1906:
	.cv_def_range	 .Ltmp560 .Ltmp562, "E\021O\001\000\000H\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1898:
	.p2align	2
	.cv_linetable	149, "??$_Copy_n_unchecked3@PEAH_JPEAH@std@@YAPEAHPEAH_J0@Z", .Lfunc_end149
	.section	.debug$S,"dr",associative,"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Get_unwrapped_n<int,long long,0>
	.long	.Ltmp1908-.Ltmp1907     # Subsection size
.Ltmp1907:
	.short	.Ltmp1910-.Ltmp1909     # Record length
.Ltmp1909:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end150-"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5378                    # Function type index
	.secrel32	"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z" # Function section relative address
	.secidx	"??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Get_unwrapped_n<int,long long,0>" # Function name
.Ltmp1910:
	.short	.Ltmp1912-.Ltmp1911     # Record length
.Ltmp1911:
	.short	4414                    # Record kind: S_LOCAL
	.long	4493                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Src"
.Ltmp1912:
	.cv_def_range	 .Ltmp563 .Ltmp564, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp1914-.Ltmp1913     # Record length
.Ltmp1913:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1914:
	.cv_def_range	 .Ltmp563 .Ltmp564, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1908:
	.p2align	2
	.cv_linetable	150, "??$_Get_unwrapped_n@H_J$0A@@std@@YAPEAHQEAH_J@Z", .Lfunc_end150
	.section	.debug$S,"dr",associative,"??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Copy_n_unchecked4<int *,long long,int *>
	.long	.Ltmp1916-.Ltmp1915     # Subsection size
.Ltmp1915:
	.short	.Ltmp1918-.Ltmp1917     # Record length
.Ltmp1917:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end151-"??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5381                    # Function type index
	.secrel32	"??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z" # Function section relative address
	.secidx	"??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Copy_n_unchecked4<int *,long long,int *>" # Function name
.Ltmp1918:
	.short	.Ltmp1920-.Ltmp1919     # Record length
.Ltmp1919:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1920:
	.cv_def_range	 .Ltmp565 .Ltmp566, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1922-.Ltmp1921     # Record length
.Ltmp1921:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"_Count"
.Ltmp1922:
	.cv_def_range	 .Ltmp565 .Ltmp566, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1924-.Ltmp1923     # Record length
.Ltmp1923:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp1924:
	.cv_def_range	 .Ltmp565 .Ltmp566, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp1926-.Ltmp1925     # Record length
.Ltmp1925:
	.short	4414                    # Record kind: S_LOCAL
	.long	5356                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp1926:
	.cv_def_range	 .Ltmp565 .Ltmp566, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1916:
	.p2align	2
	.cv_linetable	151, "??$_Copy_n_unchecked4@PEAH_JPEAH@std@@YAPEAHPEAH_J0U_Trivially_copyable_ptr_iterator_tag@0@@Z", .Lfunc_end151
	.section	.debug$S,"dr",associative,"??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::ensure_z<const char>
	.long	.Ltmp1928-.Ltmp1927     # Subsection size
.Ltmp1927:
	.short	.Ltmp1930-.Ltmp1929     # Record length
.Ltmp1929:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end152-"??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5385                    # Function type index
	.secrel32	"??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z" # Function section relative address
	.secidx	"??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::ensure_z<const char>" # Function name
.Ltmp1930:
	.short	.Ltmp1932-.Ltmp1931     # Record length
.Ltmp1931:
	.short	4414                    # Record kind: S_LOCAL
	.long	5382                    # TypeIndex
	.short	1                       # Flags
	.asciz	"sz"
.Ltmp1932:
	.cv_def_range	 .Ltmp567 .Ltmp568, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1934-.Ltmp1933     # Record length
.Ltmp1933:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"max"
.Ltmp1934:
	.cv_def_range	 .Ltmp567 .Ltmp568, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1928:
	.p2align	2
	.cv_linetable	152, "??$ensure_z@$$CBD@gsl@@YA?AV?$span@$$CBD$0?0@0@AEBQEBD_J@Z", .Lfunc_end152
	.section	.debug$S,"dr",associative,"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::ensure_sentinel<const char,'\x00'>
	.long	.Ltmp1936-.Ltmp1935     # Subsection size
.Ltmp1935:
	.short	.Ltmp1938-.Ltmp1937     # Record length
.Ltmp1937:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end153-"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5387                    # Function type index
	.secrel32	"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z" # Function section relative address
	.secidx	"??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::ensure_sentinel<const char,'\\x00'>" # Function name
.Ltmp1938:
	.short	.Ltmp1940-.Ltmp1939     # Record length
.Ltmp1939:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"seq"
.Ltmp1940:
	.cv_def_range	 .Ltmp575 .Ltmp576, "E\021N\001\000\000X\000\000\000"
	.short	.Ltmp1942-.Ltmp1941     # Record length
.Ltmp1941:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"max"
.Ltmp1942:
	.cv_def_range	 .Ltmp575 .Ltmp576, "E\021N\001\000\000`\000\000\000"
	.short	.Ltmp1944-.Ltmp1943     # Record length
.Ltmp1943:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	0                       # Flags
	.asciz	"cur"
.Ltmp1944:
	.cv_def_range	 .Ltmp575 .Ltmp576, "E\021N\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1936:
	.p2align	2
	.cv_linetable	153, "??$ensure_sentinel@$$CBD$0A@@gsl@@YA?AV?$span@$$CBD$0?0@0@PEBD_J@Z", .Lfunc_end153
	.section	.debug$S,"dr",associative,"??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Adl_verify_range<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<const char,-1>,0> >
	.long	.Ltmp1946-.Ltmp1945     # Subsection size
.Ltmp1945:
	.short	.Ltmp1948-.Ltmp1947     # Record length
.Ltmp1947:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end154-"??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5391                    # Function type index
	.secrel32	"??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z" # Function section relative address
	.secidx	"??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Adl_verify_range<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<const char,-1>,0> >" # Function name
.Ltmp1948:
	.short	.Ltmp1950-.Ltmp1949     # Record length
.Ltmp1949:
	.short	4414                    # Record kind: S_LOCAL
	.long	5388                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1950:
	.cv_def_range	 .Ltmp577 .Ltmp578, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1952-.Ltmp1951     # Record length
.Ltmp1951:
	.short	4414                    # Record kind: S_LOCAL
	.long	5388                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1952:
	.cv_def_range	 .Ltmp577 .Ltmp578, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1946:
	.p2align	2
	.cv_linetable	154, "??$_Adl_verify_range@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0@Z", .Lfunc_end154
	.section	.debug$S,"dr",associative,"??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Get_unwrapped<gsl::details::span_iterator<gsl::span<const char,-1>,0>,0>
	.long	.Ltmp1954-.Ltmp1953     # Subsection size
.Ltmp1953:
	.short	.Ltmp1956-.Ltmp1955     # Record length
.Ltmp1955:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end155-"??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5394                    # Function type index
	.secrel32	"??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z" # Function section relative address
	.secidx	"??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Get_unwrapped<gsl::details::span_iterator<gsl::span<const char,-1>,0>,0>" # Function name
.Ltmp1956:
	.short	.Ltmp1958-.Ltmp1957     # Record length
.Ltmp1957:
	.short	4414                    # Record kind: S_LOCAL
	.long	5388                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_It"
.Ltmp1958:
	.cv_def_range	 .Ltmp579 .Ltmp580, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1954:
	.p2align	2
	.cv_linetable	155, "??$_Get_unwrapped@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@Z", .Lfunc_end155
	.section	.debug$S,"dr",associative,"??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Get_unwrapped_n<gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>,long long,0>
	.long	.Ltmp1960-.Ltmp1959     # Subsection size
.Ltmp1959:
	.short	.Ltmp1962-.Ltmp1961     # Record length
.Ltmp1961:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end156-"??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5398                    # Function type index
	.secrel32	"??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z" # Function section relative address
	.secidx	"??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Get_unwrapped_n<gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>,long long,0>" # Function name
.Ltmp1962:
	.short	.Ltmp1964-.Ltmp1963     # Record length
.Ltmp1963:
	.short	4414                    # Record kind: S_LOCAL
	.long	5395                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_It"
.Ltmp1964:
	.cv_def_range	 .Ltmp581 .Ltmp589, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp1966-.Ltmp1965     # Record length
.Ltmp1965:
	.short	4414                    # Record kind: S_LOCAL
	.long	4099                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Off"
.Ltmp1966:
	.cv_def_range	 .Ltmp581 .Ltmp589, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp1968-.Ltmp1967     # Record length
.Ltmp1967:
	.short	4414                    # Record kind: S_LOCAL
	.long	4099                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_COff"
.Ltmp1968:
	.cv_def_range	 .Ltmp581 .Ltmp589, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1960:
	.p2align	2
	.cv_linetable	156, "??$_Get_unwrapped_n@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J$0A@@std@@YA?A?<auto>@@AEBV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@_J@Z", .Lfunc_end156
	.section	.debug$S,"dr",associative,"??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Idl_distance<gsl::details::span_iterator<gsl::span<const char,-1>,0>,const char *>
	.long	.Ltmp1970-.Ltmp1969     # Subsection size
.Ltmp1969:
	.short	.Ltmp1972-.Ltmp1971     # Record length
.Ltmp1971:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end157-"??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5401                    # Function type index
	.secrel32	"??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z" # Function section relative address
	.secidx	"??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Idl_distance<gsl::details::span_iterator<gsl::span<const char,-1>,0>,const char *>" # Function name
.Ltmp1972:
	.short	.Ltmp1974-.Ltmp1973     # Record length
.Ltmp1973:
	.short	4414                    # Record kind: S_LOCAL
	.long	5382                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1974:
	.cv_def_range	 .Ltmp590 .Ltmp591, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1976-.Ltmp1975     # Record length
.Ltmp1975:
	.short	4414                    # Record kind: S_LOCAL
	.long	5382                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1976:
	.cv_def_range	 .Ltmp590 .Ltmp591, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1970:
	.p2align	2
	.cv_linetable	157, "??$_Idl_distance@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA?A?<auto>@@AEBQEBD0@Z", .Lfunc_end157
	.section	.debug$S,"dr",associative,"??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Seek_wrapped<gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>,unsigned char *,0>
	.long	.Ltmp1978-.Ltmp1977     # Subsection size
.Ltmp1977:
	.short	.Ltmp1980-.Ltmp1979     # Record length
.Ltmp1979:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end158-"??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5405                    # Function type index
	.secrel32	"??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z" # Function section relative address
	.secidx	"??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Seek_wrapped<gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>,unsigned char *,0>" # Function name
.Ltmp1980:
	.short	.Ltmp1982-.Ltmp1981     # Record length
.Ltmp1981:
	.short	4414                    # Record kind: S_LOCAL
	.long	4371                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_It"
.Ltmp1982:
	.cv_def_range	 .Ltmp592 .Ltmp593, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp1984-.Ltmp1983     # Record length
.Ltmp1983:
	.short	4414                    # Record kind: S_LOCAL
	.long	5402                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_UIt"
.Ltmp1984:
	.cv_def_range	 .Ltmp592 .Ltmp593, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1978:
	.p2align	2
	.cv_linetable	158, "??$_Seek_wrapped@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@PEAE$0A@@std@@YAXAEAV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@AEBQEAE@Z", .Lfunc_end158
	.section	.debug$S,"dr",associative,"??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Copy_unchecked<const char *,unsigned char *>
	.long	.Ltmp1986-.Ltmp1985     # Subsection size
.Ltmp1985:
	.short	.Ltmp1988-.Ltmp1987     # Record length
.Ltmp1987:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end159-"??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5408                    # Function type index
	.secrel32	"??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z" # Function section relative address
	.secidx	"??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Copy_unchecked<const char *,unsigned char *>" # Function name
.Ltmp1988:
	.short	.Ltmp1990-.Ltmp1989     # Record length
.Ltmp1989:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp1990:
	.cv_def_range	 .Ltmp594 .Ltmp596, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp1992-.Ltmp1991     # Record length
.Ltmp1991:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp1992:
	.cv_def_range	 .Ltmp594 .Ltmp596, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp1994-.Ltmp1993     # Record length
.Ltmp1993:
	.short	4414                    # Record kind: S_LOCAL
	.long	1568                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp1994:
	.cv_def_range	 .Ltmp594 .Ltmp596, "E\021O\001\000\000H\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1986:
	.p2align	2
	.cv_linetable	159, "??$_Copy_unchecked@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z", .Lfunc_end159
	.section	.debug$S,"dr",associative,"??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Adl_verify_range1<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<const char,-1>,0> >
	.long	.Ltmp1996-.Ltmp1995     # Subsection size
.Ltmp1995:
	.short	.Ltmp1998-.Ltmp1997     # Record length
.Ltmp1997:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end160-"??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5411                    # Function type index
	.secrel32	"??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z" # Function section relative address
	.secidx	"??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Adl_verify_range1<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<const char,-1>,0> >" # Function name
.Ltmp1998:
	.short	.Ltmp2000-.Ltmp1999     # Record length
.Ltmp1999:
	.short	4414                    # Record kind: S_LOCAL
	.long	5388                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp2000:
	.cv_def_range	 .Ltmp597 .Ltmp598, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp2002-.Ltmp2001     # Record length
.Ltmp2001:
	.short	4414                    # Record kind: S_LOCAL
	.long	5388                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp2002:
	.cv_def_range	 .Ltmp597 .Ltmp598, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp2004-.Ltmp2003     # Record length
.Ltmp2003:
	.short	4414                    # Record kind: S_LOCAL
	.long	4747                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp2004:
	.cv_def_range	 .Ltmp597 .Ltmp598, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp1996:
	.p2align	2
	.cv_linetable	160, "??$_Adl_verify_range1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@V123@@std@@YAXAEBV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@0U?$integral_constant@_N$00@0@@Z", .Lfunc_end160
	.section	.debug$S,"dr",associative,"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::_Verify_range
	.long	.Ltmp2006-.Ltmp2005     # Subsection size
.Ltmp2005:
	.short	.Ltmp2008-.Ltmp2007     # Record length
.Ltmp2007:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end161-"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5414                    # Function type index
	.secrel32	"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z" # Function section relative address
	.secidx	"?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::_Verify_range" # Function name
.Ltmp2008:
	.short	.Ltmp2010-.Ltmp2009     # Record length
.Ltmp2009:
	.short	4414                    # Record kind: S_LOCAL
	.long	4626                    # TypeIndex
	.short	1                       # Flags
	.asciz	"lhs"
.Ltmp2010:
	.cv_def_range	 .Lfunc_begin161 .Ltmp605, "A\021J\001\000\000"
	.cv_def_range	 .Ltmp605 .Ltmp614 .Ltmp615 .Ltmp616, "E\021N\001\000\000\310\377\377\377"
	.short	.Ltmp2012-.Ltmp2011     # Record length
.Ltmp2011:
	.short	4414                    # Record kind: S_LOCAL
	.long	4626                    # TypeIndex
	.short	1                       # Flags
	.asciz	"rhs"
.Ltmp2012:
	.cv_def_range	 .Lfunc_begin161 .Ltmp604, "A\021K\001\000\000"
	.cv_def_range	 .Ltmp604 .Ltmp614 .Ltmp615 .Ltmp616, "E\021N\001\000\000\320\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2006:
	.p2align	2
	.cv_linetable	161, "?_Verify_range@details@gsl@@YAXV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@12@0@Z", .Lfunc_end161
	.section	.debug$S,"dr",associative,"?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::span_iterator<gsl::span<const char,-1>,0>::_Unwrapped
	.long	.Ltmp2014-.Ltmp2013     # Subsection size
.Ltmp2013:
	.short	.Ltmp2016-.Ltmp2015     # Record length
.Ltmp2015:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end162-"?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5415                    # Function type index
	.secrel32	"?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ" # Function section relative address
	.secidx	"?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::span_iterator<gsl::span<const char,-1>,0>::_Unwrapped" # Function name
.Ltmp2016:
	.short	.Ltmp2018-.Ltmp2017     # Record length
.Ltmp2017:
	.short	4414                    # Record kind: S_LOCAL
	.long	4587                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp2018:
	.cv_def_range	 .Ltmp618 .Ltmp619, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2014:
	.p2align	2
	.cv_linetable	162, "?_Unwrapped@?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@QEBAPEBDXZ", .Lfunc_end162
	.section	.debug$S,"dr",associative,"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::_Verify_offset
	.long	.Ltmp2020-.Ltmp2019     # Subsection size
.Ltmp2019:
	.short	.Ltmp2022-.Ltmp2021     # Record length
.Ltmp2021:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end163-"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5416                    # Function type index
	.secrel32	"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z" # Function section relative address
	.secidx	"?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::_Verify_offset" # Function name
.Ltmp2022:
	.short	.Ltmp2024-.Ltmp2023     # Record length
.Ltmp2023:
	.short	4414                    # Record kind: S_LOCAL
	.long	4368                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp2024:
	.cv_def_range	 .Ltmp624 .Ltmp625, "E\021N\001\000\000\350\377\377\377"
	.short	.Ltmp2026-.Ltmp2025     # Record length
.Ltmp2025:
	.short	4414                    # Record kind: S_LOCAL
	.long	4099                    # TypeIndex
	.short	1                       # Flags
	.asciz	"n"
.Ltmp2026:
	.cv_def_range	 .Ltmp624 .Ltmp625, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2020:
	.p2align	2
	.cv_linetable	163, "?_Verify_offset@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAX_J@Z", .Lfunc_end163
	.section	.debug$S,"dr",associative,"?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::_Unwrapped
	.long	.Ltmp2028-.Ltmp2027     # Subsection size
.Ltmp2027:
	.short	.Ltmp2030-.Ltmp2029     # Record length
.Ltmp2029:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end164-"?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5417                    # Function type index
	.secrel32	"?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ" # Function section relative address
	.secidx	"?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::_Unwrapped" # Function name
.Ltmp2030:
	.short	.Ltmp2032-.Ltmp2031     # Record length
.Ltmp2031:
	.short	4414                    # Record kind: S_LOCAL
	.long	4368                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp2032:
	.cv_def_range	 .Ltmp626 .Ltmp627, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2028:
	.p2align	2
	.cv_linetable	164, "?_Unwrapped@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEBAPEAEXZ", .Lfunc_end164
	.section	.debug$S,"dr",associative,"?size@?$span@E$0?0@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<unsigned char,-1>::size
	.long	.Ltmp2034-.Ltmp2033     # Subsection size
.Ltmp2033:
	.short	.Ltmp2036-.Ltmp2035     # Record length
.Ltmp2035:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end165-"?size@?$span@E$0?0@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5418                    # Function type index
	.secrel32	"?size@?$span@E$0?0@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$span@E$0?0@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<unsigned char,-1>::size" # Function name
.Ltmp2036:
	.short	.Ltmp2038-.Ltmp2037     # Record length
.Ltmp2037:
	.short	4414                    # Record kind: S_LOCAL
	.long	4330                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp2038:
	.cv_def_range	 .Ltmp628 .Ltmp629, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2034:
	.p2align	2
	.cv_linetable	165, "?size@?$span@E$0?0@gsl@@QEBA_JXZ", .Lfunc_end165
	.section	.debug$S,"dr",associative,"??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Idl_distance1<gsl::details::span_iterator<gsl::span<const char,-1>,0>,const char *>
	.long	.Ltmp2040-.Ltmp2039     # Subsection size
.Ltmp2039:
	.short	.Ltmp2042-.Ltmp2041     # Record length
.Ltmp2041:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end166-"??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5421                    # Function type index
	.secrel32	"??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z" # Function section relative address
	.secidx	"??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Idl_distance1<gsl::details::span_iterator<gsl::span<const char,-1>,0>,const char *>" # Function name
.Ltmp2042:
	.short	.Ltmp2044-.Ltmp2043     # Record length
.Ltmp2043:
	.short	4414                    # Record kind: S_LOCAL
	.long	5382                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp2044:
	.cv_def_range	 .Ltmp630 .Ltmp631, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp2046-.Ltmp2045     # Record length
.Ltmp2045:
	.short	4414                    # Record kind: S_LOCAL
	.long	5382                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp2046:
	.cv_def_range	 .Ltmp630 .Ltmp631, "E\021O\001\000\000\b\000\000\000"
	.short	.Ltmp2048-.Ltmp2047     # Record length
.Ltmp2047:
	.short	4414                    # Record kind: S_LOCAL
	.long	4205                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp2048:
	.cv_def_range	 .Ltmp630 .Ltmp631, "E\021O\001\000\000\020\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2040:
	.p2align	2
	.cv_linetable	166, "??$_Idl_distance1@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@PEBD@std@@YA_JAEBQEBD0Urandom_access_iterator_tag@0@@Z", .Lfunc_end166
	.section	.debug$S,"dr",associative,"?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::_Seek_to
	.long	.Ltmp2050-.Ltmp2049     # Subsection size
.Ltmp2049:
	.short	.Ltmp2052-.Ltmp2051     # Record length
.Ltmp2051:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end167-"?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5422                    # Function type index
	.secrel32	"?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z" # Function section relative address
	.secidx	"?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::_Seek_to" # Function name
.Ltmp2052:
	.short	.Ltmp2054-.Ltmp2053     # Record length
.Ltmp2053:
	.short	4414                    # Record kind: S_LOCAL
	.long	4362                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp2054:
	.cv_def_range	 .Ltmp632 .Ltmp633, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp2056-.Ltmp2055     # Record length
.Ltmp2055:
	.short	4414                    # Record kind: S_LOCAL
	.long	4382                    # TypeIndex
	.short	1                       # Flags
	.asciz	"p"
.Ltmp2056:
	.cv_def_range	 .Ltmp632 .Ltmp633, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2050:
	.p2align	2
	.cv_linetable	167, "?_Seek_to@?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@QEAAXQEAE@Z", .Lfunc_end167
	.section	.debug$S,"dr",associative,"??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Copy_unchecked1<const char *,unsigned char *>
	.long	.Ltmp2058-.Ltmp2057     # Subsection size
.Ltmp2057:
	.short	.Ltmp2060-.Ltmp2059     # Record length
.Ltmp2059:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end168-"??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5425                    # Function type index
	.secrel32	"??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z" # Function section relative address
	.secidx	"??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Copy_unchecked1<const char *,unsigned char *>" # Function name
.Ltmp2060:
	.short	.Ltmp2062-.Ltmp2061     # Record length
.Ltmp2061:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp2062:
	.cv_def_range	 .Ltmp634 .Ltmp635, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp2064-.Ltmp2063     # Record length
.Ltmp2063:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp2064:
	.cv_def_range	 .Ltmp634 .Ltmp635, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp2066-.Ltmp2065     # Record length
.Ltmp2065:
	.short	4414                    # Record kind: S_LOCAL
	.long	1568                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp2066:
	.cv_def_range	 .Ltmp634 .Ltmp635, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp2068-.Ltmp2067     # Record length
.Ltmp2067:
	.short	4414                    # Record kind: S_LOCAL
	.long	5356                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp2068:
	.cv_def_range	 .Ltmp634 .Ltmp635, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2058:
	.p2align	2
	.cv_linetable	168, "??$_Copy_unchecked1@PEBDPEAE@std@@YAPEAEPEBD0PEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z", .Lfunc_end168
	.section	.debug$S,"dr",associative,"??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Ptr_copy_cat<const char,unsigned char>
	.long	.Ltmp2070-.Ltmp2069     # Subsection size
.Ltmp2069:
	.short	.Ltmp2072-.Ltmp2071     # Record length
.Ltmp2071:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end169-"??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5428                    # Function type index
	.secrel32	"??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z" # Function section relative address
	.secidx	"??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Ptr_copy_cat<const char,unsigned char>" # Function name
.Ltmp2072:
	.short	.Ltmp2074-.Ltmp2073     # Record length
.Ltmp2073:
	.short	4414                    # Record kind: S_LOCAL
	.long	5382                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp2074:
	.cv_def_range	 .Ltmp636 .Ltmp637, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp2076-.Ltmp2075     # Record length
.Ltmp2075:
	.short	4414                    # Record kind: S_LOCAL
	.long	5402                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp2076:
	.cv_def_range	 .Ltmp636 .Ltmp637, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2070:
	.p2align	2
	.cv_linetable	169, "??$_Ptr_copy_cat@$$CBDE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEBDAEBQEAE@Z", .Lfunc_end169
	.section	.debug$S,"dr",associative,"??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Copy_memmove<const char *,unsigned char *>
	.long	.Ltmp2078-.Ltmp2077     # Subsection size
.Ltmp2077:
	.short	.Ltmp2080-.Ltmp2079     # Record length
.Ltmp2079:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end170-"??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5429                    # Function type index
	.secrel32	"??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z" # Function section relative address
	.secidx	"??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Copy_memmove<const char *,unsigned char *>" # Function name
.Ltmp2080:
	.short	.Ltmp2082-.Ltmp2081     # Record length
.Ltmp2081:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp2082:
	.cv_def_range	 .Ltmp638 .Ltmp639, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp2084-.Ltmp2083     # Record length
.Ltmp2083:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Last"
.Ltmp2084:
	.cv_def_range	 .Ltmp638 .Ltmp639, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp2086-.Ltmp2085     # Record length
.Ltmp2085:
	.short	4414                    # Record kind: S_LOCAL
	.long	1568                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp2086:
	.cv_def_range	 .Ltmp638 .Ltmp639, "E\021O\001\000\000`\000\000\000"
	.short	.Ltmp2088-.Ltmp2087     # Record length
.Ltmp2087:
	.short	4414                    # Record kind: S_LOCAL
	.long	4628                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_First_ch"
.Ltmp2088:
	.cv_def_range	 .Ltmp638 .Ltmp639, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp2090-.Ltmp2089     # Record length
.Ltmp2089:
	.short	4414                    # Record kind: S_LOCAL
	.long	4628                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Last_ch"
.Ltmp2090:
	.cv_def_range	 .Ltmp638 .Ltmp639, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp2092-.Ltmp2091     # Record length
.Ltmp2091:
	.short	4414                    # Record kind: S_LOCAL
	.long	4727                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Dest_ch"
.Ltmp2092:
	.cv_def_range	 .Ltmp638 .Ltmp639, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp2094-.Ltmp2093     # Record length
.Ltmp2093:
	.short	4414                    # Record kind: S_LOCAL
	.long	4692                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Count"
.Ltmp2094:
	.cv_def_range	 .Ltmp638 .Ltmp639, "E\021O\001\000\0000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2078:
	.p2align	2
	.cv_linetable	170, "??$_Copy_memmove@PEBDPEAE@std@@YAPEAEPEBD0PEAE@Z", .Lfunc_end170
	.section	.debug$S,"dr",associative,"??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::copy_n<const char *,long long,unsigned char *>
	.long	.Ltmp2096-.Ltmp2095     # Subsection size
.Ltmp2095:
	.short	.Ltmp2098-.Ltmp2097     # Record length
.Ltmp2097:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end171-"??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5432                    # Function type index
	.secrel32	"??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z" # Function section relative address
	.secidx	"??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::copy_n<const char *,long long,unsigned char *>" # Function name
.Ltmp2098:
	.short	.Ltmp2100-.Ltmp2099     # Record length
.Ltmp2099:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp2100:
	.cv_def_range	 .Ltmp640 .Ltmp643, "E\021O\001\000\000H\000\000\000"
	.short	.Ltmp2102-.Ltmp2101     # Record length
.Ltmp2101:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"_Count_raw"
.Ltmp2102:
	.cv_def_range	 .Ltmp640 .Ltmp643, "E\021O\001\000\000P\000\000\000"
	.short	.Ltmp2104-.Ltmp2103     # Record length
.Ltmp2103:
	.short	4414                    # Record kind: S_LOCAL
	.long	1568                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp2104:
	.cv_def_range	 .Ltmp640 .Ltmp643, "E\021O\001\000\000X\000\000\000"
	.short	.Ltmp2106-.Ltmp2105     # Record length
.Ltmp2105:
	.short	4414                    # Record kind: S_LOCAL
	.long	4099                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_Count"
.Ltmp2106:
	.cv_def_range	 .Ltmp640 .Ltmp643, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2096:
	.p2align	2
	.cv_linetable	171, "??$copy_n@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z", .Lfunc_end171
	.section	.debug$S,"dr",associative,"??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Seek_wrapped<unsigned char>
	.long	.Ltmp2108-.Ltmp2107     # Subsection size
.Ltmp2107:
	.short	.Ltmp2110-.Ltmp2109     # Record length
.Ltmp2109:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end172-"??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5436                    # Function type index
	.secrel32	"??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z" # Function section relative address
	.secidx	"??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Seek_wrapped<unsigned char>" # Function name
.Ltmp2110:
	.short	.Ltmp2112-.Ltmp2111     # Record length
.Ltmp2111:
	.short	4414                    # Record kind: S_LOCAL
	.long	5433                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_It"
.Ltmp2112:
	.cv_def_range	 .Ltmp644 .Ltmp645, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp2114-.Ltmp2113     # Record length
.Ltmp2113:
	.short	4414                    # Record kind: S_LOCAL
	.long	4629                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_UIt"
.Ltmp2114:
	.cv_def_range	 .Ltmp644 .Ltmp645, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2108:
	.p2align	2
	.cv_linetable	172, "??$_Seek_wrapped@E@std@@YAXAEAPEAEQEAE@Z", .Lfunc_end172
	.section	.debug$S,"dr",associative,"??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Copy_n_unchecked3<const char *,long long,unsigned char *>
	.long	.Ltmp2116-.Ltmp2115     # Subsection size
.Ltmp2115:
	.short	.Ltmp2118-.Ltmp2117     # Record length
.Ltmp2117:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end173-"??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5437                    # Function type index
	.secrel32	"??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z" # Function section relative address
	.secidx	"??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Copy_n_unchecked3<const char *,long long,unsigned char *>" # Function name
.Ltmp2118:
	.short	.Ltmp2120-.Ltmp2119     # Record length
.Ltmp2119:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp2120:
	.cv_def_range	 .Ltmp646 .Ltmp648, "E\021O\001\000\000@\000\000\000"
	.short	.Ltmp2122-.Ltmp2121     # Record length
.Ltmp2121:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"_Count"
.Ltmp2122:
	.cv_def_range	 .Ltmp646 .Ltmp648, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp2124-.Ltmp2123     # Record length
.Ltmp2123:
	.short	4414                    # Record kind: S_LOCAL
	.long	1568                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp2124:
	.cv_def_range	 .Ltmp646 .Ltmp648, "E\021O\001\000\000H\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2116:
	.p2align	2
	.cv_linetable	173, "??$_Copy_n_unchecked3@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAE@Z", .Lfunc_end173
	.section	.debug$S,"dr",associative,"??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Get_unwrapped_n<unsigned char,long long,0>
	.long	.Ltmp2126-.Ltmp2125     # Subsection size
.Ltmp2125:
	.short	.Ltmp2128-.Ltmp2127     # Record length
.Ltmp2127:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end174-"??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5440                    # Function type index
	.secrel32	"??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z" # Function section relative address
	.secidx	"??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Get_unwrapped_n<unsigned char,long long,0>" # Function name
.Ltmp2128:
	.short	.Ltmp2130-.Ltmp2129     # Record length
.Ltmp2129:
	.short	4414                    # Record kind: S_LOCAL
	.long	4629                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Src"
.Ltmp2130:
	.cv_def_range	 .Ltmp649 .Ltmp650, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp2132-.Ltmp2131     # Record length
.Ltmp2131:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp2132:
	.cv_def_range	 .Ltmp649 .Ltmp650, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2126:
	.p2align	2
	.cv_linetable	174, "??$_Get_unwrapped_n@E_J$0A@@std@@YAPEAEQEAE_J@Z", .Lfunc_end174
	.section	.debug$S,"dr",associative,"??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Get_unwrapped_n<const char,long long,0>
	.long	.Ltmp2134-.Ltmp2133     # Subsection size
.Ltmp2133:
	.short	.Ltmp2136-.Ltmp2135     # Record length
.Ltmp2135:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end175-"??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5443                    # Function type index
	.secrel32	"??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z" # Function section relative address
	.secidx	"??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Get_unwrapped_n<const char,long long,0>" # Function name
.Ltmp2136:
	.short	.Ltmp2138-.Ltmp2137     # Record length
.Ltmp2137:
	.short	4414                    # Record kind: S_LOCAL
	.long	4628                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Src"
.Ltmp2138:
	.cv_def_range	 .Ltmp651 .Ltmp652, "E\021O\001\000\000\000\000\000\000"
	.short	.Ltmp2140-.Ltmp2139     # Record length
.Ltmp2139:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp2140:
	.cv_def_range	 .Ltmp651 .Ltmp652, "E\021O\001\000\000\b\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2134:
	.p2align	2
	.cv_linetable	175, "??$_Get_unwrapped_n@$$CBD_J$0A@@std@@YAPEBDQEBD_J@Z", .Lfunc_end175
	.section	.debug$S,"dr",associative,"??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::_Copy_n_unchecked4<const char *,long long,unsigned char *>
	.long	.Ltmp2142-.Ltmp2141     # Subsection size
.Ltmp2141:
	.short	.Ltmp2144-.Ltmp2143     # Record length
.Ltmp2143:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end176-"??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	5446                    # Function type index
	.secrel32	"??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z" # Function section relative address
	.secidx	"??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::_Copy_n_unchecked4<const char *,long long,unsigned char *>" # Function name
.Ltmp2144:
	.short	.Ltmp2146-.Ltmp2145     # Record length
.Ltmp2145:
	.short	4414                    # Record kind: S_LOCAL
	.long	4508                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_First"
.Ltmp2146:
	.cv_def_range	 .Ltmp653 .Ltmp654, "E\021O\001\000\000(\000\000\000"
	.short	.Ltmp2148-.Ltmp2147     # Record length
.Ltmp2147:
	.short	4414                    # Record kind: S_LOCAL
	.long	19                      # TypeIndex
	.short	1                       # Flags
	.asciz	"_Count"
.Ltmp2148:
	.cv_def_range	 .Ltmp653 .Ltmp654, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp2150-.Ltmp2149     # Record length
.Ltmp2149:
	.short	4414                    # Record kind: S_LOCAL
	.long	1568                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Dest"
.Ltmp2150:
	.cv_def_range	 .Ltmp653 .Ltmp654, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp2152-.Ltmp2151     # Record length
.Ltmp2151:
	.short	4414                    # Record kind: S_LOCAL
	.long	5356                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp2152:
	.cv_def_range	 .Ltmp653 .Ltmp654, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp2142:
	.p2align	2
	.cv_linetable	176, "??$_Copy_n_unchecked4@PEBD_JPEAE@std@@YAPEAEPEBD_JPEAEU_Trivially_copyable_ptr_iterator_tag@0@@Z", .Lfunc_end176
	.section	.debug$S,"dr"
	.long	241
	.long	.Ltmp2154-.Ltmp2153     # Subsection size
.Ltmp2153:
	.short	.Ltmp2156-.Ltmp2155     # Record length
.Ltmp2155:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"ptrdiff_t"
.Ltmp2156:
	.short	.Ltmp2158-.Ltmp2157     # Record length
.Ltmp2157:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"index_type"
.Ltmp2158:
	.short	.Ltmp2160-.Ltmp2159     # Record length
.Ltmp2159:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"std::remove_cv_t<int>"
.Ltmp2160:
	.short	.Ltmp2162-.Ltmp2161     # Record length
.Ltmp2161:
	.short	4360                    # Record kind: S_UDT
	.long	4149                    # Type
	.asciz	"gsl::span<int,-1>"
.Ltmp2162:
	.short	.Ltmp2164-.Ltmp2163     # Record length
.Ltmp2163:
	.short	4360                    # Record kind: S_UDT
	.long	4157                    # Type
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >"
.Ltmp2164:
	.short	.Ltmp2166-.Ltmp2165     # Record length
.Ltmp2165:
	.short	4360                    # Record kind: S_UDT
	.long	4160                    # Type
	.asciz	"gsl::span<int,-1>::KnownNotNull"
.Ltmp2166:
	.short	.Ltmp2168-.Ltmp2167     # Record length
.Ltmp2167:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"std::conditional_t<false,const gsl::details::span_iterator<gsl::span<int,-1>,0>::element_type_,gsl::details::span_iterator<gsl::span<int,-1>,0>::element_type_>"
.Ltmp2168:
	.short	.Ltmp2170-.Ltmp2169     # Record length
.Ltmp2169:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"std::remove_reference_t<int &>"
.Ltmp2170:
	.short	.Ltmp2172-.Ltmp2171     # Record length
.Ltmp2171:
	.short	4360                    # Record kind: S_UDT
	.long	1652                    # Type
	.asciz	"std::add_pointer_t<gsl::details::span_iterator<gsl::span<int,-1>,0>::reference>"
.Ltmp2172:
	.short	.Ltmp2174-.Ltmp2173     # Record length
.Ltmp2173:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"std::remove_cv_t<gsl::details::span_iterator<gsl::span<int,-1>,0>::element_type_>"
.Ltmp2174:
	.short	.Ltmp2176-.Ltmp2175     # Record length
.Ltmp2175:
	.short	4360                    # Record kind: S_UDT
	.long	4190                    # Type
	.asciz	"gsl::details::span_iterator<gsl::span<int,-1>,0>"
.Ltmp2176:
	.short	.Ltmp2178-.Ltmp2177     # Record length
.Ltmp2177:
	.short	4360                    # Record kind: S_UDT
	.long	4193                    # Type
	.asciz	"gsl::span<int,-1>::subspan_selector<-1>"
.Ltmp2178:
	.short	.Ltmp2180-.Ltmp2179     # Record length
.Ltmp2179:
	.short	4360                    # Record kind: S_UDT
	.long	4201                    # Type
	.asciz	"gsl::details::extent_type<-1>"
.Ltmp2180:
	.short	.Ltmp2182-.Ltmp2181     # Record length
.Ltmp2181:
	.short	4360                    # Record kind: S_UDT
	.long	4205                    # Type
	.asciz	"std::random_access_iterator_tag"
.Ltmp2182:
	.short	.Ltmp2184-.Ltmp2183     # Record length
.Ltmp2183:
	.short	4360                    # Record kind: S_UDT
	.long	4210                    # Type
	.asciz	"std::bidirectional_iterator_tag"
.Ltmp2184:
	.short	.Ltmp2186-.Ltmp2185     # Record length
.Ltmp2185:
	.short	4360                    # Record kind: S_UDT
	.long	4214                    # Type
	.asciz	"std::forward_iterator_tag"
.Ltmp2186:
	.short	.Ltmp2188-.Ltmp2187     # Record length
.Ltmp2187:
	.short	4360                    # Record kind: S_UDT
	.long	4216                    # Type
	.asciz	"std::input_iterator_tag"
.Ltmp2188:
	.short	.Ltmp2190-.Ltmp2189     # Record length
.Ltmp2189:
	.short	4360                    # Record kind: S_UDT
	.long	4242                    # Type
	.asciz	"IDE_DRIVE_STATE"
.Ltmp2190:
	.short	.Ltmp2192-.Ltmp2191     # Record length
.Ltmp2191:
	.short	4360                    # Record kind: S_UDT
	.long	32                      # Type
	.asciz	"UINT8"
.Ltmp2192:
	.short	.Ltmp2194-.Ltmp2193     # Record length
.Ltmp2193:
	.short	4360                    # Record kind: S_UDT
	.long	4247                    # Type
	.asciz	"IDE_DRIVE_SAVED_STATE"
.Ltmp2194:
	.short	.Ltmp2196-.Ltmp2195     # Record length
.Ltmp2195:
	.short	4360                    # Record kind: S_UDT
	.long	33                      # Type
	.asciz	"std::remove_cv_t<unsigned short>"
.Ltmp2196:
	.short	.Ltmp2198-.Ltmp2197     # Record length
.Ltmp2197:
	.short	4360                    # Record kind: S_UDT
	.long	4295                    # Type
	.asciz	"gsl::span<unsigned short,-1>"
.Ltmp2198:
	.short	.Ltmp2200-.Ltmp2199     # Record length
.Ltmp2199:
	.short	4360                    # Record kind: S_UDT
	.long	4301                    # Type
	.asciz	"gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >"
.Ltmp2200:
	.short	.Ltmp2202-.Ltmp2201     # Record length
.Ltmp2201:
	.short	4360                    # Record kind: S_UDT
	.long	32                      # Type
	.asciz	"std::remove_cv_t<unsigned char>"
.Ltmp2202:
	.short	.Ltmp2204-.Ltmp2203     # Record length
.Ltmp2203:
	.short	4360                    # Record kind: S_UDT
	.long	4351                    # Type
	.asciz	"gsl::span<unsigned char,-1>"
.Ltmp2204:
	.short	.Ltmp2206-.Ltmp2205     # Record length
.Ltmp2205:
	.short	4360                    # Record kind: S_UDT
	.long	4357                    # Type
	.asciz	"gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >"
.Ltmp2206:
	.short	.Ltmp2208-.Ltmp2207     # Record length
.Ltmp2207:
	.short	4360                    # Record kind: S_UDT
	.long	4360                    # Type
	.asciz	"gsl::span<unsigned char,-1>::KnownNotNull"
.Ltmp2208:
	.short	.Ltmp2210-.Ltmp2209     # Record length
.Ltmp2209:
	.short	4360                    # Record kind: S_UDT
	.long	32                      # Type
	.asciz	"std::conditional_t<false,const gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::element_type_,gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::element_type_>"
.Ltmp2210:
	.short	.Ltmp2212-.Ltmp2211     # Record length
.Ltmp2211:
	.short	4360                    # Record kind: S_UDT
	.long	32                      # Type
	.asciz	"std::remove_reference_t<unsigned char &>"
.Ltmp2212:
	.short	.Ltmp2214-.Ltmp2213     # Record length
.Ltmp2213:
	.short	4360                    # Record kind: S_UDT
	.long	1568                    # Type
	.asciz	"std::add_pointer_t<gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::reference>"
.Ltmp2214:
	.short	.Ltmp2216-.Ltmp2215     # Record length
.Ltmp2215:
	.short	4360                    # Record kind: S_UDT
	.long	32                      # Type
	.asciz	"std::remove_cv_t<gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::element_type_>"
.Ltmp2216:
	.short	.Ltmp2218-.Ltmp2217     # Record length
.Ltmp2217:
	.short	4360                    # Record kind: S_UDT
	.long	4386                    # Type
	.asciz	"gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>"
.Ltmp2218:
	.short	.Ltmp2220-.Ltmp2219     # Record length
.Ltmp2219:
	.short	4360                    # Record kind: S_UDT
	.long	4440                    # Type
	.asciz	"gsl::span<int,6>"
.Ltmp2220:
	.short	.Ltmp2222-.Ltmp2221     # Record length
.Ltmp2221:
	.short	4360                    # Record kind: S_UDT
	.long	4447                    # Type
	.asciz	"gsl::span<int,6>::storage_type<gsl::details::extent_type<6> >"
.Ltmp2222:
	.short	.Ltmp2224-.Ltmp2223     # Record length
.Ltmp2223:
	.short	4360                    # Record kind: S_UDT
	.long	4449                    # Type
	.asciz	"gsl::span<int,6>::KnownNotNull"
.Ltmp2224:
	.short	.Ltmp2226-.Ltmp2225     # Record length
.Ltmp2225:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"index_type"
.Ltmp2226:
	.short	.Ltmp2228-.Ltmp2227     # Record length
.Ltmp2227:
	.short	4360                    # Record kind: S_UDT
	.long	4459                    # Type
	.asciz	"gsl::details::extent_type<6>"
.Ltmp2228:
	.short	.Ltmp2230-.Ltmp2229     # Record length
.Ltmp2229:
	.short	4360                    # Record kind: S_UDT
	.long	32                      # Type
	.asciz	"uint8_t"
.Ltmp2230:
	.short	.Ltmp2232-.Ltmp2231     # Record length
.Ltmp2231:
	.short	4360                    # Record kind: S_UDT
	.long	4499                    # Type
	.asciz	"gsl::cstring_span<>"
.Ltmp2232:
	.short	.Ltmp2234-.Ltmp2233     # Record length
.Ltmp2233:
	.short	4360                    # Record kind: S_UDT
	.long	4507                    # Type
	.asciz	"std::remove_reference_t<const char>"
.Ltmp2234:
	.short	.Ltmp2236-.Ltmp2235     # Record length
.Ltmp2235:
	.short	4360                    # Record kind: S_UDT
	.long	4508                    # Type
	.asciz	"std::add_pointer_t<gsl::basic_string_span<const char,-1>::element_type>"
.Ltmp2236:
	.short	.Ltmp2238-.Ltmp2237     # Record length
.Ltmp2237:
	.short	4360                    # Record kind: S_UDT
	.long	4519                    # Type
	.asciz	"std::add_lvalue_reference_t<gsl::basic_string_span<const char,-1>::element_type>"
.Ltmp2238:
	.short	.Ltmp2240-.Ltmp2239     # Record length
.Ltmp2239:
	.short	4360                    # Record kind: S_UDT
	.long	4519                    # Type
	.asciz	"std::add_lvalue_reference_t<std::add_const_t<element_type> >"
.Ltmp2240:
	.short	.Ltmp2242-.Ltmp2241     # Record length
.Ltmp2241:
	.short	4360                    # Record kind: S_UDT
	.long	4537                    # Type
	.asciz	"gsl::basic_string_span<const char,-1>"
.Ltmp2242:
	.short	.Ltmp2244-.Ltmp2243     # Record length
.Ltmp2243:
	.short	4360                    # Record kind: S_UDT
	.long	112                     # Type
	.asciz	"std::remove_cv_t<const char>"
.Ltmp2244:
	.short	.Ltmp2246-.Ltmp2245     # Record length
.Ltmp2245:
	.short	4360                    # Record kind: S_UDT
	.long	4579                    # Type
	.asciz	"gsl::span<const char,-1>"
.Ltmp2246:
	.short	.Ltmp2248-.Ltmp2247     # Record length
.Ltmp2247:
	.short	4360                    # Record kind: S_UDT
	.long	4507                    # Type
	.asciz	"std::conditional_t<false,const gsl::details::span_iterator<gsl::span<const char,-1>,0>::element_type_,gsl::details::span_iterator<gsl::span<const char,-1>,0>::element_type_>"
.Ltmp2248:
	.short	.Ltmp2250-.Ltmp2249     # Record length
.Ltmp2249:
	.short	4360                    # Record kind: S_UDT
	.long	4507                    # Type
	.asciz	"std::remove_reference_t<const char &>"
.Ltmp2250:
	.short	.Ltmp2252-.Ltmp2251     # Record length
.Ltmp2251:
	.short	4360                    # Record kind: S_UDT
	.long	4508                    # Type
	.asciz	"std::add_pointer_t<gsl::details::span_iterator<gsl::span<const char,-1>,0>::reference>"
.Ltmp2252:
	.short	.Ltmp2254-.Ltmp2253     # Record length
.Ltmp2253:
	.short	4360                    # Record kind: S_UDT
	.long	112                     # Type
	.asciz	"std::remove_cv_t<gsl::details::span_iterator<gsl::span<const char,-1>,0>::element_type_>"
.Ltmp2254:
	.short	.Ltmp2256-.Ltmp2255     # Record length
.Ltmp2255:
	.short	4360                    # Record kind: S_UDT
	.long	4604                    # Type
	.asciz	"gsl::details::span_iterator<gsl::span<const char,-1>,0>"
.Ltmp2256:
	.short	.Ltmp2258-.Ltmp2257     # Record length
.Ltmp2257:
	.short	4360                    # Record kind: S_UDT
	.long	4610                    # Type
	.asciz	"gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >"
.Ltmp2258:
	.short	.Ltmp2260-.Ltmp2259     # Record length
.Ltmp2259:
	.short	4360                    # Record kind: S_UDT
	.long	4654                    # Type
	.asciz	"gsl::fail_fast"
.Ltmp2260:
	.short	.Ltmp2262-.Ltmp2261     # Record length
.Ltmp2261:
	.short	4360                    # Record kind: S_UDT
	.long	4659                    # Type
	.asciz	"std::string"
.Ltmp2262:
	.short	.Ltmp2264-.Ltmp2263     # Record length
.Ltmp2263:
	.short	4360                    # Record kind: S_UDT
	.long	4668                    # Type
	.asciz	"std::logic_error"
.Ltmp2264:
	.short	.Ltmp2266-.Ltmp2265     # Record length
.Ltmp2265:
	.short	4360                    # Record kind: S_UDT
	.long	4688                    # Type
	.asciz	"std::exception"
.Ltmp2266:
	.short	.Ltmp2268-.Ltmp2267     # Record length
.Ltmp2267:
	.short	4360                    # Record kind: S_UDT
	.long	35                      # Type
	.asciz	"size_t"
.Ltmp2268:
	.short	.Ltmp2270-.Ltmp2269     # Record length
.Ltmp2269:
	.short	4360                    # Record kind: S_UDT
	.long	4747                    # Type
	.asciz	"std::bool_constant<true>"
.Ltmp2270:
	.short	.Ltmp2272-.Ltmp2271     # Record length
.Ltmp2271:
	.short	4360                    # Record kind: S_UDT
	.long	4747                    # Type
	.asciz	"std::true_type"
.Ltmp2272:
	.short	.Ltmp2274-.Ltmp2273     # Record length
.Ltmp2273:
	.short	4360                    # Record kind: S_UDT
	.long	4750                    # Type
	.asciz	"std::bool_constant<false>"
.Ltmp2274:
	.short	.Ltmp2276-.Ltmp2275     # Record length
.Ltmp2275:
	.short	4360                    # Record kind: S_UDT
	.long	4750                    # Type
	.asciz	"std::false_type"
.Ltmp2276:
	.short	.Ltmp2278-.Ltmp2277     # Record length
.Ltmp2277:
	.short	4360                    # Record kind: S_UDT
	.long	4695                    # Type
	.asciz	"std::_Rebind_alloc_t<std::allocator<char>,char>"
.Ltmp2278:
	.short	.Ltmp2280-.Ltmp2279     # Record length
.Ltmp2279:
	.short	4360                    # Record kind: S_UDT
	.long	4747                    # Type
	.asciz	"std::bool_constant<_Is_specialization_v<std::char_traits<char>,char_traits> && is_trivial_v<std::basic_string<char,std::char_traits<char>,std::allocator<char> >::pointer> >"
.Ltmp2280:
	.short	.Ltmp2282-.Ltmp2281     # Record length
.Ltmp2281:
	.short	4360                    # Record kind: S_UDT
	.long	4882                    # Type
	.asciz	"std::basic_string<char,std::char_traits<char>,std::allocator<char> >"
.Ltmp2282:
	.short	.Ltmp2284-.Ltmp2283     # Record length
.Ltmp2283:
	.short	4360                    # Record kind: S_UDT
	.long	4886                    # Type
	.asciz	"__std_exception_data"
.Ltmp2284:
	.short	.Ltmp2286-.Ltmp2285     # Record length
.Ltmp2285:
	.short	4360                    # Record kind: S_UDT
	.long	4920                    # Type
	.asciz	"std::_Rebind_alloc_t<std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alty,std::_Container_proxy>"
.Ltmp2286:
	.short	.Ltmp2288-.Ltmp2287     # Record length
.Ltmp2287:
	.short	4360                    # Record kind: S_UDT
	.long	4922                    # Type
	.asciz	"std::conditional_t<_Is_simple_alloc_v<std::_String_base_types<char,std::allocator<char> >::_Alty>,_Simple_types<char>,_String_iter_types<char,typename _Alty_traits::size_type,typename _Alty_traits::difference_type,typename _Alty_traits::pointer,typename _Alty_traits::const_pointer,char &,const char &> >"
.Ltmp2288:
	.short	.Ltmp2290-.Ltmp2289     # Record length
.Ltmp2289:
	.short	4360                    # Record kind: S_UDT
	.long	4931                    # Type
	.asciz	"std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >"
.Ltmp2290:
	.short	.Ltmp2292-.Ltmp2291     # Record length
.Ltmp2291:
	.short	4360                    # Record kind: S_UDT
	.long	4953                    # Type
	.asciz	"std::allocator<char>"
.Ltmp2292:
	.short	.Ltmp2294-.Ltmp2293     # Record length
.Ltmp2293:
	.short	4360                    # Record kind: S_UDT
	.long	4960                    # Type
	.asciz	"std::integral_constant<bool,1>"
.Ltmp2294:
	.short	.Ltmp2296-.Ltmp2295     # Record length
.Ltmp2295:
	.short	4360                    # Record kind: S_UDT
	.long	4967                    # Type
	.asciz	"std::integral_constant<bool,0>"
.Ltmp2296:
	.short	.Ltmp2298-.Ltmp2297     # Record length
.Ltmp2297:
	.short	4360                    # Record kind: S_UDT
	.long	4969                    # Type
	.asciz	"std::_Container_base"
.Ltmp2298:
	.short	.Ltmp2300-.Ltmp2299     # Record length
.Ltmp2299:
	.short	4360                    # Record kind: S_UDT
	.long	4985                    # Type
	.asciz	"std::_String_val<std::_Simple_types<char> >"
.Ltmp2300:
	.short	.Ltmp2302-.Ltmp2301     # Record length
.Ltmp2301:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::streamoff"
.Ltmp2302:
	.short	.Ltmp2304-.Ltmp2303     # Record length
.Ltmp2303:
	.short	4360                    # Record kind: S_UDT
	.long	5013                    # Type
	.asciz	"_Mbstatet"
.Ltmp2304:
	.short	.Ltmp2306-.Ltmp2305     # Record length
.Ltmp2305:
	.short	4360                    # Record kind: S_UDT
	.long	5013                    # Type
	.asciz	"mbstate_t"
.Ltmp2306:
	.short	.Ltmp2308-.Ltmp2307     # Record length
.Ltmp2307:
	.short	4360                    # Record kind: S_UDT
	.long	5013                    # Type
	.asciz	"_Mbstatet"
.Ltmp2308:
	.short	.Ltmp2310-.Ltmp2309     # Record length
.Ltmp2309:
	.short	4360                    # Record kind: S_UDT
	.long	5015                    # Type
	.asciz	"std::char_traits<char>"
.Ltmp2310:
	.short	.Ltmp2312-.Ltmp2311     # Record length
.Ltmp2311:
	.short	4360                    # Record kind: S_UDT
	.long	5018                    # Type
	.asciz	"std::conditional_t<_Is_default_allocator<allocator<char> >::value,_Default_allocator_traits<std::allocator<char> >,_Normal_allocator_traits<std::allocator<char> > >"
.Ltmp2312:
	.short	.Ltmp2314-.Ltmp2313     # Record length
.Ltmp2313:
	.short	4360                    # Record kind: S_UDT
	.long	5020                    # Type
	.asciz	"std::allocator_traits<std::allocator<char> >"
.Ltmp2314:
	.short	.Ltmp2316-.Ltmp2315     # Record length
.Ltmp2315:
	.short	4360                    # Record kind: S_UDT
	.long	5032                    # Type
	.asciz	"std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>"
.Ltmp2316:
	.short	.Ltmp2318-.Ltmp2317     # Record length
.Ltmp2317:
	.short	4360                    # Record kind: S_UDT
	.long	5050                    # Type
	.asciz	"std::_Iterator_base12"
.Ltmp2318:
	.short	.Ltmp2320-.Ltmp2319     # Record length
.Ltmp2319:
	.short	4360                    # Record kind: S_UDT
	.long	5054                    # Type
	.asciz	"std::_Container_proxy"
.Ltmp2320:
	.short	.Ltmp2322-.Ltmp2321     # Record length
.Ltmp2321:
	.short	4360                    # Record kind: S_UDT
	.long	5080                    # Type
	.asciz	"std::allocator<std::_Container_proxy>"
.Ltmp2322:
	.short	.Ltmp2324-.Ltmp2323     # Record length
.Ltmp2323:
	.short	4360                    # Record kind: S_UDT
	.long	5082                    # Type
	.asciz	"std::conditional_t<_Is_default_allocator<allocator<_Container_proxy> >::value,_Default_allocator_traits<std::allocator<std::_Container_proxy> >,_Normal_allocator_traits<std::allocator<std::_Container_proxy> > >"
.Ltmp2324:
	.short	.Ltmp2326-.Ltmp2325     # Record length
.Ltmp2325:
	.short	4360                    # Record kind: S_UDT
	.long	5084                    # Type
	.asciz	"std::allocator_traits<std::allocator<std::_Container_proxy> >"
.Ltmp2326:
	.short	.Ltmp2328-.Ltmp2327     # Record length
.Ltmp2327:
	.short	4360                    # Record kind: S_UDT
	.long	5087                    # Type
	.asciz	"std::_Simple_types<char>"
.Ltmp2328:
	.short	.Ltmp2330-.Ltmp2329     # Record length
.Ltmp2329:
	.short	4360                    # Record kind: S_UDT
	.long	5093                    # Type
	.asciz	"std::_String_val<std::_Simple_types<char> >::_Bxty"
.Ltmp2330:
	.short	.Ltmp2332-.Ltmp2331     # Record length
.Ltmp2331:
	.short	4360                    # Record kind: S_UDT
	.long	5107                    # Type
	.asciz	"std::_Container_base12"
.Ltmp2332:
	.short	.Ltmp2334-.Ltmp2333     # Record length
.Ltmp2333:
	.short	4360                    # Record kind: S_UDT
	.long	5110                    # Type
	.asciz	"_Mbstatet"
.Ltmp2334:
	.short	.Ltmp2336-.Ltmp2335     # Record length
.Ltmp2335:
	.short	4360                    # Record kind: S_UDT
	.long	35                      # Type
	.asciz	"size_type"
.Ltmp2336:
	.short	.Ltmp2338-.Ltmp2337     # Record length
.Ltmp2337:
	.short	4360                    # Record kind: S_UDT
	.long	5124                    # Type
	.asciz	"std::_Default_allocator_traits<std::allocator<char> >"
.Ltmp2338:
	.short	.Ltmp2340-.Ltmp2339     # Record length
.Ltmp2339:
	.short	4360                    # Record kind: S_UDT
	.long	5138                    # Type
	.asciz	"std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >"
.Ltmp2340:
	.short	.Ltmp2342-.Ltmp2341     # Record length
.Ltmp2341:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::remove_reference_t<long long &>"
.Ltmp2342:
	.short	.Ltmp2344-.Ltmp2343     # Record length
.Ltmp2343:
	.short	4360                    # Record kind: S_UDT
	.long	4644                    # Type
	.asciz	"std::remove_reference_t<gsl::fail_fast>"
.Ltmp2344:
	.short	.Ltmp2346-.Ltmp2345     # Record length
.Ltmp2345:
	.short	4360                    # Record kind: S_UDT
	.long	5206                    # Type
	.asciz	"gsl::span<int,6>::subspan_selector<6>"
.Ltmp2346:
	.short	.Ltmp2348-.Ltmp2347     # Record length
.Ltmp2347:
	.short	4360                    # Record kind: S_UDT
	.long	5235                    # Type
	.asciz	"gsl::details::extent_type<0>"
.Ltmp2348:
	.short	.Ltmp2350-.Ltmp2349     # Record length
.Ltmp2349:
	.short	4360                    # Record kind: S_UDT
	.long	5254                    # Type
	.asciz	"gsl::details::extent_type<10>"
.Ltmp2350:
	.short	.Ltmp2352-.Ltmp2351     # Record length
.Ltmp2351:
	.short	4360                    # Record kind: S_UDT
	.long	5280                    # Type
	.asciz	"gsl::narrowing_error"
.Ltmp2352:
	.short	.Ltmp2354-.Ltmp2353     # Record length
.Ltmp2353:
	.short	4360                    # Record kind: S_UDT
	.long	5275                    # Type
	.asciz	"std::remove_reference_t<gsl::narrowing_error>"
.Ltmp2354:
	.short	.Ltmp2356-.Ltmp2355     # Record length
.Ltmp2355:
	.short	4360                    # Record kind: S_UDT
	.long	35                      # Type
	.asciz	"std::remove_reference_t<unsigned long long>"
.Ltmp2356:
	.short	.Ltmp2358-.Ltmp2357     # Record length
.Ltmp2357:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::_Iter_diff_t<gsl::details::span_iterator<gsl::span<int,-1>,0> >"
.Ltmp2358:
	.short	.Ltmp2360-.Ltmp2359     # Record length
.Ltmp2359:
	.short	4360                    # Record kind: S_UDT
	.long	5356                    # Type
	.asciz	"std::_Trivially_copyable_ptr_iterator_tag"
.Ltmp2360:
	.short	.Ltmp2362-.Ltmp2361     # Record length
.Ltmp2361:
	.short	4360                    # Record kind: S_UDT
	.long	5358                    # Type
	.asciz	"std::_General_ptr_iterator_tag"
.Ltmp2362:
	.short	.Ltmp2364-.Ltmp2363     # Record length
.Ltmp2363:
	.short	4360                    # Record kind: S_UDT
	.long	5361                    # Type
	.asciz	"std::conditional_t<is_trivially_assignable_v<int &,int &>,typename _Ptr_cat_helper<remove_cv_t<int>,remove_cv_t<int> >::type,std::_General_ptr_iterator_tag>"
.Ltmp2364:
	.short	.Ltmp2366-.Ltmp2365     # Record length
.Ltmp2365:
	.short	4360                    # Record kind: S_UDT
	.long	5364                    # Type
	.asciz	"std::_Really_trivial_ptr_iterator_tag"
.Ltmp2366:
	.short	.Ltmp2368-.Ltmp2367     # Record length
.Ltmp2367:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::conditional_t<is_integral_v<long long>,long long,ptrdiff_t>"
.Ltmp2368:
	.short	.Ltmp2370-.Ltmp2369     # Record length
.Ltmp2369:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::_Algorithm_int_t<long long>"
.Ltmp2370:
	.short	.Ltmp2372-.Ltmp2371     # Record length
.Ltmp2371:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::_Iter_diff_t<gsl::details::span_iterator<gsl::span<const char,-1>,0> >"
.Ltmp2372:
	.short	.Ltmp2374-.Ltmp2373     # Record length
.Ltmp2373:
	.short	4360                    # Record kind: S_UDT
	.long	5361                    # Type
	.asciz	"std::conditional_t<is_trivially_assignable_v<unsigned char &,const char &>,typename _Ptr_cat_helper<remove_cv_t<const char>,remove_cv_t<unsigned char> >::type,std::_General_ptr_iterator_tag>"
.Ltmp2374:
	.short	.Ltmp2376-.Ltmp2375     # Record length
.Ltmp2375:
	.short	4360                    # Record kind: S_UDT
	.long	4747                    # Type
	.asciz	"std::bool_constant<_Range_verifiable_v<gsl::details::span_iterator<gsl::span<int,-1>,0>,gsl::details::span_iterator<gsl::span<int,-1>,0> > >"
.Ltmp2376:
	.short	.Ltmp2378-.Ltmp2377     # Record length
.Ltmp2377:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::conditional_t<is_array_v<std::decay<long long &&>::_Ty1>,add_pointer_t<remove_extent_t<std::decay<long long &&>::_Ty1> >,conditional_t<is_function_v<std::decay<long long &&>::_Ty1>,add_pointer_t<std::decay<long long &&>::_Ty1>,remove_cv_t<std::decay<long long &&>::_Ty1> > >"
.Ltmp2378:
	.short	.Ltmp2380-.Ltmp2379     # Record length
.Ltmp2379:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::decay_t<decltype(false ? ::std::declval<long long>() : ::std::declval<long long>())>"
.Ltmp2380:
	.short	.Ltmp2382-.Ltmp2381     # Record length
.Ltmp2381:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::common_type_t<long long,_IDiff>"
.Ltmp2382:
	.short	.Ltmp2384-.Ltmp2383     # Record length
.Ltmp2383:
	.short	4360                    # Record kind: S_UDT
	.long	4747                    # Type
	.asciz	"std::bool_constant<_Range_verifiable_v<gsl::details::span_iterator<gsl::span<const char,-1>,0>,gsl::details::span_iterator<gsl::span<const char,-1>,0> > >"
.Ltmp2384:
	.short	.Ltmp2386-.Ltmp2385     # Record length
.Ltmp2385:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::_Iter_diff_t<gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> >"
.Ltmp2386:
.Ltmp2154:
	.p2align	2
	.cv_filechecksums               # File index to string table offset subsection
	.cv_stringtable                 # String table
	.section	.debug$T,"dr"
	.p2align	2
	.long	4                       # Debug section magic
	# Class (0x1000) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>
	#   LinkageName: .?AV?$span@H$0?0@gsl@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# ArgList (0x1001) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<int,-1> (0x1000)
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# Procedure (0x1002) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<int,-1>, int) (0x1001)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x01, 0x10, 0x00, 0x00
	# Modifier (0x1003) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: __int64 (0x13)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Class (0x1004) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x74, 0x6f
	.byte	0x72, 0x61, 0x67, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x64, 0x79, 0x6e, 0x61
	.byte	0x6d, 0x69, 0x63, 0x5f
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x40
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Pointer (0x1005) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1> (0x1000)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x1006) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1007) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: gsl::span<int,-1>* (0x1005)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, __int64) (0x1006)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1008) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	# MemberFunction (0x1009) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: gsl::span<int,-1>* (0x1005)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, int*) (0x1008)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x08, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x100A) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::array<int,0>
	#   LinkageName: .?AV?$array@H$0A@@std@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x72, 0x72, 0x61, 0x79
	.byte	0x3c, 0x69, 0x6e, 0x74
	.byte	0x2c, 0x30, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x61, 0x72
	.byte	0x72, 0x61, 0x79, 0x40
	.byte	0x48, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# Pointer (0x100B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::array<int,0> (0x100A)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x0a, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x100C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::array<int,0>& (0x100B)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x0b, 0x10, 0x00, 0x00
	# MemberFunction (0x100D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: gsl::span<int,-1>* (0x1005)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::array<int,0>&) (0x100C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x0c, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x100E) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::array<int,0> (0x100A)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x0a, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x100F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::array<int,0> (0x100E)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x0e, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1010) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::array<int,0>& (0x100F)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x0f, 0x10, 0x00, 0x00
	# MemberFunction (0x1011) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: gsl::span<int,-1>* (0x1005)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::array<int,0>&) (0x1010)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x10, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1012) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<int,-1> (0x1000)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1013) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,-1> (0x1012)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x12, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1014) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::span<int,-1>& (0x1013)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x13, 0x10, 0x00, 0x00
	# MemberFunction (0x1015) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: gsl::span<int,-1>* (0x1005)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<int,-1>&) (0x1014)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x14, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1016) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@H$0?0@gsl@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x4b, 0x6e, 0x6f
	.byte	0x77, 0x6e, 0x4e, 0x6f
	.byte	0x74, 0x4e, 0x75, 0x6c
	.byte	0x6c, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x4b, 0x6e
	.byte	0x6f, 0x77, 0x6e, 0x4e
	.byte	0x6f, 0x74, 0x4e, 0x75
	.byte	0x6c, 0x6c, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# ArgList (0x1017) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<int,-1>::KnownNotNull (0x1016)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x16, 0x10, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1018) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: gsl::span<int,-1>* (0x1005)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<int,-1>::KnownNotNull, __int64) (0x1017)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x17, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1019) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(int*, __int64) (0x1007)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(int*, int*) (0x1009)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(std::array<int,0>&) (0x100D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(const std::array<int,0>&) (0x1011)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(const gsl::span<int,-1>&) (0x1015)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void gsl::span<int,-1>::(gsl::span<int,-1>::KnownNotNull, __int64) (0x1018)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x07, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x09, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0d, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x11, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x15, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x18, 0x10, 0x00, 0x00
	# ArgList (0x101A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 0
	#   Arguments [
	#   ]
	# }
	.byte	0x06, 0x00, 0x01, 0x12
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x101B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: gsl::span<int,-1>* (0x1005)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x101C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1> (0x1000)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x101D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1>& (0x101C)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: gsl::span<int,-1>* (0x1005)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<int,-1>&) (0x1014)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x1c, 0x10, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x14, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x101E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,-1> (0x1012)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x12, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x101F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1020) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1000)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1021) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1022) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1000)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1023) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1024) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1025) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: int (0x74)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1026) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int& (0x1025)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1027) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1028) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<int,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x82, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x41, 0x40, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x1029) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x102A) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<int,-1>,1>
	#   LinkageName: .?AV?$span_iterator@V?$span@H$0?0@gsl@@$00@details@gsl@@
	# }
	.byte	0x7e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x31, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x30, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# MemberFunction (0x102B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,1> (0x102A)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2a, 0x10, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x102C) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x30, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x72, 0x65, 0x76
	.byte	0x65, 0x72, 0x73, 0x65
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x41, 0x40, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x102D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > (0x102C)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2c, 0x10, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x102E) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@H$0?0@gsl@@$00@details@gsl@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x31, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x72, 0x65, 0x76
	.byte	0x65, 0x72, 0x73, 0x65
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x30, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x102F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > (0x102E)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2e, 0x10, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1030) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1031) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>::subspan_selector<-1>
	#   LinkageName: .?AV?$subspan_selector@$0?0@?$span@H$0?0@gsl@@
	# }
	.byte	0x6e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x73, 0x65, 0x6c
	.byte	0x65, 0x63, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x40, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1032) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#     ArgType: gsl::span<int,-1>::subspan_selector<-1> (0x1031)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x31, 0x10, 0x00, 0x00
	# MemberFunction (0x1033) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1000)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (__int64, __int64, gsl::span<int,-1>::subspan_selector<-1>) (0x1032)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x32, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1034) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const __int64 (0x1003)
	#     Name: extent
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#     FieldOffset: 0x0
	#     Name: storage_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x1019
	#     Name: span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::() (0x101B)
	#     Name: ~span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1>& gsl::span<int,-1>::(const gsl::span<int,-1>&) (0x101D)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(__int64) (0x1020)
	#     Name: first
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(__int64) (0x1020)
	#     Name: last
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(__int64, __int64) (0x1022)
	#     Name: subspan
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<int,-1>::() (0x1023)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<int,-1>::() (0x1023)
	#     Name: size_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool gsl::span<int,-1>::() (0x1024)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,-1>::(__int64) (0x1026)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,-1>::(__int64) (0x1026)
	#     Name: at
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,-1>::(__int64) (0x1026)
	#     Name: operator()
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::() (0x1027)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::span<int,-1>::() (0x1029)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::span<int,-1>::() (0x1029)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,1> gsl::span<int,-1>::() (0x102B)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,1> gsl::span<int,-1>::() (0x102B)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > gsl::span<int,-1>::() (0x102D)
	#     Name: rbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > gsl::span<int,-1>::() (0x102D)
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > gsl::span<int,-1>::() (0x102F)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > gsl::span<int,-1>::() (0x102F)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::() (0x1027)
	#     Name: _Unchecked_begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::() (0x1027)
	#     Name: _Unchecked_end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: bool gsl::span<int,-1>::(__int64, __int64) (0x1030)
	#     Name: CheckRange
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(__int64, __int64, gsl::span<int,-1>::subspan_selector<-1>) (0x1033)
	#     Name: make_subspan
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: element_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x674)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int& (0x1025)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,1> (0x102A)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > (0x102C)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > (0x102E)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::span<int,-1>::KnownNotNull (0x1016)
	#     Name: KnownNotNull
	#   }
	# }
	.byte	0xd6, 0x02, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x19, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1b, 0x10, 0x00, 0x00
	.byte	0x7e, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1d, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x10, 0x00, 0x00
	.byte	0x66, 0x69, 0x72, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x10, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x22, 0x10, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x23, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x23, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x24, 0x10, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x29, 0x10, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x29, 0x10, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2b, 0x10, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2b, 0x10, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2d, 0x10, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2d, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2f, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2f, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0x30, 0x10, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x33, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x2a, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x2c, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x2e, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x16, 0x10, 0x00, 0x00
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1035) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 43
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1034)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<int,-1>
	#   LinkageName: .?AV?$span@H$0?0@gsl@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x2b, 0x00, 0x10, 0x02
	.byte	0x34, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x1036) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\projects\gsl\include\gsl\span
	# }
	.byte	0x2a, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x70
	.byte	0x72, 0x6f, 0x6a, 0x65
	.byte	0x63, 0x74, 0x73, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1037) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,-1> (0x1035)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 355
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x35, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x63, 0x01, 0x00, 0x00
	# Class (0x1038) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::extent_type<-1>
	#   LinkageName: .?AV?$extent_type@$0?0@details@gsl@@
	# }
	.byte	0x5a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x1039) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x103A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1039)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x39, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x103B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#   ThisType: const gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x103A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x3a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x103C) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: gsl::details::extent_type<-1> (0x1038)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: int* (0x674)
	#     FieldOffset: 0x8
	#     Name: data_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x103B)
	#     Name: data
	#   }
	# }
	.byte	0x2e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x08, 0x00, 0x64, 0x61
	.byte	0x74, 0x61, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x3b, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x103D) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 3
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x103C)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x03, 0x00, 0x08, 0x02
	.byte	0x3c, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x74, 0x6f
	.byte	0x72, 0x61, 0x67, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x64, 0x79, 0x6e, 0x61
	.byte	0x6d, 0x69, 0x63, 0x5f
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x40
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x103E) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x103D)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 583
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x3d, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x02, 0x00, 0x00
	# FieldList (0x103F) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* (0x674)
	#     FieldOffset: 0x0
	#     Name: p
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x70, 0x00
	# Struct (0x1040) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x103F)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: gsl::span<int,-1>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@H$0?0@gsl@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x3f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x4b, 0x6e, 0x6f
	.byte	0x77, 0x6e, 0x4e, 0x6f
	.byte	0x74, 0x4e, 0x75, 0x6c
	.byte	0x6c, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x4b, 0x6e
	.byte	0x6f, 0x77, 0x6e, 0x4e
	.byte	0x6f, 0x74, 0x4e, 0x75
	.byte	0x6c, 0x6c, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1041) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,-1>::KnownNotNull (0x1040)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 574
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x40, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x3e, 0x02, 0x00, 0x00
	# Modifier (0x1042) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: bool (0x30)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1043) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1044) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ThisType: gsl::details::span_iterator<gsl::span<int,-1>,0>* (0x1043)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x43, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1045) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const gsl::span<int,-1>* (0x101E)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1046) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ThisType: gsl::details::span_iterator<gsl::span<int,-1>,0>* (0x1043)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const gsl::span<int,-1>*, __int64) (0x1045)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x43, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x45, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1047) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::span_iterator<gsl::span<int,-1>,0>::() (0x1044)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::span_iterator<gsl::span<int,-1>,0>::(const gsl::span<int,-1>*, __int64) (0x1046)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x44, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x46, 0x10, 0x00, 0x00
	# Modifier (0x1048) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1049) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1048)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x104A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int& (0x1025)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ThisType: const gsl::details::span_iterator<gsl::span<int,-1>,0>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x104B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ThisType: const gsl::details::span_iterator<gsl::span<int,-1>,0>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x104C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x104D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,0>& (0x104C)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ThisType: gsl::details::span_iterator<gsl::span<int,-1>,0>* (0x1043)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4c, 0x10, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x43, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x104E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x104F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ThisType: gsl::details::span_iterator<gsl::span<int,-1>,0>* (0x1043)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int) (0x104E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x43, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x4e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1050) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0>& gsl::details::span_iterator<gsl::span<int,-1>,0>::() (0x104D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::details::span_iterator<gsl::span<int,-1>,0>::(int) (0x104F)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4d, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4f, 0x10, 0x00, 0x00
	# MemberFunction (0x1051) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ThisType: const gsl::details::span_iterator<gsl::span<int,-1>,0>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1052) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,0>& (0x104C)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ThisType: gsl::details::span_iterator<gsl::span<int,-1>,0>* (0x1043)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4c, 0x10, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x43, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1053) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	# MemberFunction (0x1054) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ThisType: const gsl::details::span_iterator<gsl::span<int,-1>,0>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::details::span_iterator<gsl::span<int,-1>,0>) (0x1053)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x53, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1055) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::details::span_iterator<gsl::span<int,-1>,0>::(__int64) (0x1051)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::details::span_iterator<gsl::span<int,-1>,0>::(gsl::details::span_iterator<gsl::span<int,-1>,0>) (0x1054)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x51, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x54, 0x10, 0x00, 0x00
	# MemberFunction (0x1056) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int& (0x1025)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ThisType: const gsl::details::span_iterator<gsl::span<int,-1>,0>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1057) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const __int64 (0x1003)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	# MemberFunction (0x1058) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ThisType: const gsl::details::span_iterator<gsl::span<int,-1>,0>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const __int64) (0x1057)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x57, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1059) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: int* (0x674)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x105A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const int* (0x1059)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x59, 0x10, 0x00, 0x00
	# MemberFunction (0x105B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ThisType: gsl::details::span_iterator<gsl::span<int,-1>,0>* (0x1043)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int*) (0x105A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x43, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x5a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x105C) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::random_access_iterator_tag
	#   LinkageName: .?AUrandom_access_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x61, 0x6e, 0x64, 0x6f
	.byte	0x6d, 0x5f, 0x61, 0x63
	.byte	0x63, 0x65, 0x73, 0x73
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x72, 0x61
	.byte	0x6e, 0x64, 0x6f, 0x6d
	.byte	0x5f, 0x61, 0x63, 0x63
	.byte	0x65, 0x73, 0x73, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x105D) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x1042)
	#     Name: _Unwrap_when_unverified
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Protected (0x2)
	#     Type: const gsl::span<int,-1>* (0x101E)
	#     FieldOffset: 0x0
	#     Name: span_
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Protected (0x2)
	#     Type: __int64 (0x13)
	#     FieldOffset: 0x8
	#     Name: index_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1047
	#     Name: span_iterator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::details::span_iterator<gsl::span<int,-1>,0>::() (0x104A)
	#     Name: operator*
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::details::span_iterator<gsl::span<int,-1>,0>::() (0x104B)
	#     Name: operator->
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1050
	#     Name: operator++
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1050
	#     Name: operator--
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::details::span_iterator<gsl::span<int,-1>,0>::(__int64) (0x1051)
	#     Name: operator+
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0>& gsl::details::span_iterator<gsl::span<int,-1>,0>::(__int64) (0x1052)
	#     Name: operator+=
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1055
	#     Name: operator-
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0>& gsl::details::span_iterator<gsl::span<int,-1>,0>::(__int64) (0x1052)
	#     Name: operator-=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::details::span_iterator<gsl::span<int,-1>,0>::(__int64) (0x1056)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::span_iterator<gsl::span<int,-1>,0>::(const __int64) (0x1058)
	#     Name: _Verify_offset
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::details::span_iterator<gsl::span<int,-1>,0>::() (0x104B)
	#     Name: _Unwrapped
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::span_iterator<gsl::span<int,-1>,0>::(const int*) (0x105B)
	#     Name: _Seek_to
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: element_type_
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x674)
	#     Name: _Unchecked_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::random_access_iterator_tag (0x105C)
	#     Name: iterator_category
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int& (0x1025)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x674)
	#     Name: pointer
	#   }
	# }
	.byte	0xee, 0x01, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x42, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x5f
	.byte	0x77, 0x68, 0x65, 0x6e
	.byte	0x5f, 0x75, 0x6e, 0x76
	.byte	0x65, 0x72, 0x69, 0x66
	.byte	0x69, 0x65, 0x64, 0x00
	.byte	0x0d, 0x15, 0x02, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x00
	.byte	0x0d, 0x15, 0x02, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x69, 0x6e
	.byte	0x64, 0x65, 0x78, 0x5f
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2a, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2d, 0x3e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x50, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x2b, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x50, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2d, 0x2d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x51, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x52, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x3d, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x55, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x52, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2d, 0x3d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x56, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x58, 0x10, 0x00, 0x00
	.byte	0x5f, 0x56, 0x65, 0x72
	.byte	0x69, 0x66, 0x79, 0x5f
	.byte	0x6f, 0x66, 0x66, 0x73
	.byte	0x65, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5b, 0x10, 0x00, 0x00
	.byte	0x5f, 0x53, 0x65, 0x65
	.byte	0x6b, 0x5f, 0x74, 0x6f
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x5f, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x63, 0x61, 0x74
	.byte	0x65, 0x67, 0x6f, 0x72
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	# Class (0x105E) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 27
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x105D)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::details::span_iterator<gsl::span<int,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x82, 0x00, 0x04, 0x15
	.byte	0x1b, 0x00, 0x10, 0x02
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x41, 0x40, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x105F) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x105E)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 125
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x5e, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x7d, 0x00, 0x00, 0x00
	# FieldList (0x1060) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	# }
	.byte	0x02, 0x00, 0x03, 0x12
	# Class (0x1061) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x1060)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: gsl::span<int,-1>::subspan_selector<-1>
	#   LinkageName: .?AV?$subspan_selector@$0?0@?$span@H$0?0@gsl@@
	# }
	.byte	0x6e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x08, 0x02
	.byte	0x60, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x73, 0x65, 0x6c
	.byte	0x65, 0x63, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x40, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1062) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,-1>::subspan_selector<-1> (0x1061)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 615
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x61, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x67, 0x02, 0x00, 0x00
	# Pointer (0x1063) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::extent_type<-1> (0x1038)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1064) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: gsl::details::extent_type<-1>* (0x1063)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1065) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::extent_type<-1> (0x1038)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1066) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::extent_type<-1> (0x1065)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x65, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1067) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: const gsl::details::extent_type<-1>* (0x1066)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x66, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1068) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: __int64 (0x13)
	#     FieldOffset: 0x0
	#     Name: size_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<-1>::(__int64) (0x1064)
	#     Name: extent_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::details::extent_type<-1>::() (0x1067)
	#     Name: size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	# }
	.byte	0x4a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x69
	.byte	0x7a, 0x65, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x64, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x67, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Class (0x1069) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1068)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: gsl::details::extent_type<-1>
	#   LinkageName: .?AV?$extent_type@$0?0@details@gsl@@
	# }
	.byte	0x5a, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0x68, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x106A) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::extent_type<-1> (0x1069)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 327
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x69, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x01, 0x00, 0x00
	# Struct (0x106B) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::bidirectional_iterator_tag
	#   LinkageName: .?AUbidirectional_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x69, 0x64, 0x69, 0x72
	.byte	0x65, 0x63, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x61, 0x6c
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x62, 0x69
	.byte	0x64, 0x69, 0x72, 0x65
	.byte	0x63, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x61, 0x6c, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x106C) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::bidirectional_iterator_tag (0x106B)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x6b, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x106D) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x106C)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::random_access_iterator_tag
	#   LinkageName: .?AUrandom_access_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x6c, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x61, 0x6e, 0x64, 0x6f
	.byte	0x6d, 0x5f, 0x61, 0x63
	.byte	0x63, 0x65, 0x73, 0x73
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x72, 0x61
	.byte	0x6e, 0x64, 0x6f, 0x6d
	.byte	0x5f, 0x61, 0x63, 0x63
	.byte	0x65, 0x73, 0x73, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x106E) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x78, 0x75, 0x74, 0x69
	.byte	0x6c, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x106F) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::random_access_iterator_tag (0x106D)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x106E)
	#   LineNumber: 411
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x6d, 0x10, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	.byte	0x9b, 0x01, 0x00, 0x00
	# Struct (0x1070) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::forward_iterator_tag
	#   LinkageName: .?AUforward_iterator_tag@std@@
	# }
	.byte	0x4e, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x66
	.byte	0x6f, 0x72, 0x77, 0x61
	.byte	0x72, 0x64, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x61, 0x67, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x1071) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::forward_iterator_tag (0x1070)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x70, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x1072) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1071)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::bidirectional_iterator_tag
	#   LinkageName: .?AUbidirectional_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x71, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x69, 0x64, 0x69, 0x72
	.byte	0x65, 0x63, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x61, 0x6c
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x62, 0x69
	.byte	0x64, 0x69, 0x72, 0x65
	.byte	0x63, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x61, 0x6c, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1073) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::bidirectional_iterator_tag (0x1072)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x106E)
	#   LineNumber: 406
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x72, 0x10, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	.byte	0x96, 0x01, 0x00, 0x00
	# Struct (0x1074) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::input_iterator_tag
	#   LinkageName: .?AUinput_iterator_tag@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x70, 0x75, 0x74
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x69, 0x6e
	.byte	0x70, 0x75, 0x74, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x1075) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::input_iterator_tag (0x1074)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x74, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x1076) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1075)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::forward_iterator_tag
	#   LinkageName: .?AUforward_iterator_tag@std@@
	# }
	.byte	0x4e, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x75, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x66
	.byte	0x6f, 0x72, 0x77, 0x61
	.byte	0x72, 0x64, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x61, 0x67, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1077) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::forward_iterator_tag (0x1076)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x106E)
	#   LineNumber: 401
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x76, 0x10, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	.byte	0x91, 0x01, 0x00, 0x00
	# Struct (0x1078) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1060)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::input_iterator_tag
	#   LinkageName: .?AUinput_iterator_tag@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x00, 0x02
	.byte	0x60, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x70, 0x75, 0x74
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x69, 0x6e
	.byte	0x70, 0x75, 0x74, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1079) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::input_iterator_tag (0x1078)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x106E)
	#   LineNumber: 393
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x78, 0x10, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	.byte	0x89, 0x01, 0x00, 0x00
	# FuncId (0x107A) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: void (gsl::span<int,-1>, int) (0x1002)
	#   Name: test_span_unoptimizable_rangecheck
	# }
	.byte	0x2e, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x02, 0x10, 0x00, 0x00
	.byte	0x74, 0x65, 0x73, 0x74
	.byte	0x5f, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x75, 0x6e
	.byte	0x6f, 0x70, 0x74, 0x69
	.byte	0x6d, 0x69, 0x7a, 0x61
	.byte	0x62, 0x6c, 0x65, 0x5f
	.byte	0x72, 0x61, 0x6e, 0x67
	.byte	0x65, 0x63, 0x68, 0x65
	.byte	0x63, 0x6b, 0x00, 0xf1
	# Pointer (0x107B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1> (0x1000)
	#   PointerAttributes: 0x2002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 16
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x02, 0x00
	# MemberFuncId (0x107C) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: int& gsl::span<int,-1>::(__int64) (0x1026)
	#   Name: operator[]
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	# ArgList (0x107D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::span<int,-1> (0x1000)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	# Procedure (0x107E) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::span<int,-1>) (0x107D)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x7d, 0x10, 0x00, 0x00
	# FuncId (0x107F) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: void (gsl::span<int,-1>) (0x107E)
	#   Name: test_span_for
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x7e, 0x10, 0x00, 0x00
	.byte	0x74, 0x65, 0x73, 0x74
	.byte	0x5f, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x66, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x1080) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: __int64 gsl::span<int,-1>::() (0x1023)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x23, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# FuncId (0x1081) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: void (gsl::span<int,-1>) (0x107E)
	#   Name: test_span_iter
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x7e, 0x10, 0x00, 0x00
	.byte	0x74, 0x65, 0x73, 0x74
	.byte	0x5f, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	# MemberFuncId (0x1082) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::span<int,-1>::() (0x1029)
	#   Name: begin
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x29, 0x10, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# StringId (0x1083) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: gsl::details
	# }
	.byte	0x16, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1084) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#     ArgType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	# Procedure (0x1085) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: bool (0x30)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::details::span_iterator<gsl::span<int,-1>,0>, gsl::details::span_iterator<gsl::span<int,-1>,0>) (0x1084)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x84, 0x10, 0x00, 0x00
	# FuncId (0x1086) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl::details (0x1083)
	#   FunctionType: bool (gsl::details::span_iterator<gsl::span<int,-1>,0>, gsl::details::span_iterator<gsl::span<int,-1>,0>) (0x1085)
	#   Name: operator!=
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x21, 0x3d, 0x00, 0xf1
	# MemberFuncId (0x1087) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::span<int,-1>::() (0x1029)
	#   Name: end
	# }
	.byte	0x0e, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x29, 0x10, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	# MemberFuncId (0x1088) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   FunctionType: int& gsl::details::span_iterator<gsl::span<int,-1>,0>::() (0x104A)
	#   Name: operator*
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2a, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x1089) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   FunctionType: gsl::details::span_iterator<gsl::span<int,-1>,0>& gsl::details::span_iterator<gsl::span<int,-1>,0>::() (0x104D)
	#   Name: operator++
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x4d, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x2b, 0x00, 0xf1
	# FuncId (0x108A) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: void (gsl::span<int,-1>) (0x107E)
	#   Name: test_span_rangeiter
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x7e, 0x10, 0x00, 0x00
	.byte	0x74, 0x65, 0x73, 0x74
	.byte	0x5f, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x72, 0x61
	.byte	0x6e, 0x67, 0x65, 0x69
	.byte	0x74, 0x65, 0x72, 0x00
	# Struct (0x108B) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: IDE_DRIVE_STATE
	#   LinkageName: .?AUIDE_DRIVE_STATE@@
	# }
	.byte	0x3a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x49, 0x44
	.byte	0x45, 0x5f, 0x44, 0x52
	.byte	0x49, 0x56, 0x45, 0x5f
	.byte	0x53, 0x54, 0x41, 0x54
	.byte	0x45, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x49, 0x44
	.byte	0x45, 0x5f, 0x44, 0x52
	.byte	0x49, 0x56, 0x45, 0x5f
	.byte	0x53, 0x54, 0x41, 0x54
	.byte	0x45, 0x40, 0x40, 0x00
	# Pointer (0x108C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: IDE_DRIVE_STATE (0x108B)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8b, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x108D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: IDE_DRIVE_STATE& (0x108C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x8c, 0x10, 0x00, 0x00
	# Procedure (0x108E) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (IDE_DRIVE_STATE&) (0x108D)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x8d, 0x10, 0x00, 0x00
	# Struct (0x108F) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: IDE_DRIVE_SAVED_STATE
	#   LinkageName: .?AUIDE_DRIVE_SAVED_STATE@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x49, 0x44
	.byte	0x45, 0x5f, 0x44, 0x52
	.byte	0x49, 0x56, 0x45, 0x5f
	.byte	0x53, 0x41, 0x56, 0x45
	.byte	0x44, 0x5f, 0x53, 0x54
	.byte	0x41, 0x54, 0x45, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x49, 0x44, 0x45, 0x5f
	.byte	0x44, 0x52, 0x49, 0x56
	.byte	0x45, 0x5f, 0x53, 0x41
	.byte	0x56, 0x45, 0x44, 0x5f
	.byte	0x53, 0x54, 0x41, 0x54
	.byte	0x45, 0x40, 0x40, 0x00
	# Class (0x1090) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<unsigned short,-1>
	#   LinkageName: .?AV?$span@G$0?0@gsl@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x73, 0x68, 0x6f
	.byte	0x72, 0x74, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x47, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# FieldList (0x1091) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: IDE_DRIVE_SAVED_STATE (0x108F)
	#     FieldOffset: 0x0
	#     Name: Saved
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<unsigned short,-1> (0x1090)
	#     FieldOffset: 0x8
	#     Name: CommandBuffer
	#   }
	# }
	.byte	0x2a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x8f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x53, 0x61
	.byte	0x76, 0x65, 0x64, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x08, 0x00, 0x43, 0x6f
	.byte	0x6d, 0x6d, 0x61, 0x6e
	.byte	0x64, 0x42, 0x75, 0x66
	.byte	0x66, 0x65, 0x72, 0x00
	# Struct (0x1092) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 2
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1091)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 24
	#   Name: IDE_DRIVE_STATE
	#   LinkageName: .?AUIDE_DRIVE_STATE@@
	# }
	.byte	0x3a, 0x00, 0x05, 0x15
	.byte	0x02, 0x00, 0x00, 0x02
	.byte	0x91, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x18, 0x00, 0x49, 0x44
	.byte	0x45, 0x5f, 0x44, 0x52
	.byte	0x49, 0x56, 0x45, 0x5f
	.byte	0x53, 0x54, 0x41, 0x54
	.byte	0x45, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x49, 0x44
	.byte	0x45, 0x5f, 0x44, 0x52
	.byte	0x49, 0x56, 0x45, 0x5f
	.byte	0x53, 0x54, 0x41, 0x54
	.byte	0x45, 0x40, 0x40, 0x00
	# StringId (0x1093) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\projects\gsl\tests\span_compile_only.cpp
	# }
	.byte	0x32, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x70
	.byte	0x72, 0x6f, 0x6a, 0x65
	.byte	0x63, 0x74, 0x73, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x74, 0x65, 0x73, 0x74
	.byte	0x73, 0x5c, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x63
	.byte	0x6f, 0x6d, 0x70, 0x69
	.byte	0x6c, 0x65, 0x5f, 0x6f
	.byte	0x6e, 0x6c, 0x79, 0x2e
	.byte	0x63, 0x70, 0x70, 0x00
	# UdtSourceLine (0x1094) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: IDE_DRIVE_STATE (0x1092)
	#   SourceFile: C:\projects\gsl\tests\span_compile_only.cpp (0x1093)
	#   LineNumber: 87
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x92, 0x10, 0x00, 0x00
	.byte	0x93, 0x10, 0x00, 0x00
	.byte	0x57, 0x00, 0x00, 0x00
	# Array (0x1095) {
	#   TypeLeafKind: LF_ARRAY (0x1503)
	#   ElementType: unsigned char (0x20)
	#   IndexType: unsigned __int64 (0x23)
	#   SizeOf: 6
	#   Name: 
	# }
	.byte	0x0e, 0x00, 0x03, 0x15
	.byte	0x20, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x06, 0x00, 0x00, 0xf1
	# FieldList (0x1096) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: 0x1095
	#     FieldOffset: 0x0
	#     Name: Lba48Bit
	#   }
	# }
	.byte	0x16, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x4c, 0x62
	.byte	0x61, 0x34, 0x38, 0x42
	.byte	0x69, 0x74, 0x00, 0xf1
	# Struct (0x1097) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1096)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 6
	#   Name: IDE_DRIVE_SAVED_STATE
	#   LinkageName: .?AUIDE_DRIVE_SAVED_STATE@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x96, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x06, 0x00, 0x49, 0x44
	.byte	0x45, 0x5f, 0x44, 0x52
	.byte	0x49, 0x56, 0x45, 0x5f
	.byte	0x53, 0x41, 0x56, 0x45
	.byte	0x44, 0x5f, 0x53, 0x54
	.byte	0x41, 0x54, 0x45, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x49, 0x44, 0x45, 0x5f
	.byte	0x44, 0x52, 0x49, 0x56
	.byte	0x45, 0x5f, 0x53, 0x41
	.byte	0x56, 0x45, 0x44, 0x5f
	.byte	0x53, 0x54, 0x41, 0x54
	.byte	0x45, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1098) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: IDE_DRIVE_SAVED_STATE (0x1097)
	#   SourceFile: C:\projects\gsl\tests\span_compile_only.cpp (0x1093)
	#   LineNumber: 82
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x97, 0x10, 0x00, 0x00
	.byte	0x93, 0x10, 0x00, 0x00
	.byte	0x52, 0x00, 0x00, 0x00
	# Class (0x1099) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@
	# }
	.byte	0xb6, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x73, 0x68, 0x6f
	.byte	0x72, 0x74, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x3a, 0x3a
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x3c, 0x67, 0x73, 0x6c
	.byte	0x3a, 0x3a, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x3c, 0x64
	.byte	0x79, 0x6e, 0x61, 0x6d
	.byte	0x69, 0x63, 0x5f, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x74, 0x6f, 0x72, 0x61
	.byte	0x67, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x40
	.byte	0x56, 0x3f, 0x24, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x47, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x109A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<unsigned short,-1> (0x1090)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x109B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: unsigned short* (0x621)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x21, 0x06, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x109C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: gsl::span<unsigned short,-1>* (0x109A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (unsigned short*, __int64) (0x109B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x109D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: unsigned short* (0x621)
	#     ArgType: unsigned short* (0x621)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x21, 0x06, 0x00, 0x00
	.byte	0x21, 0x06, 0x00, 0x00
	# MemberFunction (0x109E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: gsl::span<unsigned short,-1>* (0x109A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (unsigned short*, unsigned short*) (0x109D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x109F) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::array<unsigned short,0>
	#   LinkageName: .?AV?$array@G$0A@@std@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x72, 0x72, 0x61, 0x79
	.byte	0x3c, 0x75, 0x6e, 0x73
	.byte	0x69, 0x67, 0x6e, 0x65
	.byte	0x64, 0x20, 0x73, 0x68
	.byte	0x6f, 0x72, 0x74, 0x2c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x61, 0x72, 0x72
	.byte	0x61, 0x79, 0x40, 0x47
	.byte	0x24, 0x30, 0x41, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x10A0) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::array<unsigned short,0> (0x109F)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9f, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x10A1) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::array<unsigned short,0>& (0x10A0)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa0, 0x10, 0x00, 0x00
	# MemberFunction (0x10A2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: gsl::span<unsigned short,-1>* (0x109A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::array<unsigned short,0>&) (0x10A1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa1, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x10A3) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::array<unsigned short,0> (0x109F)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x9f, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x10A4) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::array<unsigned short,0> (0x10A3)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa3, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x10A5) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::array<unsigned short,0>& (0x10A4)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	# MemberFunction (0x10A6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: gsl::span<unsigned short,-1>* (0x109A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::array<unsigned short,0>&) (0x10A5)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x10A7) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<unsigned short,-1> (0x1090)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x10A8) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<unsigned short,-1> (0x10A7)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x10A9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::span<unsigned short,-1>& (0x10A8)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	# MemberFunction (0x10AA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: gsl::span<unsigned short,-1>* (0x109A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<unsigned short,-1>&) (0x10A9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x10AB) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<unsigned short,-1>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@G$0?0@gsl@@
	# }
	.byte	0x66, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x73, 0x68, 0x6f
	.byte	0x72, 0x74, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x3a, 0x3a
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x4b, 0x6e, 0x6f
	.byte	0x77, 0x6e, 0x4e, 0x6f
	.byte	0x74, 0x4e, 0x75, 0x6c
	.byte	0x6c, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x47, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x10AC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<unsigned short,-1>::KnownNotNull (0x10AB)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x10AD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: gsl::span<unsigned short,-1>* (0x109A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<unsigned short,-1>::KnownNotNull, __int64) (0x10AC)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xac, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10AE) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<unsigned short,-1>::(unsigned short*, __int64) (0x109C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<unsigned short,-1>::(unsigned short*, unsigned short*) (0x109E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<unsigned short,-1>::(std::array<unsigned short,0>&) (0x10A2)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<unsigned short,-1>::(const std::array<unsigned short,0>&) (0x10A6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<unsigned short,-1>::(const gsl::span<unsigned short,-1>&) (0x10AA)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void gsl::span<unsigned short,-1>::(gsl::span<unsigned short,-1>::KnownNotNull, __int64) (0x10AD)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa2, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xad, 0x10, 0x00, 0x00
	# MemberFunction (0x10AF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: gsl::span<unsigned short,-1>* (0x109A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10B0) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<unsigned short,-1> (0x1090)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x10B1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<unsigned short,-1>& (0x10B0)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: gsl::span<unsigned short,-1>* (0x109A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<unsigned short,-1>&) (0x10A9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb0, 0x10, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10B2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<unsigned short,-1> (0x10A7)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x10B3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<unsigned short,-1> (0x1090)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: const gsl::span<unsigned short,-1>* (0x10B2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10B4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<unsigned short,-1> (0x1090)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: const gsl::span<unsigned short,-1>* (0x10B2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10B5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: const gsl::span<unsigned short,-1>* (0x10B2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10B6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: const gsl::span<unsigned short,-1>* (0x10B2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10B7) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: unsigned short (0x21)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x21, 0x00, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x10B8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned short& (0x10B7)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: const gsl::span<unsigned short,-1>* (0x10B2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb7, 0x10, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10B9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned short* (0x621)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: const gsl::span<unsigned short,-1>* (0x10B2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x21, 0x06, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10BA) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<unsigned short,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@G$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x73, 0x68, 0x6f
	.byte	0x72, 0x74, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x2c, 0x30
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x47, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# MemberFunction (0x10BB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<unsigned short,-1>,0> (0x10BA)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: const gsl::span<unsigned short,-1>* (0x10B2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xba, 0x10, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10BC) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<unsigned short,-1>,1>
	#   LinkageName: .?AV?$span_iterator@V?$span@G$0?0@gsl@@$00@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x73, 0x68, 0x6f
	.byte	0x72, 0x74, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x2c, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x47, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x24, 0x30, 0x30
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x10BD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<unsigned short,-1>,1> (0x10BC)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: const gsl::span<unsigned short,-1>* (0x10B2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xbc, 0x10, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10BE) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned short,-1>,0> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@G$0?0@gsl@@$0A@@details@gsl@@@std@@
	# }
	.byte	0xbe, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x75, 0x6e
	.byte	0x73, 0x69, 0x67, 0x6e
	.byte	0x65, 0x64, 0x20, 0x73
	.byte	0x68, 0x6f, 0x72, 0x74
	.byte	0x2c, 0x2d, 0x31, 0x3e
	.byte	0x2c, 0x30, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x47, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x10BF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned short,-1>,0> > (0x10BE)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: const gsl::span<unsigned short,-1>* (0x10B2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xbe, 0x10, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10C0) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned short,-1>,1> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@G$0?0@gsl@@$00@details@gsl@@@std@@
	# }
	.byte	0xbe, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x75, 0x6e
	.byte	0x73, 0x69, 0x67, 0x6e
	.byte	0x65, 0x64, 0x20, 0x73
	.byte	0x68, 0x6f, 0x72, 0x74
	.byte	0x2c, 0x2d, 0x31, 0x3e
	.byte	0x2c, 0x31, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x47, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x24, 0x30, 0x30
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x10C1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned short,-1>,1> > (0x10C0)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: const gsl::span<unsigned short,-1>* (0x10B2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10C2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10C3) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<unsigned short,-1>::subspan_selector<-1>
	#   LinkageName: .?AV?$subspan_selector@$0?0@?$span@G$0?0@gsl@@
	# }
	.byte	0x76, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x73, 0x68, 0x6f
	.byte	0x72, 0x74, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x3a, 0x3a
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x2d, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x75, 0x62, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x73
	.byte	0x65, 0x6c, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x47, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# ArgList (0x10C4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#     ArgType: gsl::span<unsigned short,-1>::subspan_selector<-1> (0x10C3)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0xc3, 0x10, 0x00, 0x00
	# MemberFunction (0x10C5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<unsigned short,-1> (0x1090)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   ThisType: const gsl::span<unsigned short,-1>* (0x10B2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (__int64, __int64, gsl::span<unsigned short,-1>::subspan_selector<-1>) (0x10C4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xc4, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x10C6) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const __int64 (0x1003)
	#     Name: extent
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1099)
	#     FieldOffset: 0x0
	#     Name: storage_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x10AE
	#     Name: span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<unsigned short,-1>::() (0x10AF)
	#     Name: ~span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<unsigned short,-1>& gsl::span<unsigned short,-1>::(const gsl::span<unsigned short,-1>&) (0x10B1)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<unsigned short,-1> gsl::span<unsigned short,-1>::(__int64) (0x10B3)
	#     Name: first
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<unsigned short,-1> gsl::span<unsigned short,-1>::(__int64) (0x10B3)
	#     Name: last
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<unsigned short,-1> gsl::span<unsigned short,-1>::(__int64, __int64) (0x10B4)
	#     Name: subspan
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<unsigned short,-1>::() (0x10B5)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<unsigned short,-1>::() (0x10B5)
	#     Name: size_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool gsl::span<unsigned short,-1>::() (0x10B6)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short& gsl::span<unsigned short,-1>::(__int64) (0x10B8)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short& gsl::span<unsigned short,-1>::(__int64) (0x10B8)
	#     Name: at
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short& gsl::span<unsigned short,-1>::(__int64) (0x10B8)
	#     Name: operator()
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short* gsl::span<unsigned short,-1>::() (0x10B9)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned short,-1>,0> gsl::span<unsigned short,-1>::() (0x10BB)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned short,-1>,0> gsl::span<unsigned short,-1>::() (0x10BB)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned short,-1>,1> gsl::span<unsigned short,-1>::() (0x10BD)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned short,-1>,1> gsl::span<unsigned short,-1>::() (0x10BD)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned short,-1>,0> > gsl::span<unsigned short,-1>::() (0x10BF)
	#     Name: rbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned short,-1>,0> > gsl::span<unsigned short,-1>::() (0x10BF)
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned short,-1>,1> > gsl::span<unsigned short,-1>::() (0x10C1)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned short,-1>,1> > gsl::span<unsigned short,-1>::() (0x10C1)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short* gsl::span<unsigned short,-1>::() (0x10B9)
	#     Name: _Unchecked_begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short* gsl::span<unsigned short,-1>::() (0x10B9)
	#     Name: _Unchecked_end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: bool gsl::span<unsigned short,-1>::(__int64, __int64) (0x10C2)
	#     Name: CheckRange
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<unsigned short,-1> gsl::span<unsigned short,-1>::(__int64, __int64, gsl::span<unsigned short,-1>::subspan_selector<-1>) (0x10C5)
	#     Name: make_subspan
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned short (0x21)
	#     Name: element_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned short (0x21)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned short* (0x621)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned short& (0x10B7)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned short,-1>,0> (0x10BA)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned short,-1>,1> (0x10BC)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned short,-1>,0> > (0x10BE)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned short,-1>,1> > (0x10C0)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::span<unsigned short,-1>::KnownNotNull (0x10AB)
	#     Name: KnownNotNull
	#   }
	# }
	.byte	0xd6, 0x02, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0xae, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xaf, 0x10, 0x00, 0x00
	.byte	0x7e, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb3, 0x10, 0x00, 0x00
	.byte	0x66, 0x69, 0x72, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb3, 0x10, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb4, 0x10, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb6, 0x10, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb8, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb8, 0x10, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb8, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb9, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xbb, 0x10, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xbb, 0x10, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xbd, 0x10, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xbd, 0x10, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xbf, 0x10, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xbf, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xc1, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xc1, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb9, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb9, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0xc2, 0x10, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xc5, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x21, 0x00, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x21, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x21, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb7, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xba, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xbc, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xbe, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x10C7) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 43
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x10C6)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<unsigned short,-1>
	#   LinkageName: .?AV?$span@G$0?0@gsl@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x2b, 0x00, 0x10, 0x02
	.byte	0xc6, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x73, 0x68, 0x6f
	.byte	0x72, 0x74, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x47, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x10C8) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<unsigned short,-1> (0x10C7)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 355
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x63, 0x01, 0x00, 0x00
	# Modifier (0x10C9) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1099)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x10CA) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10C9)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x10CB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned short* (0x621)
	#   ClassType: gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1099)
	#   ThisType: const gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x10CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x21, 0x06, 0x00, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x10CC) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: gsl::details::extent_type<-1> (0x1038)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: unsigned short* (0x621)
	#     FieldOffset: 0x8
	#     Name: data_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short* gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x10CB)
	#     Name: data
	#   }
	# }
	.byte	0x2e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x21, 0x06, 0x00, 0x00
	.byte	0x08, 0x00, 0x64, 0x61
	.byte	0x74, 0x61, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x10CD) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 3
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x10CC)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@G$0?0@gsl@@
	# }
	.byte	0xb6, 0x00, 0x04, 0x15
	.byte	0x03, 0x00, 0x08, 0x02
	.byte	0xcc, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x73, 0x68, 0x6f
	.byte	0x72, 0x74, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x3a, 0x3a
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x3c, 0x67, 0x73, 0x6c
	.byte	0x3a, 0x3a, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x3c, 0x64
	.byte	0x79, 0x6e, 0x61, 0x6d
	.byte	0x69, 0x63, 0x5f, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x74, 0x6f, 0x72, 0x61
	.byte	0x67, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x40
	.byte	0x56, 0x3f, 0x24, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x47, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x10CE) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10CD)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 583
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xcd, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x02, 0x00, 0x00
	# FuncId (0x10CF) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: void (IDE_DRIVE_STATE&) (0x108E)
	#   Name: static_size_array_span
	# }
	.byte	0x22, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x8e, 0x10, 0x00, 0x00
	.byte	0x73, 0x74, 0x61, 0x74
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x69, 0x7a, 0x65, 0x5f
	.byte	0x61, 0x72, 0x72, 0x61
	.byte	0x79, 0x5f, 0x73, 0x70
	.byte	0x61, 0x6e, 0x00, 0xf1
	# Class (0x10D0) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<unsigned char,-1>
	#   LinkageName: .?AV?$span@E$0?0@gsl@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x45, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x10D1) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x73
	.byte	0x74, 0x6f, 0x72, 0x61
	.byte	0x67, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x64, 0x79
	.byte	0x6e, 0x61, 0x6d, 0x69
	.byte	0x63, 0x5f, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x45, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# Pointer (0x10D2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<unsigned char,-1> (0x10D0)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x10D3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: unsigned char* (0x620)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x10D4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: gsl::span<unsigned char,-1>* (0x10D2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (unsigned char*, __int64) (0x10D3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xd3, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10D5) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: unsigned char* (0x620)
	#     ArgType: unsigned char* (0x620)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x20, 0x06, 0x00, 0x00
	# MemberFunction (0x10D6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: gsl::span<unsigned char,-1>* (0x10D2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (unsigned char*, unsigned char*) (0x10D5)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xd5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10D7) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::array<unsigned char,0>
	#   LinkageName: .?AV?$array@E$0A@@std@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x72, 0x72, 0x61, 0x79
	.byte	0x3c, 0x75, 0x6e, 0x73
	.byte	0x69, 0x67, 0x6e, 0x65
	.byte	0x64, 0x20, 0x63, 0x68
	.byte	0x61, 0x72, 0x2c, 0x30
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x61, 0x72, 0x72, 0x61
	.byte	0x79, 0x40, 0x45, 0x24
	.byte	0x30, 0x41, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Pointer (0x10D8) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::array<unsigned char,0> (0x10D7)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x10D9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::array<unsigned char,0>& (0x10D8)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xd8, 0x10, 0x00, 0x00
	# MemberFunction (0x10DA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: gsl::span<unsigned char,-1>* (0x10D2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::array<unsigned char,0>&) (0x10D9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xd9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x10DB) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::array<unsigned char,0> (0x10D7)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x10DC) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::array<unsigned char,0> (0x10DB)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xdb, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x10DD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::array<unsigned char,0>& (0x10DC)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xdc, 0x10, 0x00, 0x00
	# MemberFunction (0x10DE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: gsl::span<unsigned char,-1>* (0x10D2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::array<unsigned char,0>&) (0x10DD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xdd, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x10DF) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<unsigned char,-1> (0x10D0)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x10E0) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<unsigned char,-1> (0x10DF)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xdf, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x10E1) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::span<unsigned char,-1>& (0x10E0)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xe0, 0x10, 0x00, 0x00
	# MemberFunction (0x10E2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: gsl::span<unsigned char,-1>* (0x10D2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<unsigned char,-1>&) (0x10E1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xe1, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x10E3) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<unsigned char,-1>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@E$0?0@gsl@@
	# }
	.byte	0x62, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x4b
	.byte	0x6e, 0x6f, 0x77, 0x6e
	.byte	0x4e, 0x6f, 0x74, 0x4e
	.byte	0x75, 0x6c, 0x6c, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x45, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# ArgList (0x10E4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<unsigned char,-1>::KnownNotNull (0x10E3)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xe3, 0x10, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x10E5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: gsl::span<unsigned char,-1>* (0x10D2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<unsigned char,-1>::KnownNotNull, __int64) (0x10E4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xe4, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10E6) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<unsigned char,-1>::(unsigned char*, __int64) (0x10D4)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<unsigned char,-1>::(unsigned char*, unsigned char*) (0x10D6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<unsigned char,-1>::(std::array<unsigned char,0>&) (0x10DA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<unsigned char,-1>::(const std::array<unsigned char,0>&) (0x10DE)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<unsigned char,-1>::(const gsl::span<unsigned char,-1>&) (0x10E2)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void gsl::span<unsigned char,-1>::(gsl::span<unsigned char,-1>::KnownNotNull, __int64) (0x10E5)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd4, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd6, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xda, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xde, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe2, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xe5, 0x10, 0x00, 0x00
	# MemberFunction (0x10E7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: gsl::span<unsigned char,-1>* (0x10D2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10E8) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<unsigned char,-1> (0x10D0)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x10E9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<unsigned char,-1>& (0x10E8)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: gsl::span<unsigned char,-1>* (0x10D2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<unsigned char,-1>&) (0x10E1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xe8, 0x10, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xe1, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10EA) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<unsigned char,-1> (0x10DF)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xdf, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x10EB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<unsigned char,-1> (0x10D0)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: const gsl::span<unsigned char,-1>* (0x10EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10EC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<unsigned char,-1> (0x10D0)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: const gsl::span<unsigned char,-1>* (0x10EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10ED) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: const gsl::span<unsigned char,-1>* (0x10EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10EE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: const gsl::span<unsigned char,-1>* (0x10EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10EF) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: unsigned char (0x20)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x20, 0x00, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x10F0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned char& (0x10EF)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: const gsl::span<unsigned char,-1>* (0x10EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xef, 0x10, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10F1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned char* (0x620)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: const gsl::span<unsigned char,-1>* (0x10EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10F2) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x45, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x41, 0x40
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x10F3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: const gsl::span<unsigned char,-1>* (0x10EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10F4) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<unsigned char,-1>,1>
	#   LinkageName: .?AV?$span_iterator@V?$span@E$0?0@gsl@@$00@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x45, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x10F5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,1> (0x10F4)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: const gsl::span<unsigned char,-1>* (0x10EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf4, 0x10, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10F6) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@@std@@
	# }
	.byte	0xbe, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x75, 0x6e
	.byte	0x73, 0x69, 0x67, 0x6e
	.byte	0x65, 0x64, 0x20, 0x63
	.byte	0x68, 0x61, 0x72, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x30, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x45, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x41, 0x40
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x10F7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> > (0x10F6)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: const gsl::span<unsigned char,-1>* (0x10EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf6, 0x10, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10F8) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned char,-1>,1> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@E$0?0@gsl@@$00@details@gsl@@@std@@
	# }
	.byte	0xba, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x75, 0x6e
	.byte	0x73, 0x69, 0x67, 0x6e
	.byte	0x65, 0x64, 0x20, 0x63
	.byte	0x68, 0x61, 0x72, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x31, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x45, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# MemberFunction (0x10F9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned char,-1>,1> > (0x10F8)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: const gsl::span<unsigned char,-1>* (0x10EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10FA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10FB) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<unsigned char,-1>::subspan_selector<-1>
	#   LinkageName: .?AV?$subspan_selector@$0?0@?$span@E$0?0@gsl@@
	# }
	.byte	0x76, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x73
	.byte	0x75, 0x62, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x73
	.byte	0x65, 0x6c, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x73, 0x65
	.byte	0x6c, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x40, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x45
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# ArgList (0x10FC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#     ArgType: gsl::span<unsigned char,-1>::subspan_selector<-1> (0x10FB)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0xfb, 0x10, 0x00, 0x00
	# MemberFunction (0x10FD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<unsigned char,-1> (0x10D0)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: const gsl::span<unsigned char,-1>* (0x10EA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (__int64, __int64, gsl::span<unsigned char,-1>::subspan_selector<-1>) (0x10FC)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x10FE) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const __int64 (0x1003)
	#     Name: extent
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10D1)
	#     FieldOffset: 0x0
	#     Name: storage_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x10E6
	#     Name: span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<unsigned char,-1>::() (0x10E7)
	#     Name: ~span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<unsigned char,-1>& gsl::span<unsigned char,-1>::(const gsl::span<unsigned char,-1>&) (0x10E9)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<unsigned char,-1> gsl::span<unsigned char,-1>::(__int64) (0x10EB)
	#     Name: first
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<unsigned char,-1> gsl::span<unsigned char,-1>::(__int64) (0x10EB)
	#     Name: last
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<unsigned char,-1> gsl::span<unsigned char,-1>::(__int64, __int64) (0x10EC)
	#     Name: subspan
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<unsigned char,-1>::() (0x10ED)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<unsigned char,-1>::() (0x10ED)
	#     Name: size_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool gsl::span<unsigned char,-1>::() (0x10EE)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned char& gsl::span<unsigned char,-1>::(__int64) (0x10F0)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned char& gsl::span<unsigned char,-1>::(__int64) (0x10F0)
	#     Name: at
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned char& gsl::span<unsigned char,-1>::(__int64) (0x10F0)
	#     Name: operator()
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned char* gsl::span<unsigned char,-1>::() (0x10F1)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> gsl::span<unsigned char,-1>::() (0x10F3)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> gsl::span<unsigned char,-1>::() (0x10F3)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned char,-1>,1> gsl::span<unsigned char,-1>::() (0x10F5)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned char,-1>,1> gsl::span<unsigned char,-1>::() (0x10F5)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> > gsl::span<unsigned char,-1>::() (0x10F7)
	#     Name: rbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> > gsl::span<unsigned char,-1>::() (0x10F7)
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned char,-1>,1> > gsl::span<unsigned char,-1>::() (0x10F9)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned char,-1>,1> > gsl::span<unsigned char,-1>::() (0x10F9)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned char* gsl::span<unsigned char,-1>::() (0x10F1)
	#     Name: _Unchecked_begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned char* gsl::span<unsigned char,-1>::() (0x10F1)
	#     Name: _Unchecked_end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: bool gsl::span<unsigned char,-1>::(__int64, __int64) (0x10FA)
	#     Name: CheckRange
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<unsigned char,-1> gsl::span<unsigned char,-1>::(__int64, __int64, gsl::span<unsigned char,-1>::subspan_selector<-1>) (0x10FD)
	#     Name: make_subspan
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned char (0x20)
	#     Name: element_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned char (0x20)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned char* (0x620)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned char& (0x10EF)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned char,-1>,1> (0x10F4)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> > (0x10F6)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<unsigned char,-1>,1> > (0x10F8)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::span<unsigned char,-1>::KnownNotNull (0x10E3)
	#     Name: KnownNotNull
	#   }
	# }
	.byte	0xd6, 0x02, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0xe6, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe7, 0x10, 0x00, 0x00
	.byte	0x7e, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe9, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	.byte	0x66, 0x69, 0x72, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xec, 0x10, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xed, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xed, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xee, 0x10, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf0, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf0, 0x10, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf0, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf3, 0x10, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf3, 0x10, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf7, 0x10, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf7, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xfd, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x20, 0x00, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x20, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xef, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf4, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf6, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xe3, 0x10, 0x00, 0x00
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x10FF) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 43
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x10FE)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<unsigned char,-1>
	#   LinkageName: .?AV?$span@E$0?0@gsl@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x2b, 0x00, 0x10, 0x02
	.byte	0xfe, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x45, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1100) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<unsigned char,-1> (0x10FF)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 355
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x63, 0x01, 0x00, 0x00
	# Modifier (0x1101) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10D1)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1102) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1101)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x01, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1103) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned char* (0x620)
	#   ClassType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10D1)
	#   ThisType: const gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x1102)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x02, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1104) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: gsl::details::extent_type<-1> (0x1038)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: unsigned char* (0x620)
	#     FieldOffset: 0x8
	#     Name: data_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned char* gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x1103)
	#     Name: data
	#   }
	# }
	.byte	0x2e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x08, 0x00, 0x64, 0x61
	.byte	0x74, 0x61, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1105) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 3
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x1104)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@E$0?0@gsl@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x03, 0x00, 0x08, 0x02
	.byte	0x04, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x73
	.byte	0x74, 0x6f, 0x72, 0x61
	.byte	0x67, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x64, 0x79
	.byte	0x6e, 0x61, 0x6d, 0x69
	.byte	0x63, 0x5f, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x45, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1106) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1105)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 583
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x05, 0x11, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x02, 0x00, 0x00
	# FieldList (0x1107) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned char* (0x620)
	#     FieldOffset: 0x0
	#     Name: p
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x70, 0x00
	# Struct (0x1108) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x1107)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: gsl::span<unsigned char,-1>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@E$0?0@gsl@@
	# }
	.byte	0x62, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x07, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x4b
	.byte	0x6e, 0x6f, 0x77, 0x6e
	.byte	0x4e, 0x6f, 0x74, 0x4e
	.byte	0x75, 0x6c, 0x6c, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x45, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1109) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<unsigned char,-1>::KnownNotNull (0x1108)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 574
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x08, 0x11, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x3e, 0x02, 0x00, 0x00
	# Pointer (0x110A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x110B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ThisType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>* (0x110A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x0a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x110C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const gsl::span<unsigned char,-1>* (0x10EA)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x110D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ThisType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>* (0x110A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const gsl::span<unsigned char,-1>*, __int64) (0x110C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x0a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x0c, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x110E) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::() (0x110B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(const gsl::span<unsigned char,-1>*, __int64) (0x110D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0b, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	# Modifier (0x110F) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1110) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x110F)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x0f, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1111) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned char& (0x10EF)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ThisType: const gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>* (0x1110)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xef, 0x10, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1112) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned char* (0x620)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ThisType: const gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>* (0x1110)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1113) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1114) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>& (0x1113)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ThisType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>* (0x110A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x11, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x0a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1115) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ThisType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>* (0x110A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int) (0x104E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x0a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x4e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1116) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>& gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::() (0x1114)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(int) (0x1115)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x14, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x15, 0x11, 0x00, 0x00
	# MemberFunction (0x1117) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ThisType: const gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>* (0x1110)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1118) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>& (0x1113)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ThisType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>* (0x110A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x11, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x0a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1119) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	# MemberFunction (0x111A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ThisType: const gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>* (0x1110)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>) (0x1119)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x19, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x111B) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(__int64) (0x1117)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>) (0x111A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x17, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1a, 0x11, 0x00, 0x00
	# MemberFunction (0x111C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned char& (0x10EF)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ThisType: const gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>* (0x1110)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xef, 0x10, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x111D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ThisType: const gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>* (0x1110)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const __int64) (0x1057)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x57, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x111E) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: unsigned char* (0x620)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x111F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const unsigned char* (0x111E)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x1e, 0x11, 0x00, 0x00
	# MemberFunction (0x1120) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ThisType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>* (0x110A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned char*) (0x111F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x0a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1121) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x1042)
	#     Name: _Unwrap_when_unverified
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Protected (0x2)
	#     Type: const gsl::span<unsigned char,-1>* (0x10EA)
	#     FieldOffset: 0x0
	#     Name: span_
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Protected (0x2)
	#     Type: __int64 (0x13)
	#     FieldOffset: 0x8
	#     Name: index_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x110E
	#     Name: span_iterator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned char& gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::() (0x1111)
	#     Name: operator*
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned char* gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::() (0x1112)
	#     Name: operator->
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1116
	#     Name: operator++
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1116
	#     Name: operator--
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(__int64) (0x1117)
	#     Name: operator+
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>& gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(__int64) (0x1118)
	#     Name: operator+=
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x111B
	#     Name: operator-
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>& gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(__int64) (0x1118)
	#     Name: operator-=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned char& gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(__int64) (0x111C)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(const __int64) (0x111D)
	#     Name: _Verify_offset
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned char* gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::() (0x1112)
	#     Name: _Unwrapped
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(const unsigned char*) (0x1120)
	#     Name: _Seek_to
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned char (0x20)
	#     Name: element_type_
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned char* (0x620)
	#     Name: _Unchecked_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::random_access_iterator_tag (0x105C)
	#     Name: iterator_category
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned char (0x20)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned char& (0x10EF)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned char* (0x620)
	#     Name: pointer
	#   }
	# }
	.byte	0xee, 0x01, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x42, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x5f
	.byte	0x77, 0x68, 0x65, 0x6e
	.byte	0x5f, 0x75, 0x6e, 0x76
	.byte	0x65, 0x72, 0x69, 0x66
	.byte	0x69, 0x65, 0x64, 0x00
	.byte	0x0d, 0x15, 0x02, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x00
	.byte	0x0d, 0x15, 0x02, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x69, 0x6e
	.byte	0x64, 0x65, 0x78, 0x5f
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x0e, 0x11, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x11, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2a, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x12, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2d, 0x3e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x16, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x2b, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x16, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2d, 0x2d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x17, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x18, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x3d, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x1b, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x18, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2d, 0x3d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1c, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1d, 0x11, 0x00, 0x00
	.byte	0x5f, 0x56, 0x65, 0x72
	.byte	0x69, 0x66, 0x79, 0x5f
	.byte	0x6f, 0x66, 0x66, 0x73
	.byte	0x65, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x12, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x65, 0x65
	.byte	0x6b, 0x5f, 0x74, 0x6f
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x20, 0x00, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x5f, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x63, 0x61, 0x74
	.byte	0x65, 0x67, 0x6f, 0x72
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x20, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xef, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	# Class (0x1122) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 27
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1121)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@E$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x1b, 0x00, 0x10, 0x02
	.byte	0x21, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x75, 0x6e, 0x73, 0x69
	.byte	0x67, 0x6e, 0x65, 0x64
	.byte	0x20, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x45, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x41, 0x40
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1123) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x1122)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 125
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x7d, 0x00, 0x00, 0x00
	# Pointer (0x1124) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: 0x1095
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1125) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: & (0x1124)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x24, 0x11, 0x00, 0x00
	# MemberFunction (0x1126) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: gsl::span<unsigned char,-1>* (0x10D2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (&) (0x1125)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x25, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1127) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   FunctionType: void gsl::span<unsigned char,-1>::(&) (0x1126)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x26, 0x11, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1128) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   FunctionType: unsigned char& gsl::span<unsigned char,-1>::(__int64) (0x10F0)
	#   Name: operator[]
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xf0, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	# Procedure (0x1129) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned char (0x20)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (IDE_DRIVE_STATE&) (0x108D)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x20, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x8d, 0x10, 0x00, 0x00
	# FuncId (0x112A) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: unsigned char (IDE_DRIVE_STATE&) (0x1129)
	#   Name: test_convert_span_Joe
	# }
	.byte	0x22, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x29, 0x11, 0x00, 0x00
	.byte	0x74, 0x65, 0x73, 0x74
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x76, 0x65, 0x72, 0x74
	.byte	0x5f, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x4a, 0x6f
	.byte	0x65, 0x00, 0xf2, 0xf1
	# ArgList (0x112B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::span<unsigned short,-1> (0x1090)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	# Procedure (0x112C) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::span<unsigned char,-1> (0x10D0)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::span<unsigned short,-1>) (0x112B)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x2b, 0x11, 0x00, 0x00
	# FuncId (0x112D) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: gsl::span<unsigned char,-1> (gsl::span<unsigned short,-1>) (0x112C)
	#   Name: convert_span
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x2c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x76
	.byte	0x65, 0x72, 0x74, 0x5f
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x112E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<unsigned short,-1> (0x1090)
	#   PointerAttributes: 0x2002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 16
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x02, 0x00
	# Procedure (0x112F) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	# FuncId (0x1130) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: __int64 () (0x112F)
	#   Name: mysubspan1
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x2f, 0x11, 0x00, 0x00
	.byte	0x6d, 0x79, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x31, 0x00, 0xf1
	# Array (0x1131) {
	#   TypeLeafKind: LF_ARRAY (0x1503)
	#   ElementType: int (0x74)
	#   IndexType: unsigned __int64 (0x23)
	#   SizeOf: 24
	#   Name: 
	# }
	.byte	0x0e, 0x00, 0x03, 0x15
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x18, 0x00, 0x00, 0xf1
	# Class (0x1132) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,6>
	#   LinkageName: .?AV?$span@H$05@gsl@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x36, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x35, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1133) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,6>::storage_type<gsl::details::extent_type<6> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@
	# }
	.byte	0x9a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x36, 0x3e, 0x3a, 0x3a
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x3c, 0x67, 0x73, 0x6c
	.byte	0x3a, 0x3a, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x3c, 0x36
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x35, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x40
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x35, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Pointer (0x1134) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,6> (0x1132)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1135) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: gsl::span<int,6>* (0x1134)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, __int64) (0x1006)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1136) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: gsl::span<int,6>* (0x1134)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, int*) (0x1008)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x08, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1137) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: gsl::span<int,6>* (0x1134)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::array<int,0>&) (0x100C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x0c, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1138) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: gsl::span<int,6>* (0x1134)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::array<int,0>&) (0x1010)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x10, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1139) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<int,6> (0x1132)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x113A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,6> (0x1139)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x39, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x113B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::span<int,6>& (0x113A)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x3a, 0x11, 0x00, 0x00
	# MemberFunction (0x113C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: gsl::span<int,6>* (0x1134)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<int,6>&) (0x113B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x3b, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x113D) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,6>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@H$05@gsl@@
	# }
	.byte	0x56, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x36, 0x3e, 0x3a, 0x3a
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x4b, 0x6e, 0x6f
	.byte	0x77, 0x6e, 0x4e, 0x6f
	.byte	0x74, 0x4e, 0x75, 0x6c
	.byte	0x6c, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x48, 0x24, 0x30
	.byte	0x35, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# ArgList (0x113E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<int,6>::KnownNotNull (0x113D)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x113F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: gsl::span<int,6>* (0x1134)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<int,6>::KnownNotNull, __int64) (0x113E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x3e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1140) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,6>::(int*, __int64) (0x1135)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,6>::(int*, int*) (0x1136)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,6>::(std::array<int,0>&) (0x1137)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,6>::(const std::array<int,0>&) (0x1138)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,6>::(const gsl::span<int,6>&) (0x113C)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void gsl::span<int,6>::(gsl::span<int,6>::KnownNotNull, __int64) (0x113F)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x35, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x36, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x37, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3c, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	# MemberFunction (0x1141) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: gsl::span<int,6>* (0x1134)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1142) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,6> (0x1132)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1143) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,6>& (0x1142)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: gsl::span<int,6>* (0x1134)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<int,6>&) (0x113B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x42, 0x11, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x3b, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1144) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,6> (0x1139)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x39, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1145) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1000)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: const gsl::span<int,6>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1146) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1000)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: const gsl::span<int,6>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1147) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: const gsl::span<int,6>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1148) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: const gsl::span<int,6>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1149) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int& (0x1025)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: const gsl::span<int,6>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x114A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: const gsl::span<int,6>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x114B) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<int,6>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@H$05@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x7e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x36, 0x3e, 0x2c, 0x30
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x35, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x41, 0x40
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x114C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,6>,0> (0x114B)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: const gsl::span<int,6>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x114D) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<int,6>,1>
	#   LinkageName: .?AV?$span_iterator@V?$span@H$05@gsl@@$00@details@gsl@@
	# }
	.byte	0x7e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x36, 0x3e, 0x2c, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x35, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x114E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,6>,1> (0x114D)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: const gsl::span<int,6>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4d, 0x11, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x114F) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,6>,0> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@H$05@gsl@@$0A@@details@gsl@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x36, 0x3e
	.byte	0x2c, 0x30, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x35, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x41, 0x40
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x1150) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,6>,0> > (0x114F)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: const gsl::span<int,6>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4f, 0x11, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1151) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,6>,1> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@H$05@gsl@@$00@details@gsl@@@std@@
	# }
	.byte	0xae, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x36, 0x3e
	.byte	0x2c, 0x31, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x35, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# MemberFunction (0x1152) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,6>,1> > (0x1151)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: const gsl::span<int,6>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x51, 0x11, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1153) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1154) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,6>::subspan_selector<-1>
	#   LinkageName: .?AV?$subspan_selector@$0?0@?$span@H$05@gsl@@
	# }
	.byte	0x6a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x36, 0x3e, 0x3a, 0x3a
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x2d, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x75, 0x62, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x73
	.byte	0x65, 0x6c, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x48, 0x24, 0x30, 0x35
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# ArgList (0x1155) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#     ArgType: gsl::span<int,6>::subspan_selector<-1> (0x1154)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x54, 0x11, 0x00, 0x00
	# MemberFunction (0x1156) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1000)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: const gsl::span<int,6>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (__int64, __int64, gsl::span<int,6>::subspan_selector<-1>) (0x1155)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x55, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1157) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const __int64 (0x1003)
	#     Name: extent
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<int,6>::storage_type<gsl::details::extent_type<6> > (0x1133)
	#     FieldOffset: 0x0
	#     Name: storage_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x1140
	#     Name: span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,6>::() (0x1141)
	#     Name: ~span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,6>& gsl::span<int,6>::(const gsl::span<int,6>&) (0x1143)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,6>::(__int64) (0x1145)
	#     Name: first
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,6>::(__int64) (0x1145)
	#     Name: last
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,6>::(__int64, __int64) (0x1146)
	#     Name: subspan
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<int,6>::() (0x1147)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<int,6>::() (0x1147)
	#     Name: size_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool gsl::span<int,6>::() (0x1148)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,6>::(__int64) (0x1149)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,6>::(__int64) (0x1149)
	#     Name: at
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,6>::(__int64) (0x1149)
	#     Name: operator()
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,6>::() (0x114A)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,6>,0> gsl::span<int,6>::() (0x114C)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,6>,0> gsl::span<int,6>::() (0x114C)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,6>,1> gsl::span<int,6>::() (0x114E)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,6>,1> gsl::span<int,6>::() (0x114E)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,6>,0> > gsl::span<int,6>::() (0x1150)
	#     Name: rbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,6>,0> > gsl::span<int,6>::() (0x1150)
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,6>,1> > gsl::span<int,6>::() (0x1152)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,6>,1> > gsl::span<int,6>::() (0x1152)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,6>::() (0x114A)
	#     Name: _Unchecked_begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,6>::() (0x114A)
	#     Name: _Unchecked_end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: bool gsl::span<int,6>::(__int64, __int64) (0x1153)
	#     Name: CheckRange
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<int,-1> gsl::span<int,6>::(__int64, __int64, gsl::span<int,6>::subspan_selector<-1>) (0x1156)
	#     Name: make_subspan
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: element_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x674)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int& (0x1025)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<int,6>,0> (0x114B)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<int,6>,1> (0x114D)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,6>,0> > (0x114F)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,6>,1> > (0x1151)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::span<int,6>::KnownNotNull (0x113D)
	#     Name: KnownNotNull
	#   }
	# }
	.byte	0xd6, 0x02, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x33, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x40, 0x11, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x41, 0x11, 0x00, 0x00
	.byte	0x7e, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x43, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x45, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x72, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x45, 0x11, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x46, 0x11, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x48, 0x11, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x49, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x49, 0x11, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x49, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4a, 0x11, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4e, 0x11, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4e, 0x11, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x50, 0x11, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x50, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x52, 0x11, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x52, 0x11, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4a, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4a, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0x53, 0x11, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x56, 0x11, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4d, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4f, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x51, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1158) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 43
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1157)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: gsl::span<int,6>
	#   LinkageName: .?AV?$span@H$05@gsl@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x2b, 0x00, 0x10, 0x02
	.byte	0x57, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x36, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x35, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1159) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,6> (0x1158)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 355
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x58, 0x11, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x63, 0x01, 0x00, 0x00
	# Class (0x115A) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::extent_type<6>
	#   LinkageName: .?AV?$extent_type@$05@details@gsl@@
	# }
	.byte	0x56, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x36, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x65, 0x78, 0x74
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x24, 0x30, 0x35
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# Modifier (0x115B) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<int,6>::storage_type<gsl::details::extent_type<6> > (0x1133)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x33, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x115C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,6>::storage_type<gsl::details::extent_type<6> > (0x115B)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x5b, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x115D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: gsl::span<int,6>::storage_type<gsl::details::extent_type<6> > (0x1133)
	#   ThisType: const gsl::span<int,6>::storage_type<gsl::details::extent_type<6> >* (0x115C)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x33, 0x11, 0x00, 0x00
	.byte	0x5c, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x115E) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: gsl::details::extent_type<6> (0x115A)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: int* (0x674)
	#     FieldOffset: 0x0
	#     Name: data_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,6>::storage_type<gsl::details::extent_type<6> >::() (0x115D)
	#     Name: data
	#   }
	# }
	.byte	0x2e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x64, 0x61
	.byte	0x74, 0x61, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5d, 0x11, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x115F) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 3
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x115E)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: gsl::span<int,6>::storage_type<gsl::details::extent_type<6> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$05@details@gsl@@@?$span@H$05@gsl@@
	# }
	.byte	0x9a, 0x00, 0x04, 0x15
	.byte	0x03, 0x00, 0x08, 0x02
	.byte	0x5e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x36, 0x3e, 0x3a, 0x3a
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x3c, 0x67, 0x73, 0x6c
	.byte	0x3a, 0x3a, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x3c, 0x36
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x35, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x40
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x35, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1160) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,6>::storage_type<gsl::details::extent_type<6> > (0x115F)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 583
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x02, 0x00, 0x00
	# Struct (0x1161) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x103F)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: gsl::span<int,6>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@H$05@gsl@@
	# }
	.byte	0x56, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x3f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x36, 0x3e, 0x3a, 0x3a
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x4b, 0x6e, 0x6f
	.byte	0x77, 0x6e, 0x4e, 0x6f
	.byte	0x74, 0x4e, 0x75, 0x6c
	.byte	0x6c, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x48, 0x24, 0x30
	.byte	0x35, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1162) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,6>::KnownNotNull (0x1161)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 574
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x61, 0x11, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x3e, 0x02, 0x00, 0x00
	# Pointer (0x1163) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::extent_type<6> (0x115A)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1164) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<6> (0x115A)
	#   ThisType: gsl::details::extent_type<6>* (0x1163)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x63, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1165) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<6> (0x115A)
	#   ThisType: gsl::details::extent_type<6>* (0x1163)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x63, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1166) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<6>::() (0x1164)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<6>::(__int64) (0x1165)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x64, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x65, 0x11, 0x00, 0x00
	# Modifier (0x1167) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::extent_type<6> (0x115A)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1168) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::extent_type<6> (0x1167)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x67, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1169) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::details::extent_type<6> (0x115A)
	#   ThisType: const gsl::details::extent_type<6>* (0x1168)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x116A) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1166
	#     Name: extent_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::details::extent_type<6>::() (0x1169)
	#     Name: size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	# }
	.byte	0x3a, 0x00, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x66, 0x11, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x69, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Class (0x116B) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x116A)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: gsl::details::extent_type<6>
	#   LinkageName: .?AV?$extent_type@$05@details@gsl@@
	# }
	.byte	0x56, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0x6a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x36, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x65, 0x78, 0x74
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x24, 0x30, 0x35
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x116C) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::extent_type<6> (0x116B)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 304
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x6b, 0x11, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x30, 0x01, 0x00, 0x00
	# Pointer (0x116D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: 0x1131
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x31, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x116E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: & (0x116D)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x6d, 0x11, 0x00, 0x00
	# MemberFunction (0x116F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: gsl::span<int,6>* (0x1134)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (&) (0x116E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x6e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1170) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   FunctionType: void gsl::span<int,6>::(&) (0x116F)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x6f, 0x11, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1171) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   FunctionType: gsl::span<int,-1> gsl::span<int,6>::(__int64) (0x1145)
	#   Name: last
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x45, 0x11, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Procedure (0x1172) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	# FuncId (0x1173) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: __int64 (__int64) (0x1172)
	#   Name: mysubspan2
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0x6d, 0x79, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x32, 0x00, 0xf1
	# FuncId (0x1174) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: __int64 () (0x112F)
	#   Name: mysubspan3
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x2f, 0x11, 0x00, 0x00
	.byte	0x6d, 0x79, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x33, 0x00, 0xf1
	# MemberFuncId (0x1175) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   FunctionType: gsl::span<int,-1> gsl::span<int,6>::(__int64, __int64) (0x1146)
	#   Name: subspan
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x46, 0x11, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	# ArgList (0x1176) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Procedure (0x1177) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::span<int,-1> (0x1000)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (int*, __int64, __int64) (0x1176)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x76, 0x11, 0x00, 0x00
	# FuncId (0x1178) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: gsl::span<int,-1> (int*, __int64, __int64) (0x1177)
	#   Name: mysubspan4
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x77, 0x11, 0x00, 0x00
	.byte	0x6d, 0x79, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x34, 0x00, 0xf1
	# MemberFuncId (0x1179) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: void gsl::span<int,-1>::(int*, __int64) (0x1007)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x07, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x117A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: gsl::span<int,-1> gsl::span<int,-1>::(__int64) (0x1020)
	#   Name: last
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x20, 0x10, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x117B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: void gsl::span<int,-1>::() (0x101B)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x1b, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# FuncId (0x117C) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: gsl::span<int,-1> (int*, __int64, __int64) (0x1177)
	#   Name: mysubspan5
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x77, 0x11, 0x00, 0x00
	.byte	0x6d, 0x79, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x35, 0x00, 0xf1
	# MemberFuncId (0x117D) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: gsl::span<int,-1> gsl::span<int,-1>::(__int64, __int64) (0x1022)
	#   Name: subspan
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x22, 0x10, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	# Procedure (0x117E) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::span<int,-1> (0x1000)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, __int64) (0x1006)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	# FuncId (0x117F) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: gsl::span<int,-1> (int*, __int64) (0x117E)
	#   Name: mysubspan6
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x7e, 0x11, 0x00, 0x00
	.byte	0x6d, 0x79, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x36, 0x00, 0xf1
	# FuncId (0x1180) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: gsl::span<int,-1> (int*, __int64, __int64) (0x1177)
	#   Name: mysubspan7
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x77, 0x11, 0x00, 0x00
	.byte	0x6d, 0x79, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x37, 0x00, 0xf1
	# FuncId (0x1181) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: gsl::span<int,-1> (int*, __int64, __int64) (0x1177)
	#   Name: mysubspan8
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x77, 0x11, 0x00, 0x00
	.byte	0x6d, 0x79, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x38, 0x00, 0xf1
	# FuncId (0x1182) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: gsl::span<int,-1> (int*, __int64, __int64) (0x1177)
	#   Name: mysubspan9
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x77, 0x11, 0x00, 0x00
	.byte	0x6d, 0x79, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x39, 0x00, 0xf1
	# Procedure (0x1183) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	# FuncId (0x1184) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: void () (0x1183)
	#   Name: doterminate
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x83, 0x11, 0x00, 0x00
	.byte	0x64, 0x6f, 0x74, 0x65
	.byte	0x72, 0x6d, 0x69, 0x6e
	.byte	0x61, 0x74, 0x65, 0x00
	# ArgList (0x1185) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<int,-1> (0x1000)
	#     ArgType: gsl::span<int,-1> (0x1000)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	# Procedure (0x1186) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<int,-1>, gsl::span<int,-1>) (0x1185)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	# FuncId (0x1187) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: void (gsl::span<int,-1>, gsl::span<int,-1>) (0x1186)
	#   Name: copy_span
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x86, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x5f, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# StringId (0x1188) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: std
	# }
	.byte	0x0a, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x00
	# ArgList (0x1189) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#     ArgType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#     ArgType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	# Procedure (0x118A) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (gsl::details::span_iterator<gsl::span<int,-1>,0>, gsl::details::span_iterator<gsl::span<int,-1>,0>, gsl::details::span_iterator<gsl::span<int,-1>,0>) (0x1189)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x89, 0x11, 0x00, 0x00
	# FuncId (0x118B) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: gsl::details::span_iterator<gsl::span<int,-1>,0> (gsl::details::span_iterator<gsl::span<int,-1>,0>, gsl::details::span_iterator<gsl::span<int,-1>,0>, gsl::details::span_iterator<gsl::span<int,-1>,0>) (0x118A)
	#   Name: copy
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x8a, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x118C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   PointerAttributes: 0x2002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 16
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x02, 0x00
	# Pointer (0x118D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: int (0x74)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# FuncId (0x118E) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: void (gsl::span<int,-1>, gsl::span<int,-1>) (0x1186)
	#   Name: gsl_copy_span
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x86, 0x11, 0x00, 0x00
	.byte	0x67, 0x73, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x5f, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# StringId (0x118F) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: gsl
	# }
	.byte	0x0a, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x67, 0x73, 0x6c, 0x00
	# FuncId (0x1190) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl (0x118F)
	#   FunctionType: void (gsl::span<int,-1>, gsl::span<int,-1>) (0x1186)
	#   Name: copy
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x86, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# FuncId (0x1191) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: void () (0x1183)
	#   Name: test_string_std_copy
	# }
	.byte	0x22, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x83, 0x11, 0x00, 0x00
	.byte	0x74, 0x65, 0x73, 0x74
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x73, 0x74, 0x64, 0x5f
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Array (0x1192) {
	#   TypeLeafKind: LF_ARRAY (0x1503)
	#   ElementType: unsigned char (0x20)
	#   IndexType: unsigned __int64 (0x23)
	#   SizeOf: 10
	#   Name: 
	# }
	.byte	0x0e, 0x00, 0x03, 0x15
	.byte	0x20, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x0a, 0x00, 0x00, 0xf1
	# Class (0x1193) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::basic_string_span<const char,-1>
	#   LinkageName: .?AV?$basic_string_span@$$CBD$0?0@gsl@@
	# }
	.byte	0x62, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x62
	.byte	0x61, 0x73, 0x69, 0x63
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x3c, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x20, 0x63
	.byte	0x68, 0x61, 0x72, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x62, 0x61
	.byte	0x73, 0x69, 0x63, 0x5f
	.byte	0x73, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x24, 0x24, 0x43, 0x42
	.byte	0x44, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# Class (0x1194) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const char,-1>
	#   LinkageName: .?AV?$span@$$CBD$0?0@gsl@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x63, 0x68
	.byte	0x61, 0x72, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x24, 0x24
	.byte	0x43, 0x42, 0x44, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Pointer (0x1195) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::basic_string_span<const char,-1> (0x1193)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1196) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: gsl::basic_string_span<const char,-1>* (0x1195)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1197) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::basic_string_span<const char,-1> (0x1193)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1198) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::basic_string_span<const char,-1> (0x1197)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x97, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1199) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::basic_string_span<const char,-1>& (0x1198)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x98, 0x11, 0x00, 0x00
	# MemberFunction (0x119A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: gsl::basic_string_span<const char,-1>* (0x1195)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::basic_string_span<const char,-1>&) (0x1199)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x99, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x119B) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: char (0x70)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x119C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char (0x119B)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x119D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* (0x119C)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x119E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: gsl::basic_string_span<const char,-1>* (0x1195)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char*, __int64) (0x119D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x9d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x119F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* (0x119C)
	#     ArgType: const char* (0x119C)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	# MemberFunction (0x11A0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: gsl::basic_string_span<const char,-1>* (0x1195)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char*, const char*) (0x119F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x9f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11A1) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::basic_string_span<const char,-1>::() (0x1196)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::basic_string_span<const char,-1>::(const gsl::basic_string_span<const char,-1>&) (0x119A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::basic_string_span<const char,-1>::(const char*, __int64) (0x119E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::basic_string_span<const char,-1>::(const char*, const char*) (0x11A0)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9a, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa0, 0x11, 0x00, 0x00
	# Pointer (0x11A2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::basic_string_span<const char,-1> (0x1193)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x11A3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::basic_string_span<const char,-1>& (0x11A2)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: gsl::basic_string_span<const char,-1>* (0x1195)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::basic_string_span<const char,-1>&) (0x1199)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa2, 0x11, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x99, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x11A4) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::basic_string_span<const char,-1> (0x1197)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x97, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11A5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: const gsl::basic_string_span<const char,-1>* (0x11A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11A6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: const gsl::basic_string_span<const char,-1>* (0x11A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x11A7) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char (0x119B)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x11A8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char& (0x11A7)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: const gsl::basic_string_span<const char,-1>* (0x11A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11A9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x119C)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: const gsl::basic_string_span<const char,-1>* (0x11A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11AA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: const gsl::basic_string_span<const char,-1>* (0x11A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11AB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: const gsl::basic_string_span<const char,-1>* (0x11A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x11AC) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<const char,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x63, 0x68
	.byte	0x61, 0x72, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x2c, 0x30
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x24, 0x24
	.byte	0x43, 0x42, 0x44, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# MemberFunction (0x11AD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: const gsl::basic_string_span<const char,-1>* (0x11A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x11AE) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<const char,-1>,1>
	#   LinkageName: .?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$00@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x63, 0x68
	.byte	0x61, 0x72, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x2c, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x24, 0x24
	.byte	0x43, 0x42, 0x44, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x24, 0x30, 0x30
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x11AF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const char,-1>,1> (0x11AE)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: const gsl::basic_string_span<const char,-1>* (0x11A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x11B0) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,0> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@@std@@
	# }
	.byte	0xbe, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x20
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x2c, 0x2d, 0x31, 0x3e
	.byte	0x2c, 0x30, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x24, 0x24
	.byte	0x43, 0x42, 0x44, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x11B1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,0> > (0x11B0)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: const gsl::basic_string_span<const char,-1>* (0x11A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb0, 0x11, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x11B2) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,1> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@$$CBD$0?0@gsl@@$00@details@gsl@@@std@@
	# }
	.byte	0xbe, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x20
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x2c, 0x2d, 0x31, 0x3e
	.byte	0x2c, 0x31, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x24, 0x24
	.byte	0x43, 0x42, 0x44, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x24, 0x30, 0x30
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x11B3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,1> > (0x11B2)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: const gsl::basic_string_span<const char,-1>* (0x11A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb2, 0x11, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x11B4) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: const char* (0x119C)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11B5) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const const char* (0x11B4)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xb4, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x11B6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const const char*& (0x11B5)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xb5, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x11B7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const char,-1> (0x1194)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const const char*&, __int64) (0x11B6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xb6, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11B8) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<const char,-1> (0x1194)
	#     FieldOffset: 0x0
	#     Name: span_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x11A1
	#     Name: basic_string_span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::basic_string_span<const char,-1>& gsl::basic_string_span<const char,-1>::(const gsl::basic_string_span<const char,-1>&) (0x11A3)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::basic_string_span<const char,-1> gsl::basic_string_span<const char,-1>::(__int64) (0x11A5)
	#     Name: first
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::basic_string_span<const char,-1> gsl::basic_string_span<const char,-1>::(__int64) (0x11A5)
	#     Name: last
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::basic_string_span<const char,-1> gsl::basic_string_span<const char,-1>::(__int64, __int64) (0x11A6)
	#     Name: subspan
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& gsl::basic_string_span<const char,-1>::(__int64) (0x11A8)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& gsl::basic_string_span<const char,-1>::(__int64) (0x11A8)
	#     Name: operator()
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* gsl::basic_string_span<const char,-1>::() (0x11A9)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::basic_string_span<const char,-1>::() (0x11AA)
	#     Name: length
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::basic_string_span<const char,-1>::() (0x11AA)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::basic_string_span<const char,-1>::() (0x11AA)
	#     Name: size_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::basic_string_span<const char,-1>::() (0x11AA)
	#     Name: length_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool gsl::basic_string_span<const char,-1>::() (0x11AB)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,0> gsl::basic_string_span<const char,-1>::() (0x11AD)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,0> gsl::basic_string_span<const char,-1>::() (0x11AD)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,1> gsl::basic_string_span<const char,-1>::() (0x11AF)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,1> gsl::basic_string_span<const char,-1>::() (0x11AF)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,0> > gsl::basic_string_span<const char,-1>::() (0x11B1)
	#     Name: rbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,0> > gsl::basic_string_span<const char,-1>::() (0x11B1)
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,1> > gsl::basic_string_span<const char,-1>::() (0x11B3)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,1> > gsl::basic_string_span<const char,-1>::() (0x11B3)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: gsl::span<const char,-1> gsl::basic_string_span<const char,-1>::(const const char*&, __int64) (0x11B7)
	#     Name: remove_z
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char (0x119B)
	#     Name: element_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x119C)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x11A7)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x11A7)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::span<const char,-1> (0x1194)
	#     Name: impl_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,1> (0x11AE)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,0> > (0x11B0)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,1> > (0x11B2)
	#     Name: const_reverse_iterator
	#   }
	# }
	.byte	0x7a, 0x02, 0x03, 0x12
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x00
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xa1, 0x11, 0x00, 0x00
	.byte	0x62, 0x61, 0x73, 0x69
	.byte	0x63, 0x5f, 0x73, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa3, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa5, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x72, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa5, 0x11, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa6, 0x11, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa8, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa8, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa9, 0x11, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xaa, 0x11, 0x00, 0x00
	.byte	0x6c, 0x65, 0x6e, 0x67
	.byte	0x74, 0x68, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xaa, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xaa, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xaa, 0x11, 0x00, 0x00
	.byte	0x6c, 0x65, 0x6e, 0x67
	.byte	0x74, 0x68, 0x5f, 0x62
	.byte	0x79, 0x74, 0x65, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xab, 0x11, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xad, 0x11, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xad, 0x11, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xaf, 0x11, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xaf, 0x11, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb3, 0x11, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb3, 0x11, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0xb7, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x6d, 0x6f
	.byte	0x76, 0x65, 0x5f, 0x7a
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb0, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb2, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	# Class (0x11B9) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 36
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11B8)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::basic_string_span<const char,-1>
	#   LinkageName: .?AV?$basic_string_span@$$CBD$0?0@gsl@@
	# }
	.byte	0x62, 0x00, 0x04, 0x15
	.byte	0x24, 0x00, 0x10, 0x02
	.byte	0xb8, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x62
	.byte	0x61, 0x73, 0x69, 0x63
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x3c, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x20, 0x63
	.byte	0x68, 0x61, 0x72, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x62, 0x61
	.byte	0x73, 0x69, 0x63, 0x5f
	.byte	0x73, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x24, 0x24, 0x43, 0x42
	.byte	0x44, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# StringId (0x11BA) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\projects\gsl\include\gsl\string_span
	# }
	.byte	0x2e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x70
	.byte	0x72, 0x6f, 0x6a, 0x65
	.byte	0x63, 0x74, 0x73, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x73, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	# UdtSourceLine (0x11BB) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::basic_string_span<const char,-1> (0x11B9)
	#   SourceFile: C:\projects\gsl\include\gsl\string_span (0x11BA)
	#   LineNumber: 174
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xb9, 0x11, 0x00, 0x00
	.byte	0xba, 0x11, 0x00, 0x00
	.byte	0xae, 0x00, 0x00, 0x00
	# Class (0x11BC) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@
	# }
	.byte	0xb6, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x63, 0x68
	.byte	0x61, 0x72, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x3a, 0x3a
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x3c, 0x67, 0x73, 0x6c
	.byte	0x3a, 0x3a, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x3c, 0x64
	.byte	0x79, 0x6e, 0x61, 0x6d
	.byte	0x69, 0x63, 0x5f, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x74, 0x6f, 0x72, 0x61
	.byte	0x67, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x40
	.byte	0x56, 0x3f, 0x24, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x44, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x11BD) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const char,-1> (0x1194)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11BE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: gsl::span<const char,-1>* (0x11BD)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char*, __int64) (0x119D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xbd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x9d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11BF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: gsl::span<const char,-1>* (0x11BD)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char*, const char*) (0x119F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xbd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x9f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x11C0) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::array<char,0>
	#   LinkageName: .?AV?$array@D$0A@@std@@
	# }
	.byte	0x42, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x72, 0x72, 0x61, 0x79
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x61
	.byte	0x72, 0x72, 0x61, 0x79
	.byte	0x40, 0x44, 0x24, 0x30
	.byte	0x41, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x11C1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::array<char,0> (0x11C0)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc0, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x11C2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::array<char,0>& (0x11C1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	# MemberFunction (0x11C3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: gsl::span<const char,-1>* (0x11BD)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::array<char,0>&) (0x11C2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xbd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc2, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x11C4) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::array<char,0> (0x11C0)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xc0, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11C5) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::array<char,0> (0x11C4)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc4, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x11C6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::array<char,0>& (0x11C5)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xc5, 0x11, 0x00, 0x00
	# MemberFunction (0x11C7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: gsl::span<const char,-1>* (0x11BD)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::array<char,0>&) (0x11C6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xbd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc6, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x11C8) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<const char,-1> (0x1194)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11C9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<const char,-1> (0x11C8)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc8, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x11CA) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::span<const char,-1>& (0x11C9)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xc9, 0x11, 0x00, 0x00
	# MemberFunction (0x11CB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: gsl::span<const char,-1>* (0x11BD)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<const char,-1>&) (0x11CA)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xbd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xca, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x11CC) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const char,-1>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@$$CBD$0?0@gsl@@
	# }
	.byte	0x66, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x63, 0x68
	.byte	0x61, 0x72, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x3a, 0x3a
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x4b, 0x6e, 0x6f
	.byte	0x77, 0x6e, 0x4e, 0x6f
	.byte	0x74, 0x4e, 0x75, 0x6c
	.byte	0x6c, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x44, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x11CD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<const char,-1>::KnownNotNull (0x11CC)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xcc, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x11CE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: gsl::span<const char,-1>* (0x11BD)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<const char,-1>::KnownNotNull, __int64) (0x11CD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xbd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xcd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11CF) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const char,-1>::(const char*, __int64) (0x11BE)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const char,-1>::(const char*, const char*) (0x11BF)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const char,-1>::(std::array<char,0>&) (0x11C3)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const char,-1>::(const std::array<char,0>&) (0x11C7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const char,-1>::(const gsl::span<const char,-1>&) (0x11CB)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void gsl::span<const char,-1>::(gsl::span<const char,-1>::KnownNotNull, __int64) (0x11CE)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbe, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbf, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc3, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc7, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcb, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xce, 0x11, 0x00, 0x00
	# MemberFunction (0x11D0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: gsl::span<const char,-1>* (0x11BD)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xbd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x11D1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const char,-1> (0x1194)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x11D2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const char,-1>& (0x11D1)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: gsl::span<const char,-1>* (0x11BD)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<const char,-1>&) (0x11CA)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xd1, 0x11, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xbd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xca, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x11D3) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<const char,-1> (0x11C8)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc8, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11D4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const char,-1> (0x1194)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: const gsl::span<const char,-1>* (0x11D3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11D5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const char,-1> (0x1194)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: const gsl::span<const char,-1>* (0x11D3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11D6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: const gsl::span<const char,-1>* (0x11D3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11D7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: const gsl::span<const char,-1>* (0x11D3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11D8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char& (0x11A7)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: const gsl::span<const char,-1>* (0x11D3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11D9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x119C)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: const gsl::span<const char,-1>* (0x11D3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11DA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: const gsl::span<const char,-1>* (0x11D3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11DB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const char,-1>,1> (0x11AE)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: const gsl::span<const char,-1>* (0x11D3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11DC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,0> > (0x11B0)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: const gsl::span<const char,-1>* (0x11D3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb0, 0x11, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11DD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,1> > (0x11B2)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: const gsl::span<const char,-1>* (0x11D3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb2, 0x11, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11DE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x11DF) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const char,-1>::subspan_selector<-1>
	#   LinkageName: .?AV?$subspan_selector@$0?0@?$span@$$CBD$0?0@gsl@@
	# }
	.byte	0x76, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x63, 0x68
	.byte	0x61, 0x72, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x3a, 0x3a
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x2d, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x75, 0x62, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x73
	.byte	0x65, 0x6c, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x24, 0x24, 0x43, 0x42
	.byte	0x44, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# ArgList (0x11E0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#     ArgType: gsl::span<const char,-1>::subspan_selector<-1> (0x11DF)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0xdf, 0x11, 0x00, 0x00
	# MemberFunction (0x11E1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const char,-1> (0x1194)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: const gsl::span<const char,-1>* (0x11D3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (__int64, __int64, gsl::span<const char,-1>::subspan_selector<-1>) (0x11E0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xe0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11E2) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const __int64 (0x1003)
	#     Name: extent
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x11BC)
	#     FieldOffset: 0x0
	#     Name: storage_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x11CF
	#     Name: span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const char,-1>::() (0x11D0)
	#     Name: ~span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const char,-1>& gsl::span<const char,-1>::(const gsl::span<const char,-1>&) (0x11D2)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const char,-1> gsl::span<const char,-1>::(__int64) (0x11D4)
	#     Name: first
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const char,-1> gsl::span<const char,-1>::(__int64) (0x11D4)
	#     Name: last
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const char,-1> gsl::span<const char,-1>::(__int64, __int64) (0x11D5)
	#     Name: subspan
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<const char,-1>::() (0x11D6)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<const char,-1>::() (0x11D6)
	#     Name: size_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool gsl::span<const char,-1>::() (0x11D7)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& gsl::span<const char,-1>::(__int64) (0x11D8)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& gsl::span<const char,-1>::(__int64) (0x11D8)
	#     Name: at
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& gsl::span<const char,-1>::(__int64) (0x11D8)
	#     Name: operator()
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* gsl::span<const char,-1>::() (0x11D9)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,0> gsl::span<const char,-1>::() (0x11DA)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,0> gsl::span<const char,-1>::() (0x11DA)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,1> gsl::span<const char,-1>::() (0x11DB)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,1> gsl::span<const char,-1>::() (0x11DB)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,0> > gsl::span<const char,-1>::() (0x11DC)
	#     Name: rbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,0> > gsl::span<const char,-1>::() (0x11DC)
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,1> > gsl::span<const char,-1>::() (0x11DD)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,1> > gsl::span<const char,-1>::() (0x11DD)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* gsl::span<const char,-1>::() (0x11D9)
	#     Name: _Unchecked_begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* gsl::span<const char,-1>::() (0x11D9)
	#     Name: _Unchecked_end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: bool gsl::span<const char,-1>::(__int64, __int64) (0x11DE)
	#     Name: CheckRange
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<const char,-1> gsl::span<const char,-1>::(__int64, __int64, gsl::span<const char,-1>::subspan_selector<-1>) (0x11E1)
	#     Name: make_subspan
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char (0x119B)
	#     Name: element_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x119C)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x11A7)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,1> (0x11AE)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,0> > (0x11B0)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const char,-1>,1> > (0x11B2)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::span<const char,-1>::KnownNotNull (0x11CC)
	#     Name: KnownNotNull
	#   }
	# }
	.byte	0xd6, 0x02, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0xbc, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0xcf, 0x11, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd0, 0x11, 0x00, 0x00
	.byte	0x7e, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd2, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd4, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x72, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd4, 0x11, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd5, 0x11, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd6, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd6, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd8, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd8, 0x11, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd8, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd9, 0x11, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xda, 0x11, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xda, 0x11, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdb, 0x11, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdb, 0x11, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdc, 0x11, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdc, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdd, 0x11, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdd, 0x11, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd9, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd9, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0xde, 0x11, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0xe1, 0x11, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb0, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb2, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xcc, 0x11, 0x00, 0x00
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x11E3) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 43
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11E2)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<const char,-1>
	#   LinkageName: .?AV?$span@$$CBD$0?0@gsl@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x2b, 0x00, 0x10, 0x02
	.byte	0xe2, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x63, 0x68
	.byte	0x61, 0x72, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x24, 0x24
	.byte	0x43, 0x42, 0x44, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x11E4) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<const char,-1> (0x11E3)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 355
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xe3, 0x11, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x63, 0x01, 0x00, 0x00
	# Pointer (0x11E5) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11E6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ThisType: gsl::details::span_iterator<gsl::span<const char,-1>,0>* (0x11E5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xe5, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11E7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const gsl::span<const char,-1>* (0x11D3)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x11E8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ThisType: gsl::details::span_iterator<gsl::span<const char,-1>,0>* (0x11E5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const gsl::span<const char,-1>*, __int64) (0x11E7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xe5, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xe7, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11E9) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::span_iterator<gsl::span<const char,-1>,0>::() (0x11E6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::span_iterator<gsl::span<const char,-1>,0>::(const gsl::span<const char,-1>*, __int64) (0x11E8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe6, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe8, 0x11, 0x00, 0x00
	# Modifier (0x11EA) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11EB) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11EA)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xea, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11EC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char& (0x11A7)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ThisType: const gsl::details::span_iterator<gsl::span<const char,-1>,0>* (0x11EB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11ED) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x119C)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ThisType: const gsl::details::span_iterator<gsl::span<const char,-1>,0>* (0x11EB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x11EE) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x11EF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const char,-1>,0>& (0x11EE)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ThisType: gsl::details::span_iterator<gsl::span<const char,-1>,0>* (0x11E5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xee, 0x11, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xe5, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11F0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ThisType: gsl::details::span_iterator<gsl::span<const char,-1>,0>* (0x11E5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int) (0x104E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xe5, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x4e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11F1) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,0>& gsl::details::span_iterator<gsl::span<const char,-1>,0>::() (0x11EF)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,0> gsl::details::span_iterator<gsl::span<const char,-1>,0>::(int) (0x11F0)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xef, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf0, 0x11, 0x00, 0x00
	# MemberFunction (0x11F2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ThisType: const gsl::details::span_iterator<gsl::span<const char,-1>,0>* (0x11EB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11F3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const char,-1>,0>& (0x11EE)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ThisType: gsl::details::span_iterator<gsl::span<const char,-1>,0>* (0x11E5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xee, 0x11, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xe5, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11F4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	# MemberFunction (0x11F5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ThisType: const gsl::details::span_iterator<gsl::span<const char,-1>,0>* (0x11EB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::details::span_iterator<gsl::span<const char,-1>,0>) (0x11F4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11F6) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,0> gsl::details::span_iterator<gsl::span<const char,-1>,0>::(__int64) (0x11F2)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::details::span_iterator<gsl::span<const char,-1>,0>::(gsl::details::span_iterator<gsl::span<const char,-1>,0>) (0x11F5)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf5, 0x11, 0x00, 0x00
	# MemberFunction (0x11F7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char& (0x11A7)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ThisType: const gsl::details::span_iterator<gsl::span<const char,-1>,0>* (0x11EB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11F8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ThisType: const gsl::details::span_iterator<gsl::span<const char,-1>,0>* (0x11EB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const __int64) (0x1057)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x57, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11F9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const const char* (0x11B4)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xb4, 0x11, 0x00, 0x00
	# MemberFunction (0x11FA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ThisType: gsl::details::span_iterator<gsl::span<const char,-1>,0>* (0x11E5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const const char*) (0x11F9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xe5, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf9, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11FB) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x1042)
	#     Name: _Unwrap_when_unverified
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Protected (0x2)
	#     Type: const gsl::span<const char,-1>* (0x11D3)
	#     FieldOffset: 0x0
	#     Name: span_
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Protected (0x2)
	#     Type: __int64 (0x13)
	#     FieldOffset: 0x8
	#     Name: index_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11E9
	#     Name: span_iterator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& gsl::details::span_iterator<gsl::span<const char,-1>,0>::() (0x11EC)
	#     Name: operator*
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* gsl::details::span_iterator<gsl::span<const char,-1>,0>::() (0x11ED)
	#     Name: operator->
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11F1
	#     Name: operator++
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11F1
	#     Name: operator--
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,0> gsl::details::span_iterator<gsl::span<const char,-1>,0>::(__int64) (0x11F2)
	#     Name: operator+
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,0>& gsl::details::span_iterator<gsl::span<const char,-1>,0>::(__int64) (0x11F3)
	#     Name: operator+=
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11F6
	#     Name: operator-
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const char,-1>,0>& gsl::details::span_iterator<gsl::span<const char,-1>,0>::(__int64) (0x11F3)
	#     Name: operator-=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& gsl::details::span_iterator<gsl::span<const char,-1>,0>::(__int64) (0x11F7)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::span_iterator<gsl::span<const char,-1>,0>::(const __int64) (0x11F8)
	#     Name: _Verify_offset
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* gsl::details::span_iterator<gsl::span<const char,-1>,0>::() (0x11ED)
	#     Name: _Unwrapped
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::span_iterator<gsl::span<const char,-1>,0>::(const const char*) (0x11FA)
	#     Name: _Seek_to
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char (0x119B)
	#     Name: element_type_
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x119C)
	#     Name: _Unchecked_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::random_access_iterator_tag (0x105C)
	#     Name: iterator_category
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x11A7)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x119C)
	#     Name: pointer
	#   }
	# }
	.byte	0xee, 0x01, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x42, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x5f
	.byte	0x77, 0x68, 0x65, 0x6e
	.byte	0x5f, 0x75, 0x6e, 0x76
	.byte	0x65, 0x72, 0x69, 0x66
	.byte	0x69, 0x65, 0x64, 0x00
	.byte	0x0d, 0x15, 0x02, 0x00
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x00
	.byte	0x0d, 0x15, 0x02, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x69, 0x6e
	.byte	0x64, 0x65, 0x78, 0x5f
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xe9, 0x11, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xec, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2a, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xed, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2d, 0x3e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xf1, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x2b, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xf1, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2d, 0x2d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x3d, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xf6, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2d, 0x3d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf7, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf8, 0x11, 0x00, 0x00
	.byte	0x5f, 0x56, 0x65, 0x72
	.byte	0x69, 0x66, 0x79, 0x5f
	.byte	0x6f, 0x66, 0x66, 0x73
	.byte	0x65, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xed, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x65, 0x65
	.byte	0x6b, 0x5f, 0x74, 0x6f
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x5f, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x63, 0x61, 0x74
	.byte	0x65, 0x67, 0x6f, 0x72
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	# Class (0x11FC) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 27
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11FB)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::details::span_iterator<gsl::span<const char,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@$$CBD$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x1b, 0x00, 0x10, 0x02
	.byte	0xfb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x63, 0x68
	.byte	0x61, 0x72, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x2c, 0x30
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x24, 0x24
	.byte	0x43, 0x42, 0x44, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# UdtSourceLine (0x11FD) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11FC)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 125
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x7d, 0x00, 0x00, 0x00
	# Modifier (0x11FE) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x11BC)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xbc, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11FF) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x11FE)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xfe, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1200) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x119C)
	#   ClassType: gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x11BC)
	#   ThisType: const gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x11FF)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0xbc, 0x11, 0x00, 0x00
	.byte	0xff, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1201) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: gsl::details::extent_type<-1> (0x1038)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: const char* (0x119C)
	#     FieldOffset: 0x8
	#     Name: data_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x1200)
	#     Name: data
	#   }
	# }
	.byte	0x2e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x08, 0x00, 0x64, 0x61
	.byte	0x74, 0x61, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x00, 0x12, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1202) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 3
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x1201)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBD$0?0@gsl@@
	# }
	.byte	0xb6, 0x00, 0x04, 0x15
	.byte	0x03, 0x00, 0x08, 0x02
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x63, 0x68
	.byte	0x61, 0x72, 0x2c, 0x2d
	.byte	0x31, 0x3e, 0x3a, 0x3a
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x3c, 0x67, 0x73, 0x6c
	.byte	0x3a, 0x3a, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x3c, 0x64
	.byte	0x79, 0x6e, 0x61, 0x6d
	.byte	0x69, 0x63, 0x5f, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x74, 0x6f, 0x72, 0x61
	.byte	0x67, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x40
	.byte	0x56, 0x3f, 0x24, 0x65
	.byte	0x78, 0x74, 0x65, 0x6e
	.byte	0x74, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x44, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1203) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1202)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 583
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x02, 0x12, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x02, 0x00, 0x00
	# Pointer (0x1204) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: 0x1192
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1205) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: & (0x1204)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x04, 0x12, 0x00, 0x00
	# MemberFunction (0x1206) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   ThisType: gsl::span<unsigned char,-1>* (0x10D2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (&) (0x1205)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x05, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1207) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   FunctionType: void gsl::span<unsigned char,-1>::(&) (0x1206)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x06, 0x12, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Array (0x1208) {
	#   TypeLeafKind: LF_ARRAY (0x1503)
	#   ElementType: const char (0x119B)
	#   IndexType: unsigned __int64 (0x23)
	#   SizeOf: 11
	#   Name: 
	# }
	.byte	0x0e, 0x00, 0x03, 0x15
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0xf1
	# Pointer (0x1209) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: 0x1208
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x08, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x120A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: & (0x1209)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x09, 0x12, 0x00, 0x00
	# Procedure (0x120B) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::span<const char,-1> (0x1194)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (&) (0x120A)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x0a, 0x12, 0x00, 0x00
	# FuncId (0x120C) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl (0x118F)
	#   FunctionType: gsl::span<const char,-1> (&) (0x120B)
	#   Name: ensure_z
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x0b, 0x12, 0x00, 0x00
	.byte	0x65, 0x6e, 0x73, 0x75
	.byte	0x72, 0x65, 0x5f, 0x7a
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x120D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   ThisType: gsl::basic_string_span<const char,-1>* (0x1195)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<const char,-1>&) (0x11CA)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xca, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x120E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   FunctionType: void gsl::basic_string_span<const char,-1>::(const gsl::span<const char,-1>&) (0x120D)
	#   Name: basic_string_span
	# }
	.byte	0x1e, 0x00, 0x02, 0x16
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x0d, 0x12, 0x00, 0x00
	.byte	0x62, 0x61, 0x73, 0x69
	.byte	0x63, 0x5f, 0x73, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# ArgList (0x120F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#     ArgType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#     ArgType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	# Procedure (0x1210) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (gsl::details::span_iterator<gsl::span<const char,-1>,0>, gsl::details::span_iterator<gsl::span<const char,-1>,0>, gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>) (0x120F)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x0f, 0x12, 0x00, 0x00
	# FuncId (0x1211) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (gsl::details::span_iterator<gsl::span<const char,-1>,0>, gsl::details::span_iterator<gsl::span<const char,-1>,0>, gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>) (0x1210)
	#   Name: copy
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x10, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x1212) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   PointerAttributes: 0x2002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 16
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x02, 0x00
	# Pointer (0x1213) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   PointerAttributes: 0x2002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 16
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x02, 0x00
	# Pointer (0x1214) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char (0x119B)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# Pointer (0x1215) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: unsigned char (0x20)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x20, 0x00, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# MemberFuncId (0x1216) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   FunctionType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> gsl::span<unsigned char,-1>::() (0x10F3)
	#   Name: begin
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xf3, 0x10, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x1217) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   FunctionType: gsl::details::span_iterator<gsl::span<const char,-1>,0> gsl::basic_string_span<const char,-1>::() (0x11AD)
	#   Name: end
	# }
	.byte	0x0e, 0x00, 0x02, 0x16
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xad, 0x11, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	# MemberFuncId (0x1218) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   FunctionType: gsl::details::span_iterator<gsl::span<const char,-1>,0> gsl::basic_string_span<const char,-1>::() (0x11AD)
	#   Name: begin
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xad, 0x11, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# FuncId (0x1219) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: void () (0x1183)
	#   Name: test_string_gsl_copy
	# }
	.byte	0x22, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x83, 0x11, 0x00, 0x00
	.byte	0x74, 0x65, 0x73, 0x74
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x67, 0x73, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x121A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<const char,-1> (0x1194)
	#     ArgType: gsl::span<unsigned char,-1> (0x10D0)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	# Procedure (0x121B) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<const char,-1>, gsl::span<unsigned char,-1>) (0x121A)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x1a, 0x12, 0x00, 0x00
	# FuncId (0x121C) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl (0x118F)
	#   FunctionType: void (gsl::span<const char,-1>, gsl::span<unsigned char,-1>) (0x121B)
	#   Name: copy
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x1b, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x121D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const char,-1> (0x1194)
	#   PointerAttributes: 0x2002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 16
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x02, 0x00
	# Pointer (0x121E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<unsigned char,-1> (0x10D0)
	#   PointerAttributes: 0x2002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 16
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x02, 0x00
	# ArgList (0x121F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::basic_string_span<const char,-1>& (0x11A2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa2, 0x11, 0x00, 0x00
	# MemberFunction (0x1220) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   ThisType: gsl::span<const char,-1>* (0x11BD)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::basic_string_span<const char,-1>&) (0x121F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xbd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1221) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   FunctionType: void gsl::span<const char,-1>::(gsl::basic_string_span<const char,-1>&) (0x1220)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1222) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: bool gsl::span<int,-1>::(__int64, __int64) (0x1030)
	#   Name: CheckRange
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x30, 0x10, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	# MemberFuncId (0x1223) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   FunctionType: __int64 gsl::details::extent_type<-1>::() (0x1067)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x67, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x1224) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::fail_fast
	#   LinkageName: .?AUfail_fast@gsl@@
	# }
	.byte	0x3a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x66
	.byte	0x61, 0x69, 0x6c, 0x5f
	.byte	0x66, 0x61, 0x73, 0x74
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x66, 0x61, 0x69
	.byte	0x6c, 0x5f, 0x66, 0x61
	.byte	0x73, 0x74, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x1225) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::fail_fast (0x1224)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x1226) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::fail_fast&& (0x1225)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x25, 0x12, 0x00, 0x00
	# Procedure (0x1227) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::fail_fast&&) (0x1226)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x26, 0x12, 0x00, 0x00
	# VFTableShape (0x1228) {
	#   TypeLeafKind: LF_VTSHAPE (0xA)
	#   VFEntryCount: 2
	# }
	.byte	0x06, 0x00, 0x0a, 0x00
	.byte	0x02, 0x00, 0x55, 0xf1
	# Class (0x1229) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::logic_error
	#   LinkageName: .?AVlogic_error@std@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x122A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::fail_fast (0x1224)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x122B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char* const (0x1214)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	# MemberFunction (0x122C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x1224)
	#   ThisType: gsl::fail_fast* (0x122A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x122B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x2a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x2b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x122D) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::logic_error (0x1229)
	#     BaseOffset: 0x0
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::fail_fast::(const char* const) (0x122C)
	#     Name: fail_fast
	#   }
	# }
	.byte	0x22, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2c, 0x12, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Struct (0x122E) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 2
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x122D)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x1228)
	#   SizeOf: 24
	#   Name: gsl::fail_fast
	#   LinkageName: .?AUfail_fast@gsl@@
	# }
	.byte	0x3a, 0x00, 0x05, 0x15
	.byte	0x02, 0x00, 0x00, 0x02
	.byte	0x2d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x12, 0x00, 0x00
	.byte	0x18, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x66
	.byte	0x61, 0x69, 0x6c, 0x5f
	.byte	0x66, 0x61, 0x73, 0x74
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x66, 0x61, 0x69
	.byte	0x6c, 0x5f, 0x66, 0x61
	.byte	0x73, 0x74, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x122F) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\projects\gsl\include\gsl\gsl_assert
	# }
	.byte	0x2e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x70
	.byte	0x72, 0x6f, 0x6a, 0x65
	.byte	0x63, 0x74, 0x73, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5f
	.byte	0x61, 0x73, 0x73, 0x65
	.byte	0x72, 0x74, 0x00, 0xf1
	# UdtSourceLine (0x1230) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::fail_fast (0x122E)
	#   SourceFile: C:\projects\gsl\include\gsl\gsl_assert (0x122F)
	#   LineNumber: 97
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x2e, 0x12, 0x00, 0x00
	.byte	0x2f, 0x12, 0x00, 0x00
	.byte	0x61, 0x00, 0x00, 0x00
	# Class (0x1231) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::exception
	#   LinkageName: .?AVexception@std@@
	# }
	.byte	0x3a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x63, 0x65, 0x70
	.byte	0x74, 0x69, 0x6f, 0x6e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x1232) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::logic_error (0x1229)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Class (0x1233) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::basic_string<char,std::char_traits<char>,std::allocator<char> >
	#   LinkageName: .?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@
	# }
	.byte	0x9e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x61, 0x73, 0x69, 0x63
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x40, 0x44, 0x55
	.byte	0x3f, 0x24, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x44, 0x40
	.byte	0x32, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x1234) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1235) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1234)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x34, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1236) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	# MemberFunction (0x1237) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x1229)
	#   ThisType: std::logic_error* (0x1232)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1236)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x32, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x36, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1238) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char* (0x119C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	# MemberFunction (0x1239) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x1229)
	#   ThisType: std::logic_error* (0x1232)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char*) (0x1238)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x32, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x38, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x123A) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::logic_error::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1237)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::logic_error::(const char*) (0x1239)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x37, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x39, 0x12, 0x00, 0x00
	# FieldList (0x123B) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::exception (0x1231)
	#     BaseOffset: 0x0
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x123A
	#     Name: logic_error
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::exception (0x1231)
	#     Name: _Mybase
	#   }
	# }
	.byte	0x32, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x3a, 0x12, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	# Class (0x123C) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x123B)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x1228)
	#   SizeOf: 24
	#   Name: std::logic_error
	#   LinkageName: .?AVlogic_error@std@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0x3b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x12, 0x00, 0x00
	.byte	0x18, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x123D) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x73, 0x74, 0x64, 0x65
	.byte	0x78, 0x63, 0x65, 0x70
	.byte	0x74, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x123E) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::logic_error (0x123C)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept (0x123D)
	#   LineNumber: 17
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0x3d, 0x12, 0x00, 0x00
	.byte	0x11, 0x00, 0x00, 0x00
	# Pointer (0x123F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: <vftable 2 methods> (0x1228)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x28, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Struct (0x1240) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: __std_exception_data
	#   LinkageName: .?AU__std_exception_data@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x5f
	.byte	0x73, 0x74, 0x64, 0x5f
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x5f, 0x64, 0x61
	.byte	0x74, 0x61, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x5f
	.byte	0x5f, 0x73, 0x74, 0x64
	.byte	0x5f, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x5f, 0x64
	.byte	0x61, 0x74, 0x61, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Pointer (0x1241) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::exception (0x1231)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1242) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x1231)
	#   ThisType: std::exception* (0x1241)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x41, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1243) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x1231)
	#   ThisType: std::exception* (0x1241)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x122B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x41, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x2b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1244) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x1214)
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x1245) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x1231)
	#   ThisType: std::exception* (0x1241)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, int) (0x1244)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x41, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x44, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1246) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::exception (0x1231)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1247) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::exception (0x1246)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x46, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1248) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::exception& (0x1247)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x47, 0x12, 0x00, 0x00
	# MemberFunction (0x1249) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x1231)
	#   ThisType: std::exception* (0x1241)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::exception&) (0x1248)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x41, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x48, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x124A) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::() (0x1242)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::(const char* const) (0x1243)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::(const char* const, int) (0x1245)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::(const std::exception&) (0x1249)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x42, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x45, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x49, 0x12, 0x00, 0x00
	# Pointer (0x124B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::exception (0x1231)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x124C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::exception& (0x124B)
	#   ClassType: std::exception (0x1231)
	#   ThisType: std::exception* (0x1241)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::exception&) (0x1248)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4b, 0x12, 0x00, 0x00
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x41, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x48, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x124D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::exception (0x1246)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x46, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x124E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x119C)
	#   ClassType: std::exception (0x1231)
	#   ThisType: const std::exception* (0x124D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x4d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x124F) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   VFPtr {
	#     TypeLeafKind: LF_VFUNCTAB (0x1409)
	#     Type: <vftable 2 methods>* (0x123F)
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: __std_exception_data (0x1240)
	#     FieldOffset: 0x8
	#     Name: _Data
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x124A
	#     Name: exception
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::exception& std::exception::(const std::exception&) (0x124C)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: IntroducingVirtual (0x4)
	#     Type: void std::exception::() (0x1242)
	#     VFTableOffset: 0x0
	#     Name: ~exception
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: IntroducingVirtual (0x4)
	#     Type: const char* std::exception::() (0x124E)
	#     VFTableOffset: 0x8
	#     Name: what
	#   }
	# }
	.byte	0x6e, 0x00, 0x03, 0x12
	.byte	0x09, 0x14, 0x00, 0x00
	.byte	0x3f, 0x12, 0x00, 0x00
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x40, 0x12, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x44
	.byte	0x61, 0x74, 0x61, 0x00
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x4a, 0x12, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4c, 0x12, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x13, 0x00
	.byte	0x42, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x7e, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x13, 0x00
	.byte	0x4e, 0x12, 0x00, 0x00
	.byte	0x08, 0x00, 0x00, 0x00
	.byte	0x77, 0x68, 0x61, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1250) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 9
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x124F)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x1228)
	#   SizeOf: 24
	#   Name: std::exception
	#   LinkageName: .?AVexception@std@@
	# }
	.byte	0x3a, 0x00, 0x04, 0x15
	.byte	0x09, 0x00, 0x00, 0x02
	.byte	0x4f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x12, 0x00, 0x00
	.byte	0x18, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x63, 0x65, 0x70
	.byte	0x74, 0x69, 0x6f, 0x6e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x1251) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h
	# }
	.byte	0x7e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x76, 0x63, 0x72, 0x75
	.byte	0x6e, 0x74, 0x69, 0x6d
	.byte	0x65, 0x5f, 0x65, 0x78
	.byte	0x63, 0x65, 0x70, 0x74
	.byte	0x69, 0x6f, 0x6e, 0x2e
	.byte	0x68, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1252) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::exception (0x1250)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h (0x1251)
	#   LineNumber: 44
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x50, 0x12, 0x00, 0x00
	.byte	0x51, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x00, 0x00
	# Class (0x1253) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
	#   LinkageName: .?AV?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Modifier (0x1254) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: unsigned __int64 (0x23)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1255) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1256) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1236)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x36, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1257) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator<char>
	#   LinkageName: .?AV?$allocator@D@std@@
	# }
	.byte	0x42, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Modifier (0x1258) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::allocator<char> (0x1257)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1259) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<char> (0x1258)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x58, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x125A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#     ArgType: const std::allocator<char>& (0x1259)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	.byte	0x59, 0x12, 0x00, 0x00
	# MemberFunction (0x125B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::allocator<char>&) (0x125A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x5a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x125C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x125D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::allocator<char>& (0x1259)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x59, 0x12, 0x00, 0x00
	# MemberFunction (0x125E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x125D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x5d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x125F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const std::allocator<char>& (0x1259)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x59, 0x12, 0x00, 0x00
	# MemberFunction (0x1260) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const std::allocator<char>&) (0x125F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x5f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1261) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const std::allocator<char>& (0x1259)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x59, 0x12, 0x00, 0x00
	# MemberFunction (0x1262) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const unsigned __int64, const std::allocator<char>&) (0x1261)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x61, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1263) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x1214)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x1264) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const unsigned __int64) (0x1263)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x63, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1265) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x1214)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const std::allocator<char>& (0x1259)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x59, 0x12, 0x00, 0x00
	# MemberFunction (0x1266) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const unsigned __int64, const std::allocator<char>&) (0x1265)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x65, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1267) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x122B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x2b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1268) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x1214)
	#     ArgType: const std::allocator<char>& (0x1259)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x59, 0x12, 0x00, 0x00
	# MemberFunction (0x1269) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const std::allocator<char>&) (0x1268)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x68, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x126A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char (0x119B)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	# MemberFunction (0x126B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const char) (0x126A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x6a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x126C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char (0x119B)
	#     ArgType: const std::allocator<char>& (0x1259)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x59, 0x12, 0x00, 0x00
	# MemberFunction (0x126D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const char, const std::allocator<char>&) (0x126C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x6c, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x126E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x126F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x126E)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x6e, 0x12, 0x00, 0x00
	# MemberFunction (0x1270) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x126F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x6f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1271) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x126E)
	#     ArgType: const std::allocator<char>& (0x1259)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x6e, 0x12, 0x00, 0x00
	.byte	0x59, 0x12, 0x00, 0x00
	# MemberFunction (0x1272) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, const std::allocator<char>&) (0x1271)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x71, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1273) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::initializer_list<char>
	#   LinkageName: .?AV?$initializer_list@D@std@@
	# }
	.byte	0x52, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x69, 0x74, 0x69
	.byte	0x61, 0x6c, 0x69, 0x7a
	.byte	0x65, 0x72, 0x5f, 0x6c
	.byte	0x69, 0x73, 0x74, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x69, 0x6e, 0x69, 0x74
	.byte	0x69, 0x61, 0x6c, 0x69
	.byte	0x7a, 0x65, 0x72, 0x5f
	.byte	0x6c, 0x69, 0x73, 0x74
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1274) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::initializer_list<char> (0x1273)
	#     ArgType: const std::allocator<char>& (0x1259)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x73, 0x12, 0x00, 0x00
	.byte	0x59, 0x12, 0x00, 0x00
	# MemberFunction (0x1275) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::initializer_list<char>, const std::allocator<char>&) (0x1274)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x74, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1276) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1256)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::allocator<char>&) (0x125B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x125C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::allocator<char>&) (0x125E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const std::allocator<char>&) (0x1260)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const unsigned __int64, const std::allocator<char>&) (0x1262)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x1264)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64, const std::allocator<char>&) (0x1266)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1267)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const std::allocator<char>&) (0x1269)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char) (0x126B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char, const std::allocator<char>&) (0x126D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x1270)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, const std::allocator<char>&) (0x1272)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>, const std::allocator<char>&) (0x1275)
	#   ]
	# }
	.byte	0x7a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x56, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5b, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5e, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x60, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x62, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x64, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x66, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x67, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6b, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6d, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x70, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x72, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x75, 0x12, 0x00, 0x00
	# Pointer (0x1277) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: char (0x70)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# ArgList (0x1278) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x1277)
	#     ArgType: char* const (0x1277)
	#     ArgType: std::random_access_iterator_tag (0x105C)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x77, 0x12, 0x00, 0x00
	.byte	0x77, 0x12, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	# MemberFunction (0x1279) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, char* const, std::random_access_iterator_tag) (0x1278)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x78, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x127A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x1214)
	#     ArgType: const char* const (0x1214)
	#     ArgType: std::random_access_iterator_tag (0x105C)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	# MemberFunction (0x127B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const char* const, std::random_access_iterator_tag) (0x127A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x7a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x127C) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char* const, char* const, std::random_access_iterator_tag) (0x1279)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const char* const, std::random_access_iterator_tag) (0x127B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x79, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7b, 0x12, 0x00, 0x00
	# Pointer (0x127D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x127E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x126F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x6f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x127F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::initializer_list<char> (0x1273)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x73, 0x12, 0x00, 0x00
	# MemberFunction (0x1280) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::initializer_list<char>) (0x127F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x7f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1281) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1236)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x36, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1282) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x122B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x2b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1283) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char (0x119B)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	# MemberFunction (0x1284) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char) (0x1283)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x83, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1285) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x127E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x1280)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1281)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1282)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char) (0x1284)
	#   ]
	# }
	.byte	0x2a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7e, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x80, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x82, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x84, 0x12, 0x00, 0x00
	# ArgList (0x1286) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x1287) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x1286)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x86, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1288) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const unsigned __int64) (0x1263)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x63, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1289) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const char) (0x126A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x6a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x128A) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x127E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x1280)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1281)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x1287)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x1288)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1282)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char) (0x1289)
	#   ]
	# }
	.byte	0x3a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7e, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x80, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x87, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x88, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x82, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x89, 0x12, 0x00, 0x00
	# Struct (0x128B) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::integral_constant<bool,1>
	#   LinkageName: .?AU?$integral_constant@_N$00@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x30, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x128C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x126E)
	#     ArgType: std::integral_constant<bool,1> (0x128B)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x6e, 0x12, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	# MemberFunction (0x128D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, std::integral_constant<bool,1>) (0x128C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x8c, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x128E) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::integral_constant<bool,0>
	#   LinkageName: .?AU?$integral_constant@_N$0A@@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x41, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# ArgList (0x128F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x126E)
	#     ArgType: std::integral_constant<bool,0> (0x128E)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x6e, 0x12, 0x00, 0x00
	.byte	0x8e, 0x12, 0x00, 0x00
	# MemberFunction (0x1290) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, std::integral_constant<bool,0>) (0x128F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x8f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1291) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, std::integral_constant<bool,1>) (0x128D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, std::integral_constant<bool,0>) (0x1290)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x8d, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x90, 0x12, 0x00, 0x00
	# ArgList (0x1292) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: char (0x70)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	# MemberFunction (0x1293) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (char) (0x1292)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x92, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1294) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x1280)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1281)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1282)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char) (0x1293)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x80, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x82, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x93, 0x12, 0x00, 0x00
	# MethodOverloadList (0x1295) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x1280)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1281)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x1287)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x1288)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1282)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char) (0x1289)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x80, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x81, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x87, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x88, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x82, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x89, 0x12, 0x00, 0x00
	# Class (0x1296) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_iterator<std::_String_val<std::_Simple_types<char> > >
	#   LinkageName: .?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@
	# }
	.byte	0xa6, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1297) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
	#   LinkageName: .?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x63
	.byte	0x6f, 0x6e, 0x73, 0x74
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x1298) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1297)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x97, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Modifier (0x1299) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::initializer_list<char> (0x1273)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x73, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x129A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const std::initializer_list<char> (0x1299)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x99, 0x12, 0x00, 0x00
	# MemberFunction (0x129B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x1296)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x129A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x96, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x9a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x129C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	# MemberFunction (0x129D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x129C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x9c, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x129E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x129F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x129E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x9e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12A0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char* const (0x1214)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x12A1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const char* const, const unsigned __int64) (0x12A0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xa0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12A2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char* const (0x1214)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	# MemberFunction (0x12A3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const char* const) (0x12A2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xa2, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12A4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char (0x119B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	# MemberFunction (0x12A5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const char) (0x12A4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xa4, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12A6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const char (0x119B)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	# MemberFunction (0x12A7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x1296)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char) (0x12A6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x96, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xa6, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12A8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char (0x119B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	# MemberFunction (0x12A9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x1296)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned __int64, const char) (0x12A8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x96, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xa8, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12AA) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x129B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x129D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x129F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char* const, const unsigned __int64) (0x12A1)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char* const) (0x12A3)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const char) (0x12A5)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char) (0x12A7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned __int64, const char) (0x12A9)
	#   ]
	# }
	.byte	0x42, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9b, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9d, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9f, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa1, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa3, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa7, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa9, 0x12, 0x00, 0x00
	# ArgList (0x12AB) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const std::initializer_list<char> (0x1299)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x99, 0x12, 0x00, 0x00
	# MemberFunction (0x12AC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x12AB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xab, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12AD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	# MemberFunction (0x12AE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12AD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xad, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12AF) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 5
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x1a, 0x00, 0x01, 0x12
	.byte	0x05, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x12B0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 5
	#   ArgListType: (const unsigned __int64, unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x12AF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x05, 0x00
	.byte	0xaf, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12B1) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const char* const (0x1214)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x12B2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned __int64, unsigned __int64, const char* const, const unsigned __int64) (0x12B1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0xb1, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12B3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char* const (0x1214)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	# MemberFunction (0x12B4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const char* const) (0x12B3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xb3, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12B5) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char (0x119B)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	# MemberFunction (0x12B6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned __int64, unsigned __int64, const unsigned __int64, const char) (0x12B5)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0xb5, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12B7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	# MemberFunction (0x12B8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12B7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xb7, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12B9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const char* const (0x1214)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x12BA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const, const unsigned __int64) (0x12B9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0xb9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12BB) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const char* const (0x1214)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	# MemberFunction (0x12BC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const) (0x12BB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xbb, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12BD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char (0x119B)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	# MemberFunction (0x12BE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned __int64, const char) (0x12BD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0xbd, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12BF) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x12AC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12AE)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x12B0)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, unsigned __int64, const char* const, const unsigned __int64) (0x12B2)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const char* const) (0x12B4)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, unsigned __int64, const unsigned __int64, const char) (0x12B6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12B8)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const, const unsigned __int64) (0x12BA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const) (0x12BC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned __int64, const char) (0x12BE)
	#   ]
	# }
	.byte	0x52, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xac, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xae, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb0, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb2, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb4, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb6, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb8, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xba, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbc, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbe, 0x12, 0x00, 0x00
	# ArgList (0x12C0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x12C1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x12C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12C2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x12C3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, unsigned __int64) (0x12C2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xc2, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12C4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	# MemberFunction (0x12C5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x1296)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x12C4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x96, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc4, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12C6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1298)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	# MemberFunction (0x12C7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x1296)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x12C6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x96, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xc6, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12C8) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x12C1)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, unsigned __int64) (0x12C3)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x12C5)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x12C7)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc1, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc3, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc5, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc7, 0x12, 0x00, 0x00
	# MemberFunction (0x12C9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x1296)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x96, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x12CA) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1234)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x34, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x12CB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1297)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x97, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12CC) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12C9)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12CB)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc9, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcb, 0x12, 0x00, 0x00
	# MemberFunction (0x12CD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12CE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x119C)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12CF) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12CD)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12CE)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcd, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xce, 0x12, 0x00, 0x00
	# Class (0x12D0) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >
	#   LinkageName: .?AV?$reverse_iterator@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@
	# }
	.byte	0xd6, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x12D1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > > (0x12D0)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xd0, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x12D2) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > >
	#   LinkageName: .?AV?$reverse_iterator@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@
	# }
	.byte	0xe2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x12D3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > (0x12D2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xd2, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12D4) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12D1)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12D3)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd1, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd3, 0x12, 0x00, 0x00
	# Pointer (0x12D5) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: char (0x70)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x12D6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char& (0x12D5)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x12C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xd5, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12D7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char& (0x11A7)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x12C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12D8) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x12D6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x12D7)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd6, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd7, 0x12, 0x00, 0x00
	# MemberFunction (0x12D9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char) (0x1283)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x83, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12DA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char& (0x12D5)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xd5, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12DB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char& (0x11A7)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12DC) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12DA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12DB)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xda, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xdb, 0x12, 0x00, 0x00
	# MemberFunction (0x12DD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12DE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x12C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12DF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12E0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x1277)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x77, 0x12, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x12E1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, unsigned __int64, const unsigned __int64) (0x12E0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xe0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12E2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: char* const (0x1277)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x77, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x12E3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (char* const, const unsigned __int64, unsigned __int64, const unsigned __int64) (0x12E2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0xe2, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12E4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#     ArgType: std::integral_constant<bool,1> (0x128B)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	# MemberFunction (0x12E5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,1>) (0x12E4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xe4, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12E6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#     ArgType: std::integral_constant<bool,0> (0x128E)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x8e, 0x12, 0x00, 0x00
	# MemberFunction (0x12E7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,0>) (0x12E6)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xe6, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12E8) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,1>) (0x12E5)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,0>) (0x12E7)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe5, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe7, 0x12, 0x00, 0x00
	# Class (0x12E9) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_val<std::_Simple_types<char> >
	#   LinkageName: .?AV?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x72, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x12EA) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x12EB) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_String_val<std::_Simple_types<char> >& (0x12EA)
	#     ArgType: std::_String_val<std::_Simple_types<char> >& (0x12EA)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xea, 0x12, 0x00, 0x00
	.byte	0xea, 0x12, 0x00, 0x00
	# MemberFunction (0x12EC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_String_val<std::_Simple_types<char> >&, std::_String_val<std::_Simple_types<char> >&) (0x12EB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xeb, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12ED) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x127D)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x7d, 0x12, 0x00, 0x00
	# MemberFunction (0x12EE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x1255)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12ED)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xed, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12EF) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x12F0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64) (0x12EF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xef, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12F1) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x1214)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x12F2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const unsigned __int64, const unsigned __int64) (0x12F1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xf1, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12F3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const unsigned __int64) (0x1263)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x63, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x12F4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char (0x119B)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x12F5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char, const unsigned __int64) (0x12F4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xf4, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12F6) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64) (0x12F0)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64, const unsigned __int64) (0x12F2)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x12F3)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char, const unsigned __int64) (0x12F5)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf0, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf2, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf3, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf5, 0x12, 0x00, 0x00
	# ArgList (0x12F7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x12F8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, unsigned __int64) (0x12F7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xf7, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12F9) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, unsigned __int64) (0x12F8)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64, const unsigned __int64) (0x12F2)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x12F3)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char, const unsigned __int64) (0x12F5)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf8, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf2, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf3, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf5, 0x12, 0x00, 0x00
	# ArgList (0x12FA) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x1214)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x12FB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, unsigned __int64) (0x12FA)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xfa, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x12FC) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64) (0x12F0)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64, const unsigned __int64) (0x12F2)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, unsigned __int64) (0x12FB)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char, const unsigned __int64) (0x12F5)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf0, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf2, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfb, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf5, 0x12, 0x00, 0x00
	# ArgList (0x12FD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x12FE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const unsigned __int64) (0x12FD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xfd, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x12FF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1236)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x36, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1300) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x122B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x2b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1301) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12FF)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1300)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xff, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x13, 0x00, 0x00
	# MemberFunction (0x1302) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1236)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x36, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1303) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	# MemberFunction (0x1304) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (unsigned __int64, unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1303)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x03, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1305) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 5
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x1235)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x1a, 0x00, 0x01, 0x12
	.byte	0x05, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x35, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x1306) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 5
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const unsigned __int64) (0x1305)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x05, 0x00
	.byte	0x05, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1307) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x122B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x2b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1308) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const char* const) (0x12B3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xb3, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1309) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char* const (0x1214)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x130A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const char* const, const unsigned __int64) (0x1309)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x09, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x130B) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1302)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(unsigned __int64, unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1304)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const unsigned __int64) (0x1306)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1307)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const char* const) (0x1308)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const char* const, const unsigned __int64) (0x130A)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x02, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x04, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x06, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x07, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x08, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0a, 0x13, 0x00, 0x00
	# MemberFunction (0x130C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char> (0x1257)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x130D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x12CA)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x12C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0xca, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x130E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1233)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x130F) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::char_traits<char>
	#   LinkageName: .?AU?$char_traits@D@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Struct (0x1310) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# FieldList (0x1311) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#     BaseOffset: 0x0
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const unsigned __int64 (0x1254)
	#     Name: _Memcpy_move_offset
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const unsigned __int64 (0x1254)
	#     Name: _Memcpy_move_size
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const unsigned __int64 (0x1254)
	#     Name: npos
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0xF
	#     MethodListIndex: 0x1276
	#     Name: basic_string
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x127C
	#     Name: _Construct
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x5
	#     MethodListIndex: 0x1285
	#     Name: operator=
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x7
	#     MethodListIndex: 0x128A
	#     Name: assign
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1291
	#     Name: _Assign_rv_contents
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1291
	#     Name: _Assign_rv_contents_with_alloc_always_equal
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1256)
	#     Name: _Construct_lv_contents
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x1294
	#     Name: operator+=
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x1295
	#     Name: append
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x8
	#     MethodListIndex: 0x12AA
	#     Name: insert
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0xA
	#     MethodListIndex: 0x12BF
	#     Name: replace
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x125C)
	#     Name: ~basic_string
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12C8
	#     Name: erase
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x125C)
	#     Name: clear
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12CC
	#     Name: begin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12CC
	#     Name: end
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12CF
	#     Name: _Unchecked_begin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12CF
	#     Name: _Unchecked_end
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12D4
	#     Name: rbegin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12D4
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12CB)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12CB)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12D3)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12D3)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x125C)
	#     Name: shrink_to_fit
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12D8
	#     Name: at
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12D8
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char) (0x12D9)
	#     Name: push_back
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x125C)
	#     Name: pop_back
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12DC
	#     Name: front
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12DC
	#     Name: back
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12CE)
	#     Name: c_str
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12CE)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12DD)
	#     Name: length
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12DD)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12DD)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char) (0x126B)
	#     Name: resize
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12DD)
	#     Name: capacity
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x12DE)
	#     Name: reserve
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x12DF)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char* const, unsigned __int64, const unsigned __int64) (0x12E1)
	#     Name: copy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char* const, const unsigned __int64, unsigned __int64, const unsigned __int64) (0x12E3)
	#     Name: _Copy_s
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x12E8
	#     Name: _Swap_data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::_String_val<std::_Simple_types<char> >&, std::_String_val<std::_Simple_types<char> >&) (0x12EC)
	#     Name: _Swap_bx_large_with_small
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x12EE)
	#     Name: swap
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12F6
	#     Name: find
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12F6
	#     Name: rfind
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12F6
	#     Name: find_first_of
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12F9
	#     Name: find_last_of
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12FC
	#     Name: find_first_not_of
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x12F6
	#     Name: find_last_not_of
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64) (0x12FE)
	#     Name: substr
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1301
	#     Name: _Equal
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x130B
	#     Name: compare
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<char> std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x130C)
	#     Name: get_allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x130D)
	#     Name: _Calculate_growth
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x125C)
	#     Name: _Become_small
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x12DE)
	#     Name: _Eos
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x125C)
	#     Name: _Tidy_init
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x125C)
	#     Name: _Tidy_deallocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x130E)
	#     Name: _Xlen
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#     Name: _Mybase
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::char_traits<char> (0x130F)
	#     Name: traits_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x1257)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x1257)
	#     Name: _Alty
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<char> > (0x1310)
	#     Name: _Alty_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#     Name: _Mydata_t
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x119C)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x12D5)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x11A7)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x1296)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1297)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > > (0x12D0)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > (0x12D2)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x128B)
	#     Name: _Use_memcpy_move
	#   }
	# }
	.byte	0xa6, 0x06, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x65, 0x6d
	.byte	0x63, 0x70, 0x79, 0x5f
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x5f, 0x6f, 0x66, 0x66
	.byte	0x73, 0x65, 0x74, 0x00
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x65, 0x6d
	.byte	0x63, 0x70, 0x79, 0x5f
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x5f, 0x73, 0x69, 0x7a
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x6e, 0x70, 0x6f, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x0f, 0x00
	.byte	0x76, 0x12, 0x00, 0x00
	.byte	0x62, 0x61, 0x73, 0x69
	.byte	0x63, 0x5f, 0x73, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x7c, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x05, 0x00
	.byte	0x85, 0x12, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x07, 0x00
	.byte	0x8a, 0x12, 0x00, 0x00
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x91, 0x12, 0x00, 0x00
	.byte	0x5f, 0x41, 0x73, 0x73
	.byte	0x69, 0x67, 0x6e, 0x5f
	.byte	0x72, 0x76, 0x5f, 0x63
	.byte	0x6f, 0x6e, 0x74, 0x65
	.byte	0x6e, 0x74, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x91, 0x12, 0x00, 0x00
	.byte	0x5f, 0x41, 0x73, 0x73
	.byte	0x69, 0x67, 0x6e, 0x5f
	.byte	0x72, 0x76, 0x5f, 0x63
	.byte	0x6f, 0x6e, 0x74, 0x65
	.byte	0x6e, 0x74, 0x73, 0x5f
	.byte	0x77, 0x69, 0x74, 0x68
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x56, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x5f, 0x6c
	.byte	0x76, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x65, 0x6e
	.byte	0x74, 0x73, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x94, 0x12, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x3d, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x95, 0x12, 0x00, 0x00
	.byte	0x61, 0x70, 0x70, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x08, 0x00
	.byte	0xaa, 0x12, 0x00, 0x00
	.byte	0x69, 0x6e, 0x73, 0x65
	.byte	0x72, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x0a, 0x00
	.byte	0xbf, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x70, 0x6c
	.byte	0x61, 0x63, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x7e, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xc8, 0x12, 0x00, 0x00
	.byte	0x65, 0x72, 0x61, 0x73
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x63, 0x6c, 0x65, 0x61
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xcc, 0x12, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xcc, 0x12, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xcf, 0x12, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xcf, 0x12, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xd4, 0x12, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xd4, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcb, 0x12, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcb, 0x12, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd3, 0x12, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd3, 0x12, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x73, 0x68, 0x72, 0x69
	.byte	0x6e, 0x6b, 0x5f, 0x74
	.byte	0x6f, 0x5f, 0x66, 0x69
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xd8, 0x12, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xd8, 0x12, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd9, 0x12, 0x00, 0x00
	.byte	0x70, 0x75, 0x73, 0x68
	.byte	0x5f, 0x62, 0x61, 0x63
	.byte	0x6b, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x70, 0x6f, 0x70, 0x5f
	.byte	0x62, 0x61, 0x63, 0x6b
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xdc, 0x12, 0x00, 0x00
	.byte	0x66, 0x72, 0x6f, 0x6e
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xdc, 0x12, 0x00, 0x00
	.byte	0x62, 0x61, 0x63, 0x6b
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xce, 0x12, 0x00, 0x00
	.byte	0x63, 0x5f, 0x73, 0x74
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xce, 0x12, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdd, 0x12, 0x00, 0x00
	.byte	0x6c, 0x65, 0x6e, 0x67
	.byte	0x74, 0x68, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdd, 0x12, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdd, 0x12, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6b, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x73, 0x69
	.byte	0x7a, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdd, 0x12, 0x00, 0x00
	.byte	0x63, 0x61, 0x70, 0x61
	.byte	0x63, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xde, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x73, 0x65
	.byte	0x72, 0x76, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdf, 0x12, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe1, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe3, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xe8, 0x12, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x64, 0x61
	.byte	0x74, 0x61, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xec, 0x12, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x62, 0x78
	.byte	0x5f, 0x6c, 0x61, 0x72
	.byte	0x67, 0x65, 0x5f, 0x77
	.byte	0x69, 0x74, 0x68, 0x5f
	.byte	0x73, 0x6d, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xee, 0x12, 0x00, 0x00
	.byte	0x73, 0x77, 0x61, 0x70
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xf6, 0x12, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xf6, 0x12, 0x00, 0x00
	.byte	0x72, 0x66, 0x69, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xf6, 0x12, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x5f, 0x6f
	.byte	0x66, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xf9, 0x12, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x6c, 0x61, 0x73
	.byte	0x74, 0x5f, 0x6f, 0x66
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xfc, 0x12, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x5f, 0x6e
	.byte	0x6f, 0x74, 0x5f, 0x6f
	.byte	0x66, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xf6, 0x12, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x6c, 0x61, 0x73
	.byte	0x74, 0x5f, 0x6e, 0x6f
	.byte	0x74, 0x5f, 0x6f, 0x66
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xfe, 0x12, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x74, 0x72, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x01, 0x13, 0x00, 0x00
	.byte	0x5f, 0x45, 0x71, 0x75
	.byte	0x61, 0x6c, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x0b, 0x13, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6d, 0x70
	.byte	0x61, 0x72, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x0c, 0x13, 0x00, 0x00
	.byte	0x67, 0x65, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x0d, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x61, 0x6c
	.byte	0x63, 0x75, 0x6c, 0x61
	.byte	0x74, 0x65, 0x5f, 0x67
	.byte	0x72, 0x6f, 0x77, 0x74
	.byte	0x68, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x5f, 0x42, 0x65, 0x63
	.byte	0x6f, 0x6d, 0x65, 0x5f
	.byte	0x73, 0x6d, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xde, 0x12, 0x00, 0x00
	.byte	0x5f, 0x45, 0x6f, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x5f, 0x54, 0x69, 0x64
	.byte	0x79, 0x5f, 0x69, 0x6e
	.byte	0x69, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5c, 0x12, 0x00, 0x00
	.byte	0x5f, 0x54, 0x69, 0x64
	.byte	0x79, 0x5f, 0x64, 0x65
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x0e, 0x13, 0x00, 0x00
	.byte	0x5f, 0x58, 0x6c, 0x65
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x10, 0x13, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x64
	.byte	0x61, 0x74, 0x61, 0x5f
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xd5, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x96, 0x12, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x97, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xd0, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xd2, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x5f, 0x55, 0x73, 0x65
	.byte	0x5f, 0x6d, 0x65, 0x6d
	.byte	0x63, 0x70, 0x79, 0x5f
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1312) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 172
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1311)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 40
	#   Name: std::basic_string<char,std::char_traits<char>,std::allocator<char> >
	#   LinkageName: .?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@
	# }
	.byte	0x9e, 0x00, 0x04, 0x15
	.byte	0xac, 0x00, 0x10, 0x02
	.byte	0x11, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x61, 0x73, 0x69, 0x63
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x40, 0x44, 0x55
	.byte	0x3f, 0x24, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x44, 0x40
	.byte	0x32, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x1313) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring
	# }
	.byte	0x6e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x78, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x00
	# UdtSourceLine (0x1314) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1312)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1313)
	#   LineNumber: 2064
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x12, 0x13, 0x00, 0x00
	.byte	0x13, 0x13, 0x00, 0x00
	.byte	0x10, 0x08, 0x00, 0x00
	# FieldList (0x1315) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* (0x119C)
	#     FieldOffset: 0x0
	#     Name: _What
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool (0x30)
	#     FieldOffset: 0x8
	#     Name: _DoFree
	#   }
	# }
	.byte	0x26, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x57
	.byte	0x68, 0x61, 0x74, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x44
	.byte	0x6f, 0x46, 0x72, 0x65
	.byte	0x65, 0x00, 0xf2, 0xf1
	# Struct (0x1316) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 2
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1315)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: __std_exception_data
	#   LinkageName: .?AU__std_exception_data@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x02, 0x00, 0x00, 0x02
	.byte	0x15, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x5f, 0x5f
	.byte	0x73, 0x74, 0x64, 0x5f
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x5f, 0x64, 0x61
	.byte	0x74, 0x61, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x5f
	.byte	0x5f, 0x73, 0x74, 0x64
	.byte	0x5f, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x5f, 0x64
	.byte	0x61, 0x74, 0x61, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1317) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: __std_exception_data (0x1316)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h (0x1251)
	#   LineNumber: 21
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x16, 0x13, 0x00, 0x00
	.byte	0x51, 0x12, 0x00, 0x00
	.byte	0x15, 0x00, 0x00, 0x00
	# Class (0x1318) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
	#   LinkageName: .?AV?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@
	# }
	.byte	0xce, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6d, 0x70
	.byte	0x72, 0x65, 0x73, 0x73
	.byte	0x65, 0x64, 0x5f, 0x70
	.byte	0x61, 0x69, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x2c, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x43
	.byte	0x6f, 0x6d, 0x70, 0x72
	.byte	0x65, 0x73, 0x73, 0x65
	.byte	0x64, 0x5f, 0x70, 0x61
	.byte	0x69, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x32
	.byte	0x40, 0x24, 0x30, 0x30
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x1319) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x131A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1319)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x19, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x131B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1319)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x125D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x19, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x5d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x131C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<char> (0x1257)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x131D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x131C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x1c, 0x13, 0x00, 0x00
	# MemberFunction (0x131E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1319)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::allocator<char>&) (0x131D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x19, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1d, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x131F) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Iterator_base12
	#   LinkageName: .?AU_Iterator_base12@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x49, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x62, 0x61, 0x73
	.byte	0x65, 0x31, 0x32, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x49, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x1320) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Iterator_base12 (0x131F)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Pointer (0x1321) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Iterator_base12* (0x1320)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x20, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Modifier (0x1322) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1323) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1322)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x22, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1324) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1321)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   ThisType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1323)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x21, 0x13, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x23, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1325) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Container_proxy
	#   LinkageName: .?AU_Container_proxy@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x1326) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy (0x1325)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x25, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Pointer (0x1327) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy* (0x1326)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1328) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy*& (0x1327)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1319)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x27, 0x13, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x19, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1329) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy (0x1325)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x25, 0x13, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# Pointer (0x132A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy* const (0x1329)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x29, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x132B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* const& (0x132A)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   ThisType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1323)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2a, 0x13, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x23, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x132C) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy*& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x1328)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* const& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x132B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x28, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2b, 0x13, 0x00, 0x00
	# Pointer (0x132D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x132E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >& (0x132D)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x2d, 0x13, 0x00, 0x00
	# MemberFunction (0x132F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1319)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >&) (0x132E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x19, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x2e, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1330) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char>& (0x131C)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1319)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x1c, 0x13, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x19, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1331) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::allocator<char>& (0x1259)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   ThisType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1323)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x59, 0x12, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x23, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1332) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<char>& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x1330)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::allocator<char>& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x1331)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x30, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x31, 0x13, 0x00, 0x00
	# MemberFunction (0x1333) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_val<std::_Simple_types<char> >& (0x12EA)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1319)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xea, 0x12, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x19, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1334) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1335) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_String_val<std::_Simple_types<char> > (0x1334)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x34, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1336) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_String_val<std::_Simple_types<char> >& (0x1335)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1253)
	#   ThisType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1323)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x35, 0x13, 0x00, 0x00
	.byte	0x53, 0x12, 0x00, 0x00
	.byte	0x23, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1337) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_val<std::_Simple_types<char> >& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x1333)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_String_val<std::_Simple_types<char> >& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x1336)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x36, 0x13, 0x00, 0x00
	# Class (0x1338) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator<std::_Container_proxy>
	#   LinkageName: .?AV?$allocator@U_Container_proxy@std@@@std@@
	# }
	.byte	0x6a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x43
	.byte	0x6f, 0x6e, 0x74, 0x61
	.byte	0x69, 0x6e, 0x65, 0x72
	.byte	0x5f, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Struct (0x1339) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator_traits<std::allocator<std::_Container_proxy> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@
	# }
	.byte	0x9a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# Struct (0x133A) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Simple_types<char>
	#   LinkageName: .?AU?$_Simple_types@D@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Union (0x133B) {
	#   TypeLeafKind: LF_UNION (0x1506)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   SizeOf: 0
	#   Name: std::_String_val<std::_Simple_types<char> >::_Bxty
	#   LinkageName: .?AT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x06, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x3a, 0x3a, 0x5f
	.byte	0x42, 0x78, 0x74, 0x79
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x54, 0x5f, 0x42, 0x78
	.byte	0x74, 0x79, 0x40, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x40, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# FieldList (0x133C) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 16
	#     Name: _BUF_SIZE
	#   }
	# }
	.byte	0x12, 0x00, 0x03, 0x12
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x10, 0x00, 0x5f, 0x42
	.byte	0x55, 0x46, 0x5f, 0x53
	.byte	0x49, 0x5a, 0x45, 0x00
	# Enum (0x133D) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   UnderlyingType: unsigned (0x75)
	#   FieldListType: <field list> (0x133C)
	#   Name: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag>
	#   LinkageName: .?AW4<unnamed-enum-_BUF_SIZE>@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@
	# }
	.byte	0xce, 0x00, 0x07, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x3c, 0x13, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x20, 0x3e
	.byte	0x3a, 0x3a, 0x3c, 0x75
	.byte	0x6e, 0x6e, 0x61, 0x6d
	.byte	0x65, 0x64, 0x2d, 0x74
	.byte	0x61, 0x67, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x57
	.byte	0x34, 0x3c, 0x75, 0x6e
	.byte	0x6e, 0x61, 0x6d, 0x65
	.byte	0x64, 0x2d, 0x65, 0x6e
	.byte	0x75, 0x6d, 0x2d, 0x5f
	.byte	0x42, 0x55, 0x46, 0x5f
	.byte	0x53, 0x49, 0x5a, 0x45
	.byte	0x3e, 0x40, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x62, 0x61, 0x73
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x40
	.byte	0x44, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x133E) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag> (0x133D)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1313)
	#   LineNumber: 1897
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x3d, 0x13, 0x00, 0x00
	.byte	0x13, 0x13, 0x00, 0x00
	.byte	0x69, 0x07, 0x00, 0x00
	# FieldList (0x133F) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 15
	#     Name: _ALLOC_MASK
	#   }
	# }
	.byte	0x16, 0x00, 0x03, 0x12
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x0f, 0x00, 0x5f, 0x41
	.byte	0x4c, 0x4c, 0x4f, 0x43
	.byte	0x5f, 0x4d, 0x41, 0x53
	.byte	0x4b, 0x00, 0xf2, 0xf1
	# Enum (0x1340) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   UnderlyingType: unsigned (0x75)
	#   FieldListType: <field list> (0x133F)
	#   Name: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag>
	#   LinkageName: .?AW4<unnamed-enum-_ALLOC_MASK>@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@
	# }
	.byte	0xce, 0x00, 0x07, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x3f, 0x13, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x20, 0x3e
	.byte	0x3a, 0x3a, 0x3c, 0x75
	.byte	0x6e, 0x6e, 0x61, 0x6d
	.byte	0x65, 0x64, 0x2d, 0x74
	.byte	0x61, 0x67, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x57
	.byte	0x34, 0x3c, 0x75, 0x6e
	.byte	0x6e, 0x61, 0x6d, 0x65
	.byte	0x64, 0x2d, 0x65, 0x6e
	.byte	0x75, 0x6d, 0x2d, 0x5f
	.byte	0x41, 0x4c, 0x4c, 0x4f
	.byte	0x43, 0x5f, 0x4d, 0x41
	.byte	0x53, 0x4b, 0x3e, 0x40
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1341) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag> (0x1340)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1313)
	#   LineNumber: 1902
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x40, 0x13, 0x00, 0x00
	.byte	0x13, 0x13, 0x00, 0x00
	.byte	0x6e, 0x07, 0x00, 0x00
	# FieldList (0x1342) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x1318)
	#     FieldOffset: 0x0
	#     Name: _Mypair
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x131A)
	#     Name: _String_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x131A)
	#     Name: ~_String_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::(const std::allocator<char>&) (0x131B)
	#     Name: _Copy_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::(std::allocator<char>&) (0x131E)
	#     Name: _Move_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x131A)
	#     Name: _Alloc_proxy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x131A)
	#     Name: _Free_proxy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12** std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x1324)
	#     Name: _Getpfirst
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x132C
	#     Name: _Myproxy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x131A)
	#     Name: _Orphan_all
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::(std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >&) (0x132F)
	#     Name: _Swap_all
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1332
	#     Name: _Getal
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1337
	#     Name: _Get_data
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x1257)
	#     Name: _Alty
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<char> > (0x1310)
	#     Name: _Alty_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<std::_Container_proxy> (0x1338)
	#     Name: _Alproxy
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<std::_Container_proxy> > (0x1339)
	#     Name: _Alproxy_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Simple_types<char> (0x133A)
	#     Name: _Val_types
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#     Name: _Mydata_t
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::_Bxty (0x133B)
	#     Name: _Bxty
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x119C)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x12D5)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x11A7)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x1296)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x1297)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag> (0x133D)
	#     Name: 
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag> (0x1340)
	#     Name: 
	#   }
	# }
	.byte	0x72, 0x02, 0x03, 0x12
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x18, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x61, 0x69
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1a, 0x13, 0x00, 0x00
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1a, 0x13, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1b, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1e, 0x13, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x6f, 0x76
	.byte	0x65, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1a, 0x13, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1a, 0x13, 0x00, 0x00
	.byte	0x5f, 0x46, 0x72, 0x65
	.byte	0x65, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x24, 0x13, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x2c, 0x13, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1a, 0x13, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2f, 0x13, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x32, 0x13, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x61, 0x6c, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x37, 0x13, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x64, 0x61, 0x74
	.byte	0x61, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x10, 0x13, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x39, 0x13, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x3a, 0x13, 0x00, 0x00
	.byte	0x5f, 0x56, 0x61, 0x6c
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x64
	.byte	0x61, 0x74, 0x61, 0x5f
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x3b, 0x13, 0x00, 0x00
	.byte	0x5f, 0x42, 0x78, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xd5, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x96, 0x12, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x97, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x3d, 0x13, 0x00, 0x00
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x40, 0x13, 0x00, 0x00
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1343) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 34
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1342)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 40
	#   Name: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
	#   LinkageName: .?AV?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x22, 0x00, 0x10, 0x02
	.byte	0x42, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1344) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1343)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1313)
	#   LineNumber: 1875
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x43, 0x13, 0x00, 0x00
	.byte	0x13, 0x13, 0x00, 0x00
	.byte	0x53, 0x07, 0x00, 0x00
	# Pointer (0x1345) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<char> (0x1258)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x58, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x1346) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: char& (0x12D5)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xd5, 0x12, 0x00, 0x00
	# MemberFunction (0x1347) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::allocator<char> (0x1257)
	#   ThisType: const std::allocator<char>* (0x1345)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (char&) (0x1346)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x45, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x46, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1348) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char& (0x11A7)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	# MemberFunction (0x1349) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x119C)
	#   ClassType: std::allocator<char> (0x1257)
	#   ThisType: const std::allocator<char>* (0x1345)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char&) (0x1348)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x45, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x48, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x134A) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::allocator<char>::(char&) (0x1347)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::allocator<char>::(const char&) (0x1349)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x49, 0x13, 0x00, 0x00
	# Pointer (0x134B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<char> (0x1257)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x134C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<char> (0x1257)
	#   ThisType: std::allocator<char>* (0x134B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x4b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x134D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<char> (0x1257)
	#   ThisType: std::allocator<char>* (0x134B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x125D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x4b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x5d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x134E) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<char>::() (0x134C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<char>::(const std::allocator<char>&) (0x134D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4c, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4d, 0x13, 0x00, 0x00
	# ArgList (0x134F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: char* const (0x1277)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x77, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x1350) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<char> (0x1257)
	#   ThisType: std::allocator<char>* (0x134B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (char* const, const unsigned __int64) (0x134F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x4b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x4f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1351) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::allocator<char> (0x1257)
	#   ThisType: std::allocator<char>* (0x134B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x12C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x4b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1352) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: void (0x3)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1353) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const void (0x1352)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x52, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x1354) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const void* (0x1353)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x53, 0x13, 0x00, 0x00
	# MemberFunction (0x1355) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::allocator<char> (0x1257)
	#   ThisType: std::allocator<char>* (0x134B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const void*) (0x1354)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x4b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x54, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1356) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::allocator<char>::(const unsigned __int64) (0x1351)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::allocator<char>::(const unsigned __int64, const void*) (0x1355)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x51, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x55, 0x13, 0x00, 0x00
	# MemberFunction (0x1357) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::allocator<char> (0x1257)
	#   ThisType: const std::allocator<char>* (0x1345)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x45, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1358) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x134A
	#     Name: address
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x134E
	#     Name: allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<char>::(char* const, const unsigned __int64) (0x1350)
	#     Name: deallocate
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1356
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::allocator<char>::() (0x1357)
	#     Name: max_size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void (0x3)
	#     Name: _Not_user_specialized
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x119C)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x12D5)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x11A7)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x128B)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x128B)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0x5e, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x4a, 0x13, 0x00, 0x00
	.byte	0x61, 0x64, 0x64, 0x72
	.byte	0x65, 0x73, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x4e, 0x13, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x50, 0x13, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x56, 0x13, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x57, 0x13, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5f, 0x4e, 0x6f, 0x74
	.byte	0x5f, 0x75, 0x73, 0x65
	.byte	0x72, 0x5f, 0x73, 0x70
	.byte	0x65, 0x63, 0x69, 0x61
	.byte	0x6c, 0x69, 0x7a, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xd5, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Class (0x1359) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 18
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1358)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator<char>
	#   LinkageName: .?AV?$allocator@D@std@@
	# }
	.byte	0x42, 0x00, 0x04, 0x15
	.byte	0x12, 0x00, 0x10, 0x02
	.byte	0x58, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x135A) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x78, 0x6d, 0x65, 0x6d
	.byte	0x6f, 0x72, 0x79, 0x30
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x135B) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator<char> (0x1359)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x135A)
	#   LineNumber: 940
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x59, 0x13, 0x00, 0x00
	.byte	0x5a, 0x13, 0x00, 0x00
	.byte	0xac, 0x03, 0x00, 0x00
	# Modifier (0x135C) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::integral_constant<bool,1> (0x128B)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x135D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::integral_constant<bool,1> (0x135C)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x5c, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x135E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::integral_constant<bool,1> (0x128B)
	#   ThisType: const std::integral_constant<bool,1>* (0x135D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x5d, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x135F) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x1042)
	#     Name: value
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,1>::() (0x135E)
	#     Name: operator bool
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,1>::() (0x135E)
	#     Name: operator()
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: bool (0x30)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x128B)
	#     Name: type
	#   }
	# }
	.byte	0x62, 0x00, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x42, 0x10, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5e, 0x13, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x20, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5e, 0x13, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x1360) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 5
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x135F)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::integral_constant<bool,1>
	#   LinkageName: .?AU?$integral_constant@_N$00@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x05, 0x00, 0x10, 0x02
	.byte	0x5f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x30, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x1361) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xtr1common
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x78, 0x74, 0x72, 0x31
	.byte	0x63, 0x6f, 0x6d, 0x6d
	.byte	0x6f, 0x6e, 0x00, 0xf1
	# UdtSourceLine (0x1362) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::integral_constant<bool,1> (0x1360)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xtr1common (0x1361)
	#   LineNumber: 19
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x60, 0x13, 0x00, 0x00
	.byte	0x61, 0x13, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Modifier (0x1363) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::integral_constant<bool,0> (0x128E)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x8e, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1364) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::integral_constant<bool,0> (0x1363)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x63, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1365) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::integral_constant<bool,0> (0x128E)
	#   ThisType: const std::integral_constant<bool,0>* (0x1364)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x8e, 0x12, 0x00, 0x00
	.byte	0x64, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1366) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x1042)
	#     Name: value
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,0>::() (0x1365)
	#     Name: operator bool
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,0>::() (0x1365)
	#     Name: operator()
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: bool (0x30)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x128E)
	#     Name: type
	#   }
	# }
	.byte	0x62, 0x00, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x42, 0x10, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x65, 0x13, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x20, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x65, 0x13, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8e, 0x12, 0x00, 0x00
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x1367) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 5
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1366)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::integral_constant<bool,0>
	#   LinkageName: .?AU?$integral_constant@_N$0A@@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x05, 0x00, 0x10, 0x02
	.byte	0x66, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x41, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1368) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::integral_constant<bool,0> (0x1367)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xtr1common (0x1361)
	#   LineNumber: 19
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x67, 0x13, 0x00, 0x00
	.byte	0x61, 0x13, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Struct (0x1369) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Container_base12
	#   LinkageName: .?AU_Container_base12@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x31, 0x32, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x136A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x136B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#   ThisType: std::_String_val<std::_Simple_types<char> >* (0x136A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x6a, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x136C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#   ThisType: std::_String_val<std::_Simple_types<char> >* (0x136A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x6a, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x136D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_String_val<std::_Simple_types<char> > (0x1334)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x34, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x136E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x119C)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x136D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x6d, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x136F) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::_String_val<std::_Simple_types<char> >::() (0x136C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::_String_val<std::_Simple_types<char> >::() (0x136E)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6c, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6e, 0x13, 0x00, 0x00
	# MemberFunction (0x1370) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x136D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x6d, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1371) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x136D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x12C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x6d, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1372) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1373) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x136D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const unsigned __int64) (0x12FD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x6d, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xfd, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Enum (0x1374) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   UnderlyingType: unsigned (0x75)
	#   FieldListType: <field list> (0x133C)
	#   Name: std::_String_val<std::_Simple_types<char> >::<unnamed-tag>
	#   LinkageName: .?AW4<unnamed-enum-_BUF_SIZE>@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x96, 0x00, 0x07, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x3c, 0x13, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x3a
	.byte	0x3a, 0x3c, 0x75, 0x6e
	.byte	0x6e, 0x61, 0x6d, 0x65
	.byte	0x64, 0x2d, 0x74, 0x61
	.byte	0x67, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x57, 0x34
	.byte	0x3c, 0x75, 0x6e, 0x6e
	.byte	0x61, 0x6d, 0x65, 0x64
	.byte	0x2d, 0x65, 0x6e, 0x75
	.byte	0x6d, 0x2d, 0x5f, 0x42
	.byte	0x55, 0x46, 0x5f, 0x53
	.byte	0x49, 0x5a, 0x45, 0x3e
	.byte	0x40, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1375) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> >::<unnamed-tag> (0x1374)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1313)
	#   LineNumber: 1789
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x74, 0x13, 0x00, 0x00
	.byte	0x13, 0x13, 0x00, 0x00
	.byte	0xfd, 0x06, 0x00, 0x00
	# Enum (0x1376) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   UnderlyingType: unsigned (0x75)
	#   FieldListType: <field list> (0x133F)
	#   Name: std::_String_val<std::_Simple_types<char> >::<unnamed-tag>
	#   LinkageName: .?AW4<unnamed-enum-_ALLOC_MASK>@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x96, 0x00, 0x07, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0x3f, 0x13, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x3a
	.byte	0x3a, 0x3c, 0x75, 0x6e
	.byte	0x6e, 0x61, 0x6d, 0x65
	.byte	0x64, 0x2d, 0x74, 0x61
	.byte	0x67, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x57, 0x34
	.byte	0x3c, 0x75, 0x6e, 0x6e
	.byte	0x61, 0x6d, 0x65, 0x64
	.byte	0x2d, 0x65, 0x6e, 0x75
	.byte	0x6d, 0x2d, 0x5f, 0x41
	.byte	0x4c, 0x4c, 0x4f, 0x43
	.byte	0x5f, 0x4d, 0x41, 0x53
	.byte	0x4b, 0x3e, 0x40, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x40, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1377) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> >::<unnamed-tag> (0x1376)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1313)
	#   LineNumber: 1793
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x76, 0x13, 0x00, 0x00
	.byte	0x13, 0x13, 0x00, 0x00
	.byte	0x01, 0x07, 0x00, 0x00
	# FieldList (0x1378) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Container_base12 (0x1369)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_val<std::_Simple_types<char> >::_Bxty (0x133B)
	#     FieldOffset: 0x8
	#     Name: _Bx
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 (0x23)
	#     FieldOffset: 0x18
	#     Name: _Mysize
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 (0x23)
	#     FieldOffset: 0x20
	#     Name: _Myres
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::() (0x136B)
	#     Name: _String_val
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x136F
	#     Name: _Myptr
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::_String_val<std::_Simple_types<char> >::() (0x1370)
	#     Name: _Large_string_engaged
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::(const unsigned __int64) (0x1371)
	#     Name: _Check_offset
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::(const unsigned __int64) (0x1371)
	#     Name: _Check_offset_exclusive
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_String_val<std::_Simple_types<char> >::() (0x1372)
	#     Name: _Xran
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::_String_val<std::_Simple_types<char> >::(const unsigned __int64, const unsigned __int64) (0x1373)
	#     Name: _Clamp_suffix_size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x119C)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x12D5)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x11A7)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::<unnamed-tag> (0x1374)
	#     Name: 
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::<unnamed-tag> (0x1376)
	#     Name: 
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::_Bxty (0x133B)
	#     Name: _Bxty
	#   }
	# }
	.byte	0xaa, 0x01, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x69, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x3b, 0x13, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x42
	.byte	0x78, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x18, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x73, 0x69, 0x7a
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x20, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x72, 0x65, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6b, 0x13, 0x00, 0x00
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x6f, 0x13, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x70
	.byte	0x74, 0x72, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x70, 0x13, 0x00, 0x00
	.byte	0x5f, 0x4c, 0x61, 0x72
	.byte	0x67, 0x65, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x65, 0x6e
	.byte	0x67, 0x61, 0x67, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x71, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x68, 0x65
	.byte	0x63, 0x6b, 0x5f, 0x6f
	.byte	0x66, 0x66, 0x73, 0x65
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x71, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x68, 0x65
	.byte	0x63, 0x6b, 0x5f, 0x6f
	.byte	0x66, 0x66, 0x73, 0x65
	.byte	0x74, 0x5f, 0x65, 0x78
	.byte	0x63, 0x6c, 0x75, 0x73
	.byte	0x69, 0x76, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x72, 0x13, 0x00, 0x00
	.byte	0x5f, 0x58, 0x72, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x73, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6c, 0x61
	.byte	0x6d, 0x70, 0x5f, 0x73
	.byte	0x75, 0x66, 0x66, 0x69
	.byte	0x78, 0x5f, 0x73, 0x69
	.byte	0x7a, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xd5, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x13, 0x00, 0x00
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x76, 0x13, 0x00, 0x00
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x3b, 0x13, 0x00, 0x00
	.byte	0x5f, 0x42, 0x78, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	# Class (0x1379) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 22
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1378)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 40
	#   Name: std::_String_val<std::_Simple_types<char> >
	#   LinkageName: .?AV?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x72, 0x00, 0x04, 0x15
	.byte	0x16, 0x00, 0x10, 0x02
	.byte	0x78, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x137A) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> > (0x1379)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1313)
	#   LineNumber: 1770
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x79, 0x13, 0x00, 0x00
	.byte	0x13, 0x13, 0x00, 0x00
	.byte	0xea, 0x06, 0x00, 0x00
	# ArgList (0x137B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x1214)
	#     ArgType: const char* const (0x1214)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x137C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const char* const, const unsigned __int64) (0x137B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x7b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x137D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x122B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x2b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x137E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x1277)
	#     ArgType: const char* const (0x1214)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x77, 0x12, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x137F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, const char* const, const unsigned __int64) (0x137E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x7e, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1380) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: char* const (0x1277)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char* const (0x1214)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x77, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x1381) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (char* const, const unsigned __int64, const char* const, const unsigned __int64) (0x1380)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x80, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1382) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x1214)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char& (0x11A7)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	# MemberFunction (0x1383) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x119C)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const unsigned __int64, const char&) (0x1382)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x82, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1384) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x1277)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const char (0x119B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x77, 0x12, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	# MemberFunction (0x1385) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, const unsigned __int64, const char) (0x1384)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x84, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1386) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: char& (0x12D5)
	#     ArgType: const char& (0x11A7)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xd5, 0x12, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	# MemberFunction (0x1387) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (char&, const char&) (0x1386)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x86, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1388) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const unsigned __int64, const char) (0x1385)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::char_traits<char>::(char&, const char&) (0x1387)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x85, 0x13, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x87, 0x13, 0x00, 0x00
	# ArgList (0x1389) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char& (0x11A7)
	#     ArgType: const char& (0x11A7)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	# MemberFunction (0x138A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char&, const char&) (0x1389)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x89, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x138B) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: int (0x74)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x138C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const int (0x138B)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8b, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x138D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const int& (0x138C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x8c, 0x13, 0x00, 0x00
	# MemberFunction (0x138E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char (0x70)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int&) (0x138D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x8d, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x138F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char&) (0x1348)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x48, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1390) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int& (0x138C)
	#     ArgType: const int& (0x138C)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x8c, 0x13, 0x00, 0x00
	.byte	0x8c, 0x13, 0x00, 0x00
	# MemberFunction (0x1391) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int&, const int&) (0x1390)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x90, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1392) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int&) (0x138D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x8d, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1393) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x130F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x0f, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1394) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::fpos<_Mbstatet>
	#   LinkageName: .?AV?$fpos@U_Mbstatet@@@std@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x66
	.byte	0x70, 0x6f, 0x73, 0x3c
	.byte	0x5f, 0x4d, 0x62, 0x73
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x74, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x66, 0x70, 0x6f
	.byte	0x73, 0x40, 0x55, 0x5f
	.byte	0x4d, 0x62, 0x73, 0x74
	.byte	0x61, 0x74, 0x65, 0x74
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x1395) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: _Mbstatet
	#   LinkageName: .?AU_Mbstatet@@
	# }
	.byte	0x2e, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x62, 0x73, 0x74, 0x61
	.byte	0x74, 0x65, 0x74, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x4d, 0x62, 0x73
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x74, 0x40, 0x40, 0x00
	# FieldList (0x1396) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::(const char* const, const char* const, const unsigned __int64) (0x137C)
	#     Name: compare
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: unsigned __int64 std::char_traits<char>::(const char* const) (0x137D)
	#     Name: length
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const char* const, const unsigned __int64) (0x137F)
	#     Name: copy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const unsigned __int64, const char* const, const unsigned __int64) (0x1381)
	#     Name: _Copy_s
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: const char* std::char_traits<char>::(const char* const, const unsigned __int64, const char&) (0x1383)
	#     Name: find
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const char* const, const unsigned __int64) (0x137F)
	#     Name: move
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1388
	#     Name: assign
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: bool std::char_traits<char>::(const char&, const char&) (0x138A)
	#     Name: eq
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: bool std::char_traits<char>::(const char&, const char&) (0x138A)
	#     Name: lt
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char std::char_traits<char>::(const int&) (0x138E)
	#     Name: to_char_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::(const char&) (0x138F)
	#     Name: to_int_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: bool std::char_traits<char>::(const int&, const int&) (0x1391)
	#     Name: eq_int_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::(const int&) (0x1392)
	#     Name: not_eof
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::() (0x1393)
	#     Name: eof
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: char_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: int_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::fpos<_Mbstatet> (0x1394)
	#     Name: pos_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: off_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: _Mbstatet (0x1395)
	#     Name: state_type
	#   }
	# }
	.byte	0x4a, 0x01, 0x03, 0x12
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x7c, 0x13, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6d, 0x70
	.byte	0x61, 0x72, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x7d, 0x13, 0x00, 0x00
	.byte	0x6c, 0x65, 0x6e, 0x67
	.byte	0x74, 0x68, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x7f, 0x13, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x81, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x73, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x83, 0x13, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x7f, 0x13, 0x00, 0x00
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x88, 0x13, 0x00, 0x00
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x8a, 0x13, 0x00, 0x00
	.byte	0x65, 0x71, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x8a, 0x13, 0x00, 0x00
	.byte	0x6c, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x8e, 0x13, 0x00, 0x00
	.byte	0x74, 0x6f, 0x5f, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x8f, 0x13, 0x00, 0x00
	.byte	0x74, 0x6f, 0x5f, 0x69
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x91, 0x13, 0x00, 0x00
	.byte	0x65, 0x71, 0x5f, 0x69
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x92, 0x13, 0x00, 0x00
	.byte	0x6e, 0x6f, 0x74, 0x5f
	.byte	0x65, 0x6f, 0x66, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x93, 0x13, 0x00, 0x00
	.byte	0x65, 0x6f, 0x66, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x94, 0x13, 0x00, 0x00
	.byte	0x70, 0x6f, 0x73, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x6f, 0x66, 0x66, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x95, 0x13, 0x00, 0x00
	.byte	0x73, 0x74, 0x61, 0x74
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Struct (0x1397) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 20
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1396)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::char_traits<char>
	#   LinkageName: .?AU?$char_traits@D@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x14, 0x00, 0x10, 0x02
	.byte	0x96, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x1398) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\iosfwd
	# }
	.byte	0x6e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x69, 0x6f, 0x73, 0x66
	.byte	0x77, 0x64, 0x00, 0xf1
	# UdtSourceLine (0x1399) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::char_traits<char> (0x1397)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\iosfwd (0x1398)
	#   LineNumber: 441
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x97, 0x13, 0x00, 0x00
	.byte	0x98, 0x13, 0x00, 0x00
	.byte	0xb9, 0x01, 0x00, 0x00
	# Struct (0x139A) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Default_allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x86, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x44
	.byte	0x65, 0x66, 0x61, 0x75
	.byte	0x6c, 0x74, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x40
	.byte	0x56, 0x3f, 0x24, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x139B) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Default_allocator_traits<std::allocator<char> > (0x139A)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x9a, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x139C) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x139B)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x9b, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x139D) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator_traits<std::allocator<char> > (0x139C)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x135A)
	#   LineNumber: 902
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x9c, 0x13, 0x00, 0x00
	.byte	0x5a, 0x13, 0x00, 0x00
	.byte	0x86, 0x03, 0x00, 0x00
	# Pointer (0x139E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x1318)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x18, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x139F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char>& (0x131C)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x1318)
	#   ThisType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x139E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x1c, 0x13, 0x00, 0x00
	.byte	0x18, 0x13, 0x00, 0x00
	.byte	0x9e, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x13A0) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x1318)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x18, 0x13, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x13A1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x13A0)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa0, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x13A2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::allocator<char>& (0x1259)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x1318)
	#   ThisType: const std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x13A1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x59, 0x12, 0x00, 0x00
	.byte	0x18, 0x13, 0x00, 0x00
	.byte	0xa1, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x13A3) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<char>& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x139F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::allocator<char>& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x13A2)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9f, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa2, 0x13, 0x00, 0x00
	# MemberFunction (0x13A4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_val<std::_Simple_types<char> >& (0x12EA)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x1318)
	#   ThisType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x139E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xea, 0x12, 0x00, 0x00
	.byte	0x18, 0x13, 0x00, 0x00
	.byte	0x9e, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x13A5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_String_val<std::_Simple_types<char> >& (0x1335)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x1318)
	#   ThisType: const std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x13A1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x35, 0x13, 0x00, 0x00
	.byte	0x18, 0x13, 0x00, 0x00
	.byte	0xa1, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x13A6) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_val<std::_Simple_types<char> >& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x13A4)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_String_val<std::_Simple_types<char> >& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x13A5)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa4, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa5, 0x13, 0x00, 0x00
	# FieldList (0x13A7) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Private (0x1)
	#     BaseType: std::allocator<char> (0x1257)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_String_val<std::_Simple_types<char> > (0x12E9)
	#     FieldOffset: 0x0
	#     Name: _Myval2
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x13A3
	#     Name: _Get_first
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x13A6
	#     Name: _Get_second
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x1257)
	#     Name: _Mybase
	#   }
	# }
	.byte	0x5a, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x01, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0xe9, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x76, 0x61, 0x6c
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xa3, 0x13, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xa6, 0x13, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x73, 0x65, 0x63
	.byte	0x6f, 0x6e, 0x64, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	# Class (0x13A8) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 7
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x13A7)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 40
	#   Name: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
	#   LinkageName: .?AV?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@
	# }
	.byte	0xce, 0x00, 0x04, 0x15
	.byte	0x07, 0x00, 0x10, 0x02
	.byte	0xa7, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6d, 0x70
	.byte	0x72, 0x65, 0x73, 0x73
	.byte	0x65, 0x64, 0x5f, 0x70
	.byte	0x61, 0x69, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x2c, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x43
	.byte	0x6f, 0x6d, 0x70, 0x72
	.byte	0x65, 0x73, 0x73, 0x65
	.byte	0x64, 0x5f, 0x70, 0x61
	.byte	0x69, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x32
	.byte	0x40, 0x24, 0x30, 0x30
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x13A9) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x13A8)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x106E)
	#   LineNumber: 265
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xa8, 0x13, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	.byte	0x09, 0x01, 0x00, 0x00
	# MemberFunction (0x13AA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Iterator_base12 (0x131F)
	#   ThisType: std::_Iterator_base12* (0x1320)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0x20, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x13AB) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Iterator_base12 (0x131F)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x13AC) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Iterator_base12 (0x13AB)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xab, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x13AD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Iterator_base12& (0x13AC)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xac, 0x13, 0x00, 0x00
	# MemberFunction (0x13AE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Iterator_base12 (0x131F)
	#   ThisType: std::_Iterator_base12* (0x1320)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Iterator_base12&) (0x13AD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0x20, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xad, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x13AF) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x13AA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::(const std::_Iterator_base12&) (0x13AE)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xaa, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xae, 0x13, 0x00, 0x00
	# Pointer (0x13B0) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Iterator_base12 (0x131F)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x13B1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12& (0x13B0)
	#   ClassType: std::_Iterator_base12 (0x131F)
	#   ThisType: std::_Iterator_base12* (0x1320)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Iterator_base12&) (0x13AD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb0, 0x13, 0x00, 0x00
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0x20, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xad, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x13B2) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Container_base12 (0x1369)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x69, 0x13, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x13B3) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_base12 (0x13B2)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xb2, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x13B4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Container_base12* (0x13B3)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xb3, 0x13, 0x00, 0x00
	# MemberFunction (0x13B5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Iterator_base12 (0x131F)
	#   ThisType: std::_Iterator_base12* (0x1320)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_base12*) (0x13B4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0x20, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xb4, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x13B6) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Iterator_base12 (0x13AB)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xab, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x13B7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_Container_base12* (0x13B3)
	#   ClassType: std::_Iterator_base12 (0x131F)
	#   ThisType: const std::_Iterator_base12* (0x13B6)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xb3, 0x13, 0x00, 0x00
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0xb6, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x13B8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1321)
	#   ClassType: std::_Iterator_base12 (0x131F)
	#   ThisType: std::_Iterator_base12* (0x1320)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x21, 0x13, 0x00, 0x00
	.byte	0x1f, 0x13, 0x00, 0x00
	.byte	0x20, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x13B9) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x1042)
	#     Name: _Unwrap_when_unverified
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* (0x1326)
	#     FieldOffset: 0x0
	#     Name: _Myproxy
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12* (0x1320)
	#     FieldOffset: 0x8
	#     Name: _Mynextiter
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x13AF
	#     Name: _Iterator_base12
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12& std::_Iterator_base12::(const std::_Iterator_base12&) (0x13B1)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x13AA)
	#     Name: ~_Iterator_base12
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::(const std::_Container_base12*) (0x13B5)
	#     Name: _Adopt
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x13AA)
	#     Name: _Clrcont
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Container_base12* std::_Iterator_base12::() (0x13B7)
	#     Name: _Getcont
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12** std::_Iterator_base12::() (0x13B8)
	#     Name: _Getpnext
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x13AA)
	#     Name: _Orphan_me
	#   }
	# }
	.byte	0xfa, 0x00, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x42, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x5f
	.byte	0x77, 0x68, 0x65, 0x6e
	.byte	0x5f, 0x75, 0x6e, 0x76
	.byte	0x65, 0x72, 0x69, 0x66
	.byte	0x69, 0x65, 0x64, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x20, 0x13, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x6e, 0x65, 0x78
	.byte	0x74, 0x69, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xaf, 0x13, 0x00, 0x00
	.byte	0x5f, 0x49, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb1, 0x13, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xaa, 0x13, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x49, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x31
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb5, 0x13, 0x00, 0x00
	.byte	0x5f, 0x41, 0x64, 0x6f
	.byte	0x70, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xaa, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6c, 0x72
	.byte	0x63, 0x6f, 0x6e, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb7, 0x13, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x63, 0x6f, 0x6e, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xb8, 0x13, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x6e, 0x65, 0x78
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xaa, 0x13, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x6d, 0x65, 0x00, 0xf1
	# Struct (0x13BA) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 12
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x13B9)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: std::_Iterator_base12
	#   LinkageName: .?AU_Iterator_base12@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x0c, 0x00, 0x00, 0x02
	.byte	0xb9, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x49, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x62, 0x61, 0x73
	.byte	0x65, 0x31, 0x32, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x49, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x13BB) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Iterator_base12 (0x13BA)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x106E)
	#   LineNumber: 105
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xba, 0x13, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	.byte	0x69, 0x00, 0x00, 0x00
	# MemberFunction (0x13BC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_proxy (0x1325)
	#   ThisType: std::_Container_proxy* (0x1326)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x25, 0x13, 0x00, 0x00
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x13BD) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Container_base12* (0x13B3)
	#     FieldOffset: 0x0
	#     Name: _Mycont
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12* (0x1320)
	#     FieldOffset: 0x8
	#     Name: _Myfirstiter
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_proxy::() (0x13BC)
	#     Name: _Container_proxy
	#   }
	# }
	.byte	0x4a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0xb3, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x20, 0x13, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x69, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xbc, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x13BE) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 3
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x13BD)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: std::_Container_proxy
	#   LinkageName: .?AU_Container_proxy@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x03, 0x00, 0x00, 0x02
	.byte	0xbd, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x13BF) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Container_proxy (0x13BE)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x106E)
	#   LineNumber: 65
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xbe, 0x13, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	.byte	0x41, 0x00, 0x00, 0x00
	# Modifier (0x13C0) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::allocator<std::_Container_proxy> (0x1338)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x13C1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<std::_Container_proxy> (0x13C0)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc0, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Pointer (0x13C2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy (0x1325)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x25, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x13C3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Container_proxy& (0x13C2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xc2, 0x13, 0x00, 0x00
	# MemberFunction (0x13C4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x1326)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1338)
	#   ThisType: const std::allocator<std::_Container_proxy>* (0x13C1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Container_proxy&) (0x13C3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0xc1, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc3, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x13C5) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Container_proxy (0x1325)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x25, 0x13, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x13C6) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_proxy (0x13C5)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc5, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Pointer (0x13C7) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_proxy (0x13C5)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc5, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x13C8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Container_proxy& (0x13C7)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xc7, 0x13, 0x00, 0x00
	# MemberFunction (0x13C9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_Container_proxy* (0x13C6)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1338)
	#   ThisType: const std::allocator<std::_Container_proxy>* (0x13C1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_proxy&) (0x13C8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xc6, 0x13, 0x00, 0x00
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0xc1, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc8, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x13CA) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* std::allocator<std::_Container_proxy>::(std::_Container_proxy&) (0x13C4)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Container_proxy* std::allocator<std::_Container_proxy>::(const std::_Container_proxy&) (0x13C9)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc4, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc9, 0x13, 0x00, 0x00
	# Pointer (0x13CB) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<std::_Container_proxy> (0x1338)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x13CC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1338)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x13CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0xcb, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x13CD) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<std::_Container_proxy> (0x13C0)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc0, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x13CE) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::allocator<std::_Container_proxy>& (0x13CD)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xcd, 0x13, 0x00, 0x00
	# MemberFunction (0x13CF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1338)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x13CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<std::_Container_proxy>&) (0x13CE)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0xcb, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xce, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x13D0) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<std::_Container_proxy>::() (0x13CC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<std::_Container_proxy>::(const std::allocator<std::_Container_proxy>&) (0x13CF)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcc, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcf, 0x13, 0x00, 0x00
	# ArgList (0x13D1) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_Container_proxy* const (0x1329)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x29, 0x13, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x13D2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1338)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x13CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_Container_proxy* const, const unsigned __int64) (0x13D1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0xcb, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xd1, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x13D3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x1326)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1338)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x13CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x12C0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0xcb, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc0, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x13D4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x1326)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1338)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x13CB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const void*) (0x1354)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0xcb, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x54, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x13D5) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* std::allocator<std::_Container_proxy>::(const unsigned __int64) (0x13D3)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* std::allocator<std::_Container_proxy>::(const unsigned __int64, const void*) (0x13D4)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd3, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd4, 0x13, 0x00, 0x00
	# MemberFunction (0x13D6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::allocator<std::_Container_proxy> (0x1338)
	#   ThisType: const std::allocator<std::_Container_proxy>* (0x13C1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0xc1, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x13D7) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x13CA
	#     Name: address
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x13D0
	#     Name: allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<std::_Container_proxy>::(std::_Container_proxy* const, const unsigned __int64) (0x13D2)
	#     Name: deallocate
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x13D5
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::allocator<std::_Container_proxy>::() (0x13D6)
	#     Name: max_size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void (0x3)
	#     Name: _Not_user_specialized
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy (0x1325)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy* (0x1326)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const std::_Container_proxy* (0x13C6)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy& (0x13C2)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const std::_Container_proxy& (0x13C7)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x128B)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x128B)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0x5e, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xca, 0x13, 0x00, 0x00
	.byte	0x61, 0x64, 0x64, 0x72
	.byte	0x65, 0x73, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xd0, 0x13, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd2, 0x13, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xd5, 0x13, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd6, 0x13, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5f, 0x4e, 0x6f, 0x74
	.byte	0x5f, 0x75, 0x73, 0x65
	.byte	0x72, 0x5f, 0x73, 0x70
	.byte	0x65, 0x63, 0x69, 0x61
	.byte	0x6c, 0x69, 0x7a, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x25, 0x13, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xc6, 0x13, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xc2, 0x13, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xc7, 0x13, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Class (0x13D8) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 18
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x13D7)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator<std::_Container_proxy>
	#   LinkageName: .?AV?$allocator@U_Container_proxy@std@@@std@@
	# }
	.byte	0x6a, 0x00, 0x04, 0x15
	.byte	0x12, 0x00, 0x10, 0x02
	.byte	0xd7, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x43
	.byte	0x6f, 0x6e, 0x74, 0x61
	.byte	0x69, 0x6e, 0x65, 0x72
	.byte	0x5f, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x13D9) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator<std::_Container_proxy> (0x13D8)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x135A)
	#   LineNumber: 940
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xd8, 0x13, 0x00, 0x00
	.byte	0x5a, 0x13, 0x00, 0x00
	.byte	0xac, 0x03, 0x00, 0x00
	# Struct (0x13DA) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@
	# }
	.byte	0xae, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x55, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# FieldList (0x13DB) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x13DA)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0xda, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x13DC) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x13DB)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator_traits<std::allocator<std::_Container_proxy> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@
	# }
	.byte	0x9a, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0xdb, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x13DD) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator_traits<std::allocator<std::_Container_proxy> > (0x13DC)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x135A)
	#   LineNumber: 902
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xdc, 0x13, 0x00, 0x00
	.byte	0x5a, 0x13, 0x00, 0x00
	.byte	0x86, 0x03, 0x00, 0x00
	# FieldList (0x13DE) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x119C)
	#     Name: const_pointer
	#   }
	# }
	.byte	0x6a, 0x00, 0x03, 0x12
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	# Struct (0x13DF) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 5
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x13DE)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Simple_types<char>
	#   LinkageName: .?AU?$_Simple_types@D@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x05, 0x00, 0x10, 0x02
	.byte	0xde, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x13E0) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Simple_types<char> (0x13DF)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x135A)
	#   LineNumber: 928
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xdf, 0x13, 0x00, 0x00
	.byte	0x5a, 0x13, 0x00, 0x00
	.byte	0xa0, 0x03, 0x00, 0x00
	# Array (0x13E1) {
	#   TypeLeafKind: LF_ARRAY (0x1503)
	#   ElementType: char (0x70)
	#   IndexType: unsigned __int64 (0x23)
	#   SizeOf: 16
	#   Name: 
	# }
	.byte	0x0e, 0x00, 0x03, 0x15
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x00, 0xf1
	# Pointer (0x13E2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_val<std::_Simple_types<char> >::_Bxty (0x133B)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x3b, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x13E3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> >::_Bxty (0x133B)
	#   ThisType: std::_String_val<std::_Simple_types<char> >::_Bxty* (0x13E2)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3b, 0x13, 0x00, 0x00
	.byte	0xe2, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x13E4) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: 0x13E1
	#     FieldOffset: 0x0
	#     Name: _Buf
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: char* (0x670)
	#     FieldOffset: 0x0
	#     Name: _Ptr
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: 0x13E1
	#     FieldOffset: 0x0
	#     Name: _Alias
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::_Bxty::() (0x13E3)
	#     Name: _Bxty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::_Bxty::() (0x13E3)
	#     Name: ~_Bxty
	#   }
	# }
	.byte	0x56, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0xe1, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x42
	.byte	0x75, 0x66, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x50
	.byte	0x74, 0x72, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0xe1, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x41
	.byte	0x6c, 0x69, 0x61, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe3, 0x13, 0x00, 0x00
	.byte	0x5f, 0x42, 0x78, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe3, 0x13, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x42, 0x78
	.byte	0x74, 0x79, 0x00, 0xf1
	# Union (0x13E5) {
	#   TypeLeafKind: LF_UNION (0x1506)
	#   MemberCount: 5
	#   Properties [ (0x608)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#     Sealed (0x400)
	#   ]
	#   FieldList: <field list> (0x13E4)
	#   SizeOf: 16
	#   Name: std::_String_val<std::_Simple_types<char> >::_Bxty
	#   LinkageName: .?AT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x06, 0x15
	.byte	0x05, 0x00, 0x08, 0x06
	.byte	0xe4, 0x13, 0x00, 0x00
	.byte	0x10, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x3a, 0x3a, 0x5f
	.byte	0x42, 0x78, 0x74, 0x79
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x54, 0x5f, 0x42, 0x78
	.byte	0x74, 0x79, 0x40, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x40, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x13E6) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> >::_Bxty (0x13E5)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1313)
	#   LineNumber: 1854
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xe5, 0x13, 0x00, 0x00
	.byte	0x13, 0x13, 0x00, 0x00
	.byte	0x3e, 0x07, 0x00, 0x00
	# Pointer (0x13E7) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_base12 (0x1369)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x69, 0x13, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x13E8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_base12 (0x1369)
	#   ThisType: std::_Container_base12* (0x13E7)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x13, 0x00, 0x00
	.byte	0xe7, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x13E9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_base12 (0x13B2)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xb2, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x13EA) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Container_base12& (0x13E9)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xe9, 0x13, 0x00, 0x00
	# MemberFunction (0x13EB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_base12 (0x1369)
	#   ThisType: std::_Container_base12* (0x13E7)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_base12&) (0x13EA)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x13, 0x00, 0x00
	.byte	0xe7, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xea, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x13EC) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::() (0x13E8)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::(const std::_Container_base12&) (0x13EB)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe8, 0x13, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xeb, 0x13, 0x00, 0x00
	# Pointer (0x13ED) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_base12 (0x1369)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x69, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x13EE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_base12& (0x13ED)
	#   ClassType: std::_Container_base12 (0x1369)
	#   ThisType: std::_Container_base12* (0x13E7)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_base12&) (0x13EA)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xed, 0x13, 0x00, 0x00
	.byte	0x69, 0x13, 0x00, 0x00
	.byte	0xe7, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xea, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x13EF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1321)
	#   ClassType: std::_Container_base12 (0x1369)
	#   ThisType: const std::_Container_base12* (0x13B3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x21, 0x13, 0x00, 0x00
	.byte	0x69, 0x13, 0x00, 0x00
	.byte	0xb3, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x13F0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Container_base12& (0x13ED)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xed, 0x13, 0x00, 0x00
	# MemberFunction (0x13F1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_base12 (0x1369)
	#   ThisType: std::_Container_base12* (0x13E7)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Container_base12&) (0x13F0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x13, 0x00, 0x00
	.byte	0xe7, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf0, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x13F2) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* (0x1326)
	#     FieldOffset: 0x0
	#     Name: _Myproxy
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x13EC
	#     Name: _Container_base12
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_base12& std::_Container_base12::(const std::_Container_base12&) (0x13EE)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12** std::_Container_base12::() (0x13EF)
	#     Name: _Getpfirst
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::() (0x13E8)
	#     Name: _Orphan_all
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::(std::_Container_base12&) (0x13F1)
	#     Name: _Swap_all
	#   }
	# }
	.byte	0x82, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xec, 0x13, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x31
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xee, 0x13, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xef, 0x13, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe8, 0x13, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xf1, 0x13, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	# Struct (0x13F3) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 7
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x13F2)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: std::_Container_base12
	#   LinkageName: .?AU_Container_base12@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x07, 0x00, 0x00, 0x02
	.byte	0xf2, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x31, 0x32, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x13F4) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Container_base12 (0x13F3)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x106E)
	#   LineNumber: 76
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xf3, 0x13, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	.byte	0x4c, 0x00, 0x00, 0x00
	# FieldList (0x13F5) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned long (0x22)
	#     FieldOffset: 0x0
	#     Name: _Wchar
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short (0x21)
	#     FieldOffset: 0x4
	#     Name: _Byte
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short (0x21)
	#     FieldOffset: 0x6
	#     Name: _State
	#   }
	# }
	.byte	0x3a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x22, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x57
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x21, 0x00, 0x00, 0x00
	.byte	0x04, 0x00, 0x5f, 0x42
	.byte	0x79, 0x74, 0x65, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x21, 0x00, 0x00, 0x00
	.byte	0x06, 0x00, 0x5f, 0x53
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x13F6) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 3
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x13F5)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: _Mbstatet
	#   LinkageName: .?AU_Mbstatet@@
	# }
	.byte	0x2e, 0x00, 0x05, 0x15
	.byte	0x03, 0x00, 0x00, 0x02
	.byte	0xf5, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x4d
	.byte	0x62, 0x73, 0x74, 0x61
	.byte	0x74, 0x65, 0x74, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x4d, 0x62, 0x73
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x74, 0x40, 0x40, 0x00
	# StringId (0x13F7) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\corecrt.h
	# }
	.byte	0x52, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x57
	.byte	0x69, 0x6e, 0x64, 0x6f
	.byte	0x77, 0x73, 0x20, 0x4b
	.byte	0x69, 0x74, 0x73, 0x5c
	.byte	0x31, 0x30, 0x5c, 0x69
	.byte	0x6e, 0x63, 0x6c, 0x75
	.byte	0x64, 0x65, 0x5c, 0x31
	.byte	0x30, 0x2e, 0x30, 0x2e
	.byte	0x31, 0x37, 0x37, 0x36
	.byte	0x33, 0x2e, 0x30, 0x5c
	.byte	0x75, 0x63, 0x72, 0x74
	.byte	0x5c, 0x63, 0x6f, 0x72
	.byte	0x65, 0x63, 0x72, 0x74
	.byte	0x2e, 0x68, 0x00, 0xf1
	# UdtSourceLine (0x13F8) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: _Mbstatet (0x13F6)
	#   SourceFile: C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\corecrt.h (0x13F7)
	#   LineNumber: 531
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xf6, 0x13, 0x00, 0x00
	.byte	0xf7, 0x13, 0x00, 0x00
	.byte	0x13, 0x02, 0x00, 0x00
	# ArgList (0x13F9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x131C)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x1c, 0x13, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x13FA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x139A)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::allocator<char>&, const unsigned __int64) (0x13F9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x9a, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xf9, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x13FB) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x131C)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const void* (0x1353)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1c, 0x13, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x53, 0x13, 0x00, 0x00
	# MemberFunction (0x13FC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x139A)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<char>&, const unsigned __int64, const void*) (0x13FB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x9a, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xfb, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x13FD) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::_Default_allocator_traits<std::allocator<char> >::(std::allocator<char>&, const unsigned __int64) (0x13FA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::_Default_allocator_traits<std::allocator<char> >::(std::allocator<char>&, const unsigned __int64, const void*) (0x13FC)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0xfa, 0x13, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0xfc, 0x13, 0x00, 0x00
	# Modifier (0x13FE) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: char* (0x670)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x13FF) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x131C)
	#     ArgType: const char* (0x13FE)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1c, 0x13, 0x00, 0x00
	.byte	0xfe, 0x13, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x1400) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x139A)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<char>&, const char*, const unsigned __int64) (0x13FF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9a, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xff, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1401) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x139A)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x125D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x9a, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x5d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1402) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char> (0x1257)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x139A)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x125D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x9a, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x5d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1403) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x13FD
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Default_allocator_traits<std::allocator<char> >::(std::allocator<char>&, const char*, const unsigned __int64) (0x1400)
	#     Name: deallocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: unsigned __int64 std::_Default_allocator_traits<std::allocator<char> >::(const std::allocator<char>&) (0x1401)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::allocator<char> std::_Default_allocator_traits<std::allocator<char> >::(const std::allocator<char>&) (0x1402)
	#     Name: select_on_container_copy_construction
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x1257)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x119C)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void* (0x603)
	#     Name: void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const void* (0x1353)
	#     Name: const_void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x128E)
	#     Name: propagate_on_container_copy_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x128B)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x128E)
	#     Name: propagate_on_container_swap
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x128B)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0xbe, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xfd, 0x13, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x00, 0x14, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x01, 0x14, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x02, 0x14, 0x00, 0x00
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x5f, 0x6f
	.byte	0x6e, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x06, 0x00, 0x00
	.byte	0x76, 0x6f, 0x69, 0x64
	.byte	0x5f, 0x70, 0x6f, 0x69
	.byte	0x6e, 0x74, 0x65, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x53, 0x13, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x76, 0x6f
	.byte	0x69, 0x64, 0x5f, 0x70
	.byte	0x6f, 0x69, 0x6e, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8e, 0x12, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8e, 0x12, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x73
	.byte	0x77, 0x61, 0x70, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Struct (0x1404) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 17
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1403)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Default_allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x86, 0x00, 0x05, 0x15
	.byte	0x11, 0x00, 0x10, 0x02
	.byte	0x03, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x44
	.byte	0x65, 0x66, 0x61, 0x75
	.byte	0x6c, 0x74, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x40
	.byte	0x56, 0x3f, 0x24, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1405) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Default_allocator_traits<std::allocator<char> > (0x1404)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x135A)
	#   LineNumber: 835
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x04, 0x14, 0x00, 0x00
	.byte	0x5a, 0x13, 0x00, 0x00
	.byte	0x43, 0x03, 0x00, 0x00
	# Pointer (0x1406) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<std::_Container_proxy> (0x1338)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1407) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::allocator<std::_Container_proxy>& (0x1406)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x06, 0x14, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x1408) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x1326)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x13DA)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::allocator<std::_Container_proxy>&, const unsigned __int64) (0x1407)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0xda, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x07, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1409) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<std::_Container_proxy>& (0x1406)
	#     ArgType: const unsigned __int64 (0x1254)
	#     ArgType: const void* (0x1353)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x06, 0x14, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x53, 0x13, 0x00, 0x00
	# MemberFunction (0x140A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x1326)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x13DA)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<std::_Container_proxy>&, const unsigned __int64, const void*) (0x1409)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0xda, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x09, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x140B) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::_Container_proxy* std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(std::allocator<std::_Container_proxy>&, const unsigned __int64) (0x1408)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::_Container_proxy* std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(std::allocator<std::_Container_proxy>&, const unsigned __int64, const void*) (0x140A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x08, 0x14, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x0a, 0x14, 0x00, 0x00
	# Modifier (0x140C) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Container_proxy* (0x1326)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x140D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<std::_Container_proxy>& (0x1406)
	#     ArgType: const std::_Container_proxy* (0x140C)
	#     ArgType: const unsigned __int64 (0x1254)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x06, 0x14, 0x00, 0x00
	.byte	0x0c, 0x14, 0x00, 0x00
	.byte	0x54, 0x12, 0x00, 0x00
	# MemberFunction (0x140E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x13DA)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<std::_Container_proxy>&, const std::_Container_proxy*, const unsigned __int64) (0x140D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xda, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x0d, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x140F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x13DA)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<std::_Container_proxy>&) (0x13CE)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xda, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xce, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1410) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<std::_Container_proxy> (0x1338)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x13DA)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<std::_Container_proxy>&) (0x13CE)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0xda, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xce, 0x13, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1411) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x140B
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(std::allocator<std::_Container_proxy>&, const std::_Container_proxy*, const unsigned __int64) (0x140E)
	#     Name: deallocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: unsigned __int64 std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(const std::allocator<std::_Container_proxy>&) (0x140F)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::allocator<std::_Container_proxy> std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(const std::allocator<std::_Container_proxy>&) (0x1410)
	#     Name: select_on_container_copy_construction
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<std::_Container_proxy> (0x1338)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy (0x1325)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy* (0x1326)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const std::_Container_proxy* (0x13C6)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void* (0x603)
	#     Name: void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const void* (0x1353)
	#     Name: const_void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x128E)
	#     Name: propagate_on_container_copy_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x128B)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x128E)
	#     Name: propagate_on_container_swap
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x128B)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0xbe, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x0b, 0x14, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x0e, 0x14, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x0f, 0x14, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x10, 0x14, 0x00, 0x00
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x5f, 0x6f
	.byte	0x6e, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x38, 0x13, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x25, 0x13, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x26, 0x13, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xc6, 0x13, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x06, 0x00, 0x00
	.byte	0x76, 0x6f, 0x69, 0x64
	.byte	0x5f, 0x70, 0x6f, 0x69
	.byte	0x6e, 0x74, 0x65, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x53, 0x13, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x76, 0x6f
	.byte	0x69, 0x64, 0x5f, 0x70
	.byte	0x6f, 0x69, 0x6e, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8e, 0x12, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8e, 0x12, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x73
	.byte	0x77, 0x61, 0x70, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Struct (0x1412) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 17
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1411)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@
	# }
	.byte	0xae, 0x00, 0x05, 0x15
	.byte	0x11, 0x00, 0x10, 0x02
	.byte	0x11, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x55, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1413) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x1412)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x135A)
	#   LineNumber: 835
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x12, 0x14, 0x00, 0x00
	.byte	0x5a, 0x13, 0x00, 0x00
	.byte	0x43, 0x03, 0x00, 0x00
	# FuncId (0x1414) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl::details (0x1083)
	#   FunctionType: void (gsl::fail_fast&&) (0x1227)
	#   Name: throw_exception
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x27, 0x12, 0x00, 0x00
	.byte	0x74, 0x68, 0x72, 0x6f
	.byte	0x77, 0x5f, 0x65, 0x78
	.byte	0x63, 0x65, 0x70, 0x74
	.byte	0x69, 0x6f, 0x6e, 0x00
	# MemberFuncId (0x1415) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x1224)
	#   FunctionType: void gsl::fail_fast::(const char* const) (0x122C)
	#   Name: fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x2c, 0x12, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# MemberFunction (0x1416) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x1224)
	#   ThisType: gsl::fail_fast* (0x122A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x2a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1417) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x1224)
	#   FunctionType: void gsl::fail_fast::() (0x1416)
	#   Name: ~fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x16, 0x14, 0x00, 0x00
	.byte	0x7e, 0x66, 0x61, 0x69
	.byte	0x6c, 0x5f, 0x66, 0x61
	.byte	0x73, 0x74, 0x00, 0xf1
	# MemberFuncId (0x1418) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: int* gsl::span<int,-1>::() (0x1027)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x1419) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: __int64 (0x13)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x141A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: __int64& (0x1419)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x19, 0x14, 0x00, 0x00
	# Procedure (0x141B) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned __int64 (0x23)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64&) (0x141A)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1a, 0x14, 0x00, 0x00
	# FuncId (0x141C) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl (0x118F)
	#   FunctionType: unsigned __int64 (__int64&) (0x141B)
	#   Name: narrow_cast
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x1b, 0x14, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x5f, 0x63
	.byte	0x61, 0x73, 0x74, 0x00
	# Procedure (0x141D) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64& (0x1419)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64&) (0x141A)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x19, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1a, 0x14, 0x00, 0x00
	# FuncId (0x141E) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: __int64& (__int64&) (0x141D)
	#   Name: forward
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x1d, 0x14, 0x00, 0x00
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x00
	# Pointer (0x141F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::fail_fast (0x1224)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1420) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::fail_fast& (0x141F)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x1f, 0x14, 0x00, 0x00
	# Procedure (0x1421) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::fail_fast&& (0x1225)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::fail_fast&) (0x1420)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x25, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x20, 0x14, 0x00, 0x00
	# FuncId (0x1422) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: gsl::fail_fast&& (gsl::fail_fast&) (0x1421)
	#   Name: forward
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x21, 0x14, 0x00, 0x00
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x00
	# MemberFunction (0x1423) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x1224)
	#   ThisType: gsl::fail_fast* (0x122A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::fail_fast&&) (0x1226)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x2a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x26, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1424) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x1224)
	#   FunctionType: void gsl::fail_fast::(gsl::fail_fast&&) (0x1423)
	#   Name: fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x23, 0x14, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Modifier (0x1425) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::fail_fast (0x1224)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1426) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::fail_fast (0x1425)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x25, 0x14, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1427) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::fail_fast& (0x1426)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x26, 0x14, 0x00, 0x00
	# MemberFunction (0x1428) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x1224)
	#   ThisType: gsl::fail_fast* (0x122A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::fail_fast&) (0x1427)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x2a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x27, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1429) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x1224)
	#   FunctionType: void gsl::fail_fast::(const gsl::fail_fast&) (0x1428)
	#   Name: fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x24, 0x12, 0x00, 0x00
	.byte	0x28, 0x14, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Modifier (0x142A) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::logic_error (0x1229)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x142B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::logic_error (0x142A)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x2a, 0x14, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x142C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::logic_error& (0x142B)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x2b, 0x14, 0x00, 0x00
	# MemberFunction (0x142D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x1229)
	#   ThisType: std::logic_error* (0x1232)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::logic_error&) (0x142C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x32, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x2c, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x142E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x1229)
	#   FunctionType: void std::logic_error::(const std::logic_error&) (0x142D)
	#   Name: logic_error
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x2d, 0x14, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x142F) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x1231)
	#   FunctionType: void std::exception::(const std::exception&) (0x1249)
	#   Name: exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x49, 0x12, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# Pointer (0x1430) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::logic_error (0x1229)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x1431) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::logic_error&& (0x1430)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x30, 0x14, 0x00, 0x00
	# MemberFunction (0x1432) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x1229)
	#   ThisType: std::logic_error* (0x1232)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::logic_error&&) (0x1431)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x32, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x31, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1433) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x1229)
	#   FunctionType: void std::logic_error::(std::logic_error&&) (0x1432)
	#   Name: logic_error
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x32, 0x14, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x1434) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x1231)
	#   FunctionType: const char* std::exception::() (0x124E)
	#   Name: what
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x4e, 0x12, 0x00, 0x00
	.byte	0x77, 0x68, 0x61, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x1435) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x1229)
	#   ThisType: std::logic_error* (0x1232)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x32, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1436) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x1229)
	#   FunctionType: void std::logic_error::() (0x1435)
	#   Name: ~logic_error
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x35, 0x14, 0x00, 0x00
	.byte	0x7e, 0x6c, 0x6f, 0x67
	.byte	0x69, 0x63, 0x5f, 0x65
	.byte	0x72, 0x72, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1437) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x1231)
	#   FunctionType: void std::exception::() (0x1242)
	#   Name: ~exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x42, 0x12, 0x00, 0x00
	.byte	0x7e, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x00, 0xf1
	# MemberFuncId (0x1438) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x1229)
	#   FunctionType: void std::logic_error::(const char*) (0x1239)
	#   Name: logic_error
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x39, 0x12, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x1439) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x1231)
	#   FunctionType: void std::exception::(const char* const) (0x1243)
	#   Name: exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x43, 0x12, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x143A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#   FunctionType: int* gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x103B)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x3b, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x143B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   FunctionType: void gsl::details::span_iterator<gsl::span<int,-1>,0>::(const gsl::span<int,-1>*, __int64) (0x1046)
	#   Name: span_iterator
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x46, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	# FuncId (0x143C) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl::details (0x1083)
	#   FunctionType: bool (gsl::details::span_iterator<gsl::span<int,-1>,0>, gsl::details::span_iterator<gsl::span<int,-1>,0>) (0x1085)
	#   Name: operator==
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x3d, 0x00, 0xf1
	# MemberFuncId (0x143D) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<6> (0x115A)
	#   FunctionType: void gsl::details::extent_type<6>::() (0x1164)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x64, 0x11, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# ArgList (0x143E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: unsigned char& (0x10EF)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xef, 0x10, 0x00, 0x00
	# Procedure (0x143F) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned char* (0x620)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (unsigned char&) (0x143E)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x3e, 0x14, 0x00, 0x00
	# FuncId (0x1440) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: unsigned char* (unsigned char&) (0x143F)
	#   Name: addressof
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x3f, 0x14, 0x00, 0x00
	.byte	0x61, 0x64, 0x64, 0x72
	.byte	0x65, 0x73, 0x73, 0x6f
	.byte	0x66, 0x00, 0xf2, 0xf1
	# Pointer (0x1441) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10D1)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x1442) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<unsigned char,-1>::KnownNotNull (0x10E3)
	#     ArgType: gsl::details::extent_type<6> (0x115A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xe3, 0x10, 0x00, 0x00
	.byte	0x5a, 0x11, 0x00, 0x00
	# MemberFunction (0x1443) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10D1)
	#   ThisType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x1441)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<unsigned char,-1>::KnownNotNull, gsl::details::extent_type<6>) (0x1442)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x41, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x42, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1444) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10D1)
	#   FunctionType: void gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(gsl::span<unsigned char,-1>::KnownNotNull, gsl::details::extent_type<6>) (0x1443)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x43, 0x14, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1445) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::details::extent_type<6> (0x115A)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x5a, 0x11, 0x00, 0x00
	# MemberFunction (0x1446) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: gsl::details::extent_type<-1>* (0x1063)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::details::extent_type<6>) (0x1445)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x45, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1447) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   FunctionType: void gsl::details::extent_type<-1>::(gsl::details::extent_type<6>) (0x1446)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x46, 0x14, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# MemberFuncId (0x1448) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<6> (0x115A)
	#   FunctionType: __int64 gsl::details::extent_type<6>::() (0x1169)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x69, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1449) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   FunctionType: bool gsl::span<unsigned char,-1>::(__int64, __int64) (0x10FA)
	#   Name: CheckRange
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	# MemberFuncId (0x144A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   FunctionType: unsigned char* gsl::span<unsigned char,-1>::() (0x10F1)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x144B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10D1)
	#   FunctionType: unsigned char* gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x1103)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x144C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: int& (0x1025)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x25, 0x10, 0x00, 0x00
	# Procedure (0x144D) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (int&) (0x144C)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x4c, 0x14, 0x00, 0x00
	# FuncId (0x144E) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: int* (int&) (0x144D)
	#   Name: addressof
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x4d, 0x14, 0x00, 0x00
	.byte	0x61, 0x64, 0x64, 0x72
	.byte	0x65, 0x73, 0x73, 0x6f
	.byte	0x66, 0x00, 0xf2, 0xf1
	# Pointer (0x144F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,6>::storage_type<gsl::details::extent_type<6> > (0x1133)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x33, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x1450) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<int,6>::KnownNotNull (0x113D)
	#     ArgType: gsl::details::extent_type<6> (0x115A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x5a, 0x11, 0x00, 0x00
	# MemberFunction (0x1451) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,6>::storage_type<gsl::details::extent_type<6> > (0x1133)
	#   ThisType: gsl::span<int,6>::storage_type<gsl::details::extent_type<6> >* (0x144F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<int,6>::KnownNotNull, gsl::details::extent_type<6>) (0x1450)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x11, 0x00, 0x00
	.byte	0x4f, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x50, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1452) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,6>::storage_type<gsl::details::extent_type<6> > (0x1133)
	#   FunctionType: void gsl::span<int,6>::storage_type<gsl::details::extent_type<6> >::(gsl::span<int,6>::KnownNotNull, gsl::details::extent_type<6>) (0x1451)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x33, 0x11, 0x00, 0x00
	.byte	0x51, 0x14, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1453) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,6>::subspan_selector<6>
	#   LinkageName: .?AV?$subspan_selector@$05@?$span@H$05@gsl@@
	# }
	.byte	0x6a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x36, 0x3e, 0x3a, 0x3a
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x36, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x73, 0x65
	.byte	0x6c, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x40, 0x24
	.byte	0x30, 0x35, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x35, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1454) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#     ArgType: gsl::span<int,6>::subspan_selector<6> (0x1453)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x53, 0x14, 0x00, 0x00
	# MemberFunction (0x1455) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1000)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   ThisType: const gsl::span<int,6>* (0x1144)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (__int64, __int64, gsl::span<int,6>::subspan_selector<6>) (0x1454)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x54, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1456) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x1060)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: gsl::span<int,6>::subspan_selector<6>
	#   LinkageName: .?AV?$subspan_selector@$05@?$span@H$05@gsl@@
	# }
	.byte	0x6a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x08, 0x02
	.byte	0x60, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x36, 0x3e, 0x3a, 0x3a
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x36, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x73, 0x65
	.byte	0x6c, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x40, 0x24
	.byte	0x30, 0x35, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x35, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1457) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,6>::subspan_selector<6> (0x1456)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 615
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x56, 0x14, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x67, 0x02, 0x00, 0x00
	# MemberFuncId (0x1458) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   FunctionType: gsl::span<int,-1> gsl::span<int,6>::(__int64, __int64, gsl::span<int,6>::subspan_selector<6>) (0x1455)
	#   Name: make_subspan
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x55, 0x14, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1459) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   FunctionType: __int64 gsl::span<int,6>::() (0x1147)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x145A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   ThisType: gsl::span<int,-1>* (0x1005)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<int,6>&) (0x113B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x3b, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x145B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: void gsl::span<int,-1>::(const gsl::span<int,6>&) (0x145A)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x5a, 0x14, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x145C) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<6> (0x115A)
	#   FunctionType: void gsl::details::extent_type<6>::(__int64) (0x1165)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x65, 0x11, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# MemberFuncId (0x145D) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,6> (0x1132)
	#   FunctionType: int* gsl::span<int,6>::() (0x114A)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x4a, 0x11, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x145E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x145F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: gsl::details::extent_type<6> (0x115A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x5a, 0x11, 0x00, 0x00
	# MemberFunction (0x1460) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#   ThisType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x145E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, gsl::details::extent_type<6>) (0x145F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x5e, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x5f, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1461) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#   FunctionType: void gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(int*, gsl::details::extent_type<6>) (0x1460)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x60, 0x14, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1462) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,6>::storage_type<gsl::details::extent_type<6> > (0x1133)
	#   FunctionType: int* gsl::span<int,6>::storage_type<gsl::details::extent_type<6> >::() (0x115D)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x33, 0x11, 0x00, 0x00
	.byte	0x5d, 0x11, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x1463) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#   ThisType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x145E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, __int64) (0x1006)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x5e, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1464) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#   FunctionType: void gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(int*, __int64) (0x1463)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x63, 0x14, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1465) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   FunctionType: void gsl::details::extent_type<-1>::(__int64) (0x1064)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x64, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# MemberFuncId (0x1466) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: gsl::span<int,-1> gsl::span<int,-1>::(__int64, __int64, gsl::span<int,-1>::subspan_selector<-1>) (0x1033)
	#   Name: make_subspan
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x33, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1467) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1000)
	#   FunctionType: void gsl::span<int,-1>::(gsl::span<int,-1>::KnownNotNull, __int64) (0x1018)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x18, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x1468) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#   ThisType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x145E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<int,-1>::KnownNotNull, __int64) (0x1017)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x5e, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x17, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1469) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#   FunctionType: void gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(gsl::span<int,-1>::KnownNotNull, __int64) (0x1468)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x68, 0x14, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x146A) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::extent_type<0>
	#   LinkageName: .?AV?$extent_type@$0A@@details@gsl@@
	# }
	.byte	0x56, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x65, 0x78, 0x74
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# Pointer (0x146B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::extent_type<0> (0x146A)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x6a, 0x14, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x146C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<0> (0x146A)
	#   ThisType: gsl::details::extent_type<0>* (0x146B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6a, 0x14, 0x00, 0x00
	.byte	0x6b, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x146D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<0> (0x146A)
	#   ThisType: gsl::details::extent_type<0>* (0x146B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6a, 0x14, 0x00, 0x00
	.byte	0x6b, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x146E) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<0>::() (0x146C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<0>::(__int64) (0x146D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6c, 0x14, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6d, 0x14, 0x00, 0x00
	# Modifier (0x146F) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::extent_type<0> (0x146A)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x6a, 0x14, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1470) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::extent_type<0> (0x146F)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x6f, 0x14, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1471) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::details::extent_type<0> (0x146A)
	#   ThisType: const gsl::details::extent_type<0>* (0x1470)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x6a, 0x14, 0x00, 0x00
	.byte	0x70, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1472) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x146E
	#     Name: extent_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::details::extent_type<0>::() (0x1471)
	#     Name: size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	# }
	.byte	0x3a, 0x00, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x6e, 0x14, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x71, 0x14, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Class (0x1473) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1472)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: gsl::details::extent_type<0>
	#   LinkageName: .?AV?$extent_type@$0A@@details@gsl@@
	# }
	.byte	0x56, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0x72, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x65, 0x78, 0x74
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1474) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::extent_type<0> (0x1473)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 304
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x73, 0x14, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x30, 0x01, 0x00, 0x00
	# MemberFuncId (0x1475) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<0> (0x146A)
	#   FunctionType: void gsl::details::extent_type<0>::() (0x146C)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x6a, 0x14, 0x00, 0x00
	.byte	0x6c, 0x14, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# ArgList (0x1476) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: gsl::details::extent_type<0> (0x146A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x6a, 0x14, 0x00, 0x00
	# MemberFunction (0x1477) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#   ThisType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x145E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, gsl::details::extent_type<0>) (0x1476)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x5e, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x76, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1478) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1004)
	#   FunctionType: void gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(int*, gsl::details::extent_type<0>) (0x1477)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x77, 0x14, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1479) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::details::extent_type<0> (0x146A)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x6a, 0x14, 0x00, 0x00
	# MemberFunction (0x147A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: gsl::details::extent_type<-1>* (0x1063)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::details::extent_type<0>) (0x1479)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x79, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x147B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   FunctionType: void gsl::details::extent_type<-1>::(gsl::details::extent_type<0>) (0x147A)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x7a, 0x14, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# MemberFuncId (0x147C) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<0> (0x146A)
	#   FunctionType: __int64 gsl::details::extent_type<0>::() (0x1471)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x6a, 0x14, 0x00, 0x00
	.byte	0x71, 0x14, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x147D) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::extent_type<10>
	#   LinkageName: .?AV?$extent_type@$09@details@gsl@@
	# }
	.byte	0x56, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x31, 0x30, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x39, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# Pointer (0x147E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::extent_type<10> (0x147D)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x7d, 0x14, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x147F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<10> (0x147D)
	#   ThisType: gsl::details::extent_type<10>* (0x147E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7d, 0x14, 0x00, 0x00
	.byte	0x7e, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1480) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<10> (0x147D)
	#   ThisType: gsl::details::extent_type<10>* (0x147E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7d, 0x14, 0x00, 0x00
	.byte	0x7e, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1481) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<10>::() (0x147F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<10>::(__int64) (0x1480)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7f, 0x14, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x80, 0x14, 0x00, 0x00
	# Modifier (0x1482) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::extent_type<10> (0x147D)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x7d, 0x14, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1483) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::extent_type<10> (0x1482)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x82, 0x14, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1484) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::details::extent_type<10> (0x147D)
	#   ThisType: const gsl::details::extent_type<10>* (0x1483)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x7d, 0x14, 0x00, 0x00
	.byte	0x83, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1485) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1481
	#     Name: extent_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::details::extent_type<10>::() (0x1484)
	#     Name: size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	# }
	.byte	0x3a, 0x00, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x81, 0x14, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x84, 0x14, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Class (0x1486) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1485)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: gsl::details::extent_type<10>
	#   LinkageName: .?AV?$extent_type@$09@details@gsl@@
	# }
	.byte	0x56, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0x85, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x31, 0x30, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x39, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1487) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::extent_type<10> (0x1486)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 304
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x86, 0x14, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x30, 0x01, 0x00, 0x00
	# MemberFuncId (0x1488) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<10> (0x147D)
	#   FunctionType: void gsl::details::extent_type<10>::() (0x147F)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x7d, 0x14, 0x00, 0x00
	.byte	0x7f, 0x14, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# ArgList (0x1489) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<unsigned char,-1>::KnownNotNull (0x10E3)
	#     ArgType: gsl::details::extent_type<10> (0x147D)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xe3, 0x10, 0x00, 0x00
	.byte	0x7d, 0x14, 0x00, 0x00
	# MemberFunction (0x148A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10D1)
	#   ThisType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x1441)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<unsigned char,-1>::KnownNotNull, gsl::details::extent_type<10>) (0x1489)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x41, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x89, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x148B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10D1)
	#   FunctionType: void gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(gsl::span<unsigned char,-1>::KnownNotNull, gsl::details::extent_type<10>) (0x148A)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x8a, 0x14, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x148C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::details::extent_type<10> (0x147D)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x7d, 0x14, 0x00, 0x00
	# MemberFunction (0x148D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: gsl::details::extent_type<-1>* (0x1063)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::details::extent_type<10>) (0x148C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x8c, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x148E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   FunctionType: void gsl::details::extent_type<-1>::(gsl::details::extent_type<10>) (0x148D)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x8d, 0x14, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# MemberFuncId (0x148F) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<10> (0x147D)
	#   FunctionType: __int64 gsl::details::extent_type<10>::() (0x1484)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x7d, 0x14, 0x00, 0x00
	.byte	0x84, 0x14, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1490) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   FunctionType: void gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(const gsl::span<unsigned char,-1>*, __int64) (0x110D)
	#   Name: span_iterator
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x1491) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   FunctionType: gsl::details::span_iterator<gsl::span<const char,-1>,0> gsl::span<const char,-1>::() (0x11DA)
	#   Name: end
	# }
	.byte	0x0e, 0x00, 0x02, 0x16
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xda, 0x11, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	# MemberFuncId (0x1492) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   FunctionType: __int64 gsl::span<const char,-1>::() (0x11D6)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd6, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1493) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   FunctionType: void gsl::details::span_iterator<gsl::span<const char,-1>,0>::(const gsl::span<const char,-1>*, __int64) (0x11E8)
	#   Name: span_iterator
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xe8, 0x11, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x1494) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   FunctionType: gsl::details::span_iterator<gsl::span<const char,-1>,0> gsl::span<const char,-1>::() (0x11DA)
	#   Name: begin
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xda, 0x11, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# FuncId (0x1495) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl (0x118F)
	#   FunctionType: __int64 (__int64) (0x1172)
	#   Name: narrow
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x00, 0xf1
	# MemberFuncId (0x1496) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   FunctionType: __int64 gsl::basic_string_span<const char,-1>::() (0x11AA)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xaa, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1497) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::basic_string_span<const char,-1> (0x1193)
	#   FunctionType: const char* gsl::basic_string_span<const char,-1>::() (0x11A9)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0xa9, 0x11, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x1498) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   FunctionType: void gsl::span<const char,-1>::(const char*, __int64) (0x11BE)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xbe, 0x11, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Procedure (0x1499) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64&) (0x141A)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1a, 0x14, 0x00, 0x00
	# FuncId (0x149A) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl (0x118F)
	#   FunctionType: __int64 (__int64&) (0x1499)
	#   Name: narrow_cast
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x99, 0x14, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x5f, 0x63
	.byte	0x61, 0x73, 0x74, 0x00
	# Struct (0x149B) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::narrowing_error
	#   LinkageName: .?AUnarrowing_error@gsl@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x6e
	.byte	0x61, 0x72, 0x72, 0x6f
	.byte	0x77, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x6e
	.byte	0x61, 0x72, 0x72, 0x6f
	.byte	0x77, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x149C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::narrowing_error (0x149B)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x14, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x149D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::narrowing_error&& (0x149C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x9c, 0x14, 0x00, 0x00
	# Procedure (0x149E) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::narrowing_error&&) (0x149D)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x9d, 0x14, 0x00, 0x00
	# FieldList (0x149F) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::exception (0x1231)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x14A0) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x149F)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x1228)
	#   SizeOf: 24
	#   Name: gsl::narrowing_error
	#   LinkageName: .?AUnarrowing_error@gsl@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x9f, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x12, 0x00, 0x00
	.byte	0x18, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x6e
	.byte	0x61, 0x72, 0x72, 0x6f
	.byte	0x77, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x6e
	.byte	0x61, 0x72, 0x72, 0x6f
	.byte	0x77, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x14A1) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\projects\gsl\include\gsl\gsl_util
	# }
	.byte	0x2e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x70
	.byte	0x72, 0x6f, 0x6a, 0x65
	.byte	0x63, 0x74, 0x73, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5f
	.byte	0x75, 0x74, 0x69, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x14A2) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::narrowing_error (0x14A0)
	#   SourceFile: C:\projects\gsl\include\gsl\gsl_util (0x14A1)
	#   LineNumber: 103
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xa0, 0x14, 0x00, 0x00
	.byte	0xa1, 0x14, 0x00, 0x00
	.byte	0x67, 0x00, 0x00, 0x00
	# FuncId (0x14A3) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl::details (0x1083)
	#   FunctionType: void (gsl::narrowing_error&&) (0x149E)
	#   Name: throw_exception
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x9e, 0x14, 0x00, 0x00
	.byte	0x74, 0x68, 0x72, 0x6f
	.byte	0x77, 0x5f, 0x65, 0x78
	.byte	0x63, 0x65, 0x70, 0x74
	.byte	0x69, 0x6f, 0x6e, 0x00
	# Pointer (0x14A4) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::narrowing_error (0x149B)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x14, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x14A5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::narrowing_error (0x149B)
	#   ThisType: gsl::narrowing_error* (0x14A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x101A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9b, 0x14, 0x00, 0x00
	.byte	0xa4, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x14A6) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::narrowing_error (0x149B)
	#   FunctionType: void gsl::narrowing_error::() (0x14A5)
	#   Name: narrowing_error
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x9b, 0x14, 0x00, 0x00
	.byte	0xa5, 0x14, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x14A7) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::narrowing_error (0x149B)
	#   FunctionType: void gsl::narrowing_error::() (0x14A5)
	#   Name: ~narrowing_error
	# }
	.byte	0x1e, 0x00, 0x02, 0x16
	.byte	0x9b, 0x14, 0x00, 0x00
	.byte	0xa5, 0x14, 0x00, 0x00
	.byte	0x7e, 0x6e, 0x61, 0x72
	.byte	0x72, 0x6f, 0x77, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x65
	.byte	0x72, 0x72, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x14A8) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::narrowing_error (0x149B)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x14, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x14A9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::narrowing_error& (0x14A8)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa8, 0x14, 0x00, 0x00
	# Procedure (0x14AA) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::narrowing_error&& (0x149C)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::narrowing_error&) (0x14A9)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x9c, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa9, 0x14, 0x00, 0x00
	# FuncId (0x14AB) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: gsl::narrowing_error&& (gsl::narrowing_error&) (0x14AA)
	#   Name: forward
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xaa, 0x14, 0x00, 0x00
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x00
	# MemberFunction (0x14AC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::narrowing_error (0x149B)
	#   ThisType: gsl::narrowing_error* (0x14A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::narrowing_error&&) (0x149D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9b, 0x14, 0x00, 0x00
	.byte	0xa4, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x9d, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x14AD) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::narrowing_error (0x149B)
	#   FunctionType: void gsl::narrowing_error::(gsl::narrowing_error&&) (0x14AC)
	#   Name: narrowing_error
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x9b, 0x14, 0x00, 0x00
	.byte	0xac, 0x14, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# Modifier (0x14AE) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::narrowing_error (0x149B)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x9b, 0x14, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x14AF) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::narrowing_error (0x14AE)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xae, 0x14, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x14B0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::narrowing_error& (0x14AF)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xaf, 0x14, 0x00, 0x00
	# MemberFunction (0x14B1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::narrowing_error (0x149B)
	#   ThisType: gsl::narrowing_error* (0x14A4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::narrowing_error&) (0x14B0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9b, 0x14, 0x00, 0x00
	.byte	0xa4, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xb0, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x14B2) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::narrowing_error (0x149B)
	#   FunctionType: void gsl::narrowing_error::(const gsl::narrowing_error&) (0x14B1)
	#   Name: narrowing_error
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x9b, 0x14, 0x00, 0x00
	.byte	0xb1, 0x14, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x14B3) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x1231)
	#   FunctionType: void std::exception::() (0x1242)
	#   Name: exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x31, 0x12, 0x00, 0x00
	.byte	0x42, 0x12, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x14B4) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const char,-1> (0x1194)
	#   FunctionType: const char* gsl::span<const char,-1>::() (0x11D9)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0xd9, 0x11, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x14B5) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x11BC)
	#   FunctionType: const char* gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x1200)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xbc, 0x11, 0x00, 0x00
	.byte	0x00, 0x12, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x14B6) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x11BC)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xbc, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x14B7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x11BC)
	#   ThisType: gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x14B6)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char*, __int64) (0x119D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbc, 0x11, 0x00, 0x00
	.byte	0xb6, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x9d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x14B8) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x11BC)
	#   FunctionType: void gsl::span<const char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(const char*, __int64) (0x14B7)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0xbc, 0x11, 0x00, 0x00
	.byte	0xb7, 0x14, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x14B9) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   FunctionType: unsigned short* gsl::span<unsigned short,-1>::() (0x10B9)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb9, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x14BA) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   FunctionType: __int64 gsl::span<unsigned short,-1>::() (0x10B5)
	#   Name: size_bytes
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	# MemberFuncId (0x14BB) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   FunctionType: void gsl::span<unsigned char,-1>::(unsigned char*, __int64) (0x10D4)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xd4, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x14BC) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1099)
	#   FunctionType: unsigned short* gsl::span<unsigned short,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x10CB)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x14BD) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned short,-1> (0x1090)
	#   FunctionType: __int64 gsl::span<unsigned short,-1>::() (0x10B5)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x14BE) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: unsigned __int64 (0x23)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x14BF) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: unsigned __int64&& (0x14BE)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xbe, 0x14, 0x00, 0x00
	# Procedure (0x14C0) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (unsigned __int64&&) (0x14BF)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xbf, 0x14, 0x00, 0x00
	# FuncId (0x14C1) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl (0x118F)
	#   FunctionType: __int64 (unsigned __int64&&) (0x14C0)
	#   Name: narrow_cast
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0xc0, 0x14, 0x00, 0x00
	.byte	0x6e, 0x61, 0x72, 0x72
	.byte	0x6f, 0x77, 0x5f, 0x63
	.byte	0x61, 0x73, 0x74, 0x00
	# Pointer (0x14C2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: unsigned __int64 (0x23)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x14C3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: unsigned __int64& (0x14C2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xc2, 0x14, 0x00, 0x00
	# Procedure (0x14C4) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned __int64&& (0x14BE)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (unsigned __int64&) (0x14C3)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0xbe, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xc3, 0x14, 0x00, 0x00
	# FuncId (0x14C5) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: unsigned __int64&& (unsigned __int64&) (0x14C4)
	#   Name: forward
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xc4, 0x14, 0x00, 0x00
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x00
	# MemberFunction (0x14C6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10D1)
	#   ThisType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x1441)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (unsigned char*, __int64) (0x10D3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x41, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xd3, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x14C7) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x10D1)
	#   FunctionType: void gsl::span<unsigned char,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(unsigned char*, __int64) (0x14C6)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0xc6, 0x14, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x14C8) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1048)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x14C9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const gsl::details::span_iterator<gsl::span<int,-1>,0>& (0x14C8)
	#     ArgType: const gsl::details::span_iterator<gsl::span<int,-1>,0>& (0x14C8)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc8, 0x14, 0x00, 0x00
	.byte	0xc8, 0x14, 0x00, 0x00
	# Procedure (0x14CA) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const gsl::details::span_iterator<gsl::span<int,-1>,0>&, const gsl::details::span_iterator<gsl::span<int,-1>,0>&) (0x14C9)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xc9, 0x14, 0x00, 0x00
	# FuncId (0x14CB) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: void (const gsl::details::span_iterator<gsl::span<int,-1>,0>&, const gsl::details::span_iterator<gsl::span<int,-1>,0>&) (0x14CA)
	#   Name: _Adl_verify_range
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xca, 0x14, 0x00, 0x00
	.byte	0x5f, 0x41, 0x64, 0x6c
	.byte	0x5f, 0x76, 0x65, 0x72
	.byte	0x69, 0x66, 0x79, 0x5f
	.byte	0x72, 0x61, 0x6e, 0x67
	.byte	0x65, 0x00, 0xf2, 0xf1
	# ArgList (0x14CC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::details::span_iterator<gsl::span<int,-1>,0>& (0x14C8)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xc8, 0x14, 0x00, 0x00
	# Procedure (0x14CD) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::details::span_iterator<gsl::span<int,-1>,0>&) (0x14CC)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xcc, 0x14, 0x00, 0x00
	# FuncId (0x14CE) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: int* (const gsl::details::span_iterator<gsl::span<int,-1>,0>&) (0x14CD)
	#   Name: _Get_unwrapped
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xcd, 0x14, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x75, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x00, 0xf1
	# ArgList (0x14CF) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const gsl::details::span_iterator<gsl::span<int,-1>,0>& (0x14C8)
	#     ArgType: const __int64 (0x1003)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc8, 0x14, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	# Procedure (0x14D0) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const gsl::details::span_iterator<gsl::span<int,-1>,0>&, const __int64) (0x14CF)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xcf, 0x14, 0x00, 0x00
	# FuncId (0x14D1) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: int* (const gsl::details::span_iterator<gsl::span<int,-1>,0>&, const __int64) (0x14D0)
	#   Name: _Get_unwrapped_n
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xd0, 0x14, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x75, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x5f, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x14D2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: int* const (0x118D)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8d, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x14D3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* const& (0x14D2)
	#     ArgType: int* const& (0x14D2)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xd2, 0x14, 0x00, 0x00
	.byte	0xd2, 0x14, 0x00, 0x00
	# Procedure (0x14D4) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int* const&, int* const&) (0x14D3)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xd3, 0x14, 0x00, 0x00
	# FuncId (0x14D5) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: __int64 (int* const&, int* const&) (0x14D4)
	#   Name: _Idl_distance
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xd4, 0x14, 0x00, 0x00
	.byte	0x5f, 0x49, 0x64, 0x6c
	.byte	0x5f, 0x64, 0x69, 0x73
	.byte	0x74, 0x61, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	# ArgList (0x14D6) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::details::span_iterator<gsl::span<int,-1>,0>& (0x104C)
	#     ArgType: int* const& (0x14D2)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x4c, 0x10, 0x00, 0x00
	.byte	0xd2, 0x14, 0x00, 0x00
	# Procedure (0x14D7) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::details::span_iterator<gsl::span<int,-1>,0>&, int* const&) (0x14D6)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xd6, 0x14, 0x00, 0x00
	# FuncId (0x14D8) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: void (gsl::details::span_iterator<gsl::span<int,-1>,0>&, int* const&) (0x14D7)
	#   Name: _Seek_wrapped
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xd7, 0x14, 0x00, 0x00
	.byte	0x5f, 0x53, 0x65, 0x65
	.byte	0x6b, 0x5f, 0x77, 0x72
	.byte	0x61, 0x70, 0x70, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	# ArgList (0x14D9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	# Procedure (0x14DA) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (int*, int*, int*) (0x14D9)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xd9, 0x14, 0x00, 0x00
	# FuncId (0x14DB) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: int* (int*, int*, int*) (0x14DA)
	#   Name: _Copy_unchecked
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xda, 0x14, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x75, 0x6e
	.byte	0x63, 0x68, 0x65, 0x63
	.byte	0x6b, 0x65, 0x64, 0x00
	# ArgList (0x14DC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const gsl::details::span_iterator<gsl::span<int,-1>,0>& (0x14C8)
	#     ArgType: const gsl::details::span_iterator<gsl::span<int,-1>,0>& (0x14C8)
	#     ArgType: std::integral_constant<bool,1> (0x128B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc8, 0x14, 0x00, 0x00
	.byte	0xc8, 0x14, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	# Procedure (0x14DD) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const gsl::details::span_iterator<gsl::span<int,-1>,0>&, const gsl::details::span_iterator<gsl::span<int,-1>,0>&, std::integral_constant<bool,1>) (0x14DC)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xdc, 0x14, 0x00, 0x00
	# FuncId (0x14DE) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: void (const gsl::details::span_iterator<gsl::span<int,-1>,0>&, const gsl::details::span_iterator<gsl::span<int,-1>,0>&, std::integral_constant<bool,1>) (0x14DD)
	#   Name: _Adl_verify_range1
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xdd, 0x14, 0x00, 0x00
	.byte	0x5f, 0x41, 0x64, 0x6c
	.byte	0x5f, 0x76, 0x65, 0x72
	.byte	0x69, 0x66, 0x79, 0x5f
	.byte	0x72, 0x61, 0x6e, 0x67
	.byte	0x65, 0x31, 0x00, 0xf1
	# Procedure (0x14DF) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::details::span_iterator<gsl::span<int,-1>,0>, gsl::details::span_iterator<gsl::span<int,-1>,0>) (0x1084)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x84, 0x10, 0x00, 0x00
	# FuncId (0x14E0) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl::details (0x1083)
	#   FunctionType: void (gsl::details::span_iterator<gsl::span<int,-1>,0>, gsl::details::span_iterator<gsl::span<int,-1>,0>) (0x14DF)
	#   Name: _Verify_range
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0xdf, 0x14, 0x00, 0x00
	.byte	0x5f, 0x56, 0x65, 0x72
	.byte	0x69, 0x66, 0x79, 0x5f
	.byte	0x72, 0x61, 0x6e, 0x67
	.byte	0x65, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x14E1) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   FunctionType: int* gsl::details::span_iterator<gsl::span<int,-1>,0>::() (0x104B)
	#   Name: _Unwrapped
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x00, 0xf1
	# MemberFuncId (0x14E2) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   FunctionType: void gsl::details::span_iterator<gsl::span<int,-1>,0>::(const __int64) (0x1058)
	#   Name: _Verify_offset
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x58, 0x10, 0x00, 0x00
	.byte	0x5f, 0x56, 0x65, 0x72
	.byte	0x69, 0x66, 0x79, 0x5f
	.byte	0x6f, 0x66, 0x66, 0x73
	.byte	0x65, 0x74, 0x00, 0xf1
	# ArgList (0x14E3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: int* const& (0x14D2)
	#     ArgType: int* const& (0x14D2)
	#     ArgType: std::random_access_iterator_tag (0x105C)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd2, 0x14, 0x00, 0x00
	.byte	0xd2, 0x14, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	# Procedure (0x14E4) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (int* const&, int* const&, std::random_access_iterator_tag) (0x14E3)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xe3, 0x14, 0x00, 0x00
	# FuncId (0x14E5) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: __int64 (int* const&, int* const&, std::random_access_iterator_tag) (0x14E4)
	#   Name: _Idl_distance1
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xe4, 0x14, 0x00, 0x00
	.byte	0x5f, 0x49, 0x64, 0x6c
	.byte	0x5f, 0x64, 0x69, 0x73
	.byte	0x74, 0x61, 0x6e, 0x63
	.byte	0x65, 0x31, 0x00, 0xf1
	# MemberFuncId (0x14E6) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   FunctionType: void gsl::details::span_iterator<gsl::span<int,-1>,0>::(const int*) (0x105B)
	#   Name: _Seek_to
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x5b, 0x10, 0x00, 0x00
	.byte	0x5f, 0x53, 0x65, 0x65
	.byte	0x6b, 0x5f, 0x74, 0x6f
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x14E7) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Trivially_copyable_ptr_iterator_tag
	#   LinkageName: .?AU_Trivially_copyable_ptr_iterator_tag@std@@
	# }
	.byte	0x6e, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x54, 0x72, 0x69, 0x76
	.byte	0x69, 0x61, 0x6c, 0x6c
	.byte	0x79, 0x5f, 0x63, 0x6f
	.byte	0x70, 0x79, 0x61, 0x62
	.byte	0x6c, 0x65, 0x5f, 0x70
	.byte	0x74, 0x72, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x61, 0x67, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x54, 0x72, 0x69
	.byte	0x76, 0x69, 0x61, 0x6c
	.byte	0x6c, 0x79, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x61
	.byte	0x62, 0x6c, 0x65, 0x5f
	.byte	0x70, 0x74, 0x72, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# ArgList (0x14E8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#     ArgType: std::_Trivially_copyable_ptr_iterator_tag (0x14E7)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0xe7, 0x14, 0x00, 0x00
	# Procedure (0x14E9) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (int*, int*, int*, std::_Trivially_copyable_ptr_iterator_tag) (0x14E8)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0xe8, 0x14, 0x00, 0x00
	# Struct (0x14EA) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_General_ptr_iterator_tag
	#   LinkageName: .?AU_General_ptr_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x47, 0x65, 0x6e, 0x65
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x70, 0x74, 0x72, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x47, 0x65
	.byte	0x6e, 0x65, 0x72, 0x61
	.byte	0x6c, 0x5f, 0x70, 0x74
	.byte	0x72, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x74
	.byte	0x61, 0x67, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# FieldList (0x14EB) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_General_ptr_iterator_tag (0x14EA)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0xea, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x14EC) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x14EB)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Trivially_copyable_ptr_iterator_tag
	#   LinkageName: .?AU_Trivially_copyable_ptr_iterator_tag@std@@
	# }
	.byte	0x6e, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0xeb, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x54, 0x72, 0x69, 0x76
	.byte	0x69, 0x61, 0x6c, 0x6c
	.byte	0x79, 0x5f, 0x63, 0x6f
	.byte	0x70, 0x79, 0x61, 0x62
	.byte	0x6c, 0x65, 0x5f, 0x70
	.byte	0x74, 0x72, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x61, 0x67, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x54, 0x72, 0x69
	.byte	0x76, 0x69, 0x61, 0x6c
	.byte	0x6c, 0x79, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x61
	.byte	0x62, 0x6c, 0x65, 0x5f
	.byte	0x70, 0x74, 0x72, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x14ED) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Trivially_copyable_ptr_iterator_tag (0x14EC)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x106E)
	#   LineNumber: 421
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xec, 0x14, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	.byte	0xa5, 0x01, 0x00, 0x00
	# Struct (0x14EE) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1060)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_General_ptr_iterator_tag
	#   LinkageName: .?AU_General_ptr_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x00, 0x02
	.byte	0x60, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x47, 0x65, 0x6e, 0x65
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x70, 0x74, 0x72, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x47, 0x65
	.byte	0x6e, 0x65, 0x72, 0x61
	.byte	0x6c, 0x5f, 0x70, 0x74
	.byte	0x72, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x74
	.byte	0x61, 0x67, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x14EF) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_General_ptr_iterator_tag (0x14EE)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x106E)
	#   LineNumber: 417
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xee, 0x14, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	.byte	0xa1, 0x01, 0x00, 0x00
	# FuncId (0x14F0) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: int* (int*, int*, int*, std::_Trivially_copyable_ptr_iterator_tag) (0x14E9)
	#   Name: _Copy_unchecked1
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xe9, 0x14, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x75, 0x6e
	.byte	0x63, 0x68, 0x65, 0x63
	.byte	0x6b, 0x65, 0x64, 0x31
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x14F1) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Really_trivial_ptr_iterator_tag
	#   LinkageName: .?AU_Really_trivial_ptr_iterator_tag@std@@
	# }
	.byte	0x66, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x52, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x79, 0x5f, 0x74
	.byte	0x72, 0x69, 0x76, 0x69
	.byte	0x61, 0x6c, 0x5f, 0x70
	.byte	0x74, 0x72, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x61, 0x67, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x52, 0x65, 0x61
	.byte	0x6c, 0x6c, 0x79, 0x5f
	.byte	0x74, 0x72, 0x69, 0x76
	.byte	0x69, 0x61, 0x6c, 0x5f
	.byte	0x70, 0x74, 0x72, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Procedure (0x14F2) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: std::_Really_trivial_ptr_iterator_tag (0x14F1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int* const&, int* const&) (0x14D3)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0xf1, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xd3, 0x14, 0x00, 0x00
	# FieldList (0x14F3) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Trivially_copyable_ptr_iterator_tag (0x14E7)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0xe7, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x14F4) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x14F3)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Really_trivial_ptr_iterator_tag
	#   LinkageName: .?AU_Really_trivial_ptr_iterator_tag@std@@
	# }
	.byte	0x66, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0xf3, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x52, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x79, 0x5f, 0x74
	.byte	0x72, 0x69, 0x76, 0x69
	.byte	0x61, 0x6c, 0x5f, 0x70
	.byte	0x74, 0x72, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x61, 0x67, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x52, 0x65, 0x61
	.byte	0x6c, 0x6c, 0x79, 0x5f
	.byte	0x74, 0x72, 0x69, 0x76
	.byte	0x69, 0x61, 0x6c, 0x5f
	.byte	0x70, 0x74, 0x72, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x14F5) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Really_trivial_ptr_iterator_tag (0x14F4)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x106E)
	#   LineNumber: 426
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xf4, 0x14, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	.byte	0xaa, 0x01, 0x00, 0x00
	# FuncId (0x14F6) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: std::_Really_trivial_ptr_iterator_tag (int* const&, int* const&) (0x14F2)
	#   Name: _Ptr_copy_cat
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xf2, 0x14, 0x00, 0x00
	.byte	0x5f, 0x50, 0x74, 0x72
	.byte	0x5f, 0x63, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x63, 0x61
	.byte	0x74, 0x00, 0xf2, 0xf1
	# FuncId (0x14F7) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: int* (int*, int*, int*) (0x14DA)
	#   Name: _Copy_memmove
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xda, 0x14, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x6d, 0x65
	.byte	0x6d, 0x6d, 0x6f, 0x76
	.byte	0x65, 0x00, 0xf2, 0xf1
	# ArgList (0x14F8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: __int64 (0x13)
	#     ArgType: int* (0x674)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	# Procedure (0x14F9) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (int*, __int64, int*) (0x14F8)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xf8, 0x14, 0x00, 0x00
	# FuncId (0x14FA) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: int* (int*, __int64, int*) (0x14F9)
	#   Name: copy_n
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xf9, 0x14, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x5f, 0x6e, 0x00, 0xf1
	# Pointer (0x14FB) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: int* (0x674)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x14FC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int*& (0x14FB)
	#     ArgType: int* const (0x118D)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xfb, 0x14, 0x00, 0x00
	.byte	0x8d, 0x11, 0x00, 0x00
	# Procedure (0x14FD) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*&, int* const) (0x14FC)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xfc, 0x14, 0x00, 0x00
	# FuncId (0x14FE) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: void (int*&, int* const) (0x14FD)
	#   Name: _Seek_wrapped
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xfd, 0x14, 0x00, 0x00
	.byte	0x5f, 0x53, 0x65, 0x65
	.byte	0x6b, 0x5f, 0x77, 0x72
	.byte	0x61, 0x70, 0x70, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	# FuncId (0x14FF) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: int* (int*, __int64, int*) (0x14F9)
	#   Name: _Copy_n_unchecked3
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0xf9, 0x14, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x6e, 0x5f
	.byte	0x75, 0x6e, 0x63, 0x68
	.byte	0x65, 0x63, 0x6b, 0x65
	.byte	0x64, 0x33, 0x00, 0xf1
	# ArgList (0x1500) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* const (0x118D)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x8d, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Procedure (0x1501) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int* const, __int64) (0x1500)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x00, 0x15, 0x00, 0x00
	# FuncId (0x1502) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: int* (int* const, __int64) (0x1501)
	#   Name: _Get_unwrapped_n
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x01, 0x15, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x75, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x5f, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1503) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: __int64 (0x13)
	#     ArgType: int* (0x674)
	#     ArgType: std::_Trivially_copyable_ptr_iterator_tag (0x14E7)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0xe7, 0x14, 0x00, 0x00
	# Procedure (0x1504) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: int* (0x674)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (int*, __int64, int*, std::_Trivially_copyable_ptr_iterator_tag) (0x1503)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x03, 0x15, 0x00, 0x00
	# FuncId (0x1505) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: int* (int*, __int64, int*, std::_Trivially_copyable_ptr_iterator_tag) (0x1504)
	#   Name: _Copy_n_unchecked4
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x04, 0x15, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x6e, 0x5f
	.byte	0x75, 0x6e, 0x63, 0x68
	.byte	0x65, 0x63, 0x6b, 0x65
	.byte	0x64, 0x34, 0x00, 0xf1
	# Pointer (0x1506) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char* const (0x1214)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1507) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const& (0x1506)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x06, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Procedure (0x1508) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::span<const char,-1> (0x1194)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const&, __int64) (0x1507)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x07, 0x15, 0x00, 0x00
	# FuncId (0x1509) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl (0x118F)
	#   FunctionType: gsl::span<const char,-1> (const char* const&, __int64) (0x1508)
	#   Name: ensure_z
	# }
	.byte	0x16, 0x00, 0x01, 0x16
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x08, 0x15, 0x00, 0x00
	.byte	0x65, 0x6e, 0x73, 0x75
	.byte	0x72, 0x65, 0x5f, 0x7a
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Procedure (0x150A) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::span<const char,-1> (0x1194)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char*, __int64) (0x119D)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x9d, 0x11, 0x00, 0x00
	# FuncId (0x150B) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl (0x118F)
	#   FunctionType: gsl::span<const char,-1> (const char*, __int64) (0x150A)
	#   Name: ensure_sentinel
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x0a, 0x15, 0x00, 0x00
	.byte	0x65, 0x6e, 0x73, 0x75
	.byte	0x72, 0x65, 0x5f, 0x73
	.byte	0x65, 0x6e, 0x74, 0x69
	.byte	0x6e, 0x65, 0x6c, 0x00
	# Pointer (0x150C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11EA)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xea, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x150D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const gsl::details::span_iterator<gsl::span<const char,-1>,0>& (0x150C)
	#     ArgType: const gsl::details::span_iterator<gsl::span<const char,-1>,0>& (0x150C)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x0c, 0x15, 0x00, 0x00
	.byte	0x0c, 0x15, 0x00, 0x00
	# Procedure (0x150E) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const gsl::details::span_iterator<gsl::span<const char,-1>,0>&, const gsl::details::span_iterator<gsl::span<const char,-1>,0>&) (0x150D)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x0d, 0x15, 0x00, 0x00
	# FuncId (0x150F) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: void (const gsl::details::span_iterator<gsl::span<const char,-1>,0>&, const gsl::details::span_iterator<gsl::span<const char,-1>,0>&) (0x150E)
	#   Name: _Adl_verify_range
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x0e, 0x15, 0x00, 0x00
	.byte	0x5f, 0x41, 0x64, 0x6c
	.byte	0x5f, 0x76, 0x65, 0x72
	.byte	0x69, 0x66, 0x79, 0x5f
	.byte	0x72, 0x61, 0x6e, 0x67
	.byte	0x65, 0x00, 0xf2, 0xf1
	# ArgList (0x1510) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::details::span_iterator<gsl::span<const char,-1>,0>& (0x150C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x0c, 0x15, 0x00, 0x00
	# Procedure (0x1511) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: const char* (0x119C)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::details::span_iterator<gsl::span<const char,-1>,0>&) (0x1510)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	# FuncId (0x1512) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: const char* (const gsl::details::span_iterator<gsl::span<const char,-1>,0>&) (0x1511)
	#   Name: _Get_unwrapped
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x11, 0x15, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x75, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x00, 0xf1
	# Pointer (0x1513) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x110F)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x0f, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1514) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>& (0x1513)
	#     ArgType: const __int64 (0x1003)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x13, 0x15, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	# Procedure (0x1515) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned char* (0x620)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>&, const __int64) (0x1514)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x14, 0x15, 0x00, 0x00
	# FuncId (0x1516) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: unsigned char* (const gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>&, const __int64) (0x1515)
	#   Name: _Get_unwrapped_n
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x15, 0x15, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x75, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x5f, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1517) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const& (0x1506)
	#     ArgType: const char* const& (0x1506)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x06, 0x15, 0x00, 0x00
	.byte	0x06, 0x15, 0x00, 0x00
	# Procedure (0x1518) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const&, const char* const&) (0x1517)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x17, 0x15, 0x00, 0x00
	# FuncId (0x1519) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: __int64 (const char* const&, const char* const&) (0x1518)
	#   Name: _Idl_distance
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x18, 0x15, 0x00, 0x00
	.byte	0x5f, 0x49, 0x64, 0x6c
	.byte	0x5f, 0x64, 0x69, 0x73
	.byte	0x74, 0x61, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	# Pointer (0x151A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: unsigned char* const (0x1215)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x15, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x151B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>& (0x1113)
	#     ArgType: unsigned char* const& (0x151A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x13, 0x11, 0x00, 0x00
	.byte	0x1a, 0x15, 0x00, 0x00
	# Procedure (0x151C) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>&, unsigned char* const&) (0x151B)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x1b, 0x15, 0x00, 0x00
	# FuncId (0x151D) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: void (gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>&, unsigned char* const&) (0x151C)
	#   Name: _Seek_wrapped
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x1c, 0x15, 0x00, 0x00
	.byte	0x5f, 0x53, 0x65, 0x65
	.byte	0x6b, 0x5f, 0x77, 0x72
	.byte	0x61, 0x70, 0x70, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	# ArgList (0x151E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* (0x119C)
	#     ArgType: const char* (0x119C)
	#     ArgType: unsigned char* (0x620)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x20, 0x06, 0x00, 0x00
	# Procedure (0x151F) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned char* (0x620)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char*, const char*, unsigned char*) (0x151E)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x1e, 0x15, 0x00, 0x00
	# FuncId (0x1520) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: unsigned char* (const char*, const char*, unsigned char*) (0x151F)
	#   Name: _Copy_unchecked
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x1f, 0x15, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x75, 0x6e
	.byte	0x63, 0x68, 0x65, 0x63
	.byte	0x6b, 0x65, 0x64, 0x00
	# ArgList (0x1521) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const gsl::details::span_iterator<gsl::span<const char,-1>,0>& (0x150C)
	#     ArgType: const gsl::details::span_iterator<gsl::span<const char,-1>,0>& (0x150C)
	#     ArgType: std::integral_constant<bool,1> (0x128B)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0c, 0x15, 0x00, 0x00
	.byte	0x0c, 0x15, 0x00, 0x00
	.byte	0x8b, 0x12, 0x00, 0x00
	# Procedure (0x1522) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const gsl::details::span_iterator<gsl::span<const char,-1>,0>&, const gsl::details::span_iterator<gsl::span<const char,-1>,0>&, std::integral_constant<bool,1>) (0x1521)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x21, 0x15, 0x00, 0x00
	# FuncId (0x1523) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: void (const gsl::details::span_iterator<gsl::span<const char,-1>,0>&, const gsl::details::span_iterator<gsl::span<const char,-1>,0>&, std::integral_constant<bool,1>) (0x1522)
	#   Name: _Adl_verify_range1
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x22, 0x15, 0x00, 0x00
	.byte	0x5f, 0x41, 0x64, 0x6c
	.byte	0x5f, 0x76, 0x65, 0x72
	.byte	0x69, 0x66, 0x79, 0x5f
	.byte	0x72, 0x61, 0x6e, 0x67
	.byte	0x65, 0x31, 0x00, 0xf1
	# ArgList (0x1524) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#     ArgType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	# Procedure (0x1525) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::details::span_iterator<gsl::span<const char,-1>,0>, gsl::details::span_iterator<gsl::span<const char,-1>,0>) (0x1524)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x24, 0x15, 0x00, 0x00
	# FuncId (0x1526) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl::details (0x1083)
	#   FunctionType: void (gsl::details::span_iterator<gsl::span<const char,-1>,0>, gsl::details::span_iterator<gsl::span<const char,-1>,0>) (0x1525)
	#   Name: _Verify_range
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x83, 0x10, 0x00, 0x00
	.byte	0x25, 0x15, 0x00, 0x00
	.byte	0x5f, 0x56, 0x65, 0x72
	.byte	0x69, 0x66, 0x79, 0x5f
	.byte	0x72, 0x61, 0x6e, 0x67
	.byte	0x65, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x1527) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::span_iterator<gsl::span<const char,-1>,0> (0x11AC)
	#   FunctionType: const char* gsl::details::span_iterator<gsl::span<const char,-1>,0>::() (0x11ED)
	#   Name: _Unwrapped
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xac, 0x11, 0x00, 0x00
	.byte	0xed, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x00, 0xf1
	# MemberFuncId (0x1528) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   FunctionType: void gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(const __int64) (0x111D)
	#   Name: _Verify_offset
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x1d, 0x11, 0x00, 0x00
	.byte	0x5f, 0x56, 0x65, 0x72
	.byte	0x69, 0x66, 0x79, 0x5f
	.byte	0x6f, 0x66, 0x66, 0x73
	.byte	0x65, 0x74, 0x00, 0xf1
	# MemberFuncId (0x1529) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   FunctionType: unsigned char* gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::() (0x1112)
	#   Name: _Unwrapped
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x12, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x00, 0xf1
	# MemberFuncId (0x152A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<unsigned char,-1> (0x10D0)
	#   FunctionType: __int64 gsl::span<unsigned char,-1>::() (0x10ED)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0xed, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x152B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const& (0x1506)
	#     ArgType: const char* const& (0x1506)
	#     ArgType: std::random_access_iterator_tag (0x105C)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x06, 0x15, 0x00, 0x00
	.byte	0x06, 0x15, 0x00, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	# Procedure (0x152C) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: __int64 (0x13)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const&, const char* const&, std::random_access_iterator_tag) (0x152B)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x2b, 0x15, 0x00, 0x00
	# FuncId (0x152D) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: __int64 (const char* const&, const char* const&, std::random_access_iterator_tag) (0x152C)
	#   Name: _Idl_distance1
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x2c, 0x15, 0x00, 0x00
	.byte	0x5f, 0x49, 0x64, 0x6c
	.byte	0x5f, 0x64, 0x69, 0x73
	.byte	0x74, 0x61, 0x6e, 0x63
	.byte	0x65, 0x31, 0x00, 0xf1
	# MemberFuncId (0x152E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::span_iterator<gsl::span<unsigned char,-1>,0> (0x10F2)
	#   FunctionType: void gsl::details::span_iterator<gsl::span<unsigned char,-1>,0>::(const unsigned char*) (0x1120)
	#   Name: _Seek_to
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x20, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x65, 0x65
	.byte	0x6b, 0x5f, 0x74, 0x6f
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x152F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const char* (0x119C)
	#     ArgType: const char* (0x119C)
	#     ArgType: unsigned char* (0x620)
	#     ArgType: std::_Trivially_copyable_ptr_iterator_tag (0x14E7)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0xe7, 0x14, 0x00, 0x00
	# Procedure (0x1530) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned char* (0x620)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const char*, const char*, unsigned char*, std::_Trivially_copyable_ptr_iterator_tag) (0x152F)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x2f, 0x15, 0x00, 0x00
	# FuncId (0x1531) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: unsigned char* (const char*, const char*, unsigned char*, std::_Trivially_copyable_ptr_iterator_tag) (0x1530)
	#   Name: _Copy_unchecked1
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x30, 0x15, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x75, 0x6e
	.byte	0x63, 0x68, 0x65, 0x63
	.byte	0x6b, 0x65, 0x64, 0x31
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1532) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const& (0x1506)
	#     ArgType: unsigned char* const& (0x151A)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x06, 0x15, 0x00, 0x00
	.byte	0x1a, 0x15, 0x00, 0x00
	# Procedure (0x1533) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: std::_Really_trivial_ptr_iterator_tag (0x14F1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const&, unsigned char* const&) (0x1532)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0xf1, 0x14, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x32, 0x15, 0x00, 0x00
	# FuncId (0x1534) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: std::_Really_trivial_ptr_iterator_tag (const char* const&, unsigned char* const&) (0x1533)
	#   Name: _Ptr_copy_cat
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x33, 0x15, 0x00, 0x00
	.byte	0x5f, 0x50, 0x74, 0x72
	.byte	0x5f, 0x63, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x63, 0x61
	.byte	0x74, 0x00, 0xf2, 0xf1
	# FuncId (0x1535) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: unsigned char* (const char*, const char*, unsigned char*) (0x151F)
	#   Name: _Copy_memmove
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x1f, 0x15, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x6d, 0x65
	.byte	0x6d, 0x6d, 0x6f, 0x76
	.byte	0x65, 0x00, 0xf2, 0xf1
	# ArgList (0x1536) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* (0x119C)
	#     ArgType: __int64 (0x13)
	#     ArgType: unsigned char* (0x620)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x20, 0x06, 0x00, 0x00
	# Procedure (0x1537) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned char* (0x620)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char*, __int64, unsigned char*) (0x1536)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x36, 0x15, 0x00, 0x00
	# FuncId (0x1538) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: unsigned char* (const char*, __int64, unsigned char*) (0x1537)
	#   Name: copy_n
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x37, 0x15, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x5f, 0x6e, 0x00, 0xf1
	# Pointer (0x1539) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: unsigned char* (0x620)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x153A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: unsigned char*& (0x1539)
	#     ArgType: unsigned char* const (0x1215)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x39, 0x15, 0x00, 0x00
	.byte	0x15, 0x12, 0x00, 0x00
	# Procedure (0x153B) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (unsigned char*&, unsigned char* const) (0x153A)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x3a, 0x15, 0x00, 0x00
	# FuncId (0x153C) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: void (unsigned char*&, unsigned char* const) (0x153B)
	#   Name: _Seek_wrapped
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x3b, 0x15, 0x00, 0x00
	.byte	0x5f, 0x53, 0x65, 0x65
	.byte	0x6b, 0x5f, 0x77, 0x72
	.byte	0x61, 0x70, 0x70, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	# FuncId (0x153D) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: unsigned char* (const char*, __int64, unsigned char*) (0x1537)
	#   Name: _Copy_n_unchecked3
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x37, 0x15, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x6e, 0x5f
	.byte	0x75, 0x6e, 0x63, 0x68
	.byte	0x65, 0x63, 0x6b, 0x65
	.byte	0x64, 0x33, 0x00, 0xf1
	# ArgList (0x153E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: unsigned char* const (0x1215)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x15, 0x12, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Procedure (0x153F) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned char* (0x620)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (unsigned char* const, __int64) (0x153E)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x3e, 0x15, 0x00, 0x00
	# FuncId (0x1540) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: unsigned char* (unsigned char* const, __int64) (0x153F)
	#   Name: _Get_unwrapped_n
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x3f, 0x15, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x75, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x5f, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1541) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x1214)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Procedure (0x1542) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: const char* (0x119C)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, __int64) (0x1541)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x41, 0x15, 0x00, 0x00
	# FuncId (0x1543) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: const char* (const char* const, __int64) (0x1542)
	#   Name: _Get_unwrapped_n
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x42, 0x15, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x75, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x70
	.byte	0x65, 0x64, 0x5f, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1544) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const char* (0x119C)
	#     ArgType: __int64 (0x13)
	#     ArgType: unsigned char* (0x620)
	#     ArgType: std::_Trivially_copyable_ptr_iterator_tag (0x14E7)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0xe7, 0x14, 0x00, 0x00
	# Procedure (0x1545) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: unsigned char* (0x620)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const char*, __int64, unsigned char*, std::_Trivially_copyable_ptr_iterator_tag) (0x1544)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x20, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x44, 0x15, 0x00, 0x00
	# FuncId (0x1546) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x1188)
	#   FunctionType: unsigned char* (const char*, __int64, unsigned char*, std::_Trivially_copyable_ptr_iterator_tag) (0x1545)
	#   Name: _Copy_n_unchecked4
	# }
	.byte	0x1e, 0x00, 0x01, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x45, 0x15, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x6e, 0x5f
	.byte	0x75, 0x6e, 0x63, 0x68
	.byte	0x65, 0x63, 0x6b, 0x65
	.byte	0x64, 0x34, 0x00, 0xf1
	# Modifier (0x1547) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: char (0x70)
	#   Modifiers [ (0x3)
	#     Const (0x1)
	#     Volatile (0x2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x03, 0x00, 0xf2, 0xf1
	# Pointer (0x1548) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const volatile char (0x1547)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x47, 0x15, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Modifier (0x1549) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: char (0x70)
	#   Modifiers [ (0x2)
	#     Volatile (0x2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x02, 0x00, 0xf2, 0xf1
	# Pointer (0x154A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: volatile char (0x1549)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x49, 0x15, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00

	.globl	"??_7fail_fast@gsl@@6B@"
.set "??_7fail_fast@gsl@@6B@", .L__unnamed_1+8
	.globl	"??_7logic_error@std@@6B@"
.set "??_7logic_error@std@@6B@", .L__unnamed_2+8
	.globl	"??_7exception@std@@6B@"
.set "??_7exception@std@@6B@", .L__unnamed_3+8
	.globl	"??_7narrowing_error@gsl@@6B@"
.set "??_7narrowing_error@gsl@@6B@", .L__unnamed_4+8
